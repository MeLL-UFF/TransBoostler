Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.394
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.050893045816096175;  // std dev = 1.397, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11607328370232102;  // std dev = 2.185, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4644573458371937;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016277792324026548;  // std dev = 1.946, 47.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | | | else return 0.1481916572302314;  // std dev = 1.676, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4722192892233777;  // std dev = 1.216, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.12185120700355961;  // std dev = 0.050, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4487831773646796;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13529201945608693;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10915957000803432;  // std dev = 1.732, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2752572884410089;  // std dev = 0.791, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3453793512467385;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.615208754089766;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11069087324534435;  // std dev = 0.052, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.05835606412464412;  // std dev = 0.336, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024710213095339793;  // std dev = 1.341, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2799507782847078;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.433578887211985;  // std dev = 1.032, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15744002037529578;  // std dev = 0.148, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.11655366542886225;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25667348420960845;  // std dev = 1.397, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | else return -0.09902418008841204;  // std dev = 0.644, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02502493008505136;  // std dev = 1.032, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2188568756167175;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.048080889873888005;  // std dev = 0.831, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | | else return -0.11964435058615468;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021813634376841577;  // std dev = 0.840, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.11771453871923145;  // std dev = 1.215, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17641705297539345;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.272219426620358;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09088039361907098;  // std dev = 0.056, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.37475342336437706;  // std dev = 0.217, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08683748452071031;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051160006813766326;  // std dev = 1.266, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.06969254486641913;  // std dev = 1.412, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.14921842759028975;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08429607177557231;  // std dev = 0.046, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08696317965982596;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0801411055128477;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13400994136283104;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01068479130736174;  // std dev = 1.534, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.289', 'seconds']
Parameter learned model CLL:-0.115711 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [3.8e-08, 37, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.816, 1, 2], 'false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.16e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.397, 31, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 10, 0], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.185, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.953, 1, 10], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.894, 1, 4], 'false,false,false,true': [1.946, 41, 6], 'false,false,false,false': [1.676, 12, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.216, 1, 21], 'true,false': [0.05, 35, 0], 'false,true,true': [0.013, 0, 3], 'false,true,false': [0.003, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.732, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.791, 1, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.041, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.043, 0, 5], 'false,false,true,false': [0.052, 40, 0], 'false,false,false': [0.336, 22, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.341, 32, 14], 'false,true': [0.004, 0, 4], 'false,false,true': [1.032, 1, 13], 'false,false,false,true': [0.148, 16, 0], 'false,false,false,false': [0.073, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.397, 2, 24], 'true,false': [0.644, 42, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.032, 13, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.028, 0, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.831, 33, 3], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.84, 25, 6], 'false,false,false,false': [1.215, 9, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.015, 0, 14], 'false,true,true,true': [0.331, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 43, 0], 'false,false,true,true': [0.217, 0, 3], 'false,false,true,false': [0.0, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.266, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.412, 2, 14], 'true,true,false': [0.003, 0, 4], 'true,false,true': [0.046, 27, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.04, 4, 0], 'false,true': [0.023, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.534, 27, 9]}]
{'': [0.1892481650466172, 0.2412109374999995], 'false': [0.06632653061224467, -3.0839528461809902e-18], 'true': [-2.9605947323337506e-16, 5.86532918669894e-17], 'false,true': [-1.6148698540002277e-16, 0.22222222222222224], 'true,false': [3.900783600034334e-17, -6.938893903907228e-18], 'true,false,false': [-1.4802973661668754e-17, 0.0]}
{'': [1.7763568394002506e-16, 0.11641666324642211], 'false': [0.05743204641804609, 0.14817081297630147], 'false,false': [2.7755575615628915e-18, 0.16863138454074694], 'false,false,false': [0.0, 0.14925567259898087], 'false,true': [nan, 0.05743204641804609], 'false,true,false': [0.05743204641804609, nan], 'false,false,true': [nan, 2.7755575615628915e-18]}
{'': [0.062222222222222, 0.11960019847771772], 'false': [nan, 0.11960019847771769], 'false,false': [0.13888888888888884, 0.10690211332365601], 'false,false,true': [0.0, 0.16], 'false,false,false': [0.0805838774426323, 0.1560625761909169], 'true': [0.08264462809917336, 0.0], 'true,true': [0.08264462809917336, nan], 'true,false': [nan, 0.0]}
{'': [0.10961634425778868, 0.12092788276031353], 'false': [0.07169517487937163, 0.14282601045009186], 'false,false': [nan, 0.14282601045009186], 'false,false,false': [nan, 0.14282601045009186], 'true': [0.06718849580269426, 7.06354895940477e-05], 'false,true': [0.00016233390961191882, 8.956061189189077e-06]}
{'': [0.04173400952690434, 0.07989071634931642], 'false': [0.0003367852065139898, 0.07791614123399024], 'false,false': [0.0521453654910842, 0.11315410078501052], 'false,false,true': [0.0003772883297922025, 6.856747343986919e-05], 'true': [0.04173400952690434, nan], 'false,true': [0.0003367852065139898, nan]}
{'': [0.039117858228585795, 0.09752965434516986], 'false': [4.2061134577081605e-06, 0.10286968659454306], 'false,false': [0.07610635927558262, 0.0014438408228461626], 'true': [nan, 0.039117858228585795], 'true,false': [nan, 0.039117858228585795], 'false,false,false': [0.001374352901278842, 0.0005262867153195266]}
{'': [0.06401497994982022, 0.05610730970059214], 'true': [0.07510550356356614, 0.009634566906408926], 'false': [nan, 0.056107309700592134], 'false,false': [nan, 0.05610730970059214], 'false,false,false': [nan, 0.05610730970059214]}
{'': [5.264418747503718e-05, 0.03751033123325307], 'false': [nan, 0.03751033123325316], 'false,false': [0.018050205524733347, 0.05080841697466823], 'false,false,false': [0.02275189870708498, 0.0923272521029331], 'false,false,true': [0.019160440940836812, 0.0], 'true': [5.264418747503718e-05, nan]}
{'': [0.00022113451357750575, 0.040077140607980524], 'false': [0.019640975013205705, 0.07160486119734459], 'false,false': [0.0414399645394007, 0.09424280107943568], 'false,false,false': [nan, 0.09424280107943568], 'false,false,true': [0.015676128715213938, 0.0], 'false,true': [0.01365590260960868, 7.346047018156358e-05], 'false,true,true': [0.01365590260960868, nan]}
{'': [0.04333062747789742, 0.06073819268058415], 'false': [0.0001363061948456562, 0.06537807905719412], 'false,false': [nan, 0.06537807905719412], 'true': [0.10063804297366655, 0.00010856851951641576], 'true,true': [0.12453226215968384, 1.6734111887677094e-06], 'true,false': [7.75750242995495e-05, 0.0002127446336664049], 'true,false,false': [0.0, 0.0004022189194993718]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.726
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(F, C), tweets(F, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7927941835770488;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12803077669341245;  // std dev = 2.121, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6339167526012681;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11400490332865242;  // std dev = 0.038, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.01129568970872469;  // std dev = 1.066, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.1838063018713409;  // std dev = 1.723, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5139968748645957;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11140255075124646;  // std dev = 0.020, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10144231381970867;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.613329458647339;  // std dev = 0.215, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.15343075667378422;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.04025182445283672;  // std dev = 0.707, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16149919557387366;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3041948225530562;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4414174403266702;  // std dev = 0.238, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1007112538796219;  // std dev = 0.094, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0915720288619093;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.062328139928689935;  // std dev = 1.497, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.2551722425694894;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2502060048289804;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06791783108825541;  // std dev = 0.148, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2447861799818932;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3172871009295991;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5009958390756678;  // std dev = 0.143, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.11981648300518055;  // std dev = 0.102, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.12260077864557604;  // std dev = 0.176, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20992259308391142;  // std dev = 0.000330, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20144378627409373;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.07785866324769239;  // std dev = 0.007, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.025272981289800916;  // std dev = 0.563, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else if ( follows(E, H), follows(H, A) )
%   | | | then return -0.08000840955989712;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1426556171275682;  // std dev = 0.289, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3163768126427331;  // std dev = 0.179, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12309734889547541;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.19210101064798232;  // std dev = 0.636, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.17707247088477052;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17743488600374596;  // std dev = 0.000725, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17098105089323395;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.04220395654077343;  // std dev = 0.102, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | | else return -0.07221547824696867;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16689251890754705;  // std dev = 1.076, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10247975178395201;  // std dev = 0.078, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07024092156113766;  // std dev = 0.000637, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.01365472786890487;  // std dev = 0.701, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15283559089050472;  // std dev = 0.000244, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.01655416636001874;  // std dev = 0.703, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14809327044744053;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.28804880860514903;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06943089419121173;  // std dev = 0.004, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2780534468814373;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11261976992787126;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0021053984203007244;  // std dev = 0.719, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return -0.024508220185125926;  // std dev = 0.562, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13349416457314894;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2327356339660468;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0022759892029084574;  // std dev = 0.596, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.06579450391787793;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.037737851095483776;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.03226249834339679;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.009494862026363921;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.05703792015926725;  // std dev = 0.639, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.04811619740344419;  // std dev = 0.617, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.646', 'seconds']
Refined model CLL: -0.100472


******************************************
Best model found
******************************************
Results 

CLL : -0.097336 

AUC ROC : 0.993889 

AUC PR : 0.400326 

Precision : 0.356083 

Recall : 0.952381 

F1 : 0.518359 

Total Learning Time : 3.726 

Total Inference Time : 5.315364122390747 

Total revision time: 13.893428678512574
Best scored revision CLL: -0.100472


Results 

CLL : -0.097336 

AUC ROC : 0.993889 

AUC PR : 0.400326 

Precision : 0.356083 

Recall : 0.952381 

F1 : 0.518359 

Total Learning Time : 15.477069492340089 

Total Inference Time : 5.315364122390747 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.694
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7270062854015481;  // std dev = 0.083, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.029690912798472215;  // std dev = 2.264, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.054626778873971917;  // std dev = 0.814, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17736341277367115;  // std dev = 2.799, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.55952512420728;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4040520610480189;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6154979590240922;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.55952512420728;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009647249139318822;  // std dev = 3.060, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.10185160020097102;  // std dev = 2.191, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4671990541704467;  // std dev = 1.881, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else return -0.12861893604478813;  // std dev = 0.156, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46879279994369427;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1327605053227516;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08414719452365546;  // std dev = 2.127, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3270143714041843;  // std dev = 0.203, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3109099424939153;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.40906009939065435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6038025817981639;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10197362769958113;  // std dev = 0.682, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | else return 0.03436536563401104;  // std dev = 0.327, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04991947667014635;  // std dev = 1.965, 88.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2592325861203297;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47016266658727074;  // std dev = 1.310, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14460450167627015;  // std dev = 0.197, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.13412265145222002;  // std dev = 0.158, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3202493070229207;  // std dev = 0.811, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.10114327291334324;  // std dev = 0.879, 109.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013164383622186124;  // std dev = 1.359, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1879307346060605;  // std dev = 0.040, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20482695999855316;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04720271870249189;  // std dev = 1.329, 59.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=7 */
%   | | | else return -0.06532553989223992;  // std dev = 0.596, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.015424197742385888;  // std dev = 1.265, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.034931993509942486;  // std dev = 1.572, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10167773662353614;  // std dev = 0.227, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3052554069163007;  // std dev = 0.541, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09952909789195491;  // std dev = 0.133, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32592158943328964;  // std dev = 0.298, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10057967320598193;  // std dev = 0.035, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07568805666447052;  // std dev = 1.459, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19227558670575678;  // std dev = 0.504, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.17600090969943524;  // std dev = 0.271, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08816109096356248;  // std dev = 0.062, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09313257843896819;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.055834778082096644;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17019465386152485;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03867109574795246;  // std dev = 1.706, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.224', 'seconds']
Parameter learned model CLL:-0.121119 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.988, 1, 40], 'true,false,true': [6.66e-08, 66, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 4], 'false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.083, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.264, 63, 8], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.814, 11, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.799, 30, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.079, 0, 2], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.06, 80, 16], 'false,false,false,false': [2.191, 25, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.881, 3, 46], 'true,false': [0.156, 82, 0], 'false,true,true': [0.108, 0, 6], 'false,true,false': [0.001, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.127, 23, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.203, 0, 28], 'true,false': [0.0, 0, 0], 'false,true,true': [0.011, 0, 7], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.095, 0, 12], 'false,false,true,false': [0.682, 60, 1], 'false,false,false': [0.327, 43, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.965, 55, 33], 'false,true': [0.06, 0, 7], 'false,false,true': [1.31, 1, 22], 'false,false,false,true': [0.197, 38, 0], 'false,false,false,false': [0.158, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.811, 0, 49], 'true,false': [0.879, 107, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.359, 26, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.04, 0, 31], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.329, 52, 7], 'false,false,true,false': [0.596, 11, 1], 'false,false,false,true': [1.265, 30, 12], 'false,false,false,false': [1.572, 23, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.227, 2, 28], 'false,true,true,true': [0.541, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.133, 90, 0], 'false,false,true,true': [0.298, 0, 8], 'false,false,true,false': [0.035, 23, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.459, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.504, 0, 33], 'true,true,false': [0.271, 0, 7], 'true,false,true': [0.062, 69, 0], 'true,false,false,true': [0.009, 11, 0], 'true,false,false,false': [0.217, 5, 1], 'false,true': [0.047, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.706, 31, 17]}]
{'': [0.22312550389680313, 0.24717066545948382], 'false': [0.0, 1.708035422500241e-17], 'true': [0.023795359904820054, 0.01219326322206988], 'true,false': [6.728624391667616e-17, 0.06222222222222227], 'true,false,false': [-1.2810265668751807e-17, 0.25], 'false,true': [-2.0898315757650005e-16, 0.0]}
{'': [0.00021550276668724777, 0.12485501832998415], 'false': [0.0722041109303899, 0.16422199086053135], 'false,false': [0.05516686170636361, 0.17623275913853384], 'false,false,false': [0.16, 0.1667058742052279], 'false,true': [nan, 0.0722041109303899], 'false,true,false': [0.0722041109303899, nan], 'false,false,true': [nan, 0.05516686170636361]}
{'': [0.031035225688673933, 0.11930649174781281], 'false': [nan, 0.11930649174781288], 'false,false': [0.0013706692288756872, 0.10977338019670775], 'false,false,false': [0.0975080934059268, 0.1371850984887604], 'true': [-1.8503717077085943e-16, 0.16], 'true,false': [nan, 0.16], 'false,false,true': [0.00313295823743015, 0.0], 'true,true': [-1.8503717077085943e-16, nan]}
{'': [0.11030542832515913, 0.11566223537217787], 'false': [0.07947619675871087, 0.1370920365061772], 'false,false': [nan, 0.1370920365061772], 'false,false,false': [nan, 0.1370920365061772], 'true': [0.07219046833764625, 0.000295526529311283], 'false,true': [0.011610296372943751, 1.6689152296820283e-06]}
{'': [0.0014716806194292925, 0.08869225847922745], 'false': [0.0010685661290393417, 0.08885984565152413], 'false,false': [0.07491244335491867, 0.10680760015773812], 'false,false,true': [0.0007490874210763406, 0.007619206754955925], 'true': [0.0014716806194292925, nan], 'false,true': [1.703677083099629e-05, 0.0]}
{'': [0.043889900874772535, 0.08811452743832479], 'false': [0.0005180858447131184, 0.09065394625552654], 'false,false': [0.07466202244608955, 0.0009796891598758298], 'true': [nan, 0.04388990087477246], 'true,false': [nan, 0.043889900874772535], 'false,false,false': [0.0010220241580818328, 0.000861901848330697]}
{'': [0.047050616153572346, 0.04992435330899271], 'false': [nan, 0.04992435330899275], 'false,false': [nan, 0.04992435330899271], 'false,false,false': [nan, 0.04992435330899271], 'true': [0.013438790257397953, 0.00709081311504217]}
{'': [5.8407120392636735e-05, 0.043860546342778375], 'false': [nan, 0.0438605463427783], 'false,false': [0.029930396764061246, 0.05436505763944449], 'false,false,false': [0.03811081026189744, 0.07483917128090747], 'false,false,true': [0.029944194215875852, 0.029589633064123644], 'true': [5.136989503438893e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.05160985947936467, 0.038317929293384456], 'false': [0.02479193823115714, 0.06105511281837921], 'false,false': [0.03772309727636607, 0.08872198149921334], 'false,false,false': [nan, 0.08872198149921334], 'false,false,true': [0.01106564452728255, 5.246068130359501e-05], 'false,true': [0.017190867658077504, 0.0001953743176731446], 'false,true,true': [0.017190867658077504, nan]}
{'': [0.019567896277159033, 0.05723944534526585], 'false': [0.0005507348542804456, 0.06063285483447453], 'false,false': [nan, 0.06063285483447456], 'true': [0.008228062338325948, 0.000664782269256477], 'true,true': [0.007700843227078888, 0.010495010145656831], 'true,false': [5.54245715428762e-05, 0.0030842086610394764], 'true,false,false': [7.324430936780419e-06, 0.007825022787243152]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.09
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.781225858176435;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(H, C), tweets(H, I) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(J, K), follows(A, K) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.7347337483847238;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7347337483847239;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7594028775183609;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10857839564774216;  // std dev = 0.852, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | | else return 0.05709486196226052;  // std dev = 2.179, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.033085243896622145;  // std dev = 1.878, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.20648745283349434;  // std dev = 2.184, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5683879604508764;  // std dev = 0.005, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1113002299203822;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.27172317783148303;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7332957523070761;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12210755535144968;  // std dev = 0.157, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10581868976830085;  // std dev = 2.001, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.22174498876643747;  // std dev = 1.837, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.43627213319906377;  // std dev = 0.035, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.6038122878553327;  // std dev = 0.075, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.11895867929147469;  // std dev = 0.021, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.44521090617610914;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11577744831175209;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.6202793318719412;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17352324579897238;  // std dev = 0.083, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.019191629853274418;  // std dev = 0.322, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.32699901967173234;  // std dev = 0.001, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3119065112709257;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3582678239460442;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.35009039044828316;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.49361356642921395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3997028387163542;  // std dev = 1.013, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09514464090278939;  // std dev = 0.660, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.051039355417703096;  // std dev = 0.680, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.06749283621819359;  // std dev = 1.814, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26025537756612255;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.33469313440925136;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09076652654455525;  // std dev = 0.048, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.03404191660344538;  // std dev = 0.168, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.284531360141731;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.09587023660062832;  // std dev = 0.832, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4793244183999923;  // std dev = 0.244, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13416514443181712;  // std dev = 0.141, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.11718608389068545;  // std dev = 0.197, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.21199631785254228;  // std dev = 0.011, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.239678679170885;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(F, H) )
%   | | | then return 0.3012020916774225;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27202015000257157;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0844842865171426;  // std dev = 0.010, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.25163113916707497;  // std dev = 1.053, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12187842096447467;  // std dev = 0.111, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.07816646051789541;  // std dev = 0.590, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.142692572960101;  // std dev = 0.835, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18004990352902311;  // std dev = 0.013, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.2605001332233513;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.4718131646626882;  // std dev = 0.854, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2348752215309029;  // std dev = 0.153, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07845873175406877;  // std dev = 0.010, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2804667402808831;  // std dev = 0.215, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11159513527998212;  // std dev = 0.116, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.006386264294266031;  // std dev = 0.578, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.11001466666542124;  // std dev = 0.863, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.15302301620199335;  // std dev = 0.003, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.029829866054478994;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.20864105411051112;  // std dev = 0.179, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.16323071834509578;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.0716565576359495;  // std dev = 0.006, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.273874782077281;  // std dev = 0.164, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10696870729223053;  // std dev = 0.182, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.021293988885354158;  // std dev = 0.673, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.04965916462697819;  // std dev = 0.820, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.14182425442588073;  // std dev = 0.025, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12607311482814254;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.02108000956646705;  // std dev = 0.632, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.06530458008992769;  // std dev = 0.026, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17750008265895328;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.22364623929532357;  // std dev = 0.144, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09035115360544449;  // std dev = 0.128, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.01114248842912877;  // std dev = 0.756, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.08093261659611495;  // std dev = 0.721, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.161', 'seconds']
Refined model CLL: -0.104287


******************************************
Best model found
******************************************
Results 

CLL : -0.101226 

AUC ROC : 0.993582 

AUC PR : 0.38167 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 6.09 

Total Inference Time : 10.365684747695923 

Total revision time: 24.06351383590698
Best scored revision CLL: -0.104287


Results 

CLL : -0.101226 

AUC ROC : 0.993582 

AUC PR : 0.38167 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 25.647154649734496 

Total Inference Time : 10.365684747695923 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.267
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.686966928393551;  // std dev = 1.395, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03121565793629102;  // std dev = 2.770, 108.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09894273773686313;  // std dev = 0.835, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13736943091971568;  // std dev = 3.438, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5349904208411213;  // std dev = 1.318, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.43278210703658215;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6412879400472;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.567217892963418;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02557139719999802;  // std dev = 3.422, 157.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=19 */
%   | | | else return 0.05110362535461126;  // std dev = 2.831, 67.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5066313526230536;  // std dev = 1.311, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return -0.12188321450288703;  // std dev = 0.131, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46783110754336865;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12566311537708946;  // std dev = 0.003, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19065531739803346;  // std dev = 2.406, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.24669249325673331;  // std dev = 1.943, 49.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30939634651469683;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.4436483067403485;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6036743022071709;  // std dev = 0.085, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10593268794531248;  // std dev = 0.697, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   | | else return 0.017030509818469087;  // std dev = 0.309, 90.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04362943688228498;  // std dev = 2.528, 141.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25549341387670554;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4810483858955645;  // std dev = 1.411, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1337406817615122;  // std dev = 0.220, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.13443513000037716;  // std dev = 0.201, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3078240138294898;  // std dev = 1.388, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return -0.10264803304053204;  // std dev = 0.891, 139.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06107862047094897;  // std dev = 1.656, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20081186176237828;  // std dev = 0.040, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.22559839139279458;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.044075732121104404;  // std dev = 1.476, 107.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=11 */
%   | | | else return -0.07273347949351515;  // std dev = 0.616, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.006077334720088903;  // std dev = 1.368, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.05581661125403164;  // std dev = 1.904, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16328456438251407;  // std dev = 0.130, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.24292218956153536;  // std dev = 0.993, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0907993117467808;  // std dev = 0.106, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31970190564937706;  // std dev = 0.310, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09292843527453915;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04884956831063242;  // std dev = 1.878, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19769251374324404;  // std dev = 0.618, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.15787921816106903;  // std dev = 0.299, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08432301968226469;  // std dev = 0.052, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08567312687045459;  // std dev = 0.036, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.07325017120217134;  // std dev = 0.245, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12157732164546739;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021509320487552084;  // std dev = 2.109, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.600', 'seconds']
Parameter learned model CLL:-0.117187 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 63], 'true,false,true': [8.43e-08, 92, 0], 'true,false,false,true': [2.79e-08, 30, 0], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [5.96e-08, 0, 22], 'false,true,false': [0.0, 0, 7], 'false,false': [7.9e-09, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.395, 2, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.77, 96, 12], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.835, 31, 1], 'false,false,false,true': [0.0, 0, 5], 'false,false,false,false': [3.438, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.318, 2, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.105, 0, 2], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [3.422, 138, 19], 'false,false,false,false': [2.831, 52, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.311, 1, 70], 'true,false': [0.131, 144, 0], 'false,true,true': [0.095, 0, 8], 'false,true,false': [0.003, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.406, 21, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.943, 4, 45], 'true,false': [0.0, 0, 0], 'false,true,true': [0.02, 0, 13], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.085, 0, 15], 'false,false,true,false': [0.697, 98, 1], 'false,false,false': [0.309, 72, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.528, 91, 50], 'false,true': [0.087, 0, 13], 'false,false,true': [1.411, 1, 30], 'false,false,false,true': [0.22, 44, 0], 'false,false,false,false': [0.201, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.388, 1, 71], 'true,false': [0.891, 137, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.656, 30, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.04, 0, 50], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.476, 96, 11], 'false,false,true,false': [0.616, 16, 1], 'false,false,false,true': [1.368, 49, 15], 'false,false,false,false': [1.904, 29, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.13, 1, 45], 'false,true,true,true': [0.993, 1, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 141, 0], 'false,false,true,true': [0.31, 0, 10], 'false,false,true,false': [0.036, 29, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.878, 27, 14]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.618, 0, 50], 'true,true,false': [0.299, 0, 13], 'true,false,true': [0.052, 95, 0], 'true,false,false,true': [0.036, 24, 0], 'true,false,false,false': [0.245, 12, 1], 'false,true': [0.026, 0, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.109, 56, 24]}]
{'': [0.22395789591556803, 0.22984301173601723], 'false': [1.1025663141105003e-15, 5.551115123125783e-17], 'true': [0.015380859374999223, 0.007936], 'true,false': [7.723290606088045e-17, 0.029384756657483992], 'true,false,false': [2.590520390792032e-17, 0.22222222222222224], 'false,true': [1.6148698540002277e-16, -2.5376526277146434e-16]}
{'': [0.036695734040214194, 0.10982777488708728], 'false': [0.07103280626741167, 0.13863734505014988], 'false,false': [0.021772873112484215, 0.1635051197225493], 'false,false,false': [0.0, 0.15346105205510038], 'false,true': [nan, 0.07103280626741167], 'false,true,false': [0.07103280626741167, nan], 'false,false,true': [nan, 0.021772873112484215]}
{'': [0.0554305798398553, 0.10278027107475186], 'false': [nan, 0.10278027107475185], 'false,false': [0.0014555680484674863, 0.08929502161446885], 'false,false,false': [0.07460277579367192, 0.11960252951184604], 'true': [0.04137210617213703, 0.13561632563613887], 'true,false': [0.0, -4.4408920985006264e-17], 'true,true': [0.04137210617213703, nan], 'false,false,true': [0.0054863718749936785, -1.4802973661668753e-16]}
{'': [0.09544508443327324, 0.12229853766847221], 'false': [0.06550274031182078, 0.1607782892484655], 'false,false': [nan, 0.1607782892484655], 'false,false,false': [nan, 0.1607782892484655], 'true': [0.024202885092072045, 0.00011949387656441195], 'false,true': [0.00899559655255569, 1.0637860925817055e-05]}
{'': [0.07705339506925743, 0.07804881265100345], 'false': [0.0012227712347869632, 0.0768068342424972], 'true': [0.07705339506925743, nan], 'false,false': [0.06186237373653578, 0.09524706859850496], 'false,false,true': [0.0004838929357843469, 0.004906606650454308], 'false,true': [2.943135879480867e-05, 0.0]}
{'': [0.04532811090197316, 0.08905180679828806], 'false': [0.0005808998482927161, 0.09431919258994803], 'false,false': [0.06426365814321233, 0.001098463818221769], 'true': [nan, 0.04532811090197314], 'true,false': [nan, 0.04532811090197316], 'false,false,false': [0.0011041536293379976, 0.0010914355888514851]}
{'': [0.05077207559483144, 0.05487102741013514], 'false': [nan, 0.05487102741013505], 'false,false': [nan, 0.05487102741013514], 'false,false,false': [nan, 0.05487102741013514], 'true': [0.026765703408184578, 0.00571373385910217]}
{'': [4.359447411980634e-05, 0.03633551120154479], 'false': [nan, 0.036335511201544685], 'false,false': [0.020738467329525404, 0.05183365846238135], 'false,false,false': [0.02924630702375446, 0.08241784824351052], 'false,false,true': [0.020369439005584706, 0.022352501516816677], 'true': [3.241985279593074e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.016777898730318482, 0.03478407947695697], 'false': [0.02025820031520351, 0.061441534406008934], 'false,false': [0.0349568738155732, 0.08600332517980634], 'false,false,false': [nan, 0.08600332517980634], 'false,false,true': [0.009593517393651418, 4.547462172983557e-05], 'false,true': [0.039468715119047815, 7.948421800582422e-05], 'false,true,true': [0.039468715119047815, nan]}
{'': [0.01913002929693681, 0.05289989686535863], 'false': [0.00013149894232599712, 0.055608886155798766], 'false,false': [nan, 0.05560888615579873], 'true': [0.007735131668350094, 0.000497830332644759], 'true,true': [0.007631560584514299, 0.006875467304197276], 'true,false': [2.8919276265142692e-05, 0.0016952501821497234], 'true,false,false': [5.3129671269914795e-05, 0.004626751445081099]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.486
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.6774500399154294;  // std dev = 0.230, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.6285643213018633;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04953357580822927;  // std dev = 2.288, 87.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=8 */
%   | | | else return -0.06509334918986669;  // std dev = 0.814, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09164791649881755;  // std dev = 0.166, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1216513653605025;  // std dev = 3.494, 81.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.575086639548052;  // std dev = 0.011, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return -0.26240631619306304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6240131660976649;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5739671682569195;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.730490604872138;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12125730486865813;  // std dev = 0.158, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06485446407511165;  // std dev = 2.304, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0.16773853452724052;  // std dev = 2.479, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.4016916971719561;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.4425522918568034;  // std dev = 0.096, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5694492428606127;  // std dev = 0.105, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.11700778266623806;  // std dev = 0.019, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.43228736535379697;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10622969025274386;  // std dev = 0.000605, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.6335597378763038;  // std dev = 0.228, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.15850103380604533;  // std dev = 0.056, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.18019901466984098;  // std dev = 0.403, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.33817799142622207;  // std dev = 0.010, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.18844984875003026;  // std dev = 0.349, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.2854153727075002;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.19456558104617663;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.4250284550055117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.48080825697332324;  // std dev = 0.237, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10225736666005082;  // std dev = 0.685, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06187892724531931;  // std dev = 0.743, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return 0.076591761863781;  // std dev = 2.371, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.27550014264299194;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.2476030315488267;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04791489459731801;  // std dev = 0.120, 88.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=9 */
%   | | else return -0.03979648915096329;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28978803811595355;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.28665892854854236;  // std dev = 1.346, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.4486546867663999;  // std dev = 0.948, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12753710472993618;  // std dev = 0.159, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.09908858147236277;  // std dev = 0.163, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.21940796819716324;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15602856441600324;  // std dev = 0.971, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.013423124259853059;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23523181021154074;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(F, A) )
%   | then return -0.057450190004860555;  // std dev = 0.128, 154.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3208909617834738;  // std dev = 0.367, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.11897020333349932;  // std dev = 0.072, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.23010860169355768;  // std dev = 0.660, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.032663022124794126;  // std dev = 1.370, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1383540319374496;  // std dev = 1.356, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.10331107644111182;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.1859065662685695;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22231733861813907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.038697834134068174;  // std dev = 0.127, 123.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=13 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.25271281329821726;  // std dev = 0.306, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10002325170723567;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.005529375834017975;  // std dev = 1.130, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0.010613852904673857;  // std dev = 1.405, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17060515581038285;  // std dev = 0.009, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(E, A) )
%   | | then return -0.04560177600456605;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.11490135967437203;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.25750112811006215;  // std dev = 0.099, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.07778976044661548;  // std dev = 0.008, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20314976757965475;  // std dev = 0.889, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.10522241607293596;  // std dev = 0.145, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.015694991100063636;  // std dev = 0.994, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.03164282628476853;  // std dev = 1.285, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14691878763006308;  // std dev = 0.010, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21191397580652938;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30965402331071445;  // std dev = 0.153, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07106768387198836;  // std dev = 0.021, 129.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1037230994274481;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26740433428064503;  // std dev = 0.226, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10089850240995119;  // std dev = 0.138, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18404437553702438;  // std dev = 0.405, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1065651738257389;  // std dev = 1.095, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.007', 'seconds']
Refined model CLL: -0.107645


******************************************
Best model found
******************************************
Results 

CLL : -0.103424 

AUC ROC : 0.993407 

AUC PR : 0.378495 

Precision : 0.35014 

Recall : 0.992063 

F1 : 0.517598 

Total Learning Time : 6.486 

Total Inference Time : 13.600358724594116 

Total revision time: 30.868233898162842
Best scored revision CLL: -0.107645


Results 

CLL : -0.103424 

AUC ROC : 0.993407 

AUC PR : 0.378495 

Precision : 0.35014 

Recall : 0.992063 

F1 : 0.517598 

Total Learning Time : 32.45187471199036 

Total Inference Time : 13.600358724594116 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.014
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8465210281227679;  // std dev = 0.994, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1033895264389493;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7094326735671435;  // std dev = 1.004, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.039443660183132674;  // std dev = 3.116, 146.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07096273560017276;  // std dev = 1.514, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4763801614154416;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.16640637791199725;  // std dev = 3.837, 90.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5517444221885127;  // std dev = 1.040, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6224484415628958;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5973260773510274;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.560710553646844;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02469291597464815;  // std dev = 4.039, 215.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=26 */
%   | | | else return 0.05636836040000059;  // std dev = 3.251, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4783643458692362;  // std dev = 2.307, 94.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=90 */
%   | else return -0.12538370802232857;  // std dev = 0.154, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4659202311797552;  // std dev = 0.104, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.127485071764668;  // std dev = 0.000322, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4125873098021371;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07442728409237574;  // std dev = 3.039, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.27465125136034796;  // std dev = 1.711, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3103989523040649;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.49751534581394463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6120612350380108;  // std dev = 0.097, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09998425754149504;  // std dev = 1.162, 168.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=2 */
%   | | else return 0.03820559129652735;  // std dev = 0.325, 109.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025073662558094414;  // std dev = 3.018, 208.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=67 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2559985877301527;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.484342795122345;  // std dev = 1.759, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1269952944482016;  // std dev = 0.185, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.1273434593168368;  // std dev = 0.164, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3017103087278209;  // std dev = 1.673, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else return -0.0990936881713365;  // std dev = 1.572, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03888801814125997;  // std dev = 1.979, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.183220999243327;  // std dev = 0.995, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2563240468996153;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04294289577759969;  // std dev = 1.805, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | | else return -0.07993062205062129;  // std dev = 0.621, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.003156518923156138;  // std dev = 1.757, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
%   | | | else return 0.08148741921535686;  // std dev = 2.280, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1676144885717357;  // std dev = 0.112, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2973236501584931;  // std dev = 0.905, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09242252891728843;  // std dev = 0.114, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32265967037787563;  // std dev = 0.338, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09493787057594971;  // std dev = 4.95e-05, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03430296142605015;  // std dev = 2.234, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1758256769003127;  // std dev = 1.247, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.16573758420460982;  // std dev = 0.372, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08252279690428685;  // std dev = 0.063, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09329453816585692;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.04468542084225701;  // std dev = 0.824, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1458314553476221;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026016885145929564;  // std dev = 2.576, 96.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.280', 'seconds']
Parameter learned model CLL:-0.116811 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 85], 'true,false,true': [0.0, 127, 0], 'true,false,false,true': [0.981, 25, 1], 'true,false,false,false': [0.913, 5, 1], 'false,true,true': [0.983, 1, 28], 'false,true,false': [0.0, 0, 9], 'false,false': [8.12e-09, 64, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.004, 1, 69], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.116, 131, 15], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.514, 43, 3], 'false,false,false,true': [1.225, 2, 6], 'false,false,false,false': [3.837, 59, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.04, 1, 54], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.164, 0, 5], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [4.039, 189, 26], 'false,false,false,false': [3.251, 67, 20]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.307, 4, 90], 'true,false': [0.154, 184, 0], 'false,true,true': [0.104, 0, 14], 'false,true,false': [0.000322, 27, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.039, 50, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.711, 4, 60], 'true,false': [0.0, 0, 0], 'false,true,true': [0.015, 0, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.097, 0, 20], 'false,false,true,false': [1.162, 166, 2], 'false,false,false': [0.325, 85, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.018, 141, 67], 'false,true': [0.124, 0, 17], 'false,false,true': [1.759, 3, 40], 'false,false,false,true': [0.185, 59, 0], 'false,false,false,false': [0.164, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.673, 2, 96], 'true,false': [1.572, 205, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.979, 46, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.995, 1, 68], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.805, 115, 14], 'false,false,true,false': [0.621, 20, 1], 'false,false,false,true': [1.757, 67, 20], 'false,false,false,false': [2.28, 35, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.112, 1, 60], 'false,true,true,true': [0.905, 0, 33], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.114, 165, 0], 'false,false,true,true': [0.338, 0, 13], 'false,false,true,false': [4.95e-05, 35, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.234, 42, 18]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.247, 1, 69], 'true,true,false': [0.372, 0, 16], 'true,false,true': [0.063, 137, 0], 'true,false,false,true': [0.026, 19, 0], 'true,false,false,false': [0.824, 21, 2], 'false,true': [0.039, 0, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.576, 65, 31]}]
{'': [0.22900458142440744, 0.231161091887737], 'false': [0.025623268698062793, 6.591949208711867e-17], 'true': [0.011492698756084153, 0.012420394762865258], 'false,true': [0.033293697978597984, -2.9605947323337506e-16], 'true,false': [-2.4477358023231797e-17, 0.05859375000000002], 'true,false,false': [0.03698224852071011, 0.13888888888888892]}
{'': [0.014386201393154099, 0.1126351602358418], 'false': [0.06651510012198743, 0.14848053469380795], 'false,false': [0.04981303249449666, 0.17275309411675813], 'false,false,false': [0.18749999999999994, 0.1635986868987001], 'false,true': [nan, 0.06651510012198743], 'false,true,false': [0.06651510012198743, nan], 'false,false,true': [nan, 0.04981303249449666]}
{'': [0.018168183203615334, 0.1027704304491105], 'false': [nan, 0.10277043044911063], 'false,false': [0.001758629768073641, 0.09037258977572568], 'false,false,false': [0.07588768873210108, 0.12149062925376125], 'true': [0.01965845616789078, -7.401486830834377e-17], 'true,true': [0.01965845616789078, nan], 'false,false,true': [0.005362786304526556, -1.3664283380001927e-16], 'true,false': [nan, -7.401486830834377e-17]}
{'': [0.10080073584207398, 0.11482929397466389], 'false': [0.08290230641856233, 0.13352312595256094], 'false,false': [0.0, 0.13382464082016038], 'false,false,false': [nan, 0.13382464082016038], 'true': [0.0565994806217319, 0.0001296500716540455], 'false,true': [0.010894735219504919, 1.0336671971659064e-07]}
{'': [0.04571717498417238, 0.07613463435428626], 'false': [0.0018497349983117336, 0.07470778172981524], 'false,false': [0.055426433077991756, 0.10549576196910491], 'false,false,true': [0.0004684264338315813, 0.008031948288626342], 'true': [0.04571717498417238, nan], 'false,true': [1.3401566047526965e-05, 0.0]}
{'': [0.043800706694131435, 0.09130038463727501], 'false': [0.0009046581254555865, 0.0970565578740959], 'false,false': [0.07195908257897869, 0.0005664275065065579], 'true': [nan, 0.043800706694131386], 'true,false': [nan, 0.043800706694131435], 'false,false,false': [0.0005790337281858788, 0.0005511823651570977]}
{'': [0.052076687229285205, 0.05592774007128265], 'false': [nan, 0.05592774007128265], 'false,false': [nan, 0.05592774007128265], 'false,false,false': [nan, 0.05592774007128265], 'true': [0.028570329121072987, 0.0118183620054411]}
{'': [0.014229400520351427, 0.0432862021140167], 'false': [nan, 0.04328620211401667], 'false,false': [0.02446103928123596, 0.06006665449237895], 'false,false,false': [0.03549278224614688, 0.09454847582511186], 'false,false,true': [0.02525927575156786, 0.01838102764819949], 'true': [0.014359280065203725, 0.0], 'true,false': [0.0, nan]}
{'': [0.012600580279973095, 0.03915497950121097], 'false': [0.02530122791162143, 0.06262497663247121], 'false,false': [0.03681889275464132, 0.0831540446425218], 'false,false,false': [nan, 0.0831540446425218], 'false,false,true': [0.00878897830614196, 7.011957363951231e-11], 'false,true': [0.024831477814605943, 7.816391366278931e-05], 'false,true,true': [0.024831477814605943, nan]}
{'': [0.023096957655421364, 0.06585054119585453], 'false': [0.0002533681420848986, 0.069105921498032], 'false,false': [nan, 0.06910592149803181], 'true': [0.019693697051880926, 0.0039998188103209835], 'true,true': [0.0221982282230335, 0.008653537445569816], 'true,false': [2.86571349007269e-05, 0.016761153297194], 'true,false,false': [3.457940059166898e-05, 0.02950985116684065]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.155
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.13035681202692492;  // std dev = 0.107, 174.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7257119944359991;  // std dev = 0.150, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.6480448407823828;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7438564062002543;  // std dev = 0.142, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4151517727783072;  // std dev = 0.838, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12671109168861;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.052806745544287846;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09446553906130153;  // std dev = 3.168, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return 0.15244217928105303;  // std dev = 2.441, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5330512017454493;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.5582055434389674;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.31475788597793075;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6148260002810302;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5795950962944685;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5969395329095531;  // std dev = 0.233, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11334015474337122;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06916642363208525;  // std dev = 3.401, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0.15034482960689066;  // std dev = 2.058, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4258853218083898;  // std dev = 0.018, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.19787610788536278;  // std dev = 1.507, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.5193237785979865;  // std dev = 0.126, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.11266257330856144;  // std dev = 0.256, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.43549078129836805;  // std dev = 0.149, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10243950815455391;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41012321774258675;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.08743539490715493;  // std dev = 2.525, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.07087449039400372;  // std dev = 1.692, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.28715937776561384;  // std dev = 0.190, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | else return 0.42620713457311726;  // std dev = 0.113, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2390000961301587;  // std dev = 0.963, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.32330928887889593;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5264068922909235;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.41798740735894657;  // std dev = 0.592, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09133683997351713;  // std dev = 0.910, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06864570319854929;  // std dev = 0.838, 61.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=3 */
%   | | | else return 0.0759799311937219;  // std dev = 3.108, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2648346479331808;  // std dev = 0.033, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return -0.09386468004055186;  // std dev = 1.108, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.055575617446778455;  // std dev = 0.957, 113.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=11 */
%   | | | else return -0.061006302151976145;  // std dev = 0.468, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2845099297531867;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1889155463510354;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3690387920303069;  // std dev = 1.249, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.6141385361826526;  // std dev = 0.343, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.13011880523302125;  // std dev = 0.033, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.21761533259501262;  // std dev = 0.122, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.15421138651566707;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.19616219599134072;  // std dev = 0.890, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3721375839538945;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08029590683552329;  // std dev = 0.024, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.0023763957144516674;  // std dev = 1.485, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.04446340020332759;  // std dev = 1.686, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07315426017332702;  // std dev = 1.000, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04902747212456254;  // std dev = 1.471, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.15992426428497364;  // std dev = 0.987, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.19984879190899765;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.08692193185186689;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.18922160174997868;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.28438645448599564;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A) )
%   | then return -0.044800304145008046;  // std dev = 0.093, 189.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=18 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.09665362998741232;  // std dev = 0.356, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.002486566161776958;  // std dev = 2.168, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | | | else return 0.04404568686799602;  // std dev = 1.773, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1777524136690412;  // std dev = 0.313, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1667366380954356;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.03672895883656606;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.3174541726145288;  // std dev = 0.657, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.0354993580925695;  // std dev = 0.121, 208.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=33 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3900040253549311;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12129861470562295;  // std dev = 0.098, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04308092535894048;  // std dev = 1.853, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0.056106674561821446;  // std dev = 1.209, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16562219302025546;  // std dev = 0.384, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.07005306331985015;  // std dev = 0.007, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06653058126812428;  // std dev = 0.001, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.01779323265001091;  // std dev = 0.504, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.20832406213203566;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2859675791781904;  // std dev = 0.077, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1007152889617185;  // std dev = 0.035, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.046484061041835494;  // std dev = 0.683, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.00845611717038136;  // std dev = 2.317, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.622', 'seconds']
Refined model CLL: -0.11031


******************************************
Best model found
******************************************
Results 

CLL : -0.105073 

AUC ROC : 0.993105 

AUC PR : 0.345051 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 9.155 

Total Inference Time : 15.99998140335083 

Total revision time: 39.44747051620483
Best scored revision CLL: -0.11031


Results 

CLL : -0.105073 

AUC ROC : 0.993105 

AUC PR : 0.345051 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 41.031111330032346 

Total Inference Time : 15.99998140335083 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.646
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10481402786345068;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6920115376694321;  // std dev = 1.716, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.031691748353038285;  // std dev = 3.489, 172.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06881605566723947;  // std dev = 1.797, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1279272543620718;  // std dev = 4.502, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5495863027196646;  // std dev = 1.453, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7270765815104095;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.595055248987087;  // std dev = 0.155, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5667755587804405;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02296762988643128;  // std dev = 4.605, 277.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=34 */
%   | | | else return 0.057100918813514964;  // std dev = 3.522, 101.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5115583605992441;  // std dev = 2.047, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else return -0.12434704244593904;  // std dev = 0.144, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4640537403018148;  // std dev = 0.094, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12825691549595375;  // std dev = 3.90e-06, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4191295247918697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14519521293113818;  // std dev = 3.135, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3238671073501311;  // std dev = 0.833, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4474404789401635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30848471030815416;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4802611876550902;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5657443378298802;  // std dev = 0.966, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.1008029727472125;  // std dev = 1.346, 196.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=3 */
%   | | else return 0.016175839821162344;  // std dev = 0.310, 144.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031412516786960214;  // std dev = 3.226, 240.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2552366981193843;  // std dev = 0.150, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5362229555057184;  // std dev = 1.037, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13246034961526804;  // std dev = 0.219, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.1272498988466202;  // std dev = 0.222, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2757272353852219;  // std dev = 2.305, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08815198245511417;  // std dev = 1.598, 234.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0011275233940519498;  // std dev = 2.429, 102.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18330642755327511;  // std dev = 1.004, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.24246945123072156;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.037146956584431914;  // std dev = 1.921, 155.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=18 */
%   | | | else return -0.08655768135450322;  // std dev = 0.635, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.002675479080323709;  // std dev = 2.136, 118.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=28 */
%   | | | else return 0.01867835682188838;  // std dev = 2.641, 87.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13173985273031436;  // std dev = 0.224, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.24799263428642798;  // std dev = 1.679, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09251331769433264;  // std dev = 0.093, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.327441019641225;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09471915289806943;  // std dev = 0.044, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0932692339638623;  // std dev = 2.264, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18222668985083879;  // std dev = 1.317, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.17152397984528164;  // std dev = 0.387, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08709972762328283;  // std dev = 0.372, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08958550302713404;  // std dev = 0.011, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.02532899527378029;  // std dev = 0.978, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.022313983960000925;  // std dev = 0.913, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02686947960941888;  // std dev = 2.693, 131.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.367', 'seconds']
Parameter learned model CLL:-0.117294 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 184, 0], 'true,false,false,true': [1.388, 52, 2], 'true,false,false,false': [1.247, 7, 2], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.93e-09, 99, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.716, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.489, 153, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.797, 57, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.502, 94, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.453, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.155, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.605, 243, 34], 'false,false,false,false': [3.522, 78, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.047, 2, 115], 'true,false': [0.144, 248, 0], 'false,true,true': [0.094, 0, 17], 'false,true,false': [3.9e-06, 20, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.135, 41, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.833, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.023, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.966, 1, 26], 'false,false,true,false': [1.346, 193, 3], 'false,false,false': [0.31, 116, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.226, 158, 82], 'false,true': [0.15, 0, 22], 'false,false,true': [1.037, 0, 52], 'false,false,false,true': [0.219, 73, 0], 'false,false,false,false': [0.222, 75, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.305, 4, 121], 'true,false': [1.598, 227, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.429, 74, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.004, 1, 83], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.921, 137, 18], 'false,false,true,false': [0.635, 26, 1], 'false,false,false,true': [2.136, 90, 28], 'false,false,false,false': [2.641, 63, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.224, 4, 78], 'false,true,true,true': [1.679, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.093, 201, 0], 'false,false,true,true': [0.439, 0, 19], 'false,false,true,false': [0.044, 49, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.264, 34, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.317, 1, 85], 'true,true,false': [0.387, 0, 19], 'true,false,true': [0.372, 153, 0], 'true,false,false,true': [0.011, 21, 0], 'true,false,false,false': [0.978, 26, 4], 'false,true': [0.913, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.693, 91, 40]}]
{'': [0.21234421269731918, 0.2191380569758956], 'false': [0.019991670137443407, 8.074349270001139e-17], 'true': [0.01851192595229848, 0.01593207559540385], 'false,true': [1.8243664837083652e-15, 0.07638888888888877], 'true,false': [-2.0756343503861623e-16, 0.05946082136558317], 'true,false,false': [0.035665294924554135, 0.17283950617283952]}
{'': [0.03346814910346708, 0.11198604450213465], 'false': [0.07077944608860262, 0.1398690041950556], 'false,false': [0.052943043854536576, 0.1613047215834427], 'false,false,false': [0.0, 0.15122066509609033], 'false,true': [nan, 0.07077944608860262], 'false,true,false': [0.07077944608860262, nan], 'false,false,true': [nan, 0.052943043854536576]}
{'': [0.04002212816316779, 0.10206225571747106], 'false': [nan, 0.1020622557174731], 'false,false': [0.0013056993929532826, 0.09017191935484192], 'false,false,false': [0.07655119482963055, 0.12282978002744044], 'true': [0.03061032800251927, 0.09311866276976162], 'true,false': [0.016187457701616337, 0.09876543209876533], 'true,true': [0.03061032800251927, nan], 'false,false,true': [0.003998704390919612, -5.921189464667501e-17]}
{'': [0.09961103167722869, 0.13019759731344285], 'false': [0.09120519033580687, 0.1523822070455157], 'false,false': [0.0, 0.1536087173811463], 'false,false,false': [nan, 0.1536087173811463], 'true': [0.0358208402140565, 8.380397604743341e-05], 'false,true': [0.008866542365833474, 1.5232609618109904e-11]}
{'': [0.008981629651273896, 0.07571031455815751], 'false': [0.0013638415843919348, 0.07433418830864233], 'false,false': [0.05959819919746374, 0.09635490586281965], 'false,false,true': [0.03459710789037623, 0.00924983441158587], 'true': [0.00890348282321363, 0.0], 'false,true': [2.6930893624743656e-05, 0.0]}
{'': [0.0433637214568891, 0.08628594566174759], 'false': [0.001016835111956907, 0.0912164489626924], 'false,false': [0.020673328195098286, 0.0006624611753990347], 'true': [nan, 0.043363721456889194], 'true,false': [nan, 0.0433637214568891], 'false,false,false': [0.0006564673616347587, 0.0006549041933424072]}
{'': [0.05196255263487288, 0.057820941316285485], 'false': [nan, 0.05782094131628529], 'false,false': [nan, 0.057820941316285485], 'false,false,false': [nan, 0.057820941316285485], 'true': [0.04249896438702528, 0.01091479451308914]}
{'': [0.011805712568359612, 0.04123797335249649], 'false': [nan, 0.04123797335249649], 'false,false': [0.022812448925356627, 0.05637954962105126], 'false,false,false': [0.03866345980529583, 0.08014579897389013], 'false,false,true': [0.023819702830410835, 0.014950834314160555], 'true': [0.012003424730026854, 8.293988141307163e-05], 'true,false': [8.293988141307163e-05, nan]}
{'': [0.05024724248962735, 0.04195580812064421], 'false': [0.027787949136570386, 0.06428690950989135], 'false,false': [0.03874086350960629, 0.09315970165028019], 'false,false,false': [nan, 0.09315970165028019], 'false,false,true': [0.010128197468403485, 3.902642228260327e-05], 'false,true': [0.07050677164945199, 4.282315171966366e-05], 'false,true,true': [0.07050677164945199, nan]}
{'': [0.02496971158038422, 0.05776951691862587], 'false': [0.09253865615614008, 0.055379463337129224], 'false,false': [nan, 0.05537946333712916], 'true': [0.017974835212586977, 0.005852586110350901], 'true,true': [0.020182025888271133, 0.007890572938993576], 'true,false': [0.0009028594977152225, 0.019766553918015836], 'true,false,false': [5.812682571082209e-06, 0.03189893798749787]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.211
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.10263537862597792;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6887041814417234;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.7289516160539681;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.683868809291142;  // std dev = 0.941, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12544463852839122;  // std dev = 5.96e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.09023971974758531;  // std dev = 0.169, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.004810492173614804;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.08625747143594456;  // std dev = 1.170, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5194734122109546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09781652786727951;  // std dev = 4.595, 150.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5176583780721642;  // std dev = 1.665, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.7054945589800846;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4611949181908764;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5684310582721303;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5601498941074118;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11331290606085723;  // std dev = 0.767, 143.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=1 */
%   | | | else return 0.00786678036257299;  // std dev = 2.728, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10450791434208838;  // std dev = 3.535, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return 0.1692382478133708;  // std dev = 2.578, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.412267497717696;  // std dev = 1.328, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.5690727431769373;  // std dev = 0.233, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5640315702792074;  // std dev = 0.118, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.11745947113112522;  // std dev = 0.021, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4578025820526843;  // std dev = 0.101, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12112647104723803;  // std dev = 0.041, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41404933935732013;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1110616841314797;  // std dev = 2.634, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.14445289438242315;  // std dev = 1.725, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3340069413827669;  // std dev = 0.122, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.0886683739151114;  // std dev = 0.672, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.18191133223505365;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.31208515596968195;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.422801844301282;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08926068118964516;  // std dev = 0.545, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   | | | else return -0.016060666992035306;  // std dev = 2.237, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.05969183188872244;  // std dev = 2.213, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.15746093616018458;  // std dev = 3.049, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2628969474171938;  // std dev = 0.007, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.03875099586484971;  // std dev = 0.166, 157.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=18 */
%   | | else return -0.09087223088159627;  // std dev = 0.152, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.28496678901836475;  // std dev = 0.154, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17958885584369952;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.24928163635943112;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.24572278404087947;  // std dev = 0.972, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5492652107385899;  // std dev = 1.099, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.14613518713156823;  // std dev = 0.042, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, E) )
%   | then return 0.21642563310153856;  // std dev = 0.107, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else return 0.040629599361481694;  // std dev = 0.955, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.060471734538818794;  // std dev = 0.111, 137.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=7 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.4639176174450182;  // std dev = 0.212, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09634403716751443;  // std dev = 0.004, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.14991074561250634;  // std dev = 0.964, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.037580825290534456;  // std dev = 1.247, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.04472102836584606;  // std dev = 1.107, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | | else return 0.027877920407306408;  // std dev = 3.073, 130.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18489477166414797;  // std dev = 0.011, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.3023619257081722;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(G, E), follows(G, A) )
%   | | | then return -0.07197937291432686;  // std dev = 0.573, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   | | | else return -0.05044314412881761;  // std dev = 0.353, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.36189006807937146;  // std dev = 1.013, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09211881089143635;  // std dev = 0.067, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22553226055719533;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.041980581657776836;  // std dev = 1.626, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | | else return 0.015581223497556859;  // std dev = 2.645, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.1464976643221393;  // std dev = 0.123, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.040878912046488275;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.011758579650412404;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2540031574593521;  // std dev = 0.115, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07666196958106436;  // std dev = 0.008, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3685669529342482;  // std dev = 0.056, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1357879307860512;  // std dev = 0.038, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04063665010742693;  // std dev = 1.955, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.014787747038051828;  // std dev = 1.379, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.08719731707262847;  // std dev = 1.664, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.13305647772235743;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.2671583044556725;  // std dev = 0.076, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06615414238318158;  // std dev = 0.058, 240.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.19047354237645664;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.28767715304707303;  // std dev = 0.049, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12149615031783384;  // std dev = 0.043, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.004247464459418886;  // std dev = 2.027, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
%   | | | else return 0.003377390778845946;  // std dev = 1.390, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.741', 'seconds']
Refined model CLL: -0.115731


******************************************
Best model found
******************************************
Results 

CLL : -0.108097 

AUC ROC : 0.99329 

AUC PR : 0.374936 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 9.211 

Total Inference Time : 18.543534755706787 

Total revision time: 45.56594908905029
Best scored revision CLL: -0.115731


Results 

CLL : -0.108097 

AUC ROC : 0.99329 

AUC PR : 0.374936 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 47.14958990287781 

Total Inference Time : 18.543534755706787 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.246
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.03910805878345918;  // std dev = 2.018, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.28052658778904555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.17631180816423214;  // std dev = 1.515, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5837566964088331;  // std dev = 0.200, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7115128648903015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.012717032247854563;  // std dev = 1.732, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | | else return 0.10238711594562465;  // std dev = 1.373, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5192261403853969;  // std dev = 0.548, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.12861145011897704;  // std dev = 0.078, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.44660687992248876;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13709001283398656;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2503144020319233;  // std dev = 1.159, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.10447459288569212;  // std dev = 1.588, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else return 0.4365005459265834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.10205615372106361;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5911055558041197;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1150675425773383;  // std dev = 0.026, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.01358510460487758;  // std dev = 0.277, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04790060177973415;  // std dev = 1.576, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27802668538543507;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5675624690864145;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12916861239639782;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.12077938146625149;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2856733261490096;  // std dev = 0.963, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.07797348656512912;  // std dev = 0.975, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024943845527624388;  // std dev = 0.280, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1461159816800617;  // std dev = 0.951, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.02131985825460574;  // std dev = 1.033, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | | | else return -0.06617719109541428;  // std dev = 0.357, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05267436525959248;  // std dev = 0.305, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.19360022235349708;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.08774841477305896;  // std dev = 0.340, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.287220096817082;  // std dev = 0.251, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09301423113244464;  // std dev = 0.067, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24367481027994964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.09292864521156821;  // std dev = 0.000775, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11084381428127572;  // std dev = 0.862, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17052034107623754;  // std dev = 1.054, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.1623711965048541;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.09547869816350797;  // std dev = 0.038, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07490878890214758;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06462657395479275;  // std dev = 0.000359, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08592711683793815;  // std dev = 0.805, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.004', 'seconds']
Parameter learned model CLL:-0.121965 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [4.21e-08, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.018, 28, 7], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 10, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [1.515, 9, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.2, 0, 11], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.732, 31, 5], 'false,false,false,false': [1.373, 10, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.548, 0, 17], 'true,false': [0.078, 47, 0], 'false,true,true': [0.058, 0, 4], 'false,true,false': [0.008, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.159, 4, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.588, 3, 11], 'true,false': [0.0, 0, 1], 'false,true,true': [0.898, 1, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.03, 0, 5], 'false,false,true,false': [0.026, 33, 0], 'false,false,false': [0.277, 20, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.576, 35, 19], 'false,true': [0.0, 0, 1], 'false,false,true': [0.168, 0, 5], 'false,false,false,true': [0.078, 4, 0], 'false,false,false,false': [0.118, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.963, 1, 21], 'true,false': [0.975, 48, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.28, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.951, 1, 13], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.033, 29, 6], 'false,false,true,false': [0.357, 6, 1], 'false,false,false,true': [0.305, 8, 1], 'false,false,false,false': [0.823, 3, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.34, 2, 12], 'false,true,true,true': [0.251, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 32, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.000775, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.862, 4, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.054, 1, 19], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.038, 31, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.000359, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.805, 7, 5]}]
{'': [0.21484374999999956, 0.2366863905325442], 'false': [0.0, -6.938893903907228e-18], 'true': [-8.881784197001253e-17, 4.794144879063176e-17], 'true,false': [3.489272363107635e-17, -9.25185853854297e-18], 'false,true': [0.0, nan], 'true,false,false': [-9.25185853854297e-18, nan]}
{'': [1.3664283380001927e-16, 0.11526276045769662], 'false': [0.11388516045586125, 0.11724188238869594], 'false,false': [2.7755575615628915e-18, 0.16596154115471687], 'false,false,false': [0.0, 0.16390251561700478], 'false,true': [nan, 0.11388516045586125], 'false,true,false': [0.11638686690004363, 0.0], 'false,false,true': [nan, 2.7755575615628915e-18]}
{'': [0.004571570066650136, 0.11262841461093193], 'false': [nan, 0.11262841461093187], 'false,false': [0.0, 0.10036907008600894], 'false,false,false': [0.08331669535036096, 0.1346787789413915], 'true': [0.004571570066650136, nan], 'true,true': [0.0036270307966809897, 0.0], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.08665582472573408, 0.12964826411477703], 'false': [0.08691489025468421, 0.16781616641806124], 'false,false': [nan, 0.16781616641806124], 'false,false,false': [nan, 0.16781616641806124], 'false,true': [0.0034119781231525537, 6.677107943374797e-05], 'true': [0.017662899061530363, 0.00012961519445524878]}
{'': [0.17496840540167036, 0.07291414088913503], 'true': [0.180116733078466, 0.0], 'false': [0.16127322433019037, 0.06469776893280085], 'false,true': [0.16127322433019037, nan], 'false,false': [0.05702330623049132, 0.07680404022628078], 'false,false,true': [0.0001783251747506931, 2.033413780818974e-05]}
{'': [0.04598979282068424, 0.09258496223439754], 'false': [0.0, 0.09505038689081051], 'false,false': [0.0056120129012325656, 0.0014347545107062456], 'true': [nan, 0.04598979282068424], 'true,false': [nan, 0.04598979282068424], 'false,false,false': [0.0015144807340622367, 0.00138275567976405]}
{'': [0.053563530438408016, 0.015715551055928666], 'true': [0.04213944566893175, 0.018638716365395564], 'false': [nan, 0.015715551055928666], 'false,false': [nan, 0.015715551055928666], 'false,false,false': [nan, 0.015715551055928666]}
{'': [0.06458100631280461, 0.03961516059231354], 'true': [0.06458100631280461, nan], 'false': [nan, 0.039615160592313535], 'false,false': [0.02872220716837205, 0.06311583197496863], 'false,false,false': [0.010365044681513605, 0.0968219882473409], 'false,false,true': [0.030498113830355018, 0.018165856933798012]}
{'': [0.11587397950165644, 0.03608645332246462], 'false': [0.024821121101092837, 0.06518923001699607], 'false,false': [0.01573647323897358, 0.09293294680078998], 'false,false,false': [nan, 0.09293294680078998], 'false,true': [0.00787702221687378, 0.00014151699190197847], 'false,false,true': [0.0, 1.201786299212526e-07], 'false,true,true': [0.00787702221687378, nan]}
{'': [0.03554734937368066, 0.053986819410078164], 'false': [nan, 0.053986819410078164], 'false,false': [nan, 0.053986819410078164], 'true': [0.052873074305722974, 0.00011547580911878963], 'true,true': [0.05551356570875936, 0.0], 'true,false': [4.538753226027416e-05, 2.539946433284951e-05], 'true,false,false': [0.0, 6.429429795940661e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.457
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7580193346218546;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then return 0.01596732069906395;  // std dev = 0.323, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.28052658778904555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.343954278549023;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5711386365500696;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3829061074184143;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7550784589235642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.6106590042771801;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7162394407517476;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1263980860298504;  // std dev = 0.021, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.035086914239499396;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6451749768126278;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.12415563688116152;  // std dev = 1.354, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4683883885267769;  // std dev = 0.190, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4654846440324434;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5691964537952136;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then return -0.11269670150521154;  // std dev = 0.004, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.17324381832947525;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(I, A), tweets(I, J) )
%   | then if ( follows(K, I), recursion_accounttype(K, B) )
%   | | then return 0.48545200499394503;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11382201800520184;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.15967389900634218;  // std dev = 0.379, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.4012034202886687;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.47136967264593543;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.34738577468196974;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4285350576294687;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10683933374426914;  // std dev = 0.092, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.10161185384675284;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.1951256991770519;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2847782826729468;  // std dev = 0.134, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.362297887890175;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09348404374566628;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2889499925572045;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.03507315781232315;  // std dev = 0.320, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2786532506661046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.39924092588524906;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.14064744608923843;  // std dev = 0.238, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.12780858979555632;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( recursion_accounttype(C, B), follows(A, C) )
%   | | | then return -0.012839123492385307;  // std dev = 0.829, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2173971483865036;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.32843118148348005;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2377893629562402;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, E) )
%   | | | then return -0.08585715567996614;  // std dev = 2.36e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.09072840172145379;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07297916053489605;  // std dev = 0.000995, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then return -0.10715803485389241;  // std dev = 0.854, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0.0046198391739721845;  // std dev = 0.275, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.030866711652606127;  // std dev = 0.918, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15180313761558195;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19872424384374623;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.24685653583546388;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.020202464684108874;  // std dev = 0.645, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.07911728988650725;  // std dev = 0.019, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.13379487843251017;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.11105164469044576;  // std dev = 0.486, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.230386490723708;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1500673259618988;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.13515906957258295;  // std dev = 1.040, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1658528033311095;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16314233049164129;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07420876071740705;  // std dev = 0.003, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.27411157912493744;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.11912154888524247;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.018459019744197374;  // std dev = 0.321, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.014769200806043603;  // std dev = 1.298, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.19683271665114102;  // std dev = 0.176, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1379797970898725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06885032315787604;  // std dev = 1.58e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.07263884089798782;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07096581779414374;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.05840451942581344;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, I), follows(I, J) )
%   | then return 0.0458467683251918;  // std dev = 0.481, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.12229843237983204;  // std dev = 0.553, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.917', 'seconds']
Refined model CLL: -0.120366


******************************************
Best model found
******************************************
Results 

CLL : -0.140101 

AUC ROC : 0.995192 

AUC PR : 0.44711 

Precision : 0.359338 

Recall : 0.974359 

F1 : 0.525043 

Total Learning Time : 5.457 

Total Inference Time : 5.969369411468506 

Total revision time: 15.54032271194458
Best scored revision CLL: -0.120366


Results 

CLL : -0.140101 

AUC ROC : 0.995192 

AUC PR : 0.44711 

Precision : 0.359338 

Recall : 0.974359 

F1 : 0.525043 

Total Learning Time : 17.123963525772094 

Total Inference Time : 5.969369411468506 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.686
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.021133768066743892;  // std dev = 2.502, 81.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=10 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07800898802831027;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.26207206429638985;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.08755937014955614;  // std dev = 1.895, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.509621965503277;  // std dev = 1.433, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return 0.723719020234479;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8721228269523341;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7113605808541439;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.059944948309218586;  // std dev = 2.008, 78.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=6 */
%   | | | else return 0.018267430596681563;  // std dev = 1.782, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4526501689416059;  // std dev = 1.483, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else return -0.11889563760551407;  // std dev = 0.033, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.47188561967694004;  // std dev = 0.073, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1251305150299364;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22565110424285478;  // std dev = 1.579, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3231768481963613;  // std dev = 1.112, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.46667707762597027;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31264783322754447;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4996506255054656;  // std dev = 0.930, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.10650826359702117;  // std dev = 0.030, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.01423035025632874;  // std dev = 0.283, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.062313442786156144;  // std dev = 2.025, 94.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2500610366742718;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6237650038850819;  // std dev = 0.315, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10738682030311711;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12230707927204397;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30940447669314836;  // std dev = 0.646, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07308849366382707;  // std dev = 1.338, 91.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01150208741337175;  // std dev = 0.543, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19307607386407521;  // std dev = 0.030, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03294284606242167;  // std dev = 1.289, 63.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=8 */
%   | | | else return -0.059394908988208504;  // std dev = 0.534, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.038793607110314245;  // std dev = 0.559, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.1578126634959327;  // std dev = 1.194, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16641472169513735;  // std dev = 0.191, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26249766994692797;  // std dev = 0.477, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09415982881102843;  // std dev = 0.049, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32955071555743554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08569163116123744;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1776014992206556;  // std dev = 1.072, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14572128094900597;  // std dev = 1.361, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.1399839048012952;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08597545432431627;  // std dev = 0.033, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08653552863816023;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.018988030106652058;  // std dev = 0.358, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20155698811637035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.007169624346996778;  // std dev = 1.239, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.579', 'seconds']
Parameter learned model CLL:-0.116691 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.38e-07, 0, 42], 'true,false,true': [6.99e-08, 72, 0], 'true,false,false,true': [0.949, 9, 1], 'true,false,false,false': [0.0, 2, 0], 'false,true,true': [1.247, 2, 7], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.0, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.502, 71, 10], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.97, 16, 1], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [1.895, 19, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.433, 2, 27], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.008, 72, 6], 'false,false,false,false': [1.782, 25, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.483, 2, 37], 'true,false': [0.033, 68, 0], 'false,true,true': [0.073, 0, 7], 'false,true,false': [1.86e-09, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.579, 8, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.112, 1, 28], 'true,false': [0.035, 0, 2], 'false,true,true': [0.004, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.93, 1, 6], 'false,false,true,false': [0.03, 71, 0], 'false,false,false': [0.283, 32, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.025, 57, 37], 'false,true': [7.45e-09, 0, 5], 'false,false,true': [0.315, 0, 8], 'false,false,false,true': [0.06, 14, 0], 'false,false,false,false': [0.086, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.646, 0, 40], 'true,false': [1.338, 86, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.543, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.03, 0, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.289, 55, 8], 'false,false,true,false': [0.534, 14, 2], 'false,false,false,true': [0.559, 14, 2], 'false,false,false,false': [1.194, 7, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.191, 1, 30], 'false,true,true,true': [0.477, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 71, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.002, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.072, 5, 5]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.361, 2, 37], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.033, 66, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.358, 6, 1], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.239, 20, 6]}]
{'': [0.22480473670949966, 0.18750000000000014], 'true': [1.3534147347811431e-15, 0.011763038548752866], 'false': [0.17283950617283939, 0.0], 'false,true': [0.17283950617283939, nan], 'true,false': [6.78469626159818e-17, 0.07638888888888894], 'true,false,false': [0.09000000000000005, 0.0]}
{'': [-5.551115123125783e-16, 0.09343915824177355], 'false': [0.07644233922887082, 0.12322238942960823], 'false,false': [0.05536332179930793, 0.15363871297282575], 'false,false,false': [0.25, 0.14367390775743802], 'false,true': [nan, 0.07644233922887082], 'false,true,false': [0.07725337964491322, 0.0], 'false,false,true': [nan, 0.05536332179930793]}
{'': [0.07036555083042295, 0.08776217078848979], 'false': [nan, 0.0877621707884896], 'false,false': [-1.4802973661668753e-16, 0.06797229947998809], 'true': [0.0698998619062861, 0.006461124942633734], 'true,true': [0.07078228367720088, 0.0], 'false,false,false': [0.05168661360776848, 0.10589712214867236], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, -4.4408920985006264e-17]}
{'': [0.096227950077176, 0.1253739218015505], 'false': [0.08099583861068836, 0.1781194301818199], 'false,false': [nan, 0.1781194301818199], 'false,false,false': [nan, 0.1781194301818199], 'true': [0.05638188766559155, 1.616824984541501e-05], 'false,true': [0.005368672431839043, 1.982541115402065e-18]}
{'': [0.04114259789128347, 0.05846963501460642], 'false': [1.6781393652095151e-06, 0.05402320443802937], 'false,false': [0.04111733213354671, 0.0802569951588029], 'true': [0.04260984441859189, 0.0006037439051770066], 'false,false,true': [0.12358168784169656, 1.2682108426287676e-05], 'false,true': [1.6781393652095151e-06, nan]}
{'': [0.043627493861601065, 0.09364966394308982], 'false': [1.1102230246251566e-17, 0.1033273228804615], 'false,false': [0.012378173950356952, 0.0004974782414050693], 'true': [nan, 0.04362749386160118], 'true,false': [nan, 0.043627493861601065], 'false,false,false': [0.00025950424720284123, 0.0006756903225141659]}
{'': [0.047876156055736065, 0.021046753307947554], 'true': [0.01043196124147725, 0.019663120688804592], 'false': [nan, 0.021046753307947554], 'false,false': [nan, 0.021046753307947554], 'false,false,false': [nan, 0.021046753307947554]}
{'': [2.765665212384888e-05, 0.03826166426792345], 'false': [nan, 0.03826166426792343], 'false,false': [0.02474231970947172, 0.06947182333550563], 'false,false,false': [0.019539455106653975, 0.109600686796286], 'false,false,true': [0.026360704917884076, 0.017811930066780036], 'true': [2.765665212384888e-05, nan]}
{'': [0.03650348069144486, 0.03326686070100988], 'false': [0.020206646773952147, 0.08324055198721289], 'false,false': [0.018859409671340224, 0.11488554688465762], 'false,false,false': [nan, 0.11488554688465762], 'false,true': [0.01626004549653632, 3.3508667633237985e-05], 'false,false,true': [0.0, 3.3523940642535675e-07], 'false,true,true': [0.01626004549653632, nan]}
{'': [0.028507037599113376, 0.05817016784644688], 'false': [0.0, 0.05900798395019431], 'false,false': [nan, 0.05900798395019431], 'true': [0.042128272959611364, 0.0020755545362675155], 'true,true': [0.047525592972156666, 0.0], 'true,false': [1.625695534199139e-05, 0.013771107605779088], 'true,false,false': [-2.3129646346357427e-18, 0.018304211498039465]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.106
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.72360036576687;  // std dev = 0.040, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7293781007451515;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07196881253223034;  // std dev = 1.829, 79.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=5 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1356336402543481;  // std dev = 1.104, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.1312346716151146;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08144234934140264;  // std dev = 0.737, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.2970143868412815;  // std dev = 1.336, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5617228522426937;  // std dev = 0.051, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.5734170127270952;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.849322137336842;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6558459784192016;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5543471178331288;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return -0.03732414476387634;  // std dev = 1.812, 53.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=5 */
%   | | | else return -0.12022332429777241;  // std dev = 0.052, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08941672178314856;  // std dev = 0.828, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.21905337069793437;  // std dev = 1.352, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4155895028966313;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.43532958352751405;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6382879081130014;  // std dev = 0.143, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then return -0.1131034820689571;  // std dev = 0.018, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.1266841556172194;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.30729442726767914;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.10999536960790098;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2394968933433927;  // std dev = 0.391, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.32179058977303293;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.36182930039777983;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18866567439751822;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.39775180733293924;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3231236556174298;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5954744072212642;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10532733818095386;  // std dev = 0.049, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( follows(A, L) )
%   | | | then return -0.03020191638096877;  // std dev = 1.457, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | | else return -0.09713340485152182;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.24732227540838056;  // std dev = 1.078, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return -0.09367430163527245;  // std dev = 2.47e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return 0.043362244909545045;  // std dev = 0.475, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03973509769899379;  // std dev = 0.181, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2544895120716061;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.511863788404448;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12635824402085086;  // std dev = 0.130, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.13723411277219533;  // std dev = 0.278, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( tweets(C, E), follows(D, C) )
%   | | then return 0.22429105506039884;  // std dev = 0.026, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.21303640760778056;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(D, A), follows(D, C) )
%   | | then if ( tweets(A, F), tweets(C, F) )
%   | | | then return -0.07573919316415041;  // std dev = 0.884, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | | else return -0.09440271053259232;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(C, G), recursion_accounttype(G, B) )
%   | | | then return 0.30991387001141507;  // std dev = 0.278, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09493900945093742;  // std dev = 0.033, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.2243018638595841;  // std dev = 0.082, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07777014086572073;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.1635797319755272;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.1332093950131411;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.17456678701344108;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2313543788403743;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -0.05978898440789603;  // std dev = 0.682, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | | else return -0.08763745248817652;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.24996870776918165;  // std dev = 0.243, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08656519747597444;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.01121560563652448;  // std dev = 0.229, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.09403175236027668;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.16530693618448644;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.029304165302271735;  // std dev = 0.852, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.06906149193855476;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.27252901421838566;  // std dev = 0.299, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15704802260215803;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07645794955588658;  // std dev = 0.041, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( tweets(A, J) )
%   | | then return -0.052847310436549895;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return -0.005184026008628865;  // std dev = 0.299, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11281968538707014;  // std dev = 0.990, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.21582472559825683;  // std dev = 0.268, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.13179092812807958;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0714198476795176;  // std dev = 0.026, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.040141434526932314;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.3028144763339452;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.13424110123388286;  // std dev = 0.150, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.006524236920580303;  // std dev = 0.602, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.014490867593800258;  // std dev = 0.271, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '57.096', 'seconds']
Refined model CLL: -0.108402


******************************************
Best model found
******************************************
Results 

CLL : -0.114527 

AUC ROC : 0.994428 

AUC PR : 0.358187 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 8.106 

Total Inference Time : 21.326351642608643 

Total revision time: 36.08535045814514
Best scored revision CLL: -0.108402


Results 

CLL : -0.114527 

AUC ROC : 0.994428 

AUC PR : 0.358187 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 37.66899127197266 

Total Inference Time : 21.326351642608643 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.105
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8258908705833835;  // std dev = 1.391, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.07042249347191636;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7282200681542701;  // std dev = 0.106, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02484005542454956;  // std dev = 2.998, 117.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=14 */
%   | | | else return -0.1254446385283914;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07793728853160803;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2336614886487065;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.1869575895360082;  // std dev = 2.374, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5823753420036477;  // std dev = 0.355, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.7308519256738546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7910757915208275;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.685597810186219;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5611644014793327;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5611644014793327;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04554579317350415;  // std dev = 2.659, 113.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=11 */
%   | | | else return 0.02459649416407081;  // std dev = 2.273, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4620302182345568;  // std dev = 1.783, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else return -0.12272069827212782;  // std dev = 0.127, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4288109616784614;  // std dev = 0.275, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.12464884311749022;  // std dev = 0.003, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19472876475278414;  // std dev = 1.772, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2542938355969857;  // std dev = 1.955, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | else return 0.4475381945310531;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31555637558400135;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.628105881059615;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0980546200033047;  // std dev = 1.011, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else return -0.012727125914780587;  // std dev = 0.291, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03123875507702862;  // std dev = 2.806, 159.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25790603612806384;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5793871021027824;  // std dev = 0.373, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12242555817414363;  // std dev = 0.111, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.13718141745953694;  // std dev = 0.178, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2722187359960252;  // std dev = 1.856, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else return -0.07280644867261862;  // std dev = 1.638, 146.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05590606468173265;  // std dev = 0.519, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2043443467999417;  // std dev = 0.029, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20579332857555466;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.044013740688980584;  // std dev = 1.561, 87.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=10 */
%   | | | else return -0.043865034743989006;  // std dev = 1.065, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04823189996615014;  // std dev = 1.322, 42.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=6 */
%   | | | else return 0.14751342823713412;  // std dev = 1.291, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1440894166896882;  // std dev = 0.246, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.292323050286432;  // std dev = 0.656, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09220565048573347;  // std dev = 0.064, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1805995422895712;  // std dev = 1.039, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.093674078338142;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1287706516949709;  // std dev = 1.230, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.188047349259226;  // std dev = 1.263, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.131907452326289;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08504095958654284;  // std dev = 0.056, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08698105434393699;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.006460474960346981;  // std dev = 0.464, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20645461630872208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037860212715298464;  // std dev = 1.531, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.653', 'seconds']
Parameter learned model CLL:-0.119142 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.391, 2, 60], 'true,false,true': [8.43e-08, 107, 0], 'true,false,false,true': [0.964, 13, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.964, 1, 13], 'false,true,false': [0.0, 0, 0], 'false,false': [4.93e-09, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.106, 0, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.998, 103, 14], 'false,true,false,false': [5.27e-09, 7, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [2.374, 21, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.355, 0, 40], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.119, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [2.659, 102, 11], 'false,false,false,false': [2.273, 38, 9]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.783, 2, 56], 'true,false': [0.127, 113, 0], 'false,true,true': [0.275, 1, 11], 'false,true,false': [0.003, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.772, 11, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.955, 4, 41], 'true,false': [0.05, 0, 3], 'false,true,true': [0.007, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.057, 0, 9], 'false,false,true,false': [1.011, 110, 2], 'false,false,false': [0.291, 47, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.806, 106, 53], 'false,true': [0.051, 0, 8], 'false,false,true': [0.373, 0, 14], 'false,false,false,true': [0.111, 25, 0], 'false,false,false,false': [0.178, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.856, 3, 60], 'true,false': [1.638, 137, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.519, 6, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.029, 0, 46], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.561, 77, 10], 'false,false,true,false': [1.065, 31, 4], 'false,false,false,true': [1.322, 36, 6], 'false,false,false,false': [1.291, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.246, 3, 44], 'false,true,true,true': [0.656, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.064, 107, 0], 'false,false,true,true': [1.039, 1, 5], 'false,false,true,false': [0.002, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.23, 8, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.263, 1, 53], 'true,true,false': [0.014, 0, 7], 'true,false,true': [0.056, 114, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.464, 7, 2], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.531, 26, 12]}]
{'': [0.22222222222222243, 0.2137188208616775], 'true': [0.031217481789801747, 0.015868886576482808], 'false': [0.06632653061224467, 2.3790493384824782e-17], 'false,true': [0.06632653061224467, nan], 'true,false': [6.640586315514955e-17, 0.10380622837370246], 'true,false,false': [0.06632653061224494, 0.22222222222222224]}
{'': [0.00023960737084091808, 0.09948502169416272], 'false': [0.07300544226765074, 0.14972937661953267], 'false,false': [0.05246913580246913, 0.17543523588409135], 'false,false,false': [0.24999999999999994, 0.1707915161743015], 'false,true': [nan, 0.07300544226765074], 'false,true,false': [0.07680192653939287, 3.96508223080413e-18], 'false,false,true': [nan, 0.05246913580246913]}
{'': [0.005676970840886183, 0.09317726272834112], 'false': [nan, 0.09317726272834115], 'false,false': [-1.2111523905001707e-16, 0.07748541382677729], 'false,false,false': [0.06254982360606003, 0.10991967810054679], 'true': [0.00359709085789834, 0.007197872911870166], 'true,false': [0.007088274518997184, 0.0], 'true,true': [0.0031493279854829304, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.09533632593157729, 0.12103031756157087], 'false': [0.09170731897890921, 0.1652057198690495], 'false,false': [nan, 0.1652057198690495], 'false,false,false': [nan, 0.1652057198690495], 'true': [0.05484218071810585, 0.00014344142409127814], 'false,true': [0.07577484998276318, 8.605007943816023e-06]}
{'': [0.08189406543691187, 0.060896848955148956], 'true': [0.08496475783211303, 0.0008242586402951538], 'false': [4.2966104565939585e-06, 0.05752621621713958], 'false,false': [0.044773099352922965, 0.0844116605570772], 'false,false,true': [0.0003660389500210748, 0.009120187818712334], 'false,true': [4.2966104565939585e-06, nan]}
{'': [0.049512126528778164, 0.08301678219205595], 'false': [0.0003261881609444295, 0.08694197674132374], 'false,false': [0.009929796277996696, 0.0009039938983682776], 'true': [nan, 0.04951212652877815], 'true,false': [nan, 0.049512126528778164], 'false,false,false': [0.0004956759092874652, 0.0011773856377636403]}
{'': [0.05438641757089901, 0.022451660518185906], 'true': [0.054696700604559466, 0.018368940673084377], 'false': [nan, 0.022451660518185906], 'false,false': [nan, 0.022451660518185906], 'false,false,false': [nan, 0.022451660518185906]}
{'': [1.826132812268083e-05, 0.04174445987311978], 'false': [nan, 0.041744459873119776], 'false,false': [0.02925243247471883, 0.06574299262330399], 'false,false,false': [0.04162666045054715, 0.09804855632770627], 'false,false,true': [0.02799135550059132, 0.03238709375525974], 'true': [1.8613642278648797e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.060281757857967085, 0.03820022932010774], 'false': [0.022385494931621376, 0.0919453390390354], 'false,false': [0.07673053932630478, 0.10083966770804785], 'false,false,false': [nan, 0.10083966770804785], 'false,false,true': [0.18004024394732498, 3.473583831357467e-07], 'false,true': [0.022668851155511118, 3.848003385165837e-05], 'false,true,true': [0.022668851155511118, nan]}
{'': [0.024292038364641923, 0.06081071346806784], 'false': [0.0, 0.061682173018796436], 'false,false': [nan, 0.061682173018796436], 'true': [0.02648412935031712, 0.002006319406040711], 'true,true': [0.02955190299949542, 2.84280040840099e-05], 'true,false': [2.702655711912878e-05, 0.011855331343908088], 'true,false,false': [-1.1564823173178713e-18, 0.023957546257155616]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.656
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, G) )
%   | | | then return 0.7438632208137973;  // std dev = 1.882, 35.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6865921211245414;  // std dev = 0.214, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else return 0.7336899220885287;  // std dev = 0.106, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.016269451106476367;  // std dev = 2.528, 77.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=10 */
%   | | | else return -0.016422954562024174;  // std dev = 1.577, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.08320549123154841;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13922792860841146;  // std dev = 0.083, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0665821911850963;  // std dev = 1.661, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.17474910950134118;  // std dev = 1.937, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6073159658171006;  // std dev = 0.055, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(E, A) )
%   | | then return 0.7635343370905558;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6828936553330518;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3948675972469636;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5518531829959218;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7227530330225744;  // std dev = 3.77e-05, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12329669100772372;  // std dev = 0.077, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07122309613015425;  // std dev = 1.615, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.20111755349670601;  // std dev = 1.685, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.4377653145308191;  // std dev = 0.079, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2551616360269446;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.6179647495691429;  // std dev = 0.053, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.11741549443562375;  // std dev = 0.163, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.42035093439535015;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5727297292358395;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1094961084923665;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.2561345766102431;  // std dev = 0.822, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1662788032564839;  // std dev = 0.393, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.3053213298821267;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.006380271293960053;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4713495344412384;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4627906520483804;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33795447358030056;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.45246257579747806;  // std dev = 0.199, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09403387917198774;  // std dev = 0.876, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06025410139981634;  // std dev = 0.699, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return 0.17594226136534633;  // std dev = 1.541, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.28898489911846836;  // std dev = 0.166, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return -0.0915979282542264;  // std dev = 0.009, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.27402483955846735;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.04857185727004982;  // std dev = 0.143, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2679877837802269;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.4658660634488549;  // std dev = 0.125, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5345927204349488;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13725632515851732;  // std dev = 0.191, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1310751688194975;  // std dev = 0.286, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21667455208617403;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.11030126000246536;  // std dev = 0.946, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.016544071963335915;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23504705738224785;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07729146618928089;  // std dev = 0.048, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   | | else return 0.0018760384112691403;  // std dev = 0.166, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3635159431813381;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10922391231067276;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.0829511454477007;  // std dev = 0.305, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), tweets(F, E) )
%   | | | then return 0.16450550541568587;  // std dev = 0.981, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.1763307611796403;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.06520494914814187;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.247928004804163;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return 0.28378343336304557;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.02800321145306242;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.06074247634080293;  // std dev = 0.090, 141.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.022461755574230843;  // std dev = 0.901, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.07988581008655099;  // std dev = 1.088, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.1373286552201949;  // std dev = 0.978, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.11286680287813748;  // std dev = 0.724, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22833158554125565;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.24762684661505197;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.047948594452870086;  // std dev = 0.147, 136.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=19 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.28040665991636027;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09854111734910333;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10525634049495797;  // std dev = 0.625, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.004271921704828214;  // std dev = 1.082, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13287538345802202;  // std dev = 1.354, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.22753021080922792;  // std dev = 0.395, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.15508074220305237;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06975991801395101;  // std dev = 0.033, 158.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19184981223816167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.07312431028069512;  // std dev = 0.869, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.07820711308973499;  // std dev = 0.366, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08365681550851363;  // std dev = 0.618, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.028197126129355803;  // std dev = 1.125, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.155', 'seconds']
Refined model CLL: -0.114913


******************************************
Best model found
******************************************
Results 

CLL : -0.12473 

AUC ROC : 0.994345 

AUC PR : 0.357463 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 6.656 

Total Inference Time : 11.919249773025513 

Total revision time: 28.096953712463378
Best scored revision CLL: -0.114913


Results 

CLL : -0.12473 

AUC ROC : 0.994345 

AUC PR : 0.357463 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 29.680594526290893 

Total Inference Time : 11.919249773025513 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.623
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925352;  // std dev = 1.953, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.715195327836793;  // std dev = 0.999, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.029346121441260475;  // std dev = 3.414, 160.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=18 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08867514270393072;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7311911912464263;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12202793451766741;  // std dev = 2.605, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5327814532711058;  // std dev = 1.760, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | else return 0.7345260640529845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7927071596325812;  // std dev = 0.118, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5669660767782165;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5678703225908847;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5678703225908847;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04584237106969391;  // std dev = 3.023, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | | | else return 0.023669612455915704;  // std dev = 2.428, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4277384607960042;  // std dev = 2.604, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   | else return -0.12062039906456927;  // std dev = 0.105, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5200577070732846;  // std dev = 0.123, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.0999568331483934;  // std dev = 0.112, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09753204292368974;  // std dev = 1.938, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31128284584839316;  // std dev = 1.604, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return 0.18299932843596228;  // std dev = 0.962, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.332146461118749;  // std dev = 0.126, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6450487882318737;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09502176469223697;  // std dev = 1.256, 161.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=3 */
%   | | else return 8.895348321882795E-5;  // std dev = 0.280, 66.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026988713686296448;  // std dev = 3.328, 220.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26663916815167216;  // std dev = 0.115, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5034030416827688;  // std dev = 1.226, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12431080030185619;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.12730157251874685;  // std dev = 0.138, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28885525918219374;  // std dev = 1.806, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else return -0.07538943777004145;  // std dev = 1.869, 198.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038377454034663055;  // std dev = 0.608, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1608120392545129;  // std dev = 1.695, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2785981272055563;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04087538111532718;  // std dev = 1.673, 123.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=13 */
%   | | | else return -0.02864909351867032;  // std dev = 1.194, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.004865480024063189;  // std dev = 1.282, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | | else return 0.1776903272729176;  // std dev = 1.361, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17857988689876886;  // std dev = 0.177, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2155964201989262;  // std dev = 1.698, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09374249855539542;  // std dev = 0.098, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.41191400025296576;  // std dev = 0.319, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.092207496480763;  // std dev = 0.000526, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15808017124144955;  // std dev = 1.286, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17084378007215167;  // std dev = 1.899, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | else return 0.15170447992016328;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08717619753470579;  // std dev = 0.089, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09050297166101504;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0315320479231398;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15195583559498457;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020629415359986438;  // std dev = 1.699, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.693', 'seconds']
Parameter learned model CLL:-0.117114 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.953, 4, 82], 'true,false,true': [0.0, 154, 0], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.97, 1, 16], 'false,true,false': [0.0, 0, 0], 'false,false': [5.89e-09, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.999, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.414, 142, 18], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [1.49e-08, 0, 3], 'false,false,false,false': [2.605, 32, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.76, 3, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.118, 0, 2], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.023, 135, 14], 'false,false,false,false': [2.428, 44, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.604, 7, 77], 'true,false': [0.105, 144, 0], 'false,true,true': [0.123, 0, 14], 'false,true,false': [0.112, 22, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.938, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.604, 3, 56], 'true,false': [0.962, 1, 4], 'false,true,true': [0.126, 0, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.047, 0, 11], 'false,false,true,false': [1.256, 158, 3], 'false,false,false': [0.28, 56, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.328, 149, 71], 'false,true': [0.115, 0, 12], 'false,false,true': [1.226, 1, 17], 'false,false,false,true': [0.122, 31, 0], 'false,false,false,false': [0.138, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.806, 3, 83], 'true,false': [1.869, 188, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.608, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.695, 3, 63], 'true,false,true': [0.032, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.673, 110, 13], 'false,false,true,false': [1.194, 30, 5], 'false,false,false,true': [1.282, 36, 9], 'false,false,false,false': [1.361, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.177, 2, 60], 'false,true,true,true': [1.698, 2, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.098, 146, 0], 'false,false,true,true': [0.319, 0, 6], 'false,false,true,false': [0.000526, 19, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.286, 8, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.899, 3, 74], 'true,true,false': [0.014, 0, 8], 'true,false,true': [0.089, 137, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.486, 12, 2], 'false,true': [0.064, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.699, 33, 13]}]
{'': [0.22045898437500067, 0.21301775147928942], 'true': [0.044348296376419516, 0.011626297577854505], 'false': [0.055363321799307655, 3.489272363107635e-17], 'false,true': [0.055363321799307655, nan], 'true,false': [-1.2688263138573217e-16, 0.10937500000000004], 'true,false,false': [0.07100591715976336, 0.22222222222222224]}
{'': [0.015132667205559076, 0.09452787729115404], 'false': [0.07167927858555793, 0.13879510248874596], 'false,false': [0.04338842975206609, 0.16307220996755287], 'false,false,false': [7.401486830834377e-17, 0.15075119854778274], 'false,true': [nan, 0.07167927858555793], 'false,true,false': [0.0728532971145032, 0.0], 'false,false,true': [nan, 0.04338842975206609]}
{'': [0.05204499465553716, 0.09352616567579579], 'false': [nan, 0.09352616567579575], 'false,false': [-1.6653345369377348e-16, 0.07501355706908883], 'false,false,false': [0.06134580983219027, 0.10917983655420962], 'true': [0.05407696425426349, 0.014994529600195872], 'true,true': [0.05432394347746794, 0.0], 'true,false': [0.006910902107532868, 3.700743415417188e-17], 'false,false,true': [-1.9737298215558337e-16, -1.2688263138573217e-16]}
{'': [0.09975091899435683, 0.11913415806475117], 'false': [0.10399082028550104, 0.13908992104919538], 'false,false': [nan, 0.13908992104919538], 'false,false,false': [nan, 0.13908992104919538], 'false,true': [0.015132478502375677, 0.012623035744808693], 'true': [0.08070646598058571, 7.691618327890226e-05]}
{'': [0.05583068566177725, 0.05723151255657583], 'false': [0.0009923964153116388, 0.052546983656024546], 'true': [0.04359853374687968, 0.18499909404596523], 'false,false': [0.04197822662666272, 0.07843991444973676], 'false,false,true': [0.00020451778186474974, 0.009804722490467762], 'false,true': [0.0009923964153116388, nan]}
{'': [0.05035422710744435, 0.08064655506316476], 'false': [0.001093359109343069, 0.08341493696554288], 'false,false': [0.08347648549395364, 0.0005002070617684703], 'true': [nan, 0.05035422710744426], 'true,false': [nan, 0.05035422710744435], 'false,false,false': [0.0004774581854027743, 0.0005151891918610705]}
{'': [0.05179332035938887, 0.023073168666705526], 'true': [0.037918292797900044, 0.017643857565953974], 'false': [nan, 0.023073168666705526], 'false,false': [nan, 0.023073168666705526], 'false,false,false': [nan, 0.023073168666705526]}
{'': [0.04265371458771692, 0.03838484525828272], 'true': [0.04352305400407606, 0.000499997289371612], 'false': [nan, 0.03838484525828281], 'false,false': [0.02675376413802629, 0.06303511488565727], 'false,false,false': [0.03651755664235375, 0.10903997358941403], 'false,false,true': [0.022750818198757957, 0.040704890884336604], 'true,false': [0.000499997289371612, nan]}
{'': [0.031216893258146534, 0.04067801464699887], 'false': [0.02975306490954686, 0.07680267712436993], 'false,false': [0.050419763990346034, 0.11032538382571824], 'false,false,false': [nan, 0.11032538382571824], 'false,false,true': [0.01693705637373703, 1.457354407912404e-08], 'false,true': [0.09938267682274694, 6.523165391529375e-05], 'false,true,true': [0.09938267682274694, nan]}
{'': [0.03022533589348535, 0.05998769197720997], 'false': [0.0013805908768244103, 0.06275397818298488], 'false,false': [nan, 0.06275397818298488], 'true': [0.042457504886388615, 0.0017758981124943048], 'true,true': [0.04683161518206593, 2.4856979980655836e-05], 'true,false': [5.7573013476020924e-05, 0.01110290443991801], 'true,false,false': [-4.625929269271485e-18, 0.01687969766477591]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 24.959
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8181489350995121;  // std dev = 1.386, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7082159146112281;  // std dev = 0.135, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else return 0.7310194963399744;  // std dev = 0.133, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.036592193166144614;  // std dev = 2.916, 125.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=13 */
%   | | | else return -0.019851923693894366;  // std dev = 1.807, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.04197357824080592;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14527667923037985;  // std dev = 2.524, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5700599532682734;  // std dev = 0.914, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.40394016129833776;  // std dev = 1.198, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.7477603645844495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.69102273788918;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5542732123492078;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1059843844041563;  // std dev = 1.188, 118.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=2 */
%   | | | else return 0.02308608609809795;  // std dev = 2.319, 52.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04671092710084793;  // std dev = 1.634, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.12788093647400933;  // std dev = 1.951, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.35326096984784794;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.4284547402100033;  // std dev = 0.171, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6002463839581581;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7034920001711897;  // std dev = 0.114, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11834441320387622;  // std dev = 0.183, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4528302553986938;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3194444517146071;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.053318362112054776;  // std dev = 1.394, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0.018858453170242498;  // std dev = 1.947, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3471399793586357;  // std dev = 0.150, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1975761692723174;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1998640861642069;  // std dev = 0.853, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4036739419746836;  // std dev = 0.271, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then return 0.15258911037692802;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.31559216288351477;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return -0.04693704668381765;  // std dev = 0.187, 153.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=14 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.061954397798419235;  // std dev = 1.413, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | | else return 0.17974246828173226;  // std dev = 1.664, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.21074244450328178;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.27265847677065547;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.45245242702669014;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.501976745625273;  // std dev = 0.435, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09802622954873658;  // std dev = 0.048, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.011996675021494737;  // std dev = 0.248, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2641730755146932;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5115809326638113;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13641894663411636;  // std dev = 0.035, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | | then return 0.2224476629987829;  // std dev = 0.080, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.3162281726021255;  // std dev = 0.985, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.0896015759327087;  // std dev = 0.090, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( tweets(G, C), recursion_accounttype(G, B) )
%   | | then return 0.32799021773260645;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11559792159223861;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.2581284454438283;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5031581350278762;  // std dev = 0.599, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11187517988788372;  // std dev = 0.101, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.19776143106319516;  // std dev = 0.326, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18572441415484592;  // std dev = 0.096, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.046631369434848455;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.23408970254186207;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.288213427653901;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.12621211343109429;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(J, H), follows(J, A) )
%   | | | then return -0.0703085629244432;  // std dev = 0.677, 110.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=2 */
%   | | | else return -0.019042210303291472;  // std dev = 1.050, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.024181250567934402;  // std dev = 1.205, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return -0.00840482146213572;  // std dev = 1.688, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1407805853489181;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.043929890001937755;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15882807532647789;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.180585175802344;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then return -0.03440969894309608;  // std dev = 0.152, 189.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=27 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31472140953802685;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10495146469094492;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2118088406615314;  // std dev = 0.432, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09473366954198359;  // std dev = 1.053, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10935205291108847;  // std dev = 1.403, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.2416842041364574;  // std dev = 1.565, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.16610430968319478;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07642974017100208;  // std dev = 0.035, 167.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.09729295407058665;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.10933286648003955;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09510258263197337;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03456626198395354;  // std dev = 0.556, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.014488725566024999;  // std dev = 1.129, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2', 'minutes', 'and', '32.129', 'seconds']
Refined model CLL: -0.116913


******************************************
Best model found
******************************************
Results 

CLL : -0.120611 

AUC ROC : 0.993503 

AUC PR : 0.302539 

Precision : 0.340757 

Recall : 0.980769 

F1 : 0.505785 

Total Learning Time : 24.959 

Total Inference Time : 99.34104704856873 

Total revision time: 136.45895598602294
Best scored revision CLL: -0.116913


Results 

CLL : -0.120611 

AUC ROC : 0.993503 

AUC PR : 0.302539 

Precision : 0.340757 

Recall : 0.980769 

F1 : 0.505785 

Total Learning Time : 138.04259679985046 

Total Inference Time : 99.34104704856873 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.187
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11746082099804868;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7145393501794853;  // std dev = 1.002, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03888129471497429;  // std dev = 3.795, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0936622267891566;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15019995645109008;  // std dev = 2.861, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5363747050619572;  // std dev = 1.766, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7328311071786354;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8042672326195843;  // std dev = 0.110, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6040520610480189;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5635577138276284;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5635577138276284;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03807328967475314;  // std dev = 3.641, 204.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=21 */
%   | | | else return 0.006745963083018878;  // std dev = 2.515, 68.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.46835113590400923;  // std dev = 2.296, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | else return -0.1197188764788114;  // std dev = 0.117, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4502802756030696;  // std dev = 0.221, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10303737959075122;  // std dev = 0.100, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09769759632638784;  // std dev = 2.031, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31487882551894963;  // std dev = 1.518, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.19997415924298753;  // std dev = 0.962, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.323451770866759;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5680895208254351;  // std dev = 1.012, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09057722368900022;  // std dev = 1.381, 160.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=4 */
%   | | else return -0.012831554300794875;  // std dev = 0.262, 83.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03502363448899822;  // std dev = 3.527, 273.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2599615051714055;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4880934234404683;  // std dev = 1.327, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12072838135589088;  // std dev = 0.109, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11825535390231523;  // std dev = 0.158, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26693924101880284;  // std dev = 2.505, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07901345419581016;  // std dev = 1.918, 257.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02141453438698699;  // std dev = 0.657, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20196691802804945;  // std dev = 0.069, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.28408989883457547;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.036435780425255;  // std dev = 1.940, 149.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=17 */
%   | | | else return -0.061904740701941546;  // std dev = 1.324, 60.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0023433585211458108;  // std dev = 1.437, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.09241476472459385;  // std dev = 1.624, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13856938562937124;  // std dev = 0.228, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3083039764923772;  // std dev = 0.869, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0921683953731495;  // std dev = 0.081, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38009106828889944;  // std dev = 0.349, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09650716235418168;  // std dev = 0.000537, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08778539289487361;  // std dev = 1.508, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17028925679388665;  // std dev = 2.023, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.13240436022544255;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08468581261783371;  // std dev = 0.051, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08561332331278743;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.030268562153144656;  // std dev = 0.507, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.16597203065710353;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02836858591595769;  // std dev = 1.863, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.977', 'seconds']
Parameter learned model CLL:-0.113998 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false,true': [0.988, 40, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.002, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.795, 189, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.861, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.766, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.11, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.641, 183, 21], 'false,false,false,false': [2.515, 57, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.296, 4, 97], 'true,false': [0.117, 182, 0], 'false,true,true': [0.221, 1, 19], 'false,true,false': [0.1, 28, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.031, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.518, 2, 73], 'true,false': [0.962, 1, 4], 'false,true,true': [0.129, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.012, 1, 17], 'false,false,true,false': [1.381, 156, 4], 'false,false,false': [0.262, 72, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.527, 182, 91], 'false,true': [0.124, 0, 13], 'false,false,true': [1.327, 1, 22], 'false,false,false,true': [0.109, 28, 0], 'false,false,false,false': [0.158, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.505, 5, 107], 'true,false': [1.918, 246, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.657, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.069, 0, 80], 'true,false,true': [0.028, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.94, 132, 17], 'false,false,true,false': [1.324, 55, 5], 'false,false,false,true': [1.437, 45, 13], 'false,false,false,false': [1.624, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.228, 5, 77], 'false,true,true,true': [0.869, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 209, 0], 'false,false,true,true': [0.349, 0, 9], 'false,false,true,false': [0.000537, 29, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.508, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.023, 3, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.051, 170, 0], 'true,false,false,true': [1.05e-08, 21, 0], 'true,false,false,false': [0.507, 12, 2], 'false,true': [0.093, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.863, 42, 17]}]
{'': [0.21799511825604104, 0.22574576726686382], 'false': [0.0, 4.163336342344337e-17], 'true': [0.027500889996442155, 0.008967875350627387], 'true,false': [-1.8924256101565169e-16, 0.04246913580246911], 'true,false,false': [0.02379535990481863, 0.18750000000000003], 'false,true': [0.0, nan]}
{'': [0.01210713320024059, 0.09165009273360708], 'false': [0.06740798692085834, 0.14000486499155737], 'false,false': [0.03329369797859693, 0.16856184412625752], 'false,false,false': [0.16000000000000006, 0.15742344177891843], 'false,true': [nan, 0.06740798692085834], 'false,true,false': [0.06826134928290055, 2.3129646346357427e-18], 'false,false,true': [nan, 0.03329369797859693]}
{'': [0.04147409126543722, 0.087410038391212], 'false': [nan, 0.08741003839121192], 'false,false': [0.0, 0.07236710189610596], 'false,false,false': [0.0649871883606462, 0.09300026843916187], 'true': [0.04264937279701129, 0.010920080337524304], 'true,true': [0.04271205513279368, 0.0], 'true,false': [0.006036164394285004, 0.0], 'false,false,true': [4.9343245538895844e-17, 5.551115123125783e-17]}
{'': [0.09805232791156392, 0.11431418886423789], 'false': [0.09984057267842027, 0.1375633837484348], 'false,false': [nan, 0.1375633837484348], 'false,false,false': [nan, 0.1375633837484348], 'false,true': [0.04904839996344403, 0.009906217493443486], 'true': [0.05220022630183057, 7.560380728442164e-05]}
{'': [0.04115562868747784, 0.06321601439844182], 'false': [0.0009859673423001974, 0.06003798684037552], 'false,false': [0.05589395786711435, 0.06884056294012354], 'false,false,true': [0.056864457861161156, 0.011913125797972351], 'true': [0.030736345772240128, 0.18506698272980143], 'false,true': [0.0009859673423001974, nan]}
{'': [0.045574533049023834, 0.08060176677086243], 'false': [0.001174735770589822, 0.08458089358690919], 'false,false': [0.07654767026554503, 0.0004941640905163602], 'true': [nan, 0.04557453304902387], 'true,false': [nan, 0.045574533049023834], 'false,false,false': [0.0004244982588015014, 0.000533383883010709]}
{'': [0.05227765802424468, 0.02058005350914776], 'true': [0.05604924500101288, 0.014307380659879783], 'false': [nan, 0.02058005350914776], 'false,false': [nan, 0.02058005350914776], 'false,false,false': [nan, 0.02058005350914776]}
{'': [0.0002269735402477289, 0.036671554266342374], 'false': [nan, 0.036671554266342055], 'false,false': [0.02653394372689139, 0.05836143783860694], 'false,false,false': [0.03559423644376383, 0.10551211885178688], 'false,false,true': [0.02526530250558217, 0.029221955282780987], 'true': [5.866179139377703e-05, 0.0003797518099663971], 'true,false': [0.0003797518099663971, nan]}
{'': [0.05183597613569957, 0.03169681693024042], 'false': [0.021629538695291665, 0.06606674509837011], 'false,false': [0.04426019562654193, 0.09891793098630373], 'false,false,false': [nan, 0.09891793098630373], 'false,false,true': [0.013528182861143398, 9.959358824230862e-09], 'false,true': [0.023610524939213354, 3.120963038055731e-05], 'false,true,true': [0.023610524939213354, nan]}
{'': [0.02798894556874968, 0.05633951697508083], 'false': [0.0021737275575998867, 0.05880957020190693], 'false,false': [nan, 0.05880957020190693], 'true': [0.038721136244572386, 0.0014536489192926477], 'true,true': [0.042190665960180326, 1.3912743936793524e-05], 'true,false': [1.502515584034182e-05, 0.008068178169956308], 'true,false,false': [5.28677630773884e-18, 0.018332619872200046]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.836
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.8409075557891676;  // std dev = 0.991, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048774;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then return 0.6902537525388757;  // std dev = 0.183, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.47207339846183816;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7270803340380868;  // std dev = 0.050, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(G, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7219495895927484;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.05550782952375689;  // std dev = 3.140, 179.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=15 */
%   | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.10457410236405579;  // std dev = 0.173, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1265484643236945;  // std dev = 2.918, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5250267479306666;  // std dev = 0.196, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return 0.6350919126711096;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3928754906734622;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5734894009223911;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5807570294848579;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6680389889792548;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12000927456271723;  // std dev = 0.081, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06268073853098988;  // std dev = 2.175, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.13079864796233143;  // std dev = 1.955, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.4243114916475956;  // std dev = 1.057, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.3348136579518858;  // std dev = 0.969, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5513887838274006;  // std dev = 0.097, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.11357006396671242;  // std dev = 0.346, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4266052697687355;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10742015264512793;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.011741839316146023;  // std dev = 1.299, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19546137192021215;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.1348110939909149;  // std dev = 1.524, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3149311493196426;  // std dev = 0.989, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.3418527324390326;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3596854101299542;  // std dev = 0.128, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4191309739943831;  // std dev = 0.325, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31885354305598534;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4726575313539593;  // std dev = 0.216, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09861854595950649;  // std dev = 0.080, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05842639089629462;  // std dev = 1.740, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.029727293474959882;  // std dev = 1.967, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25295054237492465;  // std dev = 0.131, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.17508883998587052;  // std dev = 0.964, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.2784524681711283;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(A, H) )
%   | | | then return -0.050023485608052295;  // std dev = 1.622, 144.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=15 */
%   | | | else return -0.08870448494349902;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.047275982115874894;  // std dev = 0.144, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.25797276618839693;  // std dev = 0.156, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.516443625686933;  // std dev = 0.133, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.13367288004124353;  // std dev = 0.037, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E) )
%   | | | then return 0.2224358171923766;  // std dev = 0.009, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.13041964925344585;  // std dev = 0.969, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.026578566750850907;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1984075307971504;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.22854006126054832;  // std dev = 0.114, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(G, A) )
%   | then return -0.05188194806311617;  // std dev = 0.148, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.16871821097519582;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.001001086102344883;  // std dev = 1.431, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.029600376006855587;  // std dev = 1.539, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.17056962536305476;  // std dev = 0.993, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.20737777004361338;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19423021726589748;  // std dev = 0.168, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2820276935709663;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.24448676486836338;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3831685321789487;  // std dev = 0.211, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08133210789901017;  // std dev = 0.055, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0018380914819306501;  // std dev = 1.512, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.050258722471319274;  // std dev = 1.485, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16436839579218643;  // std dev = 0.101, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return -0.14683290211511293;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16509558556929996;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20341219237672933;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(H, A) )
%   | then return -0.03414690893470924;  // std dev = 0.108, 236.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=32 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.399046834645652;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1274437326618693;  // std dev = 0.018, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.00543291400224713;  // std dev = 0.982, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.036580254910934855;  // std dev = 1.282, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13271560302541446;  // std dev = 1.010, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.2678810214531117;  // std dev = 0.338, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.15089185772518154;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0695425423866235;  // std dev = 0.035, 220.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12904135087835492;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30824319294071545;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11516436774109992;  // std dev = 0.019, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.028237292446347696;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.006220861739191606;  // std dev = 1.245, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.402', 'seconds']
Refined model CLL: -0.110641


******************************************
Best model found
******************************************
Results 

CLL : -0.115556 

AUC ROC : 0.993756 

AUC PR : 0.330929 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 9.836 

Total Inference Time : 16.43594765663147 

Total revision time: 41.477943180084225
Best scored revision CLL: -0.110641


Results 

CLL : -0.115556 

AUC ROC : 0.993756 

AUC PR : 0.330929 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 43.06158399391174 

Total Inference Time : 16.43594765663147 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.762
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6882234122109547;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5630691875243453;  // std dev = 1.97e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 5.74e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3875367740153748;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.10159632948783628;  // std dev = 2.69e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.22325105972966058;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.27991793348171523;  // std dev = 1.302, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2778727698077506;  // std dev = 0.063, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.08e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2257017033715534;  // std dev = 0.055, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.128704418762091;  // std dev = 1.358, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.0813015396230124;  // std dev = 0.285, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15866006824097842;  // std dev = 0.008, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.859', 'seconds']
Parameter learned model CLL:-0.091221 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.06e-07, 0, 31], 'false,true': [5.77e-08, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 46, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.97e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [5.74e-09, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.982, 1, 27], 'true,false': [2.69e-08, 47, 0], 'false,true,true': [0.4, 1, 4], 'false,true,false': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.302, 2, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 48, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.063, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.055, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 58, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.358, 2, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.285, 3, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.97e-08, 58, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.008, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 48, 0]}]
{'': [1.375244004696968e-15, 6.055761952500853e-17], 'false': [6.055761952500853e-17, nan]}
{'': [0.0302734374999995, -3.137586808723268e-17], 'false': [-3.137586808723268e-17, nan]}
{'': [4.0111283470328235e-16, 3.198947698072485e-17], 'false': [nan, 3.198947698072485e-17]}
{'': [0.0688312886193778, 0.09889070073093156], 'false': [0.09889070073093156, nan], 'false,true': [0.15999999999999998, -2.3129646346357427e-18], 'true': [0.03443877551020418, 1.5354148212901102e-17]}
{'': [0.05140388735058401, -1.914177628664063e-18], 'true': [0.05140388735058401, nan], 'false': [nan, -1.914177628664063e-18], 'false,false': [-3.469446951953614e-18, 0.0], 'false,false,true': [nan, -3.469446951953614e-18]}
{'': [0.0001285915242925722, 5.28677630773884e-18], 'false': [nan, 5.28677630773884e-18], 'false,false': [nan, 5.28677630773884e-18]}
{'': [9.880895839907377e-05, 7.656710514656252e-18], 'false': [nan, 7.656710514656252e-18], 'false,false': [nan, 7.656710514656252e-18], 'false,false,false': [7.656710514656252e-18, nan]}
{'': [0.05591815501368813, -4.50090415388577e-18], 'true': [0.05591815501368813, nan], 'false': [0.0, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.08101010836732667, 1.1428766429964846e-17], 'false': [nan, 1.1428766429964846e-17], 'false,false': [6.699621700324221e-18, 6.938893903907229e-19], 'false,false,true': [nan, 6.699621700324221e-18]}
{'': [5.861868471166861e-05, -2.3129646346357427e-18], 'false': [nan, -2.3129646346357427e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 9.025
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7227447557564458;  // std dev = 0.060, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(E, A) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7263795819181035;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.561745415763739;  // std dev = 0.100, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.30080597697749945;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5538849352655648;  // std dev = 0.000778, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42499588338715344;  // std dev = 0.142, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3313470038743538;  // std dev = 0.910, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2452927130842441;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4156460034976731;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2169909273247891;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.01634240600854416;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3356906678544247;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3706597433271968;  // std dev = 0.158, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.27197486548116356;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2819495520185729;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.3041321928806141;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3359429691940592;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2491172850508313;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2512403894847663;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2726349484847584;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27800765065767086;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839679;  // std dev = 1.61e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2209162667469473;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24212901432967174;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2581489818435084;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then return 0.025900355617371716;  // std dev = 0.861, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20865978374656624;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22131101331294772;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( tweets(A, K) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.074023082966963;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.21856793317607978;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, H) )
%   | | | then return 0.20098952801762263;  // std dev = 0.000990, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17384627366628924;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20500411915948535;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.17461866470422005;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14991520987233609;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19340131377886563;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -6.174220271501496E-4;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14911556869120993;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16096264117202616;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13179807930880932;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.16120854954642397;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.767', 'seconds']
Refined model CLL: -0.09099


******************************************
Best model found
******************************************
Results 

CLL : -0.091837 

AUC ROC : 0.99234 

AUC PR : 0.324372 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.025 

Total Inference Time : 2.4605979919433594 

Total revision time: 17.492200910568236
Best scored revision CLL: -0.09099


Results 

CLL : -0.091837 

AUC ROC : 0.99234 

AUC PR : 0.324372 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.52567654800415 

Total Inference Time : 2.4605979919433594 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.609
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6795833279484366;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.572857114237048;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.43e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3942521075925522;  // std dev = 1.388, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | else return -0.1015963294878363;  // std dev = 1.49e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.24879756213800672;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2680301900874363;  // std dev = 2.149, 67.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23907644440862877;  // std dev = 1.684, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.67e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20749355296809371;  // std dev = 1.399, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109155;  // std dev = 6.91e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15690229145090884;  // std dev = 1.699, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 7.45e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17900075935350343;  // std dev = 0.008, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.71e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1541959884774068;  // std dev = 0.007, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.898', 'seconds']
Parameter learned model CLL:-0.086163 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [7.3e-08, 114, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 115, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-09, 116, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.388, 2, 53], 'true,false': [1.49e-08, 105, 0], 'false,true,true': [0.386, 2, 9], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.149, 5, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.36e-08, 89, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.684, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 107, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.399, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.91e-08, 120, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.699, 3, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.45e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.008, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.71e-08, 98, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.007, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 133, 0]}]
{'': [0.030273437499999334, 4.674623261579606e-17], 'false': [4.674623261579606e-17, nan]}
{'': [0.044023668639051404, -5.792467954566034e-18], 'false': [-5.792467954566034e-18, nan]}
{'': [-5.730183352904034e-16, 7.082457226057034e-17], 'false': [nan, 7.082457226057034e-17]}
{'': [0.06750929278785678, 0.0853319495287856], 'false': [0.0853319495287856, nan], 'false,true': [0.14876033057851232, -4.625929269271485e-18], 'true': [0.03504132231404953, 2.1147105230955365e-18]}
{'': [0.06894624715918249, 3.900783600034334e-17], 'true': [0.06894624715918249, nan], 'false': [nan, 3.900783600034334e-17], 'false,false': [6.237208003512115e-18, -8.831319514063745e-18], 'false,false,true': [nan, 6.237208003512115e-18]}
{'': [0.043641404913934596, 3.112774835397635e-17], 'false': [nan, 3.112774835397635e-17], 'false,false': [nan, 3.112774835397635e-17]}
{'': [0.030601020183097495, 3.9782991715734776e-17], 'false': [nan, 3.9782991715734776e-17], 'false,false': [nan, 3.9782991715734776e-17], 'false,false,false': [3.9782991715734776e-17, nan]}
{'': [0.04440400646899856, -1.5735444443506155e-17], 'true': [0.04440400646899856, nan], 'false': [-6.7286243916676156e-18, 1.982541115402065e-18], 'false,false': [nan, 1.982541115402065e-18]}
{'': [6.048240617019574e-05, 2.7300566179307128e-17], 'false': [nan, 2.7300566179307128e-17], 'false,false': [2.2657612747452175e-17, -4.04768811061255e-18], 'false,false,true': [nan, 2.2657612747452175e-17]}
{'': [4.788284669933518e-05, -1.419082061550952e-17], 'false': [nan, -1.419082061550952e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 11.245
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7221676697595828;  // std dev = 0.080, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839105;  // std dev = 8.16e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5547897531471634;  // std dev = 0.001, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.35470103259345204;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.569852978827621;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5680045779203041;  // std dev = 0.113, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.11231637819360618;  // std dev = 9.19e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4202501011918022;  // std dev = 0.081, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.3292406196661982;  // std dev = 0.859, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.41816022711196105;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783621;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4377431693450097;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3217280818964573;  // std dev = 0.075, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.012277352391488328;  // std dev = 1.091, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3312412699039354;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.33334402201818275;  // std dev = 0.089, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926107;  // std dev = 1.83e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.25405813657967696;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2512637969155612;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.27651682393590504;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2506365630173682;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.3693020806930311;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2747116030708662;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.24986358174099582;  // std dev = 0.000599, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.28562788850912957;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0851847513883968;  // std dev = 5.43e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20897041574315503;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.20699298751681006;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return 0.22486852550943698;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20654892282361;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.055491385586309505;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21600339001537278;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21039095315627288;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.23105884885144767;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109155;  // std dev = 6.18e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17651883492581522;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.18394332539696287;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2938466541318475;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18171487344137893;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return 0.02127374844110778;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17430063313853475;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1826511884442362;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return -0.07324622576333707;  // std dev = 8.33e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.15336261305467647;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14907576180474974;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.16140198954723411;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15176753464133255;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2367427494051112;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1842030112150319;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.15181210020103672;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16575006169457884;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420265;  // std dev = 4.84e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1335169839547094;  // std dev = 0.000956, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1352606985086473;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.1725451804881063;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13446857181881341;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -7.423677576729539E-4;  // std dev = 0.341, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.13150146777497787;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13964978819461402;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.423', 'seconds']
Refined model CLL: -0.086449


******************************************
Best model found
******************************************
Results 

CLL : -0.092931 

AUC ROC : 0.99255 

AUC PR : 0.344001 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 11.245 

Total Inference Time : 3.9288411140441895 

Total revision time: 24.999631790161132
Best scored revision CLL: -0.086163


Results 

CLL : -0.092931 

AUC ROC : 0.99255 

AUC PR : 0.344001 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.033107427597045 

Total Inference Time : 3.9288411140441895 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.409
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6610094727077106;  // std dev = 2.374, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5513057642789071;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360633;  // std dev = 3.23e-09, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41040651265371997;  // std dev = 1.396, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.37290651265371905;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31872582244728603;  // std dev = 1.401, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926076;  // std dev = 6.32e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2723233449143191;  // std dev = 0.027, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18052422879014662;  // std dev = 1.961, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.60e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17120150958553423;  // std dev = 1.397, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 7.67e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15637276300463987;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.75e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.06842697784420265;  // std dev = 2.79e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12531330769180646;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.008', 'seconds']
Parameter learned model CLL:-0.087272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 186, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.374, 6, 93], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [3.23e-09, 165, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.396, 2, 78], 'true,false': [0.0, 145, 0], 'false,true,true': [0.242, 1, 15], 'false,true,false': [0.0, 40, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.401, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 127, 0], 'false,false,false': [0.0, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.027, 0, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 177, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.961, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 189, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.397, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [7.67e-08, 150, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 32, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.75e-08, 152, 0], 'false,false,false': [2.79e-09, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 191, 0]}]
{'': [0.010525124490720615, -2.1488187573390127e-16], 'false': [-2.1488187573390127e-16, nan]}
{'': [0.05693296602387401, -2.790089276544896e-17], 'false': [-2.790089276544896e-17, nan]}
{'': [0.02060941828254939, 1.0765799026668185e-17], 'false': [nan, 1.0765799026668185e-17]}
{'': [0.06873390933704614, 0.06269065248988046], 'true': [0.02437499999999957, -5.665965780845627e-17], 'false': [0.06269065248988046, nan], 'false,true': [0.05859375, -5.551115123125783e-18]}
{'': [0.0206750577600213, 3.895519384649672e-17], 'true': [0.0206750577600213, nan], 'false': [nan, 3.895519384649672e-17], 'false,false': [3.147088888701231e-17, -1.6401021954689813e-17], 'false,false,true': [nan, 3.147088888701231e-17]}
{'': [7.556107690844852e-06, 2.885325374732045e-17], 'false': [nan, 2.885325374732045e-17], 'false,false': [nan, 2.885325374732045e-17]}
{'': [0.039625300842011005, 3.054581866693552e-17], 'false': [nan, 3.054581866693552e-17], 'false,false': [nan, 3.054581866693552e-17], 'false,false,false': [3.054581866693552e-17, nan]}
{'': [0.020532318049110036, 6.161127774018726e-17], 'true': [0.020532318049110036, nan], 'false': [3.92278802034222e-17, -7.806255641895632e-18], 'false,false': [nan, -7.806255641895632e-18]}
{'': [0.010546699490218076, 2.7907245427736176e-17], 'false': [nan, 2.7907245427736176e-17], 'false,false': [2.9946805269494355e-17, 8.953411488912552e-18], 'false,false,true': [nan, 2.9946805269494355e-17]}
{'': [0.020643821789435343, -3.48761159568112e-18], 'false': [nan, -3.48761159568112e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.591
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), follows(F, E) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995121;  // std dev = 8.43e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.6610671313174518;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.7223845013533524;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.6127289348134403;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4738400459245516;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7268393841087946;  // std dev = 0.096, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5716948039807295;  // std dev = 0.159, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5571626282557016;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.31137204521076006;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5535467898589957;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360654;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4288638004338449;  // std dev = 0.184, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4277107774233025;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32977942247953107;  // std dev = 0.114, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return -0.0569422565707701;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.31435575970465335;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3279481011081208;  // std dev = 0.123, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926065;  // std dev = 8.02e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return -0.092691276189261;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2572260012302977;  // std dev = 0.032, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.1069467560190299;  // std dev = 1.268, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.2757376119560772;  // std dev = 0.109, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2491667692737035;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then return 0.17421570359437544;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.0830310724218024;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.08518475138839678;  // std dev = 4.17e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.08518475138839679;  // std dev = 5.27e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.08518475138839678;  // std dev = 7.45e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.210465091863159;  // std dev = 0.031, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.23554198719990455;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.30744240061024675;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23675145405461065;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J), recursion_accounttype(I, B) )
%   | | | then return 0.06359231436202613;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2096901847368702;  // std dev = 0.066, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.11390826198475794;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2342506401045063;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109148;  // std dev = 5.89e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1911855681291797;  // std dev = 0.163, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.09156263192401179;  // std dev = 0.964, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.1556645295611008;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.18872590694412147;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17309401703319824;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.20552035626678167;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19146646128501002;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.0732462257633368;  // std dev = 6.91e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.15210842315005363;  // std dev = 0.021, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.17074003992181705;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.21023040388700834;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18226917569125023;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.17974156030717914;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16551485002542218;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15121734003850512;  // std dev = 0.035, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17033890401928872;  // std dev = 0.056, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.06842697784420262;  // std dev = 5.43e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.018972405240019922;  // std dev = 1.335, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.13825814917004467;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.13959514120371772;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16933568885703484;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(A, J) )
%   | | | then return 0.19646124742862292;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15482630523307653;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1526509676384289;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1343483780464656;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.06419184008202626;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.974', 'seconds']
Refined model CLL: -0.086508


******************************************
Best model found
******************************************
Results 

CLL : -0.092339 

AUC ROC : 0.993335 

AUC PR : 0.40071 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.591 

Total Inference Time : 4.375604867935181 

Total revision time: 43.16688370704651
Best scored revision CLL: -0.086508


Results 

CLL : -0.092339 

AUC ROC : 0.993335 

AUC PR : 0.40071 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 43.20035934448242 

Total Inference Time : 4.375604867935181 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.381
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834526887855416;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7083432582197383;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5326806158951883;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3856733422313216;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43154490186434913;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3229688494483724;  // std dev = 1.401, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2547607605584548;  // std dev = 1.401, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17798794876060003;  // std dev = 2.353, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.14e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18600483333368864;  // std dev = 0.995, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.23e-07, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15856197255294324;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.41e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else return -0.06842697784420264;  // std dev = 2.08e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11442514563023501;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820262;  // std dev = 3.36e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.304', 'seconds']
Parameter learned model CLL:-0.087549 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 243, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.184, 5, 104], 'true,false': [0.0, 208, 0], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.0, 49, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.401, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 206, 0], 'false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.401, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.353, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 248, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.995, 1, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 205, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 197, 0], 'false,false,false': [2.08e-09, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [3.36e-09, 259, 0]}]
{'': [0.0230640461280963, -1.1189649382048822e-16], 'false': [-1.1189649382048822e-16, nan]}
{'': [0.015621063240112101, -6.858520615444982e-17], 'false': [-6.858520615444982e-17, nan]}
{'': [0.0302734375, -8.77213254024815e-17], 'false': [nan, -8.77213254024815e-17]}
{'': [0.06861791666792291, 0.0585076204823294], 'true': [0.043767359649861205, -8.967185968126265e-17], 'false': [0.0585076204823294, nan], 'false,true': [-4.4408920985006264e-17, -1.586032892321652e-17]}
{'': [0.015583502905452767, 4.1690007455312e-17], 'true': [0.015583502905452767, nan], 'false': [nan, 4.1690007455312e-17], 'false,false': [1.832406933847346e-17, -1.9927079929169476e-17], 'false,false,true': [nan, 1.832406933847346e-17]}
{'': [0.015586557083756005, 3.402982450958334e-17], 'false': [nan, 3.402982450958334e-17], 'false,false': [nan, 3.402982450958334e-17]}
{'': [0.04258528846531507, 1.522079953115134e-17], 'false': [nan, 1.522079953115134e-17], 'false,false': [nan, 1.522079953115134e-17], 'false,false,false': [1.522079953115134e-17, nan]}
{'': [0.007924596464350188, 6.29126380620922e-17], 'true': [0.007924596464350188, nan], 'false': [7.365382017025429e-17, -7.137148015447434e-18], 'false,false': [nan, -7.137148015447434e-18]}
{'': [0.007925205081968645, 1.1338447911065428e-17], 'false': [nan, 1.1338447911065428e-17], 'false,false': [2.0851904523416647e-17, 5.112869192352694e-18], 'false,false,true': [nan, 2.0851904523416647e-17]}
{'': [0.03030813761508775, 1.1145096000098096e-17], 'false': [nan, 1.1145096000098096e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 31.562
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.7331489350995122;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.7118768118892812;  // std dev = 0.999, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.5171817161626094;  // std dev = 0.916, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1459377468740664;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.636140078877621;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.12544463852839186;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5358200324363092;  // std dev = 0.988, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.5655557384203547;  // std dev = 0.120, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5876630959700505;  // std dev = 0.233, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5572529779229021;  // std dev = 0.015, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.28552217937722246;  // std dev = 0.740, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360686;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4379569652594156;  // std dev = 0.263, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.35123330851075646;  // std dev = 0.962, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.39897069250507394;  // std dev = 1.012, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4238841142960214;  // std dev = 0.031, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then return 0.3356751415475437;  // std dev = 0.276, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( tweets(A, F) )
%   | | then return 0.32509164044947086;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.275787954803152;  // std dev = 0.896, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1193255785162531;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.2599205589771378;  // std dev = 0.039, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.3878194592334747;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.26260436101564943;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.255849646572864;  // std dev = 0.033, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return 0.26770046377898554;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.28395981946786886;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1632557650300341;  // std dev = 1.181, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.2841956830047151;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.21106344199499072;  // std dev = 0.034, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.21831846922844844;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.23689554298614232;  // std dev = 0.137, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20410400384043867;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(I, J), tweets(A, K) )
%   | | | then return 0.22357681561369736;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.020147007726478056;  // std dev = 0.988, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.19685481644965658;  // std dev = 1.011, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.12196009286803319;  // std dev = 0.933, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.07877675473109144;  // std dev = 4.66e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.17838097994938457;  // std dev = 0.022, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.1838140381566701;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.21920123708934816;  // std dev = 0.151, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.19046636587992147;  // std dev = 0.089, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.18009861902512259;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18821343863323903;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.06309313164491835;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.12517675244832624;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.16057355521884814;  // std dev = 0.092, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.10209101117370147;  // std dev = 1.038, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.15404734645253837;  // std dev = 0.000916, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1831696183526351;  // std dev = 0.078, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1567627514493764;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.05298512509096282;  // std dev = 0.915, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420261;  // std dev = 4.66e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.06842697784420262;  // std dev = 2.11e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.10848732391344484;  // std dev = 0.986, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.1430816918250691;  // std dev = 0.138, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15379611820377068;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.06403854036462232;  // std dev = 1.544, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.13502382833329452;  // std dev = 0.000821, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.14104506496335334;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14886039644155938;  // std dev = 0.095, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.18591021468403945;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 1.32e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.695', 'seconds']
Refined model CLL: -0.085705


******************************************
Best model found
******************************************
Results 

CLL : -0.091904 

AUC ROC : 0.993216 

AUC PR : 0.397397 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.562 

Total Inference Time : 9.225032091140747 

Total revision time: 58.85438410568237
Best scored revision CLL: -0.085705


Results 

CLL : -0.091904 

AUC ROC : 0.993216 

AUC PR : 0.397397 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.887859743118284 

Total Inference Time : 9.225032091140747 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.04
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8036034805540551;  // std dev = 2.917, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7114815772027258;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5457507733519371;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936069;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41977363812401025;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4351582535086268;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3105046344889262;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.88e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2574975146604083;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16220400695475787;  // std dev = 3.067, 166.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 3.94e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17681240748471364;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 1.12e-07, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15047012168806448;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13655153989550228;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202597;  // std dev = 6.59e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.546', 'seconds']
Parameter learned model CLL:-0.087366 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.917, 9, 156], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 314, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 292, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 240, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.88e-08, 249, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 321, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [3.067, 10, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.94e-08, 300, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.12e-07, 269, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 254, 0], 'false,false,false': [2.28e-09, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.59e-09, 298, 0]}]
{'': [0.05157024793389019, -2.5376526277146434e-17], 'false': [-2.5376526277146434e-17, nan]}
{'': [0.018511925952298395, -8.768640449268753e-17], 'false': [-8.768640449268753e-17, nan]}
{'': [0.02437500000000341, -9.733462133700002e-17], 'false': [nan, -9.733462133700002e-17]}
{'': [0.06727251022787324, 0.06592126723619383], 'true': [0.015147928994084126, -7.401486830834377e-17], 'false': [0.06592126723619383, nan], 'false,true': [-2.854859206178974e-16, -1.0884539457109378e-17]}
{'': [0.024388511128413982, 9.143013143971877e-17], 'true': [0.024388511128413982, nan], 'false': [nan, 9.143013143971877e-17], 'false,false': [3.923679765743525e-17, -2.921639538487254e-17], 'false,false,true': [nan, 3.923679765743525e-17]}
{'': [0.012485754557345937, 3.735329802477162e-17], 'false': [nan, 3.735329802477162e-17], 'false,false': [nan, 3.735329802477162e-17]}
{'': [0.05664927119311526, 5.181040781584064e-18], 'false': [nan, 5.181040781584064e-18], 'false,false': [nan, 5.181040781584064e-18], 'false,false,false': [5.181040781584064e-18, nan]}
{'': [0.018496729546404266, 2.092213602637073e-17], 'true': [0.018496729546404266, nan], 'false': [4.622489916654927e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.018498267670321308, -6.97854472621527e-17], 'false': [nan, -6.97854472621527e-17], 'false,false': [-1.1364487653643335e-17, 5.4601132358614255e-18], 'false,false,true': [nan, -1.1364487653643335e-17]}
{'': [0.0124898178178948, 4.396185131066056e-17], 'false': [nan, 4.396185131066056e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 25.937
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.8278459047964819;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.7914822684328456;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.8581489350995122;  // std dev = 1.69e-07, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.14185106490048752;  // std dev = 2.37e-07, 357.000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7209922207540843;  // std dev = 0.030, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.6660633000779167;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839213;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5592314855443387;  // std dev = 0.107, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else return -0.11231637819360699;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4180501256790488;  // std dev = 0.036, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.43129544524532865;  // std dev = 0.078, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), tweets(A, F) )
%   | | then return 0.321761087596638;  // std dev = 0.026, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.32030654232002914;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.12405978861413484;  // std dev = 1.267, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.3240448828280189;  // std dev = 0.082, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926051;  // std dev = 1.02e-07, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22527843056622812;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2577047852445337;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.25406061529513796;  // std dev = 0.000482, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.276402534961423;  // std dev = 0.065, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( tweets(A, J), follows(K, I) )
%   | | | then return 0.2149740928023982;  // std dev = 0.986, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.3714830725600964;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.2271017389876132;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.18143770990719757;  // std dev = 0.966, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.08518475138839678;  // std dev = 5.89e-09, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2134072830985982;  // std dev = 0.019, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2090287324256472;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.2863138322004428;  // std dev = 0.997, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2324016928482465;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return 0.22990293162952624;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2505591225008883;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.22416244461170282;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.21385098229096955;  // std dev = 0.023, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else return -0.07877675473109143;  // std dev = 1.49e-08, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.17945676774507027;  // std dev = 0.009, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.17621283159991513;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.21208162284921536;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18439043183983858;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.19014341220383849;  // std dev = 1.370, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.18283912533676747;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1863126834839237;  // std dev = 0.166, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.11409097983953216;  // std dev = 0.965, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.0732462257633371;  // std dev = 3.84e-09, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.15794242589570645;  // std dev = 0.101, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.09041423060675854;  // std dev = 1.650, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.16366524554662934;  // std dev = 0.128, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.15347949396707733;  // std dev = 0.000441, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.15896153360565443;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.17784527744708123;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1639474223416363;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, I) )
%   | then return -0.0684269778442029;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return -0.06842697784420262;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13692020505800812;  // std dev = 0.025, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.13295496840863197;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.2005998263321754;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15428216082099264;  // std dev = 0.130, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.029715364565045185;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13940149051524478;  // std dev = 0.030, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.06137296271251436;  // std dev = 1.358, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.539', 'seconds']
Refined model CLL: -0.086371


******************************************
Best model found
******************************************
Results 

CLL : -0.092004 

AUC ROC : 0.99432 

AUC PR : 0.441743 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.937 

Total Inference Time : 6.401738882064819 

Total revision time: 53.95095205497742
Best scored revision CLL: -0.086371


Results 

CLL : -0.092004 

AUC ROC : 0.99432 

AUC PR : 0.441743 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.984427692413334 

Total Inference Time : 6.401738882064819 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5244882536030138;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.17e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4325767110034163;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4325767110034162;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3309431112990487;  // std dev = 3.65e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926101;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2621418724698356;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 3.73e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1075262092343509;  // std dev = 1.637, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15863611396691768;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1731922563853194;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1113140585833924;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.744', 'seconds']
Parameter learned model CLL:-0.093354 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [6.14e-08, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.17e-09, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false': [0.0, 35, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [3.65e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 46, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.637, 3, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 36, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-08, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 36, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 42, 0]}]
{'': [0.03698224852071082, 6.188128333976282e-17], 'false': [6.188128333976282e-17, nan]}
{'': [-1.4210854715202004e-16, -3.416070845000482e-17], 'false': [-3.416070845000482e-17, nan]}
{'': [0.03698224852071007, 1.586032892321652e-17], 'false': [nan, 1.586032892321652e-17]}
{'': [0.06828162126518254, 0.0634090749305932], 'true': [-7.723290606088045e-17, -1.5860328923216522e-18], 'false': [0.0634090749305932, nan], 'false,true': [0.0, 0.0]}
{'': [5.329070518200751e-17, -1.9660199394403815e-17], 'true': [5.329070518200751e-17, nan], 'false': [nan, -1.9660199394403815e-17], 'false,false': [-1.8101462358018857e-17, 0.0], 'false,false,true': [nan, -1.8101462358018857e-17]}
{'': [-6.217248937900877e-17, 1.3877787807814457e-17], 'false': [nan, 1.3877787807814457e-17], 'false,false': [nan, 1.3877787807814457e-17]}
{'': [0.09566326530612244, 7.709882115452476e-19], 'false': [nan, 7.709882115452476e-19], 'false,false': [nan, 7.709882115452476e-19], 'false,false,false': [7.709882115452476e-19, nan]}
{'': [0.03698224852071007, 2.1769078914218755e-18], 'true': [0.03698224852071007, nan], 'false': [3.1540426835941946e-18, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [-3.552713678800501e-17, 6.938893903907229e-19], 'false': [nan, 6.938893903907229e-19], 'false,false': [-1.5419764230904951e-18, 0.0], 'false,false,true': [nan, -1.5419764230904951e-18]}
{'': [0.036982248520710075, -1.982541115402065e-18], 'false': [nan, -1.982541115402065e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 12.958
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.6081489350995123;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7308970642171385;  // std dev = 0.102, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5683777040913457;  // std dev = 0.128, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.21921045436532785;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42764940432963344;  // std dev = 0.130, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783626;  // std dev = 2.36e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4979358983051425;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.35063214580177343;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.37271049793535044;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.31322754649357454;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3132275464935746;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(G, E) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.29108824426382185;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24866869960709032;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2914213226621317;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2500584360091149;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, I) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.49e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.08518475138839686;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23562922358710192;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23422136038787394;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(D, G), follows(A, D) )
%   | | | then return 0.20380623888890295;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20630940776568923;  // std dev = 0.000197, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20628096812880808;  // std dev = 0.000110, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(G, E) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, H) )
%   | | | then return 0.1879008853417954;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17461577928435504;  // std dev = 5.61e-06, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19558565979816442;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return 0.1746835641393427;  // std dev = 0.000312, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17441710961998425;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.1679363912214752;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1662400341342549;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.1484829383519382;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1508439350169376;  // std dev = 0.000228, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return 0.15086073234639186;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15070821802781786;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420271;  // std dev = 1.32e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.14549084610403237;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1323789958684655;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1326244007116074;  // std dev = 0.000222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13271811171549816;  // std dev = 0.000463, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return 0.1325351805136714;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13241582411167063;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.169', 'seconds']
Refined model CLL: -0.094597


******************************************
Best model found
******************************************
Results 

CLL : -0.087065 

AUC ROC : 0.993793 

AUC PR : 0.337662 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.958 

Total Inference Time : 2.523591995239258 

Total revision time: 19.7655154876709
Best scored revision CLL: -0.093354


Results 

CLL : -0.087065 

AUC ROC : 0.993793 

AUC PR : 0.337662 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.798991125106813 

Total Inference Time : 2.523591995239258 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.175
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254382;  // std dev = 1.925, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6775743327388664;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5641820153752587;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.57e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4437809247007213;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44378092470072106;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3001221574971606;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2364719282890477;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 4.17e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19191146647008658;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14151120255280333;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17658922992449358;  // std dev = 1.86e-09, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.71e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1138973970091939;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.153', 'seconds']
Parameter learned model CLL:-0.093914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.925, 4, 50], 'false,true': [8.16e-08, 88, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [0.0, 71, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.57e-09, 86, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false': [5.27e-08, 88, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 2, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.387, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 76, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.17e-09, 97, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 98, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.682, 3, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [1.86e-09, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.71e-08, 97, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 96, 0]}]
{'': [0.0685871056241429, 7.569702440626067e-17], 'false': [7.569702440626067e-17, nan]}
{'': [0.05339978640085471, -3.1273888017610045e-17], 'false': [-3.1273888017610045e-17, nan]}
{'': [0.019223375624759013, 5.680210823663592e-17], 'false': [nan, 5.680210823663592e-17]}
{'': [0.06658646297527017, 0.06070129579311229], 'true': [-1.5789838572446671e-16, 3.154042683594195e-17], 'false': [0.06070129579311229, nan], 'false,true': [-2.2204460492503132e-17, 0.0]}
{'': [0.03698224852071032, 0.0], 'true': [0.03698224852071032, nan], 'false': [nan, 0.0], 'false,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.03698224852071026, 1.7168397288017885e-17], 'false': [nan, 1.7168397288017885e-17], 'false,false': [nan, 1.7168397288017885e-17]}
{'': [0.03698224852071004, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17], 'false,false,false': [3.172065784643304e-17, nan]}
{'': [0.05339978640085432, -6.642359976389826e-18], 'true': [0.05339978640085432, nan], 'false': [-4.229421046191073e-18, 1.1564823173178713e-18], 'false,false': [nan, 1.1564823173178713e-18]}
{'': [0.0, 2.4019248128909638e-17], 'false': [nan, 2.4019248128909638e-17], 'false,false': [2.2891196384023845e-17, 9.912705577010326e-19], 'false,false,true': [nan, 2.2891196384023845e-17]}
{'': [0.03698224852071004, -1.3299546649155522e-17], 'false': [nan, -1.3299546649155522e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 21.379
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7223293252125008;  // std dev = 0.080, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.12544463852839144;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5546611020831411;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.40081494823698727;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.1152705523445575;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.5546611020831411;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.11231637819360618;  // std dev = 8.69e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), tweets(E, G) )
%   | | | then return 0.2776867280625627;  // std dev = 1.812, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | else return 0.5117351449330377;  // std dev = 0.174, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4169906650916293;  // std dev = 4.71e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783621;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4169906650916294;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.24591664954297845;  // std dev = 1.337, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.33757848205533736;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(G, D), recursion_accounttype(D, B) )
%   | | | then return 0.35817623816405897;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4139259052052422;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18822790700523032;  // std dev = 0.886, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.09269127618926098;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.29756886482585154;  // std dev = 0.082, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.26296647335537315;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3787486025466693;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07577600496484553;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24942768247896802;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.2668038599292459;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2808280471545809;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839682;  // std dev = 5.10e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(A, E) )
%   | | | then return 0.2418232172762726;  // std dev = 0.080, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.21913377640846018;  // std dev = 0.067, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.26518002092901666;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.01675350837446621;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22359217644581117;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23241978889175638;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109169;  // std dev = 4.17e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.12150384581210609;  // std dev = 0.965, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.18444004988431623;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20936073150700366;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1855580650528897;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.21962217389992586;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2377863192616828;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1799245921359179;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333706;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.102436148654995;  // std dev = 0.965, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.15830566395808143;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.19764847948141376;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16019461017518935;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return -0.4665487581839895;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.05163084389593142;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.1528504176461395;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16113333821720394;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420265;  // std dev = 4.66e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16219021141441406;  // std dev = 0.073, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20644396674664386;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, D), follows(D, A) )
%   | | | then return 0.15237003780103714;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13067306499104894;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.1263514884202911;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1411830749678312;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.028397058371161393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.733', 'seconds']
Refined model CLL: -0.090707


******************************************
Best model found
******************************************
Results 

CLL : -0.083479 

AUC ROC : 0.995959 

AUC PR : 0.461492 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.379 

Total Inference Time : 4.107824802398682 

Total revision time: 32.638533214569094
Best scored revision CLL: -0.090707


Results 

CLL : -0.083479 

AUC ROC : 0.995959 

AUC PR : 0.461492 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.67200885200501 

Total Inference Time : 4.107824802398682 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.872
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8075160237071076;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7164203801531335;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283913;  // std dev = 5.16e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5426068730924021;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.64e-09, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4055868974322838;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43375591151679144;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30217423111749403;  // std dev = 1.564, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926075;  // std dev = 8.16e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21110577633461491;  // std dev = 2.164, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.233679829118961;  // std dev = 0.012, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.36e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18130055572997228;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333717;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15446130419869905;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.66e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12118907741992319;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.100', 'seconds']
Parameter learned model CLL:-0.092772 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.949, 4, 75], 'false,true': [0.0, 135, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.993, 1, 75], 'false,true': [5.16e-08, 151, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.64e-09, 130, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.394, 2, 69], 'true,false': [0.0, 131, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.564, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 138, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.164, 5, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 143, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.012, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.36e-08, 156, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.993, 1, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 124, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 147, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 144, 0]}]
{'': [0.04806921967633292, -5.921189464667501e-17], 'false': [-5.921189464667501e-17, nan]}
{'': [0.012984764542936657, 1.764592886821441e-17], 'false': [1.764592886821441e-17, nan]}
{'': [0.025299375948727006, 7.51535585900106e-17], 'false': [nan, 7.51535585900106e-17]}
{'': [0.06825705401083781, 0.06545236487409226], 'true': [0.027375520730014338, -3.7289933651531976e-17], 'false': [0.06545236487409226, nan], 'false,true': [0.0, -6.308085367188389e-18]}
{'': [0.03135729932608102, 4.7801269115805354e-17], 'true': [0.03135729932608102, nan], 'false': [nan, 4.7801269115805354e-17], 'false,false': [4.827056628805028e-17, 0.0], 'false,false,true': [nan, 4.827056628805028e-17]}
{'': [0.058543700985994665, 3.5713467925005034e-17], 'false': [nan, 3.5713467925005034e-17], 'false,false': [nan, 3.5713467925005034e-17]}
{'': [1.8491817272329551e-06, 4.483592984063132e-17], 'false': [nan, 4.483592984063132e-17], 'false,false': [nan, 4.483592984063132e-17], 'false,false,false': [4.483592984063132e-17, nan]}
{'': [0.012977059061845705, -2.1224851941363285e-17], 'true': [0.012977059061845705, nan], 'false': [-1.343011723336883e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.012977769165315073, 3.047671047990626e-17], 'false': [nan, 3.047671047990626e-17], 'false,false': [3.0210150329936235e-17, -1.1564823173178713e-18], 'false,false,true': [nan, 3.0210150329936235e-17]}
{'': [0.02528606803609245, -1.1564823173178714e-17], 'false': [nan, -1.1564823173178714e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.227
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6914822684328454;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.858148935099512;  // std dev = 1.03e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048804;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7239160480421256;  // std dev = 0.133, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7356630398665787;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.12544463852839116;  // std dev = 7.30e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.48265193901885767;  // std dev = 1.634, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return -0.11239753833764687;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.5523331487792373;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6203607558449294;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5549416721976661;  // std dev = 0.003, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.11231637819360617;  // std dev = 9.88e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4383122057385167;  // std dev = 0.147, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.32009461873845485;  // std dev = 0.916, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4626940017787902;  // std dev = 0.107, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41761688881170217;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41653677901586583;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.2835219260546572;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.3285827803943961;  // std dev = 0.029, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.40929623308293506;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3374015750005161;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return -0.0961948190026739;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3266231669610564;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.32078188308521544;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22078188308521543;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.09269127618926072;  // std dev = 6.97e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2673547704879043;  // std dev = 0.041, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2869262943073301;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.42000419358890334;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25932621604722084;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2629906969954698;  // std dev = 0.053, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.0851847513883968;  // std dev = 6.99e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.13512811340269257;  // std dev = 1.366, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.21685010108593086;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3015658372698155;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21110988815256485;  // std dev = 0.028, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.21476220590211184;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07348909832946482;  // std dev = 0.732, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0461026297822358;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109155;  // std dev = 6.91e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.15802319812850896;  // std dev = 0.984, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.17856940399842142;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.23770463679088377;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1788434143347631;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.17136857529144375;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20492594582142526;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22455475188190524;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333732;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.1766404108286539;  // std dev = 0.078, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.15988818892305018;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.15938863000047254;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14989454108708627;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.14349342889694813;  // std dev = 0.896, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1516679553401321;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.15512693305052935;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18789392812569328;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420264;  // std dev = 5.43e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.150904133747699;  // std dev = 0.062, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13793821478852925;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.22690420678017773;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13302745115941786;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.14077594381495193;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13263159786150452;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14078702067351967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1608983148306997;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.629', 'seconds']
Refined model CLL: -0.091601


******************************************
Best model found
******************************************
Results 

CLL : -0.08659 

AUC ROC : 0.994718 

AUC PR : 0.382115 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 16.227 

Total Inference Time : 5.160083770751953 

Total revision time: 31.48991730117798
Best scored revision CLL: -0.091601


Results 

CLL : -0.08659 

AUC ROC : 0.994718 

AUC PR : 0.382115 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 31.523392938613892 

Total Inference Time : 5.160083770751953 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.517
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622563;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6942875941240525;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5187792876805404;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4269014458269412;  // std dev = 0.995, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43742776161641567;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33645327868353603;  // std dev = 0.006, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926054;  // std dev = 9.54e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2474060003557579;  // std dev = 1.322, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1463920889737661;  // std dev = 2.721, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1767080810680229;  // std dev = 1.401, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.83e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1314754124536302;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.16e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return -0.0684269778442027;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12383600647700815;  // std dev = 0.164, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.333', 'seconds']
Parameter learned model CLL:-0.092176 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 192, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 94], 'true,false': [0.0, 223, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.006, 0, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.54e-08, 211, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.322, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 219, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.721, 8, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.3e-08, 164, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.401, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [9.83e-08, 173, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 200, 0], 'false,false,false': [9.31e-10, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.164, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 190, 0]}]
{'': [0.019223375624761452, -2.1124243495570547e-16], 'false': [-2.1124243495570547e-16, nan]}
{'': [0.028277877274014842, -3.140024716111554e-17], 'false': [-3.140024716111554e-17, nan]}
{'': [0.045351473922900606, -3.23815048849004e-17], 'false': [nan, -3.23815048849004e-17]}
{'': [0.06162565594290043, 0.059295300161380515], 'true': [0.010415512465374638, -7.766582593790333e-17], 'false': [0.059295300161380515, nan], 'false,true': [0.0, 3.7007434154171884e-18]}
{'': [3.1052942413012373e-07, 4.379778904484563e-17], 'true': [3.1052942413012373e-07, nan], 'false': [nan, 4.379778904484563e-17], 'false,false': [4.3146108066001346e-17, 0.0], 'false,false,true': [nan, 4.3146108066001346e-17]}
{'': [0.017141658093420536, 3.0417069167812506e-17], 'false': [nan, 3.0417069167812506e-17], 'false,false': [nan, 3.0417069167812506e-17]}
{'': [0.06857242601211773, 4.197184605290226e-17], 'false': [nan, 4.197184605290226e-17], 'false,false': [nan, 4.197184605290226e-17], 'false,false,false': [4.197184605290226e-17, nan]}
{'': [0.019251568494627936, 6.072490576679034e-17], 'true': [0.019251568494627936, nan], 'false': [5.583202493779689e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03697579842661751, 3.3835368369528583e-17], 'false': [nan, 3.3835368369528583e-17], 'false,false': [3.3306690738754695e-17, 6.938893903907229e-19], 'false,false,true': [nan, 3.3306690738754695e-17]}
{'': [0.026830442781199507, -3.505967446184705e-18], 'false': [nan, -3.505967446184705e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.244
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6081489350995123;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1418510649004884;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(D, A), follows(A, F) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.49119489338874256;  // std dev = 1.524, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0.7270920605194833;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7281276940338213;  // std dev = 0.105, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.12544463852839155;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5124493214489533;  // std dev = 1.383, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.1399528562027613;  // std dev = 1.344, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.5805310911021714;  // std dev = 0.134, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.5673371458356742;  // std dev = 0.130, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3701968960670708;  // std dev = 1.896, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | | | else return 0.015114208051247368;  // std dev = 1.086, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.43185413568257863;  // std dev = 0.177, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4741197059519326;  // std dev = 2.58e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3432637387610013;  // std dev = 0.105, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.22568187855274963;  // std dev = 1.306, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.3502306388226687;  // std dev = 0.263, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(F, A) )
%   | | then return 0.13762712982925934;  // std dev = 0.403, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.3132261711725147;  // std dev = 0.000305, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.26916953523137477;  // std dev = 0.089, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.29907035525810943;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(H, D) )
%   | | | then return 0.3446626568445402;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26074553721283417;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return -0.08245523683082956;  // std dev = 1.012, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.31623363522253795;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2695970953662566;  // std dev = 0.123, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.14765282318014916;  // std dev = 0.869, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.27e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.22775751795427168;  // std dev = 0.151, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.2800078618886919;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.18046698255775995;  // std dev = 0.719, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.24421062500719537;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.11182415857364712;  // std dev = 0.927, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.20291315993176076;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20661199947017173;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22333314759205977;  // std dev = 9.13e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109148;  // std dev = 5.82e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.16198513806718212;  // std dev = 0.994, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.21378262223127187;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.14101368047737792;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18121750500944528;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.24780535932944533;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20783865735649404;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.20793468816357144;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1762293853985329;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07324622576333667;  // std dev = 8.17e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.16279826036655656;  // std dev = 0.051, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.18618986148802152;  // std dev = 0.091, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.06085596196764943;  // std dev = 0.847, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.16855971212446025;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.060530906111612146;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1630589481589014;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.149792261831817;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1616625673974258;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420262;  // std dev = 5.67e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1277064081232261;  // std dev = 0.952, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return -0.013986759859444845;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return -0.19688922194182418;  // std dev = 1.038, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0035166899566011676;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then if ( recursion_accounttype(J, B), follows(A, K) )
%   | | | then return 0.1350509709596136;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15317706154538324;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.1274148496969247;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13972945869758951;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.770', 'seconds']
Refined model CLL: -0.089364


******************************************
Best model found
******************************************
Results 

CLL : -0.084344 

AUC ROC : 0.996431 

AUC PR : 0.493564 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.244 

Total Inference Time : 7.134123086929321 

Total revision time: 51.662341199874874
Best scored revision CLL: -0.089364


Results 

CLL : -0.084344 

AUC ROC : 0.996431 

AUC PR : 0.493564 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.69581683731079 

Total Inference Time : 7.134123086929321 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.265
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6918469560312815;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5278516055735426;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4264140866319807;  // std dev = 0.996, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4348174479765179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3119383965026536;  // std dev = 1.643, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.30e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else return -0.09269127618926085;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22326144191072053;  // std dev = 2.394, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20391489298660698;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.66e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1552014943990633;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.26e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1477298172546549;  // std dev = 0.146, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1196651333650713;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202618;  // std dev = 3.61e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.727', 'seconds']
Parameter learned model CLL:-0.092689 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 234, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 118], 'true,false': [0.0, 197, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.643, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 232, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.394, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 268, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.66e-08, 233, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 209, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.146, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 267, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.61e-09, 260, 0]}]
{'': [0.015380859375004219, -2.0852884636437723e-16], 'false': [-2.0852884636437723e-16, nan]}
{'': [0.02982248520710174, -7.582010899879118e-17], 'false': [-7.582010899879118e-17, nan]}
{'': [0.03671114736903601, -7.97083197166779e-17], 'false': [nan, -7.97083197166779e-17]}
{'': [0.06859012690094583, 0.06394216458968387], 'true': [0.008332744862650704, -9.467891783605396e-17], 'false': [0.06394216458968387, nan], 'false,true': [-2.7755575615628914e-17, -1.734723475976807e-18]}
{'': [0.02092945374173813, 3.303142883182284e-17], 'true': [0.02092945374173813, nan], 'false': [nan, 3.303142883182284e-17], 'false,false': [2.2970131543968756e-17, -4.163336342344337e-18], 'false,false,true': [nan, 2.2970131543968756e-17]}
{'': [0.04340336216086505, 3.396951045494882e-17], 'false': [nan, 3.396951045494882e-17], 'false,false': [nan, 3.396951045494882e-17]}
{'': [0.02271086022376841, 1.9059622740346035e-17], 'false': [nan, 1.9059622740346035e-17], 'false,false': [nan, 1.9059622740346035e-17], 'false,false,false': [1.9059622740346035e-17, nan]}
{'': [0.036705148951310176, 7.601527015451522e-17], 'true': [0.036705148951310176, nan], 'false': [7.543142081185274e-17, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18]}
{'': [0.021440086066038398, -4.425364503750624e-17], 'false': [nan, -4.425364503750624e-17], 'false,false': [-2.5780459747850078e-17, -2.1912296538654404e-18], 'false,false,true': [nan, -2.5780459747850078e-17]}
{'': [0.029818494797923364, 1.2810265668751807e-17], 'false': [nan, 1.2810265668751807e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 103.892
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.6956638884014312;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.6310371889342248;  // std dev = 0.962, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3348917811753146;  // std dev = 1.089, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6382220818421735;  // std dev = 1.344, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.7254379304617745;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839186;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, F), follows(G, D) )
%   | | then if ( follows(A, G), recursion_accounttype(D, B) )
%   | | | then return 0.5391812768150257;  // std dev = 0.988, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.5662927151227528;  // std dev = 0.059, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.22927226002488652;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5775242899356573;  // std dev = 0.211, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360676;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, A) )
%   | | | then return 0.3938232205024335;  // std dev = 1.382, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.44123336721288475;  // std dev = 0.182, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.27099859511584606;  // std dev = 0.863, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4350935860126086;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4148587761676313;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.33127421151239717;  // std dev = 0.039, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.2107654311803994;  // std dev = 1.630, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else return 0.3437655637254018;  // std dev = 0.196, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return 0.20780142718794192;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.26479569912595413;  // std dev = 0.067, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.25343734758503766;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.2795857153276097;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.2237511891357028;  // std dev = 0.958, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.32393167047474136;  // std dev = 1.115, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3220049958266739;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2667060768550851;  // std dev = 0.083, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), follows(E, A) )
%   | | | then return 0.2167099613903434;  // std dev = 0.055, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.20894707708795368;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.22689389588275835;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.2505166746863014;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27232537119740285;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.24094493043986306;  // std dev = 0.128, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20512563367405612;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109144;  // std dev = 4.56e-09, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14891700134525176;  // std dev = 1.391, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.06941456849769144;  // std dev = 1.871, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | else return -0.08278625903469439;  // std dev = 0.444, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.17815820934222723;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22781951141919868;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18647873171078955;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1730130815508843;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333664;  // std dev = 8.64e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.1603304919464466;  // std dev = 0.030, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.1746713509490144;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19198854629571274;  // std dev = 0.145, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21189771315085582;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.1535535019683052;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14738070084038005;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.06373943093292286;  // std dev = 0.880, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15026596074142207;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420271;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.140177700558537;  // std dev = 0.024, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.10089696115093162;  // std dev = 0.962, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return 0.21182617438012522;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15743368415702544;  // std dev = 0.072, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.05826187686410121;  // std dev = 0.954, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.1510114726188412;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.19900825239759287;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.073256486169978;  // std dev = 0.970, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.06419184008202622;  // std dev = 3.09e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.353', 'seconds']
Refined model CLL: -0.091913


******************************************
Best model found
******************************************
Results 

CLL : -0.085873 

AUC ROC : 0.995415 

AUC PR : 0.425694 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 103.892 

Total Inference Time : 16.74163269996643 

Total revision time: 136.42895787429808
Best scored revision CLL: -0.091913


Results 

CLL : -0.085873 

AUC ROC : 0.995415 

AUC PR : 0.425694 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 136.462433511734 

Total Inference Time : 16.74163269996643 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.281
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.05851773156715445;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6569734122109542;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02303032934786462;  // std dev = 1.584, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03487591597187419;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1670269944198438;  // std dev = 2.050, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.47074163759868837;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7199418128410741;  // std dev = 0.211, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5707416375986882;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5707416375986882;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.02580295437703617;  // std dev = 2.247, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
%   | | | else return 0.028880049746891383;  // std dev = 1.467, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5092073002440071;  // std dev = 1.281, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.13134951394559777;  // std dev = 0.057, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.45366730889985146;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1260878086789515;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12891307667429913;  // std dev = 1.464, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2914085561513855;  // std dev = 1.045, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3110808047290945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5827553319737308;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11686792267202634;  // std dev = 0.059, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.0030656585897635316;  // std dev = 0.294, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01181953198390514;  // std dev = 1.569, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2439089302523675;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5039180613760132;  // std dev = 0.440, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13380304649745223;  // std dev = 0.101, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.12874851869344292;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29169794696861956;  // std dev = 0.807, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return -0.07468773553658428;  // std dev = 0.890, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0017451457251627112;  // std dev = 0.847, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20705674809185118;  // std dev = 0.087, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.032990137607776165;  // std dev = 0.902, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return -0.10698720145214109;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0018974948775581603;  // std dev = 0.926, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return -0.008801390649269564;  // std dev = 1.182, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14488137891188144;  // std dev = 0.223, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26868395139701384;  // std dev = 0.343, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09576499078504122;  // std dev = 0.029, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2812466544349825;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10544133778528741;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02955415955253397;  // std dev = 1.097, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14819335070717918;  // std dev = 0.878, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.1419341342924982;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08522520461737314;  // std dev = 0.008, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09237296147884215;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0016114586600134474;  // std dev = 0.492, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1564336747197972;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05671077473979432;  // std dev = 1.168, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.433', 'seconds']
Parameter learned model CLL:-0.117925 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [3.33e-08, 34, 0], 'true,false,false,true': [0.957, 11, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 2], 'false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.968, 1, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.584, 29, 4], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.949, 9, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.05, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.949, 1, 9], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.211, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.247, 40, 9], 'false,false,false,false': [1.467, 16, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.281, 1, 22], 'true,false': [0.057, 45, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.464, 10, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.045, 1, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.065, 0, 8], 'false,false,true,false': [0.059, 43, 0], 'false,false,false': [0.294, 23, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.569, 33, 14], 'false,true': [0.021, 0, 5], 'false,false,true': [0.44, 0, 12], 'false,false,false,true': [0.101, 20, 0], 'false,false,false,false': [0.075, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.807, 1, 24], 'true,false': [0.89, 41, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.847, 12, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.902, 27, 4], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.926, 19, 6], 'false,false,false,false': [1.182, 19, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.223, 1, 13], 'false,true,true,true': [0.343, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 25, 0], 'false,false,true,true': [0.171, 0, 5], 'false,false,true,false': [0.027, 9, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.097, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.878, 1, 16], 'true,true,false': [0.007, 0, 3], 'true,false,true': [0.008, 40, 0], 'true,false,false,true': [0.013, 3, 0], 'true,false,false,false': [0.492, 5, 1], 'false,true': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.168, 16, 9]}]
{'': [0.21301775147928947, 0.2089116143170192], 'true': [-2.8047739569477637e-16, 0.021266540642722185], 'false': [-1.6148698540002277e-16, 1.708035422500241e-17], 'true,false': [3.2653618371328135e-17, 0.07638888888888894], 'true,false,false': [0.07638888888888894, nan], 'false,true': [-2.9605947323337506e-16, 0.0]}
{'': [0.05859375000000017, 0.12807208271235734], 'false': [0.07604300775570297, 0.16044733774876282], 'false,false': [0.08999999999999994, 0.17027650233544364], 'false,false,false': [0.0, 0.1615749059277691], 'false,false,true': [nan, 0.08999999999999994], 'false,true': [nan, 0.07604300775570297], 'false,true,false': [0.07604300775570297, nan]}
{'': [0.07508612898614841, 0.11593457429473286], 'false': [nan, 0.11593457429473283], 'false,false': [-4.4408920985006264e-17, 0.10433651624077671], 'false,false,false': [0.1030228871545678, 0.10754818348343916], 'true': [0.08999999999999982, 0.01790160975036459], 'true,true': [0.08999999999999982, nan], 'true,false': [0.022260692292358608, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.11601733490710907, 0.11589684584430356], 'true': [0.0713380991698176, 7.103960031869219e-05], 'false': [0.07877718664659647, 0.13398560467119208], 'false,false': [nan, 0.13398560467119208], 'false,false,false': [nan, 0.13398560467119208], 'false,true': [-3.700743415417188e-17, -5.551115123125783e-18]}
{'': [0.07800239449885792, 0.0738154718826574], 'true': [0.07800239449885792, nan], 'false': [0.0, 0.07259635113715704], 'false,false': [0.06488832934044442, 0.08656894518798208], 'false,false,true': [0.0005330356747657028, 8.137610371421415e-05], 'false,true': [0.0, nan]}
{'': [0.05234752902112206, 0.07916539379976861], 'false': [8.761047822387624e-05, 0.08370026636052376], 'false,false': [0.016163261547597136, 0.0004851654094867925], 'true': [nan, 0.052347529021122066], 'true,false': [nan, 0.05234752902112206], 'false,false,false': [0.0005067341939661823, 0.0004364988754541439]}
{'': [0.051943507940700344, 0.04482820223536548], 'true': [0.026045994742087117, 0.018020877864390532], 'false': [nan, 0.04482820223536546], 'false,false': [nan, 0.04482820223536548], 'false,false,false': [nan, 0.04482820223536548]}
{'': [0.0005021620935442857, 0.03596715987998241], 'false': [nan, 0.03596715987998249], 'false,false': [0.022726054139094932, 0.04509730414249297], 'false,false,false': [0.03432499461493271, 0.05584578178163988], 'false,false,true': [0.02623671572912796, -4.625929269271485e-18], 'true': [0.0005021620935442857, nan]}
{'': [0.049618484845267506, 0.043282444947073104], 'false': [0.029333639686577533, 0.0591391856167111], 'false,false': [0.03647947719287745, 0.08028358545547307], 'false,false,false': [nan, 0.08028358545547307], 'false,false,true': [0.005871403866039471, 8.124690040285499e-05], 'false,true': [0.013061617160026913, 3.253005735425529e-05], 'false,true,true': [0.013061617160026913, nan]}
{'': [0.025441617220216334, 0.051195322870547254], 'false': [0.0, 0.05455430745719686], 'false,false': [nan, 0.05455430745719684], 'true': [0.03856281713406464, 0.0057642054688985455], 'true,true': [0.045358995950571815, 1.783605225049815e-05], 'true,false': [1.6703166117640334e-06, 0.028860210648070723], 'true,false,false': [5.491987493516532e-05, 0.040318498958359525]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.512
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.038786376914099516;  // std dev = 0.256, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return 0.0030449934785862936;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09622525136582909;  // std dev = 2.230, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.44744989432106974;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.707593840151469;  // std dev = 0.215, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12444966180276872;  // std dev = 0.041, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.027232996615838133;  // std dev = 1.549, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.25827828968874994;  // std dev = 1.434, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.19802712405926073;  // std dev = 1.295, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4454446539891048;  // std dev = 0.122, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7030421924378711;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12884249506861112;  // std dev = 0.166, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13212017198282516;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5608869110605166;  // std dev = 0.262, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.16143375771914248;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.002146819623750229;  // std dev = 0.732, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.21559541940062962;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.33329960505620404;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.39335679773039883;  // std dev = 0.252, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3146576141988411;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5416647601021596;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10946387420278628;  // std dev = 0.128, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.1068522388147178;  // std dev = 0.049, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.03160890910323537;  // std dev = 1.328, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3085198994427655;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4276850216508894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09250852145302282;  // std dev = 0.029, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2527872030293896;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08806856862168104;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.24906403938392713;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.39034340918288263;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.541943238922251;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1322311033010721;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22535529986548813;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.08160121158791002;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.32761597490178407;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08576526933270288;  // std dev = 0.602, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.303229290337214;  // std dev = 0.273, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12724514484062976;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.045908012497621255;  // std dev = 0.671, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18857202839607026;  // std dev = 0.085, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return -0.041701812115684425;  // std dev = 0.105, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else return -0.07344870445170804;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(H, F) )
%   | | | then return -0.024686979370944172;  // std dev = 0.483, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.2177798091401587;  // std dev = 0.302, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.005426777371042927;  // std dev = 0.929, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.134925570119586;  // std dev = 0.575, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.18471618374375484;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08449004872249646;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.2043104439995774;  // std dev = 0.264, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20011243429957995;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07539329186014042;  // std dev = 0.037, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25209631968722496;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13447724541736938;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1929372240620337;  // std dev = 0.377, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07671150020786616;  // std dev = 0.590, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.07077570803746323;  // std dev = 0.880, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.19396443967462015;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12387944198147172;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07078864308935126;  // std dev = 0.035, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.032678098771975576;  // std dev = 0.139, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.10158932188460867;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23362987387285686;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11149565969059377;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.20306076897971653;  // std dev = 0.473, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.801', 'seconds']
Refined model CLL: -0.109916


******************************************
Best model found
******************************************
Results 

CLL : -0.102451 

AUC ROC : 0.993388 

AUC PR : 0.352881 

Precision : 0.344538 

Recall : 0.97619 

F1 : 0.509317 

Total Learning Time : 3.512 

Total Inference Time : 5.365847110748291 

Total revision time: 13.497579830169677
Best scored revision CLL: -0.109916


Results 

CLL : -0.102451 

AUC ROC : 0.993388 

AUC PR : 0.352881 

Precision : 0.344538 

Recall : 0.97619 

F1 : 0.509317 

Total Learning Time : 13.524312990188598 

Total Inference Time : 5.365847110748291 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.902
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09423201728144018;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6639178566553993;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.036505896345302366;  // std dev = 1.958, 57.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07520713456073586;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12706995494257348;  // std dev = 3.023, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.49885133559075756;  // std dev = 1.271, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.671876586429728;  // std dev = 0.252, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5690394497431005;  // std dev = 1.49e-08, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5690394497431006;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026471835586240423;  // std dev = 2.729, 94.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=12 */
%   | | | else return 0.06965512894430136;  // std dev = 2.391, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4540264113589537;  // std dev = 1.998, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | else return -0.12249577449975063;  // std dev = 0.070, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.3617139448233997;  // std dev = 0.335, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.1292273803714677;  // std dev = 0.000302, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07037584770361395;  // std dev = 2.327, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.36407695118541133;  // std dev = 0.391, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.299858913842447;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3239299452028179;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3218827950598999;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6128179168778922;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11670151983207484;  // std dev = 0.289, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return 0.0701273828304205;  // std dev = 0.337, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030220666607917303;  // std dev = 1.891, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1769204404278564;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5415527041129918;  // std dev = 0.600, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14192702506944505;  // std dev = 0.247, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.12948936309622025;  // std dev = 0.123, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.298463702995071;  // std dev = 1.117, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.09395932184702324;  // std dev = 0.944, 100.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05945236375521634;  // std dev = 1.493, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17687335261337456;  // std dev = 0.992, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.1704744856779048;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.056114631867735215;  // std dev = 1.038, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | | | else return -0.0692947038135759;  // std dev = 0.629, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03649806657694793;  // std dev = 1.372, 57.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=10 */
%   | | | else return 0.05824186708331927;  // std dev = 1.628, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1626040742367003;  // std dev = 0.169, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2636206934392792;  // std dev = 0.506, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09325440765072528;  // std dev = 0.100, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3289585688368637;  // std dev = 0.240, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08863771039885973;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08499759246597655;  // std dev = 1.518, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19653421651154324;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.06397477871945317;  // std dev = 0.753, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08450595798494148;  // std dev = 0.076, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09742015568066673;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.017006389259179057;  // std dev = 0.597, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1281052586677692;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019713226837654408;  // std dev = 1.799, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.885', 'seconds']
Parameter learned model CLL:-0.120605 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.6e-07, 0, 38], 'true,false,true': [7.15e-08, 73, 0], 'true,false,false,true': [0.976, 20, 1], 'true,false,false,false': [0.0, 0, 2], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 7], 'false,false': [5.89e-09, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.374, 2, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.958, 51, 6], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [3.023, 41, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.271, 2, 22], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.252, 0, 3], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 4], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.729, 82, 12], 'false,false,false,false': [2.391, 34, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.998, 3, 42], 'true,false': [0.07, 95, 0], 'false,true,true': [0.335, 1, 8], 'false,true,false': [0.000302, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.327, 31, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.391, 0, 27], 'true,false': [0.0, 0, 1], 'false,true,true': [0.019, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.058, 0, 9], 'false,false,true,false': [0.289, 86, 0], 'false,false,false': [0.337, 41, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.891, 62, 28], 'false,true': [0.96, 1, 12], 'false,false,true': [0.6, 0, 22], 'false,false,false,true': [0.247, 27, 0], 'false,false,false,false': [0.123, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.117, 1, 45], 'true,false': [0.944, 97, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.493, 23, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.992, 1, 32], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.038, 65, 5], 'false,false,true,false': [0.629, 13, 1], 'false,false,false,true': [1.372, 47, 10], 'false,false,false,false': [1.628, 22, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.169, 1, 28], 'false,true,true,true': [0.506, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 67, 0], 'false,false,true,true': [0.24, 0, 8], 'false,false,true,false': [0.031, 18, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.518, 16, 10]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.499, 0, 30], 'true,true,false': [0.753, 1, 8], 'true,false,true': [0.076, 65, 0], 'true,false,false,true': [0.016, 9, 0], 'true,false,false,false': [0.597, 10, 3], 'false,true': [0.025, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.799, 43, 18]}]
{'': [0.2123524170193819, 0.234375], 'false': [0.0, 3.489272363107635e-17], 'true': [1.7763568394002505e-15, 0.03027343750000001], 'true,false': [6.995925908596876e-17, 0.1134215500945178], 'true,false,false': [0.045351473922902535, 0.0], 'false,true': [-2.5376526277146434e-16, -2.5376526277146434e-16]}
{'': [0.05246913580246851, 0.11907857207592648], 'false': [0.06723584881943498, 0.14782927551527197], 'false,false': [0.05246913580246917, 0.16351430430955322], 'false,false,false': [1.4802973661668753e-16, 0.15484753341209398], 'false,true': [nan, 0.06723584881943498], 'false,true,false': [0.06723584881943498, nan], 'false,false,true': [nan, 0.05246913580246917]}
{'': [0.05876962039859475, 0.11130628252749278], 'false': [nan, 0.11130628252749264], 'false,false': [-8.074349270001139e-17, 0.09675529491760436], 'false,false,false': [0.07924574743759023, 0.127081895025225], 'true': [0.06733530423187588, 0.013969130426718879], 'true,true': [0.06733530423187588, nan], 'true,false': [0.021150953363808272, 3.700743415417188e-17], 'false,false,true': [5.551115123125783e-17, 0.0]}
{'': [0.10105870417652672, 0.11053134939230662], 'false': [0.08639902813940177, 0.12590770889147615], 'false,false': [nan, 0.12590770889147615], 'false,false,false': [nan, 0.12590770889147615], 'true': [0.08875295949105219, 5.200980831544814e-05], 'false,true': [0.11217364199022449, 9.111146828388872e-08]}
{'': [0.005600878094994496, 0.07620753854816642], 'false': [3.463490667477874e-05, 0.07443545869404368], 'false,false': [0.04655534697634707, 0.11381579964666347], 'false,false,true': [0.0003699312012494084, 0.0009698888955130153], 'true': [0.0056610338701465375, 0.0], 'false,true': [3.771741336886514e-05, 0.0]}
{'': [0.0397132908986235, 0.0938978543339535], 'false': [0.07082992951277732, 0.09522559992601211], 'false,false': [0.016355064644394905, 0.0013095785308590271], 'true': [nan, 0.03971329089862351], 'true,false': [nan, 0.0397132908986235], 'false,false,false': [0.0022605551451462917, 0.00046189380962103125]}
{'': [0.04787707616255387, 0.0602134791797821], 'false': [nan, 0.060213479179782085], 'false,false': [nan, 0.0602134791797821], 'false,false,false': [nan, 0.0602134791797821], 'true': [0.027108839653214277, 0.008911230712973034]}
{'': [0.02813414068950939, 0.036245874836364274], 'false': [nan, 0.03624587483636445], 'false,false': [0.017571414463172244, 0.051912773936249504], 'false,false,false': [0.033037076746275575, 0.07793521151748675], 'true': [0.029834922832802785, 3.2629569856484214e-05], 'false,false,true': [0.015401904118273009, 0.02827420427392049], 'true,false': [3.2629569856484214e-05, nan]}
{'': [0.028572811121543237, 0.040806675345387455], 'false': [0.02302284802176641, 0.06455118956449479], 'false,false': [0.03939916527594714, 0.08868421716383104], 'false,false,false': [nan, 0.08868421716383104], 'false,false,true': [0.0071945506762918915, 5.489580284748219e-05], 'false,true': [0.01600196218781151, 0.00014818344515699907], 'false,true,true': [0.01600196218781151, nan]}
{'': [0.02322362074923623, 0.051114960130797193], 'false': [0.00021363224416371304, 0.053067577598772155], 'false,false': [nan, 0.05306757759877208], 'true': [0.02401383587872206, 0.004787447147220154], 'true,true': [0.008286238198916976, 0.06292223490287613], 'true,false': [8.815185326021162e-05, 0.017777142258861196], 'true,false,false': [2.9001233341573635e-05, 0.027418982066317155]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 5.104
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.07042249347191636;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.7359930932441973;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7400622794573879;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.056189060598936816;  // std dev = 0.232, 61.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | else return -0.004742059851341998;  // std dev = 0.296, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.008492844087163564;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.1334928440871636;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14613616349496944;  // std dev = 2.953, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5213258394730432;  // std dev = 0.241, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.5756888993144594;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return 0.7189869462900301;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6159463602843244;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5631028100565776;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7286243579766676;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1215588752428926;  // std dev = 0.082, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08069325816724525;  // std dev = 2.359, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.19998028825174005;  // std dev = 1.687, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.43761567883330554;  // std dev = 0.033, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.6267898147602646;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11686318879974825;  // std dev = 0.019, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.44544958505887006;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11137170543074673;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6122696765765279;  // std dev = 0.248, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.15251351938362298;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.012291146173810562;  // std dev = 0.737, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.19286959564316403;  // std dev = 1.212, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3343841500108062;  // std dev = 0.013, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.40965374592327775;  // std dev = 0.276, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4122155662888918;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.3101742653192595;  // std dev = 0.000591, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4504309329274945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4729555361670085;  // std dev = 0.165, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10534697860953153;  // std dev = 0.132, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07664662078935144;  // std dev = 0.531, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.14860212637285236;  // std dev = 1.944, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26813244296184524;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.1093401153020461;  // std dev = 1.063, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.054355969431071564;  // std dev = 0.108, 57.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=5 */
%   | | else return -0.051958449985117186;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2816201934088739;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.025653723519771576;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.31030589199435654;  // std dev = 0.255, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48451393582242397;  // std dev = 0.286, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.13631420139564732;  // std dev = 0.042, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.05146620068952921;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.21813286735619591;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.21813286735619586;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2417551392872012;  // std dev = 0.036, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( tweets(A, F) )
%   | then return -0.04110340190114725;  // std dev = 0.137, 118.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.09045197312682332;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05098631565474348;  // std dev = 0.490, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03164157353999556;  // std dev = 0.978, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.04153661565999856;  // std dev = 1.164, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.06642387340984796;  // std dev = 1.336, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.17837402367776756;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20373337985577183;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.2260725567921768;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2658519218951346;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07971435921486549;  // std dev = 0.014, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.016576891577173736;  // std dev = 0.907, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.026553790081212503;  // std dev = 1.025, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.05571705606773336;  // std dev = 1.422, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.19227724964876708;  // std dev = 0.053, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.11567945492652332;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21656233583388373;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.15857223457070638;  // std dev = 0.744, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.02543020912792439;  // std dev = 0.123, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31518452678046116;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11794566285580603;  // std dev = 0.076, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11414648664621065;  // std dev = 0.910, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.01530507458800212;  // std dev = 1.012, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.15608255761290019;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.049251145298290805;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.33837243540450346;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06752912869644939;  // std dev = 0.057, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1537161364853761;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2368780207009129;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09920928986225712;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.017278582183225415;  // std dev = 0.567, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.029260581133773368;  // std dev = 1.407, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.953', 'seconds']
Refined model CLL: -0.119746


******************************************
Best model found
******************************************
Results 

CLL : -0.110386 

AUC ROC : 0.992724 

AUC PR : 0.340997 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 5.104 

Total Inference Time : 7.510907411575317 

Total revision time: 20.370879369735718
Best scored revision CLL: -0.119746


Results 

CLL : -0.110386 

AUC ROC : 0.992724 

AUC PR : 0.340997 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 20.39761252975464 

Total Inference Time : 7.510907411575317 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8427643197148973;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10613677918620204;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.726385572869096;  // std dev = 0.140, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02716851779895211;  // std dev = 2.769, 102.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04523441966657485;  // std dev = 1.253, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.11154692105644763;  // std dev = 3.296, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.544256799679522;  // std dev = 0.860, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7087755361138456;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5800934781427745;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.47412425182830825;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029266499526495883;  // std dev = 3.445, 164.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=19 */
%   | | | else return 0.03531462652010109;  // std dev = 2.676, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4752475843245248;  // std dev = 2.163, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else return -0.1235217001097127;  // std dev = 0.116, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4509965906082869;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12664273985925326;  // std dev = 0.000707, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41356591372730267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09004174989741126;  // std dev = 2.532, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3100715473588975;  // std dev = 1.103, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0.4088895953179468;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3217219384414432;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.4403170146706542;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6168334495566669;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11151259902003606;  // std dev = 0.087, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return 0.037775962071412414;  // std dev = 0.320, 80.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03227750766231091;  // std dev = 2.418, 145.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=47 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2624742777578043;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49014196002734006;  // std dev = 1.485, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12505536627320238;  // std dev = 0.149, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.12587623287854394;  // std dev = 0.155, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28739220971895696;  // std dev = 1.523, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else return -0.09799162442159548;  // std dev = 0.951, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08033212395323812;  // std dev = 1.725, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19381513357197386;  // std dev = 0.090, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.21788757142652426;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03542925279111145;  // std dev = 1.504, 95.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=11 */
%   | | | else return -0.07797337009771178;  // std dev = 0.629, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013069714628012851;  // std dev = 1.442, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return 0.037260707878746115;  // std dev = 2.033, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1579963749701772;  // std dev = 0.162, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2699134160935524;  // std dev = 0.704, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09369824345095877;  // std dev = 0.103, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.328851121416191;  // std dev = 0.252, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09419935303486567;  // std dev = 0.061, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09521168785361948;  // std dev = 1.746, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15586053611617479;  // std dev = 1.494, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else return 0.15566956871216092;  // std dev = 0.279, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08333855640677323;  // std dev = 0.049, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09776931045216826;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.03716321706814449;  // std dev = 0.631, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.038775306189821314;  // std dev = 0.928, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018999133368708798;  // std dev = 2.036, 76.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.084', 'seconds']
Parameter learned model CLL:-0.118804 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 64], 'true,false,true': [8.43e-08, 92, 0], 'true,false,false,true': [0.982, 27, 1], 'true,false,false,false': [1.095, 3, 2], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 0, 8], 'false,false': [8.12e-09, 60, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.14, 0, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.769, 90, 12], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.253, 20, 2], 'false,false,false,true': [0.0, 0, 5], 'false,false,false,false': [3.296, 53, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.86, 1, 36], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.124, 0, 6], 'false,false,true,false': [0.957, 1, 11], 'false,false,false,true': [3.445, 145, 19], 'false,false,false,false': [2.676, 52, 13]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.163, 3, 67], 'true,false': [0.116, 139, 0], 'false,true,true': [0.086, 0, 11], 'false,true,false': [0.000707, 26, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.532, 33, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.103, 1, 43], 'true,false': [0.0, 0, 1], 'false,true,true': [0.041, 0, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.069, 0, 15], 'false,false,true,false': [0.087, 108, 0], 'false,false,false': [0.32, 63, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.418, 98, 47], 'false,true': [0.107, 0, 18], 'false,false,true': [1.485, 1, 28], 'false,false,false,true': [0.149, 39, 0], 'false,false,false,false': [0.155, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.523, 2, 70], 'true,false': [0.951, 137, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.725, 27, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.09, 0, 51], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.504, 84, 11], 'false,false,true,false': [0.629, 19, 1], 'false,false,false,true': [1.442, 54, 14], 'false,false,false,false': [2.033, 31, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.162, 1, 44], 'false,true,true,true': [0.704, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 113, 0], 'false,false,true,true': [0.252, 0, 9], 'false,false,true,false': [0.061, 27, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.746, 20, 12]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.494, 2, 50], 'true,true,false': [0.279, 0, 14], 'true,false,true': [0.049, 94, 0], 'true,false,false,true': [0.029, 15, 0], 'true,false,false,false': [0.631, 15, 3], 'false,true': [0.928, 1, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.036, 55, 21]}]
{'': [0.22828254847645435, 0.2109248242293143], 'true': [0.015147928994082021, 0.023423999999999976], 'false': [8.198570028001156e-16, 6.29126380620922e-17], 'true,false': [7.723290606088045e-17, 0.0826446280991734], 'true,false,false': [0.034438775510204134, 0.24000000000000005], 'false,true': [-2.9605947323337506e-16, -2.220446049250313e-16]}
{'': [0.0003716332938873601, 0.11530400712374869], 'false': [0.07517126880187423, 0.1467227214974508], 'false,false': [0.07136245077787656, 0.15940454644785987], 'false,false,false': [0.0, 0.14678432526198215], 'false,true': [nan, 0.07517126880187423], 'false,true,false': [0.07517126880187423, nan], 'false,false,true': [nan, 0.07136245077787656]}
{'': [0.01924050146058664, 0.10005776983923094], 'false': [nan, 0.10005776983923122], 'false,false': [0.05427533799450086, 0.08392209230960868], 'false,false,false': [0.0723510410477188, 0.11012985222641822], 'false,false,true': [0.0025619182552664523, 0.07638888888888888], 'true': [0.01999297304126082, 0.011886682018111605], 'true,true': [0.01999297304126082, nan], 'true,false': [0.016988848859485595, -4.4408920985006264e-17]}
{'': [0.10230638148438471, 0.10855005262747326], 'false': [0.07188075849566063, 0.13565274518749612], 'false,false': [0.0, 0.13635839287971854], 'false,false,false': [nan, 0.13635839287971854], 'true': [0.06682164620378782, 9.636373805534005e-05], 'false,true': [0.007310709511134863, 5.005447745069886e-07]}
{'': [0.027240768397942972, 0.07746532364091153], 'false': [0.0008755067576992397, 0.07558827397355869], 'false,false': [0.05690439642845051, 0.10209945013356699], 'false,false,true': [0.00032026879488296817, 6.964859577277714e-05], 'true': [0.027642876623902687, 0.0], 'false,true': [0.00010288521794883654, 0.0]}
{'': [0.04033709187274565, 0.08219548010392971], 'false': [0.0006355020974164614, 0.08660220914334132], 'false,false': [0.07603297463892321, 0.0004913121957433568], 'true': [nan, 0.04033709187274572], 'true,false': [nan, 0.04033709187274565], 'false,false,false': [0.0005689749793177321, 0.0004359626574959858]}
{'': [0.048521480673442446, 0.06329727405638777], 'false': [nan, 0.06329727405638776], 'false,false': [nan, 0.06329727405638777], 'false,false,false': [nan, 0.06329727405638777], 'true': [0.03222655179134093, 0.006460737490097449]}
{'': [0.00017485210373619674, 0.03995378752897239], 'false': [nan, 0.03995378752897249], 'false,false': [0.02337861695216407, 0.05557134602241338], 'false,false,false': [0.030560126129999112, 0.09184170399260044], 'false,false,true': [0.023820951895319967, 0.019782306996931627], 'true': [0.0001571509456010574, 6.861662717601996e-05], 'true,false': [6.861662717601996e-05, nan]}
{'': [0.026374991562919732, 0.039018297985546437], 'false': [0.0246291034412728, 0.06531656238187118], 'false,false': [0.035419380956536656, 0.0952465663710809], 'false,false,false': [nan, 0.0952465663710809], 'false,false,true': [0.007036420535918032, 0.00013744178009360029], 'false,true': [0.017691166207998234, 9.308733243743898e-05], 'false,true,true': [0.017691166207998234, nan]}
{'': [0.026602727823763214, 0.06129060805076384], 'false': [0.14352281900501887, 0.05455435584528771], 'false,false': [nan, 0.05455435584528772], 'true': [0.03499307421968981, 0.0034665378586171735], 'true,true': [0.04291390559531246, 0.005572814663152078], 'true,false': [2.5526996991642028e-05, 0.013011393152774225], 'true,false,false': [5.7207457788612434e-05, 0.022136957646198756]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8040948810454575;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else return -0.05094197399139688;  // std dev = 0.287, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7067634022946734;  // std dev = 0.176, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5528067455442875;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.6451228310379166;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.47540780245230163;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0367639182022787;  // std dev = 2.406, 84.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | | | else return -0.06045094231767248;  // std dev = 0.812, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.0777862192602392;  // std dev = 0.225, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10096137052988133;  // std dev = 3.345, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.568006101530696;  // std dev = 0.164, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return -0.07661114594202378;  // std dev = 1.900, 98.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=6 */
%   | | | else return 0.09439274226528;  // std dev = 1.816, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6989141787278464;  // std dev = 0.160, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1328275370443662;  // std dev = 0.041, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5387671206681467;  // std dev = 0.848, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12689141672377244;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15821900396716818;  // std dev = 1.252, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.24287147184933905;  // std dev = 1.380, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.3881616160673798;  // std dev = 1.177, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.6168353864178183;  // std dev = 0.271, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5468121582887201;  // std dev = 0.172, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.11942111437709671;  // std dev = 0.140, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.384285162529817;  // std dev = 0.292, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.11569110440503727;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.550412002653269;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0924873686151881;  // std dev = 1.576, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.06554154210907936;  // std dev = 1.632, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.342977918785796;  // std dev = 0.038, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5609943045148266;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34189847270526014;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4898356714351568;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.35954810308371427;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4911076760868775;  // std dev = 0.384, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10609230794313974;  // std dev = 0.096, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07337737958816691;  // std dev = 0.921, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | | else return 0.04171870577344702;  // std dev = 2.477, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.27083068945407557;  // std dev = 0.087, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.07999490235284985;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.016979083665544792;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11332823568618318;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then return -0.04434924274042009;  // std dev = 0.182, 96.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=11 */
%   | | else return -0.05585129484667494;  // std dev = 0.175, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.28233988164586366;  // std dev = 0.200, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4574235632939793;  // std dev = 0.150, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.11629183319125418;  // std dev = 0.027, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, C), follows(A, D) )
%   | | then return 0.22460005465630112;  // std dev = 0.086, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.10854363226714914;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20776952441836866;  // std dev = 1.29e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.26101874625452803;  // std dev = 0.117, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2669117478282044;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.45820598536101936;  // std dev = 0.329, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08944850062328141;  // std dev = 0.057, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.0428726636178227;  // std dev = 0.666, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | | else return 0.03177444465624178;  // std dev = 2.008, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1984590875927211;  // std dev = 0.170, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.020814948144628954;  // std dev = 0.362, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return 0.2613683784632135;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3483484201725249;  // std dev = 0.083, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08321411397641112;  // std dev = 0.077, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2786289987281794;  // std dev = 0.539, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10596353869453835;  // std dev = 0.163, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.31373070063513886;  // std dev = 0.520, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06848279540749817;  // std dev = 1.205, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.10453594249461676;  // std dev = 0.977, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.16379430405632434;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1997963236634606;  // std dev = 0.130, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.013955569311626967;  // std dev = 0.736, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.02539105870421334;  // std dev = 0.117, 161.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=28 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.059590335449411884;  // std dev = 1.324, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.10716936724491277;  // std dev = 0.186, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.012316208913012888;  // std dev = 1.030, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.038890959631349295;  // std dev = 1.265, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10484150232691797;  // std dev = 0.220, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | else return 0.27358653526828713;  // std dev = 0.081, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.06949919521717662;  // std dev = 0.043, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return -0.14264985604568872;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.25034693220874227;  // std dev = 0.421, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09914518587235442;  // std dev = 0.207, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3732313048335367;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1626925430916466;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06690476062671008;  // std dev = 0.321, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.994', 'seconds']
Refined model CLL: -0.109749


******************************************
Best model found
******************************************
Results 

CLL : -0.102521 

AUC ROC : 0.992482 

AUC PR : 0.331671 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 8.266 

Total Inference Time : 12.842832803726196 

Total revision time: 31.888271982192993
Best scored revision CLL: -0.109749


Results 

CLL : -0.102521 

AUC ROC : 0.992482 

AUC PR : 0.331671 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 31.915005142211914 

Total Inference Time : 12.842832803726196 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.923
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8025933795439563;  // std dev = 2.173, 90.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11962884267826547;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7891834178581324;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048763;  // std dev = 8.74e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7052711192496995;  // std dev = 1.406, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03912692273162953;  // std dev = 3.252, 157.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06163704164240072;  // std dev = 1.515, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081799252676822;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1071280418664711;  // std dev = 3.930, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5660312998721151;  // std dev = 1.052, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7209837083666341;  // std dev = 0.217, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5993209800990648;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5957017528894032;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5725188584174299;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010324462530489156;  // std dev = 4.172, 204.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=28 */
%   | | | else return 0.03160297705891541;  // std dev = 2.928, 78.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4957453084648249;  // std dev = 2.313, 95.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=91 */
%   | else return -0.12357043656299382;  // std dev = 0.092, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46732517762230247;  // std dev = 0.097, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12461465338902698;  // std dev = 1.30e-05, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4246859156309728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05169239036408069;  // std dev = 2.748, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3105449787969923;  // std dev = 1.402, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.027130356988512738;  // std dev = 0.559, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3153036509714764;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.45308827154507914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5338175951570985;  // std dev = 1.333, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.10418024982440388;  // std dev = 1.016, 175.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=2 */
%   | | else return 0.022422208142529813;  // std dev = 0.313, 104.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04030201371820144;  // std dev = 2.947, 179.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=64 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21674541871633224;  // std dev = 1.005, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5235094303052914;  // std dev = 1.144, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1226351555520607;  // std dev = 0.158, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.1212837749060106;  // std dev = 0.133, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29008817210165777;  // std dev = 1.924, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | else return -0.09499783597616146;  // std dev = 1.282, 217.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059185972343461644;  // std dev = 2.002, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1675434750426199;  // std dev = 1.419, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2704005176321669;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03723586886465858;  // std dev = 1.805, 132.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=15 */
%   | | | else return -0.08003056199299512;  // std dev = 0.640, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.009743986100833142;  // std dev = 1.947, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
%   | | | else return 0.0579187146442994;  // std dev = 2.063, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1878559784390866;  // std dev = 0.062, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2872922308141207;  // std dev = 0.802, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09323816019876113;  // std dev = 0.104, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3536094370159554;  // std dev = 0.368, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09514993268222546;  // std dev = 0.059, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02737559113327675;  // std dev = 1.996, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1549512291813347;  // std dev = 1.773, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0.038454529076617026;  // std dev = 1.534, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.08437987874448578;  // std dev = 0.038, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09309428973156708;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.019375792742152738;  // std dev = 0.620, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.011891467395113625;  // std dev = 0.907, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026316987260325102;  // std dev = 2.353, 101.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.850', 'seconds']
Parameter learned model CLL:-0.115532 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.173, 5, 85], 'true,false,true': [0.0, 139, 0], 'true,false,false,true': [0.989, 44, 1], 'true,false,false,false': [1.155, 4, 2], 'false,true,true': [1.365, 2, 27], 'false,true,false': [0.0, 0, 9], 'false,false': [8.74e-09, 87, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.406, 2, 69], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.252, 141, 16], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.515, 38, 3], 'false,false,false,true': [0.935, 1, 7], 'false,false,false,false': [3.93, 77, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.052, 1, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.217, 0, 3], 'true,false,false': [2.98e-08, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.127, 0, 6], 'false,false,true,false': [0.0, 0, 14], 'false,false,false,true': [4.172, 176, 28], 'false,false,false,false': [2.928, 63, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.313, 4, 91], 'true,false': [0.092, 189, 0], 'false,true,true': [0.097, 0, 17], 'false,true,false': [1.3e-05, 32, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.748, 48, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.402, 2, 60], 'true,false': [0.559, 1, 1], 'false,true,true': [0.017, 0, 19], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.333, 2, 21], 'false,false,true,false': [1.016, 173, 2], 'false,false,false': [0.313, 84, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.947, 115, 64], 'false,true': [1.005, 1, 21], 'false,false,true': [1.144, 1, 39], 'false,false,false,true': [0.158, 62, 0], 'false,false,false,false': [0.133, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.924, 3, 94], 'true,false': [1.282, 212, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.002, 40, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.419, 2, 67], 'true,false,true': [0.042, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.805, 117, 15], 'false,false,true,false': [0.64, 22, 1], 'false,false,false,true': [1.947, 80, 23], 'false,false,false,false': [2.063, 36, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.062, 0, 61], 'false,true,true,true': [0.802, 0, 34], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.104, 172, 0], 'false,false,true,true': [0.368, 0, 16], 'false,false,true,false': [0.059, 39, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.996, 38, 13]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.773, 3, 67], 'true,true,false': [1.534, 3, 18], 'true,false,true': [0.038, 111, 0], 'true,false,false,true': [0.031, 21, 0], 'true,false,false,false': [0.62, 12, 3], 'false,true': [0.907, 1, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.353, 72, 29]}]
{'': [0.21551020408163354, 0.20505600000000138], 'true': [0.052469135802469286, 0.015540166204985996], 'false': [0.04986149584487714, 7.656710514656253e-17], 'false,true': [0.06420927467300945, -2.9605947323337506e-16], 'true,false': [-7.348238724137727e-17, 0.05536332179930781], 'true,false,false': [0.021728395061728464, 0.22222222222222224]}
{'': [0.027826932619287453, 0.10760773677206274], 'false': [0.06735385626337281, 0.14020405014789636], 'false,false': [0.05594730166549386, 0.1595067306268075], 'false,false,false': [0.10937500000000011, 0.145672503792186], 'false,true': [nan, 0.06735385626337281], 'false,true,false': [0.06735385626337281, nan], 'false,false,true': [nan, 0.05594730166549386]}
{'': [0.019783223917164822, 0.10709320141069752], 'false': [nan, 0.10709320141069735], 'false,false': [0.0009190336793284626, 0.09248310730634261], 'false,false,false': [0.0853356752374651, 0.10990471146649791], 'true': [0.02129974325635126, 0.007812442761559879], 'true,true': [0.02129974325635126, nan], 'true,false': [0.015680202257209935, 1.2688263138573217e-16], 'false,false,true': [0.002687232980493374, -2.5376526277146434e-16]}
{'': [0.10424571902007425, 0.104002478580411], 'true': [0.056300013080276864, 4.4570074343800174e-05], 'false': [0.0826847700591965, 0.12008981254192592], 'false,false': [0.0, 0.11982218488804418], 'false,false,false': [nan, 0.11982218488804416], 'false,true': [0.00949876264507101, 1.6853706798214407e-10]}
{'': [0.03804147456605422, 0.07321058005729153], 'false': [0.0009159461181520667, 0.0710616533251779], 'false,false': [0.05597523390051611, 0.09797737551986986], 'false,false,true': [0.07726760194304966, 0.005894238918556538], 'true': [0.03172200356376066, 0.15613134802777498], 'false,true': [1.4923725250552616e-05, 0.0]}
{'': [0.048506752450441205, 0.0867307287523772], 'false': [0.04592250513629512, 0.08890130893379164], 'false,false': [0.03273045850520697, 0.00037489513137647874], 'true': [nan, 0.048506752450441386], 'true,false': [nan, 0.048506752450441205], 'false,false,false': [0.0004025307938015634, 0.0003409517058680346]}
{'': [0.04868585990064982, 0.06163484319678033], 'false': [nan, 0.061634843196780205], 'false,false': [nan, 0.06163484319678033], 'false,false,false': [nan, 0.06163484319678033], 'true': [0.03817606917606744, 0.007574072490960388]}
{'': [0.02867169107832865, 0.039219752461092515], 'false': [nan, 0.03921975246109255], 'false,false': [0.023899959209301675, 0.05294105769820394], 'false,false,false': [0.03680828440027361, 0.08185404361869418], 'true': [0.029179396921642068, 0.0008742843641781906], 'false,false,true': [0.024687921149510697, 0.01781811111284152], 'true,false': [0.0008742843641781906, nan]}
{'': [0.0038504484029391692, 0.036679696035942934], 'false': [0.023128586859950638, 0.060479262455596115], 'false,false': [0.0440662346031935, 0.07814619070526677], 'false,false,false': [nan, 0.07814619070526677], 'false,false,true': [0.008459556709364546, 8.938336124402174e-05], 'false,true': [0.018909145949846873, 6.307564854551086e-05], 'false,true,true': [0.018909145949846873, nan]}
{'': [0.03602529307707417, 0.05833839956205423], 'false': [0.10272681669540311, 0.05480721226039444], 'false,false': [nan, 0.05480721226039445], 'true': [0.06281693514276376, 0.0030471931657850516], 'true,true': [0.044892517992937704, 0.11212539143555186], 'true,false': [1.2920796678514798e-05, 0.012037342777283614], 'true,false,false': [4.594304456271926e-05, 0.02565522593737217]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.093
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12185106490048775;  // std dev = 0.990, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995115;  // std dev = 4.21e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7109683600693107;  // std dev = 0.121, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.11778665432048305;  // std dev = 0.860, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   | | | else return -0.01612346947458262;  // std dev = 0.871, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.6907574591975589;  // std dev = 0.939, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12604116371668533;  // std dev = 0.008, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6837591264966688;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15619471171805724;  // std dev = 1.380, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.1995238425252032;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.49746562688410967;  // std dev = 0.237, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | else return 0.677656174932914;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.6123261740907829;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5641671902875589;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23083385695422556;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5797972414274313;  // std dev = 0.044, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(I, A) )
%   | | then return -0.06146023017342683;  // std dev = 0.186, 187.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07317105187381019;  // std dev = 2.376, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | | else return 0.1659440631188435;  // std dev = 2.160, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.4344213871856567;  // std dev = 0.177, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.465710250085989;  // std dev = 0.980, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.6501531106128782;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11170207276514656;  // std dev = 0.145, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.45163036136479945;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10676052984719672;  // std dev = 0.002, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.4258228551566501;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.02763287246589315;  // std dev = 1.871, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.19757488975731424;  // std dev = 1.340, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.332111988694366;  // std dev = 0.049, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.26599962246263026;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.12520518326397442;  // std dev = 1.043, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.253645112730477;  // std dev = 0.340, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33502076884933973;  // std dev = 0.047, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49942526564394185;  // std dev = 0.187, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09734442830815918;  // std dev = 0.025, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03506868343839489;  // std dev = 2.272, 78.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return 0.12982185629306117;  // std dev = 1.671, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.22769451200464255;  // std dev = 0.983, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.11962324816474894;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.29665326027671335;  // std dev = 0.059, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04441451193039415;  // std dev = 0.138, 124.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=12 */
%   | | else return -0.06616310553854121;  // std dev = 0.098, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26651598078840116;  // std dev = 0.201, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.35234488876699366;  // std dev = 1.294, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.477225830863593;  // std dev = 0.276, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12801918030101253;  // std dev = 0.042, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then return 0.2134805464262006;  // std dev = 0.112, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.23846480841963782;  // std dev = 0.174, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.34570620413576936;  // std dev = 1.058, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.08997807226521881;  // std dev = 0.374, 166.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.20797794292728522;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return -0.28282234589000105;  // std dev = 0.668, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.08115664304497942;  // std dev = 0.013, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.01822403151607877;  // std dev = 0.934, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.03457274197477475;  // std dev = 1.434, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16968966083313422;  // std dev = 0.118, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.27159141042928725;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.30253890488462615;  // std dev = 0.224, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09577908663324924;  // std dev = 0.780, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.07979214736398559;  // std dev = 0.060, 171.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2578981998430301;  // std dev = 0.277, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10036652747278324;  // std dev = 0.139, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.013434103004529312;  // std dev = 1.310, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return -0.018064170515125648;  // std dev = 1.306, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16849007982877162;  // std dev = 0.186, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.06988957569001472;  // std dev = 0.299, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1604193026566405;  // std dev = 0.129, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1992500421596978;  // std dev = 0.931, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.07232439312922596;  // std dev = 0.032, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23819638002387694;  // std dev = 0.114, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09228715775052737;  // std dev = 0.130, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0012235365837355017;  // std dev = 1.077, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | | else return 0.013078719561503449;  // std dev = 1.289, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15548230594559315;  // std dev = 0.364, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.06825394659078644;  // std dev = 0.022, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06522954464090697;  // std dev = 0.010, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.0349458947593468;  // std dev = 0.468, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.16979320400303724;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.18374657884359125;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07906084683591853;  // std dev = 0.029, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.010121677631228704;  // std dev = 1.060, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return 0.0377943627567147;  // std dev = 1.354, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.319', 'seconds']
Refined model CLL: -0.102542


******************************************
Best model found
******************************************
Results 

CLL : -0.097973 

AUC ROC : 0.993051 

AUC PR : 0.348615 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 10.093 

Total Inference Time : 21.34713864326477 

Total revision time: 45.261277404785154
Best scored revision CLL: -0.102542


Results 

CLL : -0.097973 

AUC ROC : 0.993051 

AUC PR : 0.348615 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 45.288010564804075 

Total Inference Time : 21.34713864326477 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.542
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7950858720364479;  // std dev = 2.561, 111.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08921948595311933;  // std dev = 1.376, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7113611705159;  // std dev = 1.408, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03442845072560864;  // std dev = 3.534, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05806672473464702;  // std dev = 1.802, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1325383752689123;  // std dev = 4.475, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5558988775928974;  // std dev = 1.455, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.719460328737882;  // std dev = 0.214, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5957822477754292;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5223467806523482;  // std dev = 0.783, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015547655644897363;  // std dev = 4.592, 257.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=34 */
%   | | | else return 0.04504673087778975;  // std dev = 3.526, 107.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5236528967980222;  // std dev = 1.696, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else return -0.12518448935137744;  // std dev = 0.148, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.470755154434363;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12739203877403582;  // std dev = 0.001, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.42501260528885987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07268984683352993;  // std dev = 3.356, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31866780954438706;  // std dev = 1.140, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4143632615898871;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.27028363502146846;  // std dev = 0.990, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.444658026988898;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6022546580504579;  // std dev = 0.140, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10070619154759813;  // std dev = 1.337, 192.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=3 */
%   | | else return 0.021771216487160707;  // std dev = 0.312, 142.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027655320021186067;  // std dev = 3.213, 252.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2675636503691055;  // std dev = 0.106, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5315579763419754;  // std dev = 1.110, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13167017521370472;  // std dev = 0.202, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.12602198790279204;  // std dev = 0.164, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26925054492211514;  // std dev = 2.543, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.09543271347829645;  // std dev = 1.747, 286.000 (wgt'ed) examples reached here.  /* #neg=279 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050336689881278394;  // std dev = 2.141, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19942851704594788;  // std dev = 0.095, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.22272818794094512;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03479521799972439;  // std dev = 1.926, 151.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=18 */
%   | | | else return -0.09343942619808002;  // std dev = 0.739, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026869342442693185;  // std dev = 2.411, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | | else return 0.02932639973617114;  // std dev = 2.600, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1582260555873478;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.22293545789056146;  // std dev = 1.983, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09260183860108881;  // std dev = 0.118, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3173893925140721;  // std dev = 0.411, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09408789729535734;  // std dev = 0.062, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04941659140571033;  // std dev = 2.401, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18195164793146587;  // std dev = 1.334, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.17640680819536042;  // std dev = 0.382, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08708489355044934;  // std dev = 0.398, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09313356290373571;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.0021866441473400297;  // std dev = 0.944, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.011646566693088722;  // std dev = 0.917, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01533269385746246;  // std dev = 2.761, 150.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.817', 'seconds']
Parameter learned model CLL:-0.115343 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.561, 7, 104], 'true,false,true': [0.0, 150, 0], 'true,false,false,true': [1.376, 36, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.408, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.534, 160, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.802, 45, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.475, 89, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.455, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.214, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.126, 0, 6], 'false,false,true,false': [0.783, 1, 15], 'false,false,false,true': [4.592, 223, 34], 'false,false,false,false': [3.526, 84, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.696, 1, 115], 'true,false': [0.148, 215, 0], 'false,true,true': [0.096, 0, 17], 'false,true,false': [0.001, 25, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.356, 60, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.14, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.99, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.14, 0, 26], 'false,false,true,false': [1.337, 189, 3], 'false,false,false': [0.312, 114, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.213, 170, 82], 'false,true': [0.106, 0, 22], 'false,false,true': [1.11, 0, 52], 'false,false,false,true': [0.202, 79, 0], 'false,false,false,false': [0.164, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.543, 5, 121], 'true,false': [1.747, 279, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.141, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.095, 0, 83], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.926, 133, 18], 'false,false,true,false': [0.739, 20, 1], 'false,false,false,true': [2.411, 99, 28], 'false,false,false,false': [2.6, 62, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.156, 2, 78], 'false,true,true,true': [1.983, 3, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 234, 0], 'false,false,true,true': [0.411, 0, 19], 'false,false,true,false': [0.062, 53, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.401, 49, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.334, 1, 85], 'true,true,false': [0.382, 0, 19], 'true,false,true': [0.398, 159, 0], 'true,false,false,true': [0.039, 25, 0], 'true,false,false,false': [0.944, 17, 4], 'false,true': [0.917, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.761, 110, 40]}]
{'': [0.2287127116366593, 0.23215430336227555], 'false': [5.921189464667501e-16, 7.490661370964911e-17], 'true': [0.05908611314016963, 0.020193431820597203], 'true,false': [-1.1546319456101628e-16, 0.0826446280991734], 'true,false,false': [0.049861495844875335, 0.22222222222222224], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.02279691828226727, 0.11512126797290878], 'false': [0.06975954898653726, 0.14888743348418934], 'false,false': [0.06625325459815372, 0.16512040874898334], 'false,false,false': [0.0, 0.15524406985891526], 'false,true': [nan, 0.06975954898653726], 'false,true,false': [0.06975954898653726, nan], 'false,false,true': [nan, 0.06625325459815372]}
{'': [0.02800992356461789, 0.1049171963696425], 'false': [nan, 0.10491719636964283], 'false,false': [0.029627570649551845, 0.09284119485047594], 'false,false,false': [0.08203213654187509, 0.1162107713931995], 'false,false,true': [0.002625833388694302, 0.038282467259213915], 'true': [0.030691015579701327, 0.009505591345254617], 'true,true': [0.030691015579701327, nan], 'true,false': [0.015270703740636845, -1.1102230246251565e-16]}
{'': [0.10458802800332238, 0.1206563176541587], 'false': [0.08989446330820476, 0.13556018348106655], 'false,false': [0.0, 0.13571568482128268], 'false,false,false': [nan, 0.13571568482128266], 'true': [0.02479415720126612, 0.00010234007956717686], 'false,true': [0.009125061603161106, 1.915976385440388e-06]}
{'': [0.016572077874352196, 0.07786822363103878], 'false': [0.04589102554730005, 0.07531248991619413], 'false,false': [0.060192492674324194, 0.09762084725803853], 'false,false,true': [0.0007571851232017415, 0.009305230979709615], 'false,true': [0.046694202088396135, 0.0], 'true': [0.01666862117649159, 0.0]}
{'': [0.04095840701346268, 0.08562210701614495], 'false': [0.0005067069151177525, 0.08985274990462133], 'false,false': [0.023711752428801594, 0.00045841628233117326], 'true': [nan, 0.04095840701346265], 'true,false': [nan, 0.04095840701346268], 'false,false,false': [0.0005142757822682278, 0.00037946102375195146]}
{'': [0.051340624101390224, 0.05877120566050077], 'false': [nan, 0.058771205660500966], 'false,false': [nan, 0.05877120566050077], 'false,false,false': [nan, 0.05877120566050077], 'true': [0.05132413135046478, 0.010675004826252995]}
{'': [0.00012000632636117856, 0.04465955060339818], 'false': [nan, 0.044659550603397956], 'false,false': [0.02511294753083759, 0.0598061575631773], 'false,false,false': [0.04578355553315807, 0.07863103760886583], 'false,false,true': [0.02456874934843538, 0.026006743834318526], 'true': [0.00010855118081995429, 6.52937240075771e-05], 'true,false': [6.52937240075771e-05, nan]}
{'': [0.024353561727125016, 0.03916012284108583], 'false': [0.02698282223253762, 0.058805578059451816], 'false,false': [0.03528995960011047, 0.08237477354275505], 'false,false,false': [nan, 0.08237477354275505], 'false,false,true': [0.00889287240067227, 7.309910213253089e-05], 'false,true': [0.09592576569618841, 5.902043888597869e-05], 'false,true,true': [0.09592576569618841, nan]}
{'': [0.025195300438491504, 0.05322041249917839], 'false': [0.09335795036136488, 0.05081139112177895], 'false,false': [nan, 0.050811391121778925], 'true': [0.01834504315148584, 0.005873029533586473], 'true,true': [0.020694932097684943, 0.00768352188887001], 'true,false': [0.0009954942488600398, 0.021643549353414986], 'true,false,false': [6.184767962385207e-05, 0.042398039458925695]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.57
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995121;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.09929787341112603;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7028067455442877;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7251239146986217;  // std dev = 0.018, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.02795409421231283;  // std dev = 0.270, 156.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | else return -0.09618420052504664;  // std dev = 0.160, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.02365819197330316;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.08502185224382626;  // std dev = 1.214, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5194734122109546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1246892626946299;  // std dev = 4.494, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5228844334321918;  // std dev = 1.392, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.5584139934980364;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5594781233728687;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.6261496635819735;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5601735702183219;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7425212744019994;  // std dev = 0.159, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1240672990950074;  // std dev = 0.241, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.03147350218777472;  // std dev = 2.877, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   | | | else return 0.17591018702468575;  // std dev = 3.284, 66.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.42450256895066224;  // std dev = 0.172, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.462817248355916;  // std dev = 1.023, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.6305310878457777;  // std dev = 0.970, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return -0.11804118144315118;  // std dev = 0.015, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.44701619882591226;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10394890151410124;  // std dev = 0.002, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.4149725441071712;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.09729091834685222;  // std dev = 2.608, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.19528755639900314;  // std dev = 1.622, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.329271685862368;  // std dev = 0.086, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.13340940220203185;  // std dev = 1.329, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0.39361163531514415;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3774016156676251;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3152500355279457;  // std dev = 0.018, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.45121018503356297;  // std dev = 1.059, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.09466118880125958;  // std dev = 1.200, 180.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07255414689899013;  // std dev = 1.041, 76.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=3 */
%   | | | else return 0.07608397483001042;  // std dev = 3.238, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.2644386241631844;  // std dev = 0.113, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return -0.028146990597745836;  // std dev = 0.696, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.056442484919198545;  // std dev = 0.115, 173.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=14 */
%   | | else return -0.06385605281488592;  // std dev = 0.123, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.2507608408628106;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07998897634538299;  // std dev = 0.939, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.08866728070971712;  // std dev = 1.434, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.5125502888614568;  // std dev = 1.177, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13417034287556326;  // std dev = 0.040, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23149862240336402;  // std dev = 0.050, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return -0.03585943796209745;  // std dev = 1.304, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F), follows(G, E) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2260545532464499;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13082403663722483;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.2648420381461172;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.36742804940934126;  // std dev = 0.233, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08342435423360114;  // std dev = 0.728, 221.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=1 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return -0.004950033642775936;  // std dev = 1.470, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.041627303841475324;  // std dev = 2.658, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16391617161438723;  // std dev = 0.120, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else return 0.18876947652937376;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.23230127880708273;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, F) )
%   | | | then return 0.24209585602704514;  // std dev = 0.932, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5025981502425197;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07976040872227148;  // std dev = 0.009, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22780533121721522;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 9.162540628512339E-4;  // std dev = 1.678, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
%   | | | else return 0.0831003360998514;  // std dev = 2.299, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13574501623999707;  // std dev = 0.994, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return -0.054624668255472485;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1893362967714662;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.21227089244011574;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then return -0.04302466214270945;  // std dev = 0.118, 276.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=38 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.33093227409851644;  // std dev = 0.172, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1109917297197196;  // std dev = 0.097, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.005873027194872704;  // std dev = 2.018, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.04569592132214317;  // std dev = 1.313, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.13208713529885063;  // std dev = 1.020, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return -0.3071248654035728;  // std dev = 0.946, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2007455070903941;  // std dev = 0.046, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06529944030996426;  // std dev = 0.055, 227.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15986595173324986;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26256709277767143;  // std dev = 0.154, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10279047320819013;  // std dev = 0.091, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.023046031143840344;  // std dev = 2.077, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
%   | | | else return -0.03190251736537119;  // std dev = 1.416, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.037', 'seconds']
Refined model CLL: -0.114064


******************************************
Best model found
******************************************
Results 

CLL : -0.106184 

AUC ROC : 0.993467 

AUC PR : 0.376005 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 9.57 

Total Inference Time : 20.27031683921814 

Total revision time: 46.68670464706421
Best scored revision CLL: -0.114064


Results 

CLL : -0.106184 

AUC ROC : 0.993467 

AUC PR : 0.376005 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 46.71343780708313 

Total Inference Time : 20.27031683921814 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.298
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.022405851852861397;  // std dev = 1.770, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10498755712779385;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.019749621998845415;  // std dev = 2.025, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | | else return -0.046692187359149095;  // std dev = 0.785, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.42932338866018477;  // std dev = 1.508, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else return -0.12666614257375142;  // std dev = 0.035, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.02879617004031167;  // std dev = 0.200, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5625360452025614;  // std dev = 0.205, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31857237379537445;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3040577464617612;  // std dev = 0.020, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3544630704712515;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6173722800174678;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11402813818192624;  // std dev = 0.041, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.10053686799365175;  // std dev = 0.188, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03988033646517308;  // std dev = 1.540, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2466099326334238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.20103112252751099;  // std dev = 1.108, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12894796225076144;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.13345074298711454;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30706347030699166;  // std dev = 0.455, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.09987303951064913;  // std dev = 1.011, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08254955143341054;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.12443035640759761;  // std dev = 0.964, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2678419199874903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05740219904757103;  // std dev = 1.310, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | | else return -0.10001577191791715;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04276246439909721;  // std dev = 0.854, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 7.495355909215415E-5;  // std dev = 0.712, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17802253038065644;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.31862042038199934;  // std dev = 0.314, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08939268649038207;  // std dev = 0.034, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3329408421666258;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08842714545059624;  // std dev = 0.000325, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03714994448455302;  // std dev = 0.675, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.06411088547736536;  // std dev = 1.643, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, C) )
%   | | then return -0.0838151362022483;  // std dev = 0.000362, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0676787917059638;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07166037717047546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.16995721649776518;  // std dev = 0.832, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13271038104540833;  // std dev = 0.646, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.425', 'seconds']
Parameter learned model CLL:-0.113956 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [2.79e-08, 31, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [4.21e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.77, 36, 5], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.248, 8, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [2.025, 34, 7], 'false,false,false,false': [0.785, 9, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.508, 2, 19], 'true,false': [0.035, 34, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.2, 5, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.205, 0, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.003, 0, 12], 'true,false': [0.02, 0, 2], 'false,true,true': [0.086, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.036, 0, 7], 'false,false,true,false': [0.041, 43, 0], 'false,false,false': [0.188, 14, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.54, 37, 19], 'false,true': [0.0, 0, 1], 'false,false,true': [1.108, 1, 5], 'false,false,false,true': [0.107, 9, 0], 'false,false,false,false': [0.108, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.455, 0, 23], 'true,false': [1.011, 51, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.964, 1, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.31, 30, 5], 'false,false,true,false': [0.002, 7, 0], 'false,false,false,true': [0.854, 9, 3], 'false,false,false,false': [0.712, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.01, 0, 14], 'false,true,true,true': [0.314, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 46, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.000325, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.675, 5, 1]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.643, 3, 20], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.000362, 30, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.832, 1, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.646, 3, 3]}]
{'': [0.22592152199762144, 0.24793388429752045], 'false': [0.0, -6.938893903907228e-18], 'true': [-8.881784197001253e-17, 4.0902953538821554e-17], 'true,false': [2.5069552168955147e-17, -7.93016446160826e-18], 'false,true': [0.0, nan], 'true,false,false': [-6.938893903907228e-18, 0.0]}
{'': [1.1842378929335003e-16, 0.09784523551659237], 'false': [0.07644233922887084, 0.13385372108722055], 'false,false': [-1.982541115402065e-18, 0.16896722188524882], 'false,false,false': [0.0, 0.1415973247864811], 'false,true': [nan, 0.07644233922887084], 'false,true,false': [0.07644233922887084, nan], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [-2.5376526277146434e-16, 0.10379780360556244], 'false': [nan, 0.10379780360556241], 'false,false': [3.700743415417188e-17, 0.09318072789172664], 'false,false,false': [0.10000988020202578, 0.061632280375160095], 'false,false,true': [3.700743415417188e-17, nan], 'true': [-2.590520390792032e-16, 0.0], 'true,false': [nan, 0.0], 'true,true': [-2.590520390792032e-16, nan]}
{'': [0.11433220980104011, 0.09090719537215065], 'true': [0.10828798989148661, 3.610380239706684e-05], 'false': [0.07082396326856324, 0.02103151420733146], 'false,true': [-3.700743415417188e-17, 0.03983847933856682], 'false,false': [nan, 0.02103151420733146], 'false,false,false': [nan, 0.02103151420733146]}
{'': [5.492955934519436e-05, 0.0629594573741229], 'false': [0.0024559880263456124, 0.059157724014930836], 'false,false': [0.06446762556737058, 0.03537800494787092], 'false,false,true': [0.00018699720145536652, 3.939386209304679e-05], 'false,true': [0.0024559880263456124, nan], 'true': [9.154692557726088e-07, 0.00019843603705285706]}
{'': [0.04236035148031251, 0.08177771094296443], 'false': [0.0, 0.08204266992745193], 'false,false': [0.20467970018884518, 0.0015369723458446005], 'true': [nan, 0.04236035148031254], 'true,false': [nan, 0.04236035148031251], 'false,false,false': [0.0012673121741010904, 0.0019292975828440844]}
{'': [0.0511186730010979, -9.912705577010326e-19], 'true': [0.008989988247228187, 0.01928595308681288], 'false': [nan, -9.912705577010326e-19], 'false,false': [nan, -9.912705577010326e-19], 'false,false,false': [nan, -9.912705577010326e-19]}
{'': [0.059318935980506145, 0.04898966552722318], 'true': [0.06198810192701301, 0.0], 'false': [nan, 0.04898966552722321], 'false,false': [0.04109068482997461, 0.06548108226993889], 'false,false,false': [0.06072010645043432, 0.07248377970717032], 'false,false,true': [0.049006068137459745, 5.044652353922549e-07], 'true,false': [0.0, nan]}
{'': [0.00010054990482213129, 0.029377473959918937], 'false': [0.02285611516990059, 0.05578784120188462], 'false,false': [0.03623490916872657, 0.07602752763536808], 'false,false,false': [nan, 0.07602752763536808], 'false,false,true': [0.0, 2.112519223163023e-08], 'false,true': [0.012321288515466697, 2.5341101866353497e-05], 'false,true,true': [0.012321288515466697, nan]}
{'': [0.05251849021852085, 0.14352693434146366], 'false': [0.23050327992737232, 0.06950287001432386], 'false,false': [nan, 0.06950287001432386], 'true': [0.11737878927262804, 2.415094866446617e-05], 'true,true': [0.11737878927262804, nan], 'true,false': [4.36013806448532e-09, 2.9724417771014033e-06], 'true,false,false': [-5.782411586589357e-19, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.231
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(F, C), tweets(F, G) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.05443734188917585;  // std dev = 1.300, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08185771387815809;  // std dev = 0.685, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.04134505203824684;  // std dev = 1.241, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07843431458221282;  // std dev = 1.029, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.14842563158279376;  // std dev = 0.686, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4175135841583098;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5841280217915436;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6004325145823405;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.10832335780145323;  // std dev = 0.006, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.14404994499973045;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(I, A), tweets(I, J) )
%   | then if ( follows(K, I), recursion_accounttype(K, B) )
%   | | then return 0.4725619529316322;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.06553271440547374;  // std dev = 0.431, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, L), follows(L, M) )
%   | | then return -0.14944151133903322;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.01057952906247068;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.33127513069367565;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.34858703768151844;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3437396269666697;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.47147986128901626;  // std dev = 0.137, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09973359209527706;  // std dev = 0.065, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.11343782266932907;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.13074702044268674;  // std dev = 0.666, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25316978890013697;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2954216191983253;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.147684879459485;  // std dev = 0.990, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.08898602827223481;  // std dev = 0.027, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1066715440480753;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25082032498828744;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4130338332882079;  // std dev = 0.315, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1248759382591742;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09392441339229538;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.11728189337009196;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.2321286202212031;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.296744995715933;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08362521590696663;  // std dev = 0.031, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1819153628258904;  // std dev = 0.360, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.04572966377738916;  // std dev = 0.646, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18797011443487932;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.19182937982842652;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2192895450252048;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.030178266081536873;  // std dev = 0.112, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else return -0.08414201522052868;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24276758436018306;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09600455521843936;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.20444010425020218;  // std dev = 0.494, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.07324880949629808;  // std dev = 0.275, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.18769118953145747;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15960629254453437;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2442937316710851;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0738359892898272;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.08564796251483668;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.24961817101325834;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.10990341191891115;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.020506109715322657;  // std dev = 0.582, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.15158966620866995;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13939912853041225;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20206004996310561;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0685545668160141;  // std dev = 0.016, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.07566485457159358;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06693957877747242;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0690136599216289;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.02378328757474942;  // std dev = 0.299, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.559', 'seconds']
Refined model CLL: -0.111365


******************************************
Best model found
******************************************
Results 

CLL : -0.113988 

AUC ROC : 0.99403 

AUC PR : 0.330751 

Precision : 0.330073 

Recall : 0.865385 

F1 : 0.477876 

Total Learning Time : 3.231 

Total Inference Time : 6.27300763130188 

Total revision time: 13.717963651657104
Best scored revision CLL: -0.111365


Results 

CLL : -0.113988 

AUC ROC : 0.99403 

AUC PR : 0.330751 

Precision : 0.330073 

Recall : 0.865385 

F1 : 0.477876 

Total Learning Time : 13.744696811676025 

Total Inference Time : 6.27300763130188 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.815
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804642;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7316418432408535;  // std dev = 0.078, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.0017774445781209205;  // std dev = 2.621, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.057324490518153914;  // std dev = 1.983, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5383509660291733;  // std dev = 0.841, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6704473884991987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5641023575484714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5641023575484714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02959822362053134;  // std dev = 2.545, 86.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=10 */
%   | | | else return 0.057831869124787987;  // std dev = 1.978, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4233317062569695;  // std dev = 2.024, 40.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=36 */
%   | else return -0.12438799045114357;  // std dev = 0.107, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5115517815238186;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10326144962414249;  // std dev = 0.121, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22502800301152173;  // std dev = 1.439, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3052023987936529;  // std dev = 0.779, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.36290609917946587;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3462979033083851;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6401285372751155;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1097709009209966;  // std dev = 0.024, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return 0.014172683344161047;  // std dev = 0.303, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06041688043111272;  // std dev = 2.273, 101.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2767178752231338;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5189272384321112;  // std dev = 0.461, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11794458185173035;  // std dev = 0.126, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.13763545788798212;  // std dev = 0.117, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30506176930976137;  // std dev = 1.179, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.08402255382243126;  // std dev = 1.110, 87.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.050868586423306134;  // std dev = 0.274, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13077357118649272;  // std dev = 1.371, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.24773443704667553;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.02804918520135644;  // std dev = 1.365, 64.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=9 */
%   | | | else return -0.055750153098693855;  // std dev = 0.844, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07565683376309479;  // std dev = 0.846, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0.056119691425754376;  // std dev = 1.217, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1260510156306217;  // std dev = 0.223, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3469113208417032;  // std dev = 0.484, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09642567446489105;  // std dev = 0.100, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2895300380064961;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08085399602695317;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1396401835470014;  // std dev = 1.052, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.21076886560663288;  // std dev = 0.555, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.14437255856603914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08961693601532396;  // std dev = 0.053, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07124662457918612;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.02171952810696157;  // std dev = 0.208, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14835097162293404;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03734697643107011;  // std dev = 1.154, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.605', 'seconds']
Parameter learned model CLL:-0.118241 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.38, 2, 40], 'true,false,true': [7.88e-08, 83, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.078, 0, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.621, 65, 11], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.983, 25, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.841, 1, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.545, 76, 10], 'false,false,false,false': [1.978, 24, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.024, 4, 36], 'true,false': [0.107, 66, 0], 'false,true,true': [0.13, 0, 7], 'false,true,false': [0.121, 19, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.439, 7, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.779, 1, 25], 'true,false': [0.061, 0, 3], 'false,true,true': [0.116, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.031, 0, 10], 'false,false,true,false': [0.024, 68, 0], 'false,false,false': [0.303, 30, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.273, 63, 38], 'false,true': [0.055, 0, 3], 'false,false,true': [0.461, 0, 9], 'false,false,false,true': [0.126, 18, 0], 'false,false,false,false': [0.117, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.179, 1, 45], 'true,false': [1.11, 83, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.274, 7, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.371, 2, 28], 'true,false,true': [0.054, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.365, 55, 9], 'false,false,true,false': [0.844, 18, 2], 'false,false,false,true': [0.846, 22, 3], 'false,false,false,false': [1.217, 12, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.223, 2, 28], 'false,true,true,true': [0.484, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 91, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.001, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.052, 6, 5]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.555, 0, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.053, 65, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.208, 3, 1], 'false,true': [0.04, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.154, 17, 7]}]
{'': [0.20709183673469508, 0.2140309155766945], 'false': [-2.9605947323337506e-16, 2.7755575615628915e-18], 'true': [0.045351473922903854, 0.010099958350687289], 'true,false': [7.490661370964911e-17, 0.06222222222222227], 'true,false,false': [-1.2810265668751807e-17, 0.25], 'false,true': [-2.9605947323337506e-16, nan]}
{'': [0.00020497589347942362, 0.09990928753640316], 'false': [0.0884360038557279, 0.1187842799470255], 'false,false': [0.0, 0.13993801254467741], 'false,false,false': [0.0, 0.12289347982878221], 'false,true': [nan, 0.0884360038557279], 'false,true,false': [0.09037112416997291, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.02496464521724188, 0.0993962297552293], 'false': [nan, 0.09939622975522931], 'false,false': [0.0, 0.0903033344421305], 'false,false,false': [0.07533135276047907, 0.126219827241039], 'true': [0.027188379212931355, 0.0029430278791902817], 'true,true': [0.027188379212931355, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.10923214858739032, 0.1173116474936264], 'false': [0.0878486688365926, 0.1592496191187645], 'false,false': [nan, 0.1592496191187645], 'false,false,false': [nan, 0.1592496191187645], 'true': [0.10238792888716519, 0.00017379593747676137], 'false,true': [0.01701454638737876, 0.014641827828551718]}
{'': [0.021364973412007097, 0.0743035820547151], 'false': [0.0027130332151606763, 0.07228334690056921], 'false,false': [0.06287278140979885, 0.09159754997316297], 'false,false,true': [9.835968818876495e-05, 8.266912476117779e-06], 'true': [0.0233440015995661, 0.0012281322349919077], 'false,true': [0.0027130332151606763, nan]}
{'': [0.05116333199239407, 0.0798105548809528], 'false': [0.0010067382289383013, 0.08147612209933902], 'false,false': [0.023584377176470647, 0.001111597043361897], 'true': [nan, 0.05116333199239381], 'true,false': [nan, 0.05116333199239407], 'false,false,false': [0.0008881406704884674, 0.0012365925544059843]}
{'': [0.05397626866813407, 0.009385024520866585], 'true': [0.03024202626624249, 0.014166129506852585], 'false': [nan, 0.009385024520866585], 'false,false': [nan, 0.009385024520866585], 'false,false,false': [nan, 0.009385024520866585]}
{'': [0.05962739263502874, 0.0391497819981951], 'true': [0.06264983873839527, 0.0014658472006896933], 'false': [nan, 0.039149781998195216], 'false,false': [0.030793448832388094, 0.05534134942482348], 'false,false,false': [0.028659042686671264, 0.08230414797473601], 'false,false,true': [0.029096096774859147, 0.035640332656519336], 'true,false': [0.0014658472006896933, nan]}
{'': [0.0499171161730099, 0.035649939045451044], 'false': [0.026178643496722102, 0.0780358377402256], 'false,false': [0.030485672727059262, 0.10064921924918925], 'false,false,false': [nan, 0.10064921924918925], 'false,false,true': [0.0, 3.982016251145859e-07], 'false,true': [0.01558899985534016, 0.00011083659423265209], 'false,true,true': [0.01558899985534016, nan]}
{'': [0.02309416111204936, 0.05219586263896759], 'false': [0.0008108531365112713, 0.05553010930659111], 'false,false': [nan, 0.05553010930659111], 'true': [0.007795597792400905, 0.0008803512402778911], 'true,true': [0.007885273175567272, 0.0], 'true,false': [4.373123782670689e-05, 0.0060212525921848805], 'true,false,false': [0.0, 0.010816038541885242]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 4.421
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.15e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7241638934913043;  // std dev = 0.138, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.006628037643171008;  // std dev = 2.350, 64.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=9 */
%   | | | else return -0.01206044126543055;  // std dev = 1.200, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.13981214937855652;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7816289395752953;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10697284202555332;  // std dev = 1.960, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5163261376434745;  // std dev = 0.213, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.554207896082565;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.7488873956912193;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6209436491414324;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5542078960825652;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11075615320599351;  // std dev = 0.838, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | | else return 0.06770852761006288;  // std dev = 2.275, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04790707667434678;  // std dev = 1.041, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.2948728109472691;  // std dev = 1.369, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2954554502585903;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.45876947046675115;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6997561308519429;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6141857214102723;  // std dev = 0.179, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.12036685830630842;  // std dev = 0.099, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.02505723476233574;  // std dev = 1.215, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.5943184100310658;  // std dev = 0.355, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12832181068620857;  // std dev = 0.112, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.17021749119018523;  // std dev = 0.404, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.3137777598050793;  // std dev = 0.210, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.4105776401993164;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.40669738704315944;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2997221366157726;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.549100589572861;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11030593660347482;  // std dev = 0.102, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10085266440783199;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0442196310929579;  // std dev = 1.825, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.28694027358809665;  // std dev = 0.087, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.056822783456726166;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.027638225778001325;  // std dev = 0.172, 67.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=9 */
%   | | else return -0.04827091743714962;  // std dev = 0.208, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29127123178513115;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.11546320052584699;  // std dev = 0.829, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5687268905129557;  // std dev = 0.269, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1477431761807226;  // std dev = 0.157, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.13921042598835578;  // std dev = 0.216, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.23598261438043022;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, A), tweets(C, E) )
%   | | | then return -0.038669003440151395;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2439614195415816;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.05745464908054102;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, F) )
%   | then return -0.0333777241070219;  // std dev = 0.181, 87.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1000165451005394;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.05738140142533892;  // std dev = 0.954, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06393935874278041;  // std dev = 0.686, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.059744491768599715;  // std dev = 0.989, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1957915070082516;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.13916563709917373;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23436072566500524;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22646239208218866;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.46235157201380095;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09402987407321575;  // std dev = 0.109, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1168775354031134;  // std dev = 0.547, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.10063108632528857;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13923517159611845;  // std dev = 0.315, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then return 0.16784175800650633;  // std dev = 0.045, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.06724183717907899;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12979969145229825;  // std dev = 0.970, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.30238375418328756;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08609983226662747;  // std dev = 0.109, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3600198073344877;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.10454068950676398;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01607822465182296;  // std dev = 0.704, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.03238172275770935;  // std dev = 1.070, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11576896867671208;  // std dev = 0.967, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.29804866377132794;  // std dev = 0.246, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1836146779659541;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.07573131228434878;  // std dev = 0.035, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.11910601093807616;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return -9.061339816639966E-4;  // std dev = 0.327, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.026633103598394863;  // std dev = 0.313, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19054560152927488;  // std dev = 0.499, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19029881617158995;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.704', 'seconds']
Refined model CLL: -0.117911


******************************************
Best model found
******************************************
Results 

CLL : -0.128892 

AUC ROC : 0.99504 

AUC PR : 0.446894 

Precision : 0.342529 

Recall : 0.955128 

F1 : 0.50423 

Total Learning Time : 4.421 

Total Inference Time : 7.970430374145508 

Total revision time: 19.385304628372193
Best scored revision CLL: -0.117911


Results 

CLL : -0.128892 

AUC ROC : 0.99504 

AUC PR : 0.446894 

Precision : 0.342529 

Recall : 0.955128 

F1 : 0.50423 

Total Learning Time : 19.412037788391114 

Total Inference Time : 7.970430374145508 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.25
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.725415781023661;  // std dev = 0.120, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.01941778513108526;  // std dev = 3.073, 120.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=15 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14614132355575873;  // std dev = 2.312, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.49711871059780216;  // std dev = 1.611, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else return 0.22664411792169548;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7244084043624284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5579456521248631;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5579456521248631;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021735950157264174;  // std dev = 2.939, 114.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=14 */
%   | | | else return 0.020864217144608087;  // std dev = 2.257, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.49892575907654196;  // std dev = 1.214, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return -0.12224003698137759;  // std dev = 0.104, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.3696468145664258;  // std dev = 0.401, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.09779228078445155;  // std dev = 0.119, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07688366998956934;  // std dev = 1.872, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30610313570653436;  // std dev = 1.045, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.43312827681005783;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32341442266728837;  // std dev = 0.130, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6091528666209303;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1044807698434206;  // std dev = 0.692, 113.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=1 */
%   | | else return 0.02288340503197973;  // std dev = 0.306, 48.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028904557182999835;  // std dev = 2.910, 167.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25425002680161174;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5039376926419642;  // std dev = 0.612, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11298191168153882;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.11778894249046212;  // std dev = 0.116, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3025630878867119;  // std dev = 1.426, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else return -0.0823323807768807;  // std dev = 1.435, 146.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014172075076368447;  // std dev = 0.460, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15577687278612506;  // std dev = 1.371, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25798414243917966;  // std dev = 0.049, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04315258150634286;  // std dev = 1.607, 92.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=11 */
%   | | | else return 0.03652500026232002;  // std dev = 1.113, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030710260302046294;  // std dev = 0.875, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0.14073387787026362;  // std dev = 1.259, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1648842950753495;  // std dev = 0.166, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.21510141122831924;  // std dev = 1.562, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09330440703291899;  // std dev = 0.108, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.30647221590131546;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09350891181628104;  // std dev = 0.000774, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23760787435499253;  // std dev = 1.008, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19451736093823316;  // std dev = 1.309, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.14347072454549725;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08771991338737731;  // std dev = 0.097, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08195923395882336;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.04744233552155491;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1275359201159297;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.011930437531891165;  // std dev = 1.472, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.831', 'seconds']
Parameter learned model CLL:-0.11734 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false,true': [7.45e-09, 20, 0], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 1, 0], 'false,false': [4.17e-09, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.12, 0, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.073, 105, 15], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 20, 0], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [2.312, 23, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.611, 3, 38], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.939, 100, 14], 'false,false,false,false': [2.257, 41, 9]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.214, 1, 55], 'true,false': [0.104, 115, 0], 'false,true,true': [0.401, 2, 12], 'false,true,false': [0.119, 19, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.872, 16, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.045, 1, 39], 'true,false': [0.21, 0, 4], 'false,true,true': [0.13, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.073, 0, 13], 'false,false,true,false': [0.692, 112, 1], 'false,false,false': [0.306, 39, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.91, 113, 54], 'false,true': [0.086, 0, 7], 'false,false,true': [0.612, 0, 14], 'false,false,false,true': [0.071, 17, 0], 'false,false,false,false': [0.116, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.426, 1, 65], 'true,false': [1.435, 140, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.46, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.371, 2, 44], 'true,false,true': [0.049, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.607, 81, 11], 'false,false,true,false': [1.113, 13, 4], 'false,false,false,true': [0.875, 31, 7], 'false,false,false,false': [1.259, 9, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.166, 1, 43], 'false,true,true,true': [1.562, 3, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.108, 124, 0], 'false,false,true,true': [0.225, 0, 5], 'false,false,true,false': [0.000774, 18, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.008, 4, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.309, 1, 56], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.097, 112, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.229, 5, 1], 'false,true': [0.055, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.472, 33, 11]}]
{'': [0.21556488468487645, 0.2274999999999995], 'false': [0.06222222222222188, 1.3322676295501878e-17], 'true': [0.016124697661918288, 0.007462264684267033], 'false,true': [-2.5376526277146434e-16, 0.0], 'true,false': [6.111319401606367e-17, 0.0399305555555556], 'true,false,false': [2.7755575615628915e-18, 0.18750000000000003]}
{'': [0.0003149621553257144, 0.09741403817118419], 'false': [0.07758309398265283, 0.1327432699657094], 'false,false': [0.0, 0.16899813681694076], 'false,false,false': [1.4802973661668753e-16, 0.15725760059336685], 'false,true': [nan, 0.07758309398265283], 'false,true,false': [0.07869185548933638, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.07029841306515003, 0.09556024160213104], 'false': [nan, 0.09556024160213078], 'false,false': [9.868649107779169e-17, 0.08409760224355724], 'false,false,false': [0.07575664956589882, 0.1018534849280531], 'true': [0.07525097093760788, 0.005357847527913406], 'true,true': [0.06332399990380366, 0.25], 'true,false': [0.0, 3.700743415417188e-17], 'false,false,true': [0.0, 0.0]}
{'': [0.093665572905975, 0.13756002172066364], 'false': [0.1274118670342104, 0.15237267126488974], 'false,false': [nan, 0.15237267126488974], 'false,false,false': [nan, 0.15237267126488974], 'false,true': [0.1607772004988092, 0.014085830371513263], 'true': [0.026331830410780972, 9.49441063695771e-05]}
{'': [0.027173622304402588, 0.0657361701019269], 'false': [0.0018765297771628437, 0.06337262826818259], 'false,false': [0.05096682493420914, 0.09384692584786576], 'false,false,true': [0.00040506555182076364, 0.00423962822176705], 'true': [0.027324285470284537, 0.010998457488882646], 'false,true': [0.0018765297771628437, nan]}
{'': [0.0506898845469623, 0.07494978825713204], 'false': [0.0010607284318605106, 0.07904273448723796], 'false,false': [0.02674029913906541, 0.0004447786279719577], 'true': [nan, 0.05068988454696228], 'true,false': [nan, 0.0506898845469623], 'false,false,false': [0.0002972973229775633, 0.0005357128613594497]}
{'': [0.051070378633642846, 0.019214719832008433], 'true': [0.030810002842968604, 0.014108714315338536], 'false': [nan, 0.019214719832008433], 'false,false': [nan, 0.019214719832008433], 'false,false,false': [nan, 0.019214719832008433]}
{'': [0.03962399399082069, 0.04104512797265439], 'false': [nan, 0.04104512797265425], 'false,false': [0.03590576882684171, 0.04969237744037273], 'false,false,false': [0.020168988637684845, 0.09912639778159794], 'true': [0.04085905064249638, 0.001206628614428093], 'false,false,true': [0.028082029897849584, 0.07288762167888922], 'true,false': [0.001206628614428093, nan]}
{'': [0.027513690003275207, 0.037582984011682974], 'false': [0.029485663904507953, 0.06387339991944083], 'false,false': [0.029426445582906465, 0.10155068344692539], 'false,false,false': [nan, 0.10155068344692539], 'false,true': [0.10165294142044605, 9.388772866511966e-05], 'false,true,true': [0.10165294142044605, nan], 'false,false,true': [0.010155954085861207, 3.325063252821201e-08]}
{'': [0.026413106331133866, 0.047331644788134355], 'false': [0.001020532785254498, 0.04924767603743488], 'false,false': [nan, 0.04924767603743488], 'true': [0.02824859491776419, 0.000566363396390506], 'true,true': [0.03006008300752424, 0.0], 'true,false': [8.428655576174207e-05, 0.00404746527806205], 'true,false,false': [0.0, 0.008763276347252191]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.652
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7276139306255563;  // std dev = 0.143, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.035981681851540555;  // std dev = 2.701, 104.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=11 */
%   | | | else return 0.05243284583778668;  // std dev = 1.501, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.1334928440871636;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7287769192988288;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13615410461975821;  // std dev = 2.373, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5277320876098035;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.39950726960470745;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5727822077115698;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6130964758241604;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5596636267790702;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7334578509025147;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12328098927378366;  // std dev = 0.058, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.31285052857087836;  // std dev = 1.375, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.07433683215894644;  // std dev = 1.669, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.40748188765217214;  // std dev = 0.164, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5920411656584146;  // std dev = 0.087, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4515150202665811;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.11506845089835632;  // std dev = 0.193, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(G, H) )
%   | | then return 0.24464514153822914;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.459297128967471;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5267530142066711;  // std dev = 0.208, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12608138284931072;  // std dev = 0.128, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.1920007741302438;  // std dev = 0.419, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.34086714228520854;  // std dev = 0.193, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.20398669531078295;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.008530141507143596;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3999259038702616;  // std dev = 0.227, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32020304632740204;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4566036454583432;  // std dev = 0.129, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10141358225630183;  // std dev = 0.745, 106.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06764502211911837;  // std dev = 0.854, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | | | else return 0.13819177617453224;  // std dev = 1.495, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.21949070345653957;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.2734011499977728;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3293856830738016;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then return -0.042019764146276034;  // std dev = 0.132, 86.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=10 */
%   | | else return -0.004760707386532017;  // std dev = 0.192, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.286312538207485;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.021494329538437967;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.514896309667759;  // std dev = 0.361, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1358066203030125;  // std dev = 0.041, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.1393521461580898;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.22270308006629072;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.23743361902538312;  // std dev = 0.165, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then return 0.31775216054856453;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.07665941191279714;  // std dev = 0.547, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3577930108717629;  // std dev = 0.136, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08689757941293265;  // std dev = 0.060, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.01726948065759249;  // std dev = 0.923, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.05311357488875909;  // std dev = 1.227, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19399774380789764;  // std dev = 0.097, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.25817675736832335;  // std dev = 0.091, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.2752926261606845;  // std dev = 0.131, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.0830433448116964;  // std dev = 0.330, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.22089250564848487;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.023039525583925635;  // std dev = 0.852, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.08696036531225226;  // std dev = 1.165, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.1705899643593299;  // std dev = 0.014, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.20614058924416018;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.21029670499537959;  // std dev = 0.165, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.19036544349366644;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.0751307960825741;  // std dev = 0.058, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3220317366801314;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1288116329026999;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03413922481774893;  // std dev = 0.592, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.003896113176108675;  // std dev = 1.154, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1569116898869442;  // std dev = 0.026, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.15302284838580424;  // std dev = 1.113, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07116017791990453;  // std dev = 0.046, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06351912010899524;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.013964504049053311;  // std dev = 0.273, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.09536529941169022;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2564931617725002;  // std dev = 0.122, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1265907243973233;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.019605562236389245;  // std dev = 0.279, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.186', 'seconds']
Refined model CLL: -0.108765


******************************************
Best model found
******************************************
Results 

CLL : -0.113616 

AUC ROC : 0.994681 

AUC PR : 0.443876 

Precision : 0.342105 

Recall : 0.916667 

F1 : 0.498258 

Total Learning Time : 6.652 

Total Inference Time : 10.719005823135376 

Total revision time: 27.206139614105226
Best scored revision CLL: -0.108765


Results 

CLL : -0.113616 

AUC ROC : 0.994681 

AUC PR : 0.443876 

Precision : 0.342105 

Recall : 0.916667 

F1 : 0.498258 

Total Learning Time : 27.232872774124147 

Total Inference Time : 10.719005823135376 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.722
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 3.23e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7112848402924565;  // std dev = 1.000, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.042457472002343885;  // std dev = 3.234, 162.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=16 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5311911912464264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.06757766186046302;  // std dev = 2.625, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5540776056098158;  // std dev = 0.862, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.7325968192026728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7103805291732499;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.28192814420579154;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5631843185357265;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5631843185357265;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03162964740760395;  // std dev = 3.209, 152.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=16 */
%   | | | else return 0.00702729187640432;  // std dev = 2.336, 58.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4992861464678449;  // std dev = 1.104, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.1193902644477194;  // std dev = 0.112, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5009430329549015;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10377407396450791;  // std dev = 0.095, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11750626511306365;  // std dev = 1.829, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2872210057823514;  // std dev = 1.359, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return 0.45163275751736565;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3169811442913058;  // std dev = 0.136, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6268401623601182;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0947084557740164;  // std dev = 1.013, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   | | else return -0.021432495904348578;  // std dev = 0.258, 74.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03948027315435196;  // std dev = 2.973, 207.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2510556993328996;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5034678311543501;  // std dev = 0.894, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11425116002049802;  // std dev = 0.091, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.11652690020645617;  // std dev = 0.116, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26819590204758353;  // std dev = 1.935, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | else return -0.08134271853000309;  // std dev = 1.675, 207.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0011308159011375427;  // std dev = 0.636, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14012702186307793;  // std dev = 1.940, 70.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=66 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2603184687557149;  // std dev = 0.061, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05319166067994189;  // std dev = 1.717, 131.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=12 */
%   | | | else return -0.04111739075490599;  // std dev = 1.136, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0021081776214309407;  // std dev = 1.120, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0.11116496789519208;  // std dev = 1.414, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1710180355102003;  // std dev = 0.135, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26151420525766095;  // std dev = 1.344, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08988865042772419;  // std dev = 0.085, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3668125562620516;  // std dev = 0.291, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08960826180989188;  // std dev = 0.000405, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13688771022192533;  // std dev = 1.293, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1850283199761512;  // std dev = 1.286, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.1457153911066635;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.0843570063103283;  // std dev = 0.060, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07964787214544312;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12712270802351006;  // std dev = 0.740, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.18988823097472501;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008995225539290342;  // std dev = 1.646, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.424', 'seconds']
Parameter learned model CLL:-0.111919 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 142, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.97, 1, 16], 'false,true,false': [0.0, 0, 0], 'false,false': [3.23e-09, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.0, 1, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.234, 146, 16], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 17, 0], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.625, 40, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.862, 1, 53], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.155, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.209, 136, 16], 'false,false,false,false': [2.336, 49, 9]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.104, 0, 78], 'true,false': [0.112, 142, 0], 'false,true,true': [0.126, 0, 14], 'false,true,false': [0.095, 31, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.829, 16, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.359, 2, 55], 'true,false': [0.078, 0, 4], 'false,true,true': [0.136, 0, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.03, 0, 14], 'false,false,true,false': [1.013, 112, 2], 'false,false,false': [0.258, 65, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.973, 135, 72], 'false,true': [0.07, 0, 12], 'false,false,true': [0.894, 1, 16], 'false,false,false,true': [0.091, 24, 0], 'false,false,false,false': [0.116, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.935, 3, 85], 'true,false': [1.675, 199, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.636, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.94, 4, 66], 'true,false,true': [0.061, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.717, 119, 12], 'false,false,true,false': [1.136, 33, 4], 'false,false,false,true': [1.12, 33, 9], 'false,false,false,false': [1.414, 13, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.135, 1, 59], 'false,true,true,true': [1.344, 1, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 155, 0], 'false,false,true,true': [0.291, 0, 6], 'false,false,true,false': [0.000405, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.293, 9, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.286, 1, 75], 'true,true,false': [0.01, 0, 8], 'true,false,true': [0.06, 163, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.74, 8, 1], 'false,true': [0.075, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.646, 37, 12]}]
{'': [0.22442590437476506, 0.2379535990481851], 'false': [0.055363321799307655, 9.25185853854297e-18], 'true': [0.022975778546712552, 0.006134735558603734], 'false,true': [0.055363321799307655, nan], 'true,false': [-8.443949764754712e-17, 0.04750000000000004], 'true,false,false': [-3.2653618371328133e-18, 0.22222222222222224]}
{'': [0.014498222615868863, 0.08519539437300348], 'false': [0.06349997010484579, 0.1268685476244821], 'false,false': [0.0, 0.15216074502519003], 'false,false,false': [0.16, 0.13255280343560047], 'false,true': [nan, 0.06349997010484579], 'false,true,false': [0.06455067966246644, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.04112332394843069, 0.09244368580524276], 'false': [nan, 0.09244368580524272], 'false,false': [1.1102230246251565e-16, 0.07533010305335473], 'false,false,false': [0.06775388395727906, 0.09410339082028038], 'true': [0.01407432938510673, 0.21295432674365614], 'true,false': [0.0, 0.2222222222222222], 'true,true': [0.013755526757700243, 0.0], 'false,false,true': [9.868649107779169e-17, 1.2688263138573217e-16]}
{'': [0.09319233390229255, 0.10778564677301888], 'false': [0.08846896494649839, 0.14549466385337775], 'false,false': [nan, 0.14549466385337775], 'false,false,false': [nan, 0.14549466385337775], 'true': [0.01563426911822501, 8.865521885434396e-05], 'false,true': [0.01579507729770519, 0.008969031844720754]}
{'': [0.03203958617727781, 0.0647444091819357], 'false': [0.0011593223529137026, 0.06155213786122744], 'false,false': [0.05873872928870958, 0.0663983932784392], 'false,false,true': [6.286212726872417e-05, 0.009000367875371874], 'true': [0.03240867799568704, 0.0015213429421786218], 'false,true': [0.0011593223529137026, nan]}
{'': [0.042702154746042005, 0.07658091959567992], 'false': [0.00040455266419279584, 0.08304193592851423], 'false,false': [0.04705831294025251, 0.0004207883418175432], 'true': [nan, 0.042702154746042], 'true,false': [nan, 0.042702154746042005], 'false,false,false': [0.0003474189313439763, 0.00048128610329436057]}
{'': [0.047774592875748714, 0.01757973370145075], 'true': [0.04253703988622461, 0.013555091348547847], 'false': [nan, 0.01757973370145075], 'false,false': [nan, 0.01757973370145075], 'false,false,false': [nan, 0.01757973370145075]}
{'': [0.05272817374518726, 0.03478251847723846], 'true': [0.05377976684204441, 0.0018777087797679642], 'false': [nan, 0.034782518477238525], 'false,false': [0.02526193566804859, 0.055307305587180305], 'false,false,false': [0.029877117850612332, 0.10001886385333322], 'false,false,true': [0.022511348472676156, 0.03488682121949003], 'true,false': [0.0018777087797679642, nan]}
{'': [0.01809956706282044, 0.03542538453331186], 'false': [0.02657957287890566, 0.06748278419101704], 'false,false': [0.03810416402050411, 0.11153863935701741], 'false,false,false': [nan, 0.11153863935701741], 'false,false,true': [0.014139433636006319, 7.472170692796548e-09], 'false,true': [0.06020576018709714, 4.685148273001232e-05], 'false,true,true': [0.06020576018709714, nan]}
{'': [0.023586007529684698, 0.05351433181596069], 'false': [0.0013877904345504719, 0.05529995369021098], 'false,false': [nan, 0.05529995369021098], 'true': [0.019821311417322025, 0.003048194169484101], 'true,true': [0.021759306904336518, 1.2038997843581006e-05], 'true,false': [2.1748205814339356e-05, 0.024327945981725347], 'true,false,false': [0.0, 0.06079950270089321]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else return -0.10018439823382112;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7216857501851084;  // std dev = 0.149, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.043835261438499286;  // std dev = 2.801, 125.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=12 */
%   | | | else return -0.02421441116598771;  // std dev = 1.617, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.13008760554655224;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.75517232473028;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08049923751996023;  // std dev = 2.595, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5481869555289779;  // std dev = 0.111, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.7857337862622759;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3243083676308283;  // std dev = 0.623, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.3952808103179556;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5548200673456519;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.727334938755717;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12023012146967366;  // std dev = 0.033, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03128348941961686;  // std dev = 1.885, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.13297107061358096;  // std dev = 1.717, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.41835672657037076;  // std dev = 0.005, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.4889995063328111;  // std dev = 0.245, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.41946562125235504;  // std dev = 0.810, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5682428452983886;  // std dev = 0.939, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.11155611814564811;  // std dev = 0.137, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4182819980221305;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5759669017686606;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10963555051727812;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.1225195100619501;  // std dev = 0.414, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.32101685475835845;  // std dev = 0.021, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.4761608576218615;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.47482168462366026;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3192199590255016;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.47361864984763;  // std dev = 0.299, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09235565323624528;  // std dev = 0.959, 140.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06718555196137455;  // std dev = 0.865, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0.058823869378659153;  // std dev = 1.712, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.20184470236443944;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.254253622736451;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.4083763901072841;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04988298813694405;  // std dev = 0.119, 126.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=13 */
%   | | else return -0.032159868963666724;  // std dev = 0.159, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27201804236267396;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.30116897063884807;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5811224591461471;  // std dev = 0.248, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11308109936736507;  // std dev = 0.028, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.22232808223867695;  // std dev = 0.028, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return 0.08181210159364505;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07953876817691741;  // std dev = 0.052, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.28998065796528344;  // std dev = 0.854, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.08597077657282529;  // std dev = 0.025, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23639561716322874;  // std dev = 1.094, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.11106125793870184;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04782527279685557;  // std dev = 0.679, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.007646036184769185;  // std dev = 1.166, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.12696451246127063;  // std dev = 1.653, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.06871307717147346;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.18010392475051268;  // std dev = 0.043, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.28700413405156;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.044025816907489294;  // std dev = 0.111, 165.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=16 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2942974213811134;  // std dev = 0.266, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09740774033863105;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0018520932820973784;  // std dev = 0.737, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.006399103558936135;  // std dev = 1.164, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.16253613391094196;  // std dev = 0.034, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.08866652986935436;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.18624374928412976;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21568078987793046;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then return -0.023615529425620195;  // std dev = 0.122, 171.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=29 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2802807691447227;  // std dev = 0.157, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09266952708032784;  // std dev = 0.044, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10354660605957286;  // std dev = 0.648, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05489635177975293;  // std dev = 1.061, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08273375404963505;  // std dev = 1.816, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.216535624241764;  // std dev = 1.091, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.1820757631303372;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.07622238634426207;  // std dev = 0.024, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.05516729542975669;  // std dev = 0.068, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1494765796559521;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.07972948879379185;  // std dev = 0.973, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.08448497507460474;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.022061287006144514;  // std dev = 0.287, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.642', 'seconds']
Refined model CLL: -0.106834


******************************************
Best model found
******************************************
Results 

CLL : -0.108203 

AUC ROC : 0.994906 

AUC PR : 0.398632 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 7.405 

Total Inference Time : 13.635887861251831 

Total revision time: 34.27436199378967
Best scored revision CLL: -0.106834


Results 

CLL : -0.108203 

AUC ROC : 0.994906 

AUC PR : 0.398632 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 34.30109515380859 

Total Inference Time : 13.635887861251831 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.164
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10851773156715441;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6986401298193481;  // std dev = 1.401, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.028409211515858724;  // std dev = 3.738, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08566920801570115;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12654846432369438;  // std dev = 2.918, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5487785467143227;  // std dev = 1.465, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.1449777879390287;  // std dev = 0.823, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.778941495766265;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5628720318027156;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5628720318027156;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.045908677356981675;  // std dev = 3.665, 216.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=21 */
%   | | | else return -0.006159086930160924;  // std dev = 2.543, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4741246951353196;  // std dev = 2.140, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.12024543950084816;  // std dev = 0.144, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49753746550122363;  // std dev = 0.122, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.1072804052752722;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.163928971775977;  // std dev = 1.930, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3085107742467205;  // std dev = 1.518, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.22944937119927414;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.320835166599576;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6230677910191474;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09278044192152812;  // std dev = 1.399, 178.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=4 */
%   | | else return -0.021496440490577477;  // std dev = 0.257, 86.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026358446477090368;  // std dev = 3.632, 278.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25418802042703564;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4836129561611571;  // std dev = 1.383, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12277526411643169;  // std dev = 0.156, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.12385313007907167;  // std dev = 0.165, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25403076528289276;  // std dev = 2.549, 114.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=107 */
%   | else return -0.07909383993912034;  // std dev = 1.923, 251.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024444064664056374;  // std dev = 1.041, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15599378721764504;  // std dev = 1.915, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2661509381764374;  // std dev = 0.061, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.044808118924784375;  // std dev = 1.907, 173.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=17 */
%   | | | else return -0.044660449951913296;  // std dev = 1.283, 51.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -1.603829426382607E-4;  // std dev = 1.547, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.05217736471808389;  // std dev = 1.639, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15266988726322725;  // std dev = 0.221, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2852349686391282;  // std dev = 1.088, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09054844409076872;  // std dev = 0.084, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38293609478864327;  // std dev = 0.365, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09309304084371975;  // std dev = 0.000186, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11406947894468929;  // std dev = 1.479, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17546093290148643;  // std dev = 1.916, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14556707589259865;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08385104815623438;  // std dev = 0.055, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08159702074417353;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.0294861208080622;  // std dev = 0.493, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.036487927964012325;  // std dev = 0.923, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013999725767111051;  // std dev = 1.900, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.040', 'seconds']
Parameter learned model CLL:-0.112184 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false,true': [0.983, 29, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.401, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.738, 170, 22], 'false,true,false,false': [0.0, 6, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.978, 22, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.918, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.465, 2, 70], 'true,true,false': [0.823, 1, 1], 'true,false,true': [0.143, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.665, 195, 21], 'false,false,false,false': [2.543, 65, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.14, 3, 97], 'true,false': [0.144, 189, 0], 'false,true,true': [0.122, 0, 19], 'false,true,false': [0.086, 38, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.93, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.518, 2, 73], 'true,false': [0.934, 1, 4], 'false,true,true': [0.133, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.073, 0, 17], 'false,false,true,false': [1.399, 174, 4], 'false,false,false': [0.257, 75, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.632, 187, 91], 'false,true': [0.072, 0, 13], 'false,false,true': [1.383, 1, 22], 'false,false,false,true': [0.156, 39, 0], 'false,false,false,false': [0.165, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.549, 7, 107], 'true,false': [1.923, 240, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.041, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.915, 4, 80], 'true,false,true': [0.061, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.907, 156, 17], 'false,false,true,false': [1.283, 46, 5], 'false,false,false,true': [1.547, 43, 13], 'false,false,false,false': [1.639, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.221, 4, 77], 'false,true,true,true': [1.088, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.084, 214, 0], 'false,false,true,true': [0.365, 0, 9], 'false,false,true,false': [0.000186, 31, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.479, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.916, 3, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.055, 177, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.493, 12, 2], 'false,true': [0.923, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.9, 50, 17]}]
{'': [0.226448387413001, 0.21694214876033072], 'true': [0.009522928994084868, 0.009949243705966856], 'false': [0.0, 4.9343245538895844e-17], 'true,false': [-1.6753066000331702e-16, 0.05859375000000002], 'true,false,false': [0.03222222222222228, 0.25], 'false,true': [0.0, nan]}
{'': [0.02338185132634169, 0.09514676144497067], 'false': [0.0708308912675594, 0.14095450754417566], 'false,false': [0.041587901701323295, 0.161156858497916], 'false,false,false': [0.0, 0.1494129973765213], 'false,true': [nan, 0.0708308912675594], 'false,true,false': [0.07275902710162506, -6.938893903907228e-18], 'false,false,true': [nan, 0.041587901701323295]}
{'': [0.05238840357956175, 0.08330426659534461], 'false': [nan, 0.08330426659534453], 'false,false': [-1.5673736818237505e-16, 0.06845153784138598], 'false,false,false': [0.062195161456218, 0.085064028823949], 'true': [0.0424659725809415, 0.15382985462244678], 'true,false': [0.010250326447292402, 0.16], 'true,true': [0.02982626985274677, 0.3388471113270288], 'false,false,true': [0.0, 0.0]}
{'': [0.09586301260661131, 0.11047576817399887], 'false': [0.0904369130966864, 0.15512550619396934], 'false,false': [nan, 0.15512550619396934], 'false,false,false': [nan, 0.15512550619396934], 'true': [0.04580130428499327, 0.00010990801659171343], 'false,true': [0.014897371726753386, 0.007405668133380379]}
{'': [0.0400973705996341, 0.05897738577165069], 'false': [0.0010369597120868706, 0.055554528058586135], 'false,false': [0.050840803846342826, 0.06618794305339472], 'false,false,true': [0.00031479793456214074, 0.010992178832714614], 'true': [0.03073984448106252, 0.17460022601711783], 'false,true': [0.0010369597120868706, nan]}
{'': [0.04746406787315939, 0.07953996388758383], 'false': [0.000397718716013129, 0.08296638356297549], 'false,false': [0.08318606584042178, 0.0006443000874087473], 'true': [nan, 0.047464067873159294], 'true,false': [nan, 0.04746406787315939], 'false,false,false': [0.000622569273622424, 0.0006644044864194188]}
{'': [0.051775575914280524, 0.043348607073844254], 'true': [0.0570099524222904, 0.014738460932909411], 'false': [nan, 0.043348607073844254], 'false,false': [nan, 0.043348607073844254], 'false,false,false': [nan, 0.043348607073844254]}
{'': [0.04295647632353201, 0.03421406391862832], 'true': [0.043652981167590324, 0.001850874917057918], 'false': [nan, 0.03421406391862873], 'false,false': [0.023588373187586466, 0.05835299834496041], 'false,false,false': [0.04272022880501309, 0.08396719242065155], 'false,false,true': [0.021031278739352614, 0.03226242182751228], 'true,false': [0.001850874917057918, nan]}
{'': [0.048814946552554354, 0.031340485226357205], 'false': [0.021169034880005485, 0.06620258450331185], 'false,false': [0.04283997992402101, 0.10413806502246918], 'false,false,false': [nan, 0.10413806502246918], 'false,false,true': [0.014782009989686436, 1.1195700638967676e-09], 'false,true': [0.035885208728261175, 3.318103080268334e-05], 'false,true,true': [0.035885208728261175, nan]}
{'': [0.02737085451601603, 0.06216473153416776], 'false': [0.17054345723344572, 0.05389975282007227], 'false,false': [nan, 0.05389975282007227], 'true': [0.034718841792652576, 0.0014167901802531809], 'true,true': [0.037863866058775716, 4.701782260992567e-06], 'true,false': [1.682365202727093e-05, 0.010802689073189679], 'true,false,false': [1.3877787807814458e-18, 0.017387418098976353]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.587
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8581489350995127;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6362932351947815;  // std dev = 0.280, 47.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=43 */
%   | | else return 0.7239071860977518;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.7231746495425418;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7439976143448207;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.05849977857208348;  // std dev = 3.146, 187.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=15 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09184932082084743;  // std dev = 0.171, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5319045176838226;  // std dev = 0.839, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17056629716553018;  // std dev = 2.820, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5568209243458694;  // std dev = 0.123, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return 0.46814535656229905;  // std dev = 0.370, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20107506180440726;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3352833920074768;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.46311087026579917;  // std dev = 0.303, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5544522870550161;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(J, A) )
%   | | then return -0.06115367957025052;  // std dev = 0.216, 218.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09152633672780144;  // std dev = 1.982, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.07410655988902916;  // std dev = 2.133, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.4153067321241302;  // std dev = 0.989, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.4584900627261693;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4149252281573593;  // std dev = 1.030, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6657902147893634;  // std dev = 0.961, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.11842312516426917;  // std dev = 0.241, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4278561452890188;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(J, A), follows(I, A) )
%   | | | then return -0.11289506465824556;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.020809061293257575;  // std dev = 2.006, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | else return 0.09288598052884763;  // std dev = 0.397, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then return 0.281656662453379;  // std dev = 0.226, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.4061657225164767;  // std dev = 0.088, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.11734487934855027;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.38590818051002285;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.13092684491757897;  // std dev = 1.142, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3337574461405521;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return -0.0342012702580514;  // std dev = 0.210, 190.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=21 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.05242969642998208;  // std dev = 1.418, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   | | | else return 0.1316737909538683;  // std dev = 1.842, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2802128103509067;  // std dev = 0.185, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5386982379341518;  // std dev = 0.520, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0984429404630822;  // std dev = 0.006, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.04006189935642005;  // std dev = 0.208, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2648865168368662;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.4919103746593822;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6032600578878771;  // std dev = 0.150, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1408917477472101;  // std dev = 0.155, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.13383166897787066;  // std dev = 0.223, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.20512788126808043;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.12691020577387668;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.20412768273659387;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2823023664162606;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21503046745946922;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5295502136389464;  // std dev = 0.439, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09177359016566099;  // std dev = 0.075, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03805066189078593;  // std dev = 1.281, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.09085255670700267;  // std dev = 1.394, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19028083659099576;  // std dev = 0.016, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return -0.07120900095013771;  // std dev = 0.731, 122.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=3 */
%   | | | else return -0.08520031785637958;  // std dev = 0.010, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.3409290825325998;  // std dev = 0.650, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08800293353972898;  // std dev = 0.064, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3496573502569508;  // std dev = 0.204, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1257265139621487;  // std dev = 0.003, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09863674403509101;  // std dev = 0.824, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.1441706062810386;  // std dev = 0.996, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16347191523582616;  // std dev = 0.017, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.07420314448489357;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.14740489271980517;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.027179691431552577;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A) )
%   | then return -0.03734503655009807;  // std dev = 0.116, 255.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=32 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3049804768364786;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11273519173275498;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.020921417885776925;  // std dev = 0.876, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.0526015899912284;  // std dev = 1.045, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10442372820261224;  // std dev = 1.702, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.2524246798307447;  // std dev = 1.098, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.05376612025274001;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.0731800870158953;  // std dev = 0.027, 210.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( tweets(A, I) )
%   | | then return 0.01813859016403048;  // std dev = 0.155, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.42888661048612536;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.18881068601652368;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, J) )
%   | | then return 0.0056960411290484705;  // std dev = 0.160, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return -0.07137702134952364;  // std dev = 0.250, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.131', 'seconds']
Refined model CLL: -0.112549


******************************************
Best model found
******************************************
Results 

CLL : -0.1145 

AUC ROC : 0.994921 

AUC PR : 0.431159 

Precision : 0.342995 

Recall : 0.910256 

F1 : 0.498246 

Total Learning Time : 10.587 

Total Inference Time : 23.07356357574463 

Total revision time: 49.40438945388794
Best scored revision CLL: -0.112184


Results 

CLL : -0.1145 

AUC ROC : 0.994921 

AUC PR : 0.431159 

Precision : 0.342995 

Recall : 0.910256 

F1 : 0.498246 

Total Learning Time : 49.43112261390686 

Total Inference Time : 23.07356357574463 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.271
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.03297749598523597;  // std dev = 1.866, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13249416287214638;  // std dev = 1.764, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.47876672475277593;  // std dev = 0.980, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -3.309541061459784E-4;  // std dev = 2.037, 45.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=7 */
%   | | | else return 0.0477596736549799;  // std dev = 1.507, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5241149064958276;  // std dev = 0.612, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.1301449179424136;  // std dev = 0.074, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4300055684010658;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13022169713811668;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06261315763462653;  // std dev = 1.550, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.34073044198970803;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30270245767874154;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5881891837543755;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11747872668484904;  // std dev = 0.052, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.008592432458847018;  // std dev = 0.288, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03468763410031932;  // std dev = 1.422, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24286111443722674;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3981212081174312;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1375401952063293;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.10898634081833698;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.32959381044317;  // std dev = 0.541, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.08879465572842506;  // std dev = 0.739, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06137919134593753;  // std dev = 0.868, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1340434682076214;  // std dev = 0.974, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06438799164819492;  // std dev = 1.347, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | | else return -0.11364529679679074;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.050110076735881026;  // std dev = 0.472, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.023131182082673084;  // std dev = 1.508, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09958571582272994;  // std dev = 0.285, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.24131314189843792;  // std dev = 0.381, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09318357600826788;  // std dev = 0.040, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27284789972231605;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09568912367209315;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12527286416296762;  // std dev = 1.131, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11406906936996562;  // std dev = 1.259, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.13865309962877975;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08667389659422442;  // std dev = 0.017, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08535271053276161;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07336950793924547;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1764623199049571;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08026859450810203;  // std dev = 1.156, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.864', 'seconds']
Parameter learned model CLL:-0.113095 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.03e-07, 0, 24], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.707, 1, 1], 'false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.866, 26, 6], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.764, 14, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.98, 1, 10], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [2.037, 38, 7], 'false,false,false,false': [1.507, 15, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.612, 0, 22], 'true,false': [0.074, 49, 0], 'false,true,true': [0.009, 0, 3], 'false,true,false': [0.008, 4, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.55, 14, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.165, 0, 11], 'true,false': [0.0, 0, 0], 'false,true,true': [0.027, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.029, 0, 7], 'false,false,true,false': [0.052, 35, 0], 'false,false,false': [0.288, 24, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.422, 31, 15], 'false,true': [0.023, 0, 9], 'false,false,true': [1.314, 1, 7], 'false,false,false,true': [0.066, 12, 0], 'false,false,false,false': [0.086, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.541, 0, 22], 'true,false': [0.739, 51, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.868, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.974, 1, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.347, 40, 6], 'false,false,true,false': [3.73e-09, 5, 0], 'false,false,false,true': [0.472, 15, 2], 'false,false,false,false': [1.508, 18, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.285, 1, 11], 'false,true,true,true': [0.381, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 37, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.038, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.131, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.259, 2, 16], 'true,true,false': [0.028, 0, 8], 'true,false,true': [0.017, 33, 0], 'true,false,false,true': [0.005, 3, 0], 'true,false,false,false': [0.023, 3, 0], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.156, 11, 6]}]
{'': [0.2413099683998863, 0.19674556213017763], 'true': [4.440892098500626e-16, 3.489272363107635e-17], 'false': [0.10937499999999978, -3.0839528461809902e-18], 'false,true': [-1.4802973661668753e-16, 0.25], 'true,false': [2.3790493384824782e-17, -7.93016446160826e-18], 'true,false,false': [-7.93016446160826e-18, nan]}
{'': [1.9737298215558337e-16, 0.12034946514901], 'false': [0.10875614838336677, 0.13181813497825953], 'false,false': [0.0, 0.16379166045110607], 'false,false,false': [0.0, 0.15557435589488278], 'false,true': [nan, 0.10875614838336677], 'false,true,false': [0.10875614838336677, nan], 'false,false,true': [nan, 0.0]}
{'': [0.0804676365739642, 0.12005011534866437], 'false': [nan, 0.12005011534866422], 'false,false': [-1.4802973661668753e-16, 0.10079209047203642], 'false,false,false': [0.0922219574717296, 0.11946365074489929], 'true': [0.08729391660604909, 0.0], 'true,true': [0.08729391660604909, nan], 'true,false': [nan, 0.0], 'false,false,true': [3.700743415417188e-17, -7.401486830834377e-17]}
{'': [0.09689388599655452, 0.11351113856723503], 'false': [0.07692824960659968, 0.12608926121008449], 'false,false': [0.0, 0.12642782247854378], 'false,false,false': [nan, 0.12642782247854378], 'true': [0.01703435579243585, 0.00011214029684407747], 'false,true': [7.802483516065421e-05, 5.680859081758083e-05]}
{'': [0.0024753866968191163, 0.07562416968604438], 'false': [7.963243108074132e-05, 0.07466547132836823], 'false,false': [0.06924574706171471, 0.08274938210017788], 'false,false,true': [0.00011940079184784886, 7.648301174455474e-05], 'true': [0.0024753866968191163, nan], 'false,true': [7.963243108074132e-05, nan]}
{'': [0.04394336100150819, 0.08458813778628968], 'false': [6.084571730054685e-05, 0.09277700277831047], 'false,false': [0.21585676407950624, 0.0006010431235986317], 'true': [nan, 0.043943361001508176], 'true,false': [nan, 0.04394336100150819], 'false,false,false': [0.0003617207541892163, 0.0004326016916933739]}
{'': [0.047473534533874304, 0.04706674031550362], 'true': [0.013303011509547057, 0.010309845359761148], 'false': [nan, 0.04706674031550361], 'false,false': [nan, 0.04706674031550362], 'false,false,false': [nan, 0.04706674031550362]}
{'': [0.049898822739165204, 0.04786546129203744], 'true': [0.049898822739165204, nan], 'false': [nan, 0.04786546129203754], 'false,false': [0.035781936591315226, 0.06260024642532735], 'false,false,false': [0.013125053771396807, 0.09885952626097906], 'false,false,true': [0.03943340673000657, 2.7755575615628915e-18]}
{'': [0.0812107716620374, 0.03971393672546433], 'false': [0.025159565738070492, 0.06967767637470353], 'false,false': [0.017792611074722634, 0.11638078429763767], 'false,false,false': [nan, 0.11638078429763767], 'false,true': [0.010365318212646682, 4.302128165654838e-05], 'false,false,true': [0.0, 0.00013231779129425282], 'false,true,true': [0.010365318212646682, nan]}
{'': [0.034785839117944084, 0.07478511703537011], 'false': [0.0, 0.07867017307765545], 'false,false': [nan, 0.07867017307765549], 'true': [0.06115897359363101, 3.3957444784403455e-05], 'true,true': [0.0881108539287126, 9.882969401307784e-05], 'true,false': [8.268626129980182e-06, 0.00012999629750590444], 'true,false,false': [7.771292038363567e-06, 0.00018042273077481402]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.553
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then return -0.001798094517755399;  // std dev = 0.299, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.03808788742115942;  // std dev = 1.859, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5718134111641138;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5531695142579097;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.12284171436416996;  // std dev = 0.033, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.25277383773855555;  // std dev = 1.390, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.03859792488466013;  // std dev = 0.753, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4155164195124685;  // std dev = 0.002, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4983064649912639;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return -0.10866276770248841;  // std dev = 0.006, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.15608925550876676;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.20911364480872385;  // std dev = 0.713, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.11239664588440602;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.10562296714162366;  // std dev = 1.094, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.399998927976714;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22322232116402774;  // std dev = 0.324, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.41436952559131557;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.32100201350848906;  // std dev = 0.000355, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32890568713640983;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49164862703896406;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11143695983404307;  // std dev = 0.118, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09899998898707188;  // std dev = 0.025, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.07251839187904913;  // std dev = 1.297, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.27127279900229645;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3206850070166869;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.35446371243086494;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09223962732750923;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.0929709407955607;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2590151960224723;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5169023235005575;  // std dev = 0.091, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1430888106400325;  // std dev = 0.149, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11035180750390154;  // std dev = 0.178, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.2210690514380511;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, E) )
%   | | then return 0.20847139561176004;  // std dev = 0.000590, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2209292741698218;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.29066068303249215;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4223614346895532;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.084054848392331;  // std dev = 0.017, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1456112770859179;  // std dev = 0.145, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07374358682056821;  // std dev = 0.225, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1842202187849557;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, E) )
%   | | then return 0.17627417685018132;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1808061569178424;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.009395446180748945;  // std dev = 0.130, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | else return -0.07907999084077352;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.04588133187375904;  // std dev = 0.440, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.08154386711280386;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.022394427901012082;  // std dev = 0.719, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.07442291266839633;  // std dev = 0.618, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17405560216476063;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17617970530621405;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.22527183295909792;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15442066643150695;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07483168775330898;  // std dev = 0.005, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24961860575152728;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09592874123409477;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.034383061455109755;  // std dev = 0.617, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -2.142188569342849E-4;  // std dev = 0.679, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13601127108170435;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.19782136998556668;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.13551301956781112;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.07220553808548687;  // std dev = 0.001, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.061474053780663916;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1906132567349954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29422792658333186;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12039389755870422;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.018812834627560057;  // std dev = 0.652, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.977', 'seconds']
Refined model CLL: -0.102438


******************************************
Best model found
******************************************
Results 

CLL : -0.106288 

AUC ROC : 0.993293 

AUC PR : 0.366818 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 3.553 

Total Inference Time : 5.0786590576171875 

Total revision time: 13.219263910293579
Best scored revision CLL: -0.102438


Results 

CLL : -0.106288 

AUC ROC : 0.993293 

AUC PR : 0.366818 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 18.80688559913635 

Total Inference Time : 5.0786590576171875 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.839
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6909019836395263;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02268433506009268;  // std dev = 2.376, 74.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2194734122109544;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.16702699441984353;  // std dev = 2.899, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5062936653547304;  // std dev = 1.412, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6731303773666394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5624100883297507;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5624100883297506;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029474245675807323;  // std dev = 2.817, 109.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=13 */
%   | | | else return 0.08214068185886063;  // std dev = 2.341, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4887071358942106;  // std dev = 1.455, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return -0.12461531061166488;  // std dev = 0.109, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.433758396698592;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1294962829184976;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4227581637326997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13985675745311765;  // std dev = 2.237, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31785069305181657;  // std dev = 0.894, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3121690774272499;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6030431680891151;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11126093960578831;  // std dev = 0.078, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.03658504148975327;  // std dev = 0.315, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025305114476968704;  // std dev = 2.236, 92.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=31 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24934018726875173;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.556314680922695;  // std dev = 0.400, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13071832055730132;  // std dev = 0.155, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12603102486641474;  // std dev = 0.159, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2856735234011048;  // std dev = 1.497, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.1145842929218532;  // std dev = 1.193, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.067195886490047;  // std dev = 1.342, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14331631572594758;  // std dev = 1.371, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.029665687679081766;  // std dev = 1.424, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   | | | else return -0.1125869095095357;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04128297650604599;  // std dev = 1.072, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | | else return 0.11290360458552133;  // std dev = 1.491, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2015378688394294;  // std dev = 0.053, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.16545496717950398;  // std dev = 1.203, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08955137313747659;  // std dev = 0.081, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.30133822162810814;  // std dev = 0.207, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09065678184807806;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06548331564157707;  // std dev = 1.598, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1732193669769732;  // std dev = 1.154, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return 0.08777758173680533;  // std dev = 0.663, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.08171150754816511;  // std dev = 0.029, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.081405634483732;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.08499363616944203;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17294610429716395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016213831914499974;  // std dev = 1.734, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.361', 'seconds']
Parameter learned model CLL:-0.117237 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.31e-07, 0, 43], 'true,false,true': [4.94e-08, 47, 0], 'true,false,false,true': [7.45e-09, 20, 0], 'true,false,false,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 6], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.986, 1, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.376, 65, 9], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 31, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [2.899, 34, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.412, 2, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [3.65e-08, 0, 8], 'false,false,false,true': [2.817, 96, 13], 'false,false,false,false': [2.341, 30, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.455, 2, 44], 'true,false': [0.109, 82, 0], 'false,true,true': [0.006, 0, 5], 'false,true,false': [0.005, 13, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.237, 21, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.894, 1, 26], 'true,false': [0.0, 0, 0], 'false,true,true': [0.017, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.075, 0, 11], 'false,false,true,false': [0.078, 77, 0], 'false,false,false': [0.315, 46, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.236, 61, 31], 'false,true': [0.015, 0, 12], 'false,false,true': [0.4, 0, 19], 'false,false,false,true': [0.155, 28, 0], 'false,false,false,false': [0.159, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.497, 2, 46], 'true,false': [1.193, 96, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.342, 19, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.371, 2, 34], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.424, 53, 9], 'false,false,true,false': [0.0, 15, 0], 'false,false,false,true': [1.072, 37, 7], 'false,false,false,false': [1.491, 15, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.053, 0, 26], 'false,true,true,true': [1.203, 2, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 88, 0], 'false,false,true,true': [0.207, 0, 7], 'false,false,true,false': [0.03, 18, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.598, 15, 11]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.154, 1, 33], 'true,true,false': [0.663, 1, 10], 'true,false,true': [0.029, 48, 0], 'true,false,false,true': [0.029, 12, 0], 'true,false,false,false': [0.05, 8, 0], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.734, 40, 18]}]
{'': [0.23572715169551353, 0.21253902185223675], 'true': [1.2393187251629655e-15, 6.661338147750939e-17], 'false': [-2.8047739569477637e-16, 4.6474452193611206e-17], 'true,false': [5.196788625904988e-17, 9.654113257610057e-18], 'true,false,false': [2.7755575615628915e-18, 0.0], 'false,true': [-2.7328566760003855e-16, -1.4802973661668753e-16]}
{'': [0.02775510204081572, 0.10401777852147785], 'false': [0.07626435533092193, 0.12487378818112307], 'false,false': [-7.162729191130042e-18, 0.16494801132580328], 'false,false,false': [0.25000000000000006, 0.16157490592776919], 'false,true': [nan, 0.07626435533092193], 'false,true,false': [0.07626435533092193, nan], 'false,false,true': [nan, -7.162729191130042e-18]}
{'': [0.07214921207771084, 0.10670875096827866], 'false': [nan, 0.10670875096827812], 'false,false': [1.8503717077085943e-16, 0.09190150302019753], 'false,false,false': [0.0727848653493498, 0.13367104876870325], 'true': [0.07382731624352096, 0.0], 'true,true': [0.07382731624352096, nan], 'false,false,true': [0.0, 1.6653345369377348e-16], 'true,false': [nan, 0.0]}
{'': [0.10323501398244322, 0.12305329603833341], 'false': [0.06367190418424026, 0.1494045194778979], 'false,false': [0.0, 0.15157801134507679], 'false,false,false': [nan, 0.15157801134507679], 'true': [0.04602413822943032, 0.00014483023762445763], 'false,true': [3.0251281326054702e-05, 2.2842406789456235e-05]}
{'': [0.02961578992039348, 0.07523942587062549], 'false': [2.3992780124215685e-05, 0.07409669300520097], 'false,false': [0.05594017454936986, 0.09912484589896359], 'false,false,true': [0.0005122751669843369, 7.965110598446673e-05], 'true': [0.02961578992039348, nan], 'false,true': [2.3992780124215685e-05, nan]}
{'': [0.05436140663144164, 0.0843291501525883], 'false': [1.8326360919224127e-05, 0.0923105301075354], 'false,false': [0.008439234793394403, 0.0009018256485437567], 'true': [nan, 0.054361406631441705], 'true,false': [nan, 0.05436140663144164], 'false,false,false': [0.0008530310803616163, 0.0009412423184998485]}
{'': [0.0604569422241549, 0.054561545980459605], 'true': [0.04667954836557519, 0.014534482698224414], 'false': [nan, 0.054561545980459605], 'false,false': [nan, 0.054561545980459605], 'false,false,false': [nan, 0.054561545980459605]}
{'': [0.052249884179295956, 0.040748324150339126], 'true': [0.052249884179295956, nan], 'false': [nan, 0.040748324150339174], 'false,false': [0.0274193840249443, 0.05312750684316469], 'false,false,false': [0.026137388819812632, 0.08237852853328903], 'false,false,true': [0.03271363927233543, -1.295260195396016e-17]}
{'': [0.0028091746120987135, 0.03876007051619704], 'false': [0.023267624576704123, 0.06665136113133771], 'false,false': [0.03272070497572842, 0.09822246106044105], 'false,false,false': [nan, 0.09822246106044105], 'false,false,true': [0.006094177554595134, 5.064246941978126e-05], 'false,true': [0.07232977346089473, 7.487071210755813e-05], 'false,true,true': [0.07232977346089473, nan]}
{'': [0.029425487736687683, 0.051372639900719254], 'false': [0.0, 0.05184201905097674], 'false,false': [nan, 0.05184201905097668], 'true': [0.040739115265440634, 6.267436222052676e-05], 'true,true': [0.03919525190892568, 0.039995275335638174], 'true,false': [1.732161645304787e-05, 0.00017062068322693387], 'true,false,false': [6.974017417921141e-05, 0.0003142171931405204]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 5.133
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.1254446385283914;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07394111284674364;  // std dev = 1.724, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.1339724894958352;  // std dev = 2.644, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6916572574381252;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.11231637819360633;  // std dev = 2.36e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.014606697958500394;  // std dev = 1.511, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.06430397214936522;  // std dev = 1.713, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.15974905308181286;  // std dev = 2.399, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.38358546293647433;  // std dev = 1.009, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.4646658416404366;  // std dev = 0.231, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7055781222421738;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.11485034981188827;  // std dev = 0.018, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10541419794290278;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.19483035573897298;  // std dev = 1.570, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1112883368655537;  // std dev = 1.493, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.32814780269347116;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.40916000847934586;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3218837232829035;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20054793020403633;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5026433846098896;  // std dev = 0.193, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10330597376169424;  // std dev = 0.141, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.09770937777049861;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.16875425273848071;  // std dev = 2.100, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2634877893999259;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3311355626392334;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08380038232287615;  // std dev = 0.013, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.08631531846306705;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26564001674042786;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.4416196855382895;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5632802605504148;  // std dev = 0.194, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.15977340587497182;  // std dev = 0.279, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1272002196014451;  // std dev = 0.256, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21380487388116431;  // std dev = 0.005, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return -0.069727311867604;  // std dev = 0.316, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | | else return 0.018995094791227088;  // std dev = 0.804, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else if ( follows(G, D) )
%   | | | then return -0.07982516144760235;  // std dev = 0.013, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.18456213847334121;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3828269845663929;  // std dev = 0.211, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14700793469569043;  // std dev = 0.207, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04458127425665937;  // std dev = 0.538, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.13411326792811779;  // std dev = 0.897, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A) )
%   | | then return 0.0791650342514593;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.17588828398672776;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1822717514860461;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.027904975912217616;  // std dev = 0.115, 63.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | else return -0.07445952847231241;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.13886246059617913;  // std dev = 1.041, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09100165212030743;  // std dev = 0.195, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08201575161674651;  // std dev = 0.982, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.014072752697439421;  // std dev = 0.998, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.17951203058568183;  // std dev = 0.029, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.011341313432566872;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.2640196036248286;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15751430486791898;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07280600480879412;  // std dev = 0.006, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2506560147387163;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09772336513064686;  // std dev = 0.124, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.05554474789362933;  // std dev = 0.976, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.0421887076356556;  // std dev = 0.963, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14283477518664753;  // std dev = 0.005, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21759171434920763;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2160003402410989;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06690195652026425;  // std dev = 0.004, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.3334340753281949;  // std dev = 0.729, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2554377252736783;  // std dev = 0.199, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11537993144160888;  // std dev = 0.306, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0032760216630977335;  // std dev = 0.429, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.06355344683961466;  // std dev = 0.990, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.767', 'seconds']
Refined model CLL: -0.10783


******************************************
Best model found
******************************************
Results 

CLL : -0.101439 

AUC ROC : 0.993467 

AUC PR : 0.380087 

Precision : 0.339779 

Recall : 0.97619 

F1 : 0.504098 

Total Learning Time : 5.133 

Total Inference Time : 10.451718091964722 

Total revision time: 23.148546812057496
Best scored revision CLL: -0.10783


Results 

CLL : -0.101439 

AUC ROC : 0.993467 

AUC PR : 0.380087 

Precision : 0.339779 

Recall : 0.97619 

F1 : 0.504098 

Total Learning Time : 28.73616850090027 

Total Inference Time : 10.451718091964722 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.249
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.649638907274788;  // std dev = 1.933, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.012788898429812044;  // std dev = 2.943, 105.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.051105668572902434;  // std dev = 1.494, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08428909629994559;  // std dev = 3.441, 88.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5492831837600038;  // std dev = 1.239, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6304218727637216;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5725376192830207;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5725376192830208;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03058845442854284;  // std dev = 3.488, 166.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=19 */
%   | | | else return 0.06189731117761184;  // std dev = 2.842, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5219863408913143;  // std dev = 1.262, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return -0.12454497640295766;  // std dev = 0.119, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4859809815547248;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1311647390366671;  // std dev = 0.000368, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.430373986606148;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16656606985874917;  // std dev = 2.417, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31430637732861627;  // std dev = 1.068, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.41091210713383286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.25233477834851564;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6029324243408759;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10405275115259704;  // std dev = 0.923, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   | | else return 0.01275348758467483;  // std dev = 0.312, 91.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024292000437269645;  // std dev = 2.480, 160.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=49 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2618932107282678;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5706035757387004;  // std dev = 0.626, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1339867857765986;  // std dev = 0.219, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.12012035895765003;  // std dev = 0.156, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27505963551881707;  // std dev = 1.929, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | else return -0.09320628133591637;  // std dev = 1.260, 142.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06577768913432973;  // std dev = 1.594, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17941637932737958;  // std dev = 0.993, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.21281148829360197;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.02977593611629482;  // std dev = 1.541, 95.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=13 */
%   | | | else return -0.08219943012563623;  // std dev = 0.620, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02720055603342178;  // std dev = 1.619, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | | else return 0.04934033259938285;  // std dev = 1.919, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1363262513915525;  // std dev = 0.222, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2518874009457577;  // std dev = 1.364, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09335548999698212;  // std dev = 0.103, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2978178535859554;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08909600554037847;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06622640911915494;  // std dev = 1.772, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1876086030800579;  // std dev = 0.945, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.17453287610536522;  // std dev = 0.332, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08592829139227669;  // std dev = 0.132, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09284323769450706;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.04233095700972163;  // std dev = 0.808, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15127764856695208;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.048408419303267655;  // std dev = 1.902, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.592', 'seconds']
Parameter learned model CLL:-0.118859 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 67], 'true,false,true': [8.69e-08, 96, 0], 'true,false,false,true': [0.977, 21, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 0, 6], 'false,false': [8.12e-09, 61, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.933, 4, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.943, 91, 14], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.494, 31, 3], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [3.441, 66, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.239, 2, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [3.488, 147, 19], 'false,false,false,false': [2.842, 50, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.262, 1, 67], 'true,false': [0.119, 134, 0], 'false,true,true': [0.107, 0, 11], 'false,true,false': [0.000368, 21, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.417, 23, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.068, 1, 42], 'true,false': [0.0, 0, 1], 'false,true,true': [0.972, 1, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.045, 0, 15], 'false,false,true,false': [0.923, 119, 1], 'false,false,false': [0.312, 73, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.48, 111, 49], 'false,true': [0.063, 0, 17], 'false,false,true': [0.626, 0, 27], 'false,false,false,true': [0.219, 54, 0], 'false,false,false,false': [0.156, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.929, 3, 70], 'true,false': [1.26, 138, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.594, 28, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.993, 1, 51], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.541, 82, 13], 'false,false,true,false': [0.62, 21, 1], 'false,false,false,true': [1.619, 52, 12], 'false,false,false,false': [1.919, 32, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.222, 3, 43], 'false,true,true,true': [1.364, 1, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 130, 0], 'false,false,true,true': [0.222, 0, 9], 'false,false,true,false': [0.041, 21, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.772, 24, 13]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.945, 1, 52], 'true,true,false': [0.332, 0, 15], 'true,false,true': [0.132, 93, 0], 'true,false,false,true': [0.033, 22, 0], 'true,false,false,false': [0.808, 18, 2], 'false,true': [0.025, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.902, 42, 22]}]
{'': [0.232834796534073, 0.20262975778546816], 'true': [-9.544603913195376e-16, 0.016388888888888873], 'false': [4.440892098500626e-16, 6.188128333976282e-17], 'true,false': [7.864079757761526e-17, 0.07638888888888894], 'true,false,false': [0.04338842975206616, 0.25], 'false,true': [-2.9605947323337506e-16, -1.4802973661668753e-16]}
{'': [0.06669401203589549, 0.10630192072589228], 'false': [0.08249355255153115, 0.12422122835451146], 'false,false': [0.0656046545426793, 0.14037580942939498], 'false,false,false': [0.22222222222222232, 0.13458183205267404], 'false,true': [nan, 0.08249355255153115], 'false,true,false': [0.08249355255153115, nan], 'false,false,true': [nan, 0.0656046545426793]}
{'': [0.03485542592247985, 0.1037361786479716], 'false': [nan, 0.1037361786479715], 'false,false': [0.0, 0.08934749646140301], 'false,false,false': [0.07328157020359496, 0.12423064548444078], 'true': [0.037469796750741274, 0.0016816379877718224], 'true,true': [0.037469796750741274, nan], 'true,false': [0.0033505868010180184, 0.0], 'false,false,true': [-8.881784197001253e-17, -2.8260222445003984e-16]}
{'': [0.10129599584752294, 0.1276391079736948], 'false': [0.0898704581913976, 0.15553038143491482], 'false,false': [0.0, 0.15790246796962212], 'false,false,false': [nan, 0.15790246796962212], 'true': [0.0234123334312815, 0.0001052533255025735], 'false,true': [0.011495898008180334, 1.3533703227145262e-07]}
{'': [0.026116274387505814, 0.07619208568756408], 'false': [0.05557895265553861, 0.07292455824246392], 'false,false': [0.05568700944475635, 0.09762268626302835], 'false,false,true': [0.00013455438873789897, 0.007094617619254673], 'false,true': [0.05557895265553861, nan], 'true': [0.02651152353692902, 0.0]}
{'': [0.038438332872521276, 0.07880948488070062], 'false': [0.00023557458013874732, 0.08182972704497275], 'false,false': [0.014513897631634567, 0.0007261910950268017], 'true': [nan, 0.03843833287252149], 'true,false': [nan, 0.038438332872521276], 'false,false,false': [0.0008919279287127016, 0.0004602897605500836]}
{'': [0.05510452470206317, 0.054065313781595584], 'true': [0.050966841109226814, 0.011183995626459805], 'false': [nan, 0.05406531378159567], 'false,false': [nan, 0.054065313781595584], 'false,false,false': [nan, 0.054065313781595584]}
{'': [0.01861448793796065, 0.04116818495053235], 'false': [nan, 0.04116818495053256], 'false,false': [0.024013894732704058, 0.058217873918884895], 'false,false,false': [0.04094111061570972, 0.07836580099317987], 'false,false,true': [0.025010586232431114, 0.017478536724570927], 'true': [0.01895141672205459, 0.0], 'true,false': [0.0, nan]}
{'': [0.04923194651726637, 0.040488943845760676], 'false': [0.029545363969076904, 0.06206437574445074], 'false,false': [0.033139274454796704, 0.08482741773596573], 'false,false,false': [nan, 0.08482741773596573], 'false,false,true': [0.005487446268687283, 7.935764791950588e-05], 'false,true': [0.06417373119714974, 8.10337362297255e-05], 'false,true,true': [0.06417373119714974, nan]}
{'': [0.024114104140491324, 0.05511359087389491], 'false': [0.00031797873959366757, 0.056505284712809904], 'false,false': [nan, 0.056505284712809876], 'true': [0.01477440106044618, 0.005237956415923646], 'true,true': [0.01683526752306975, 0.0073594132498096985], 'true,false': [0.00018770872974690716, 0.016218301151357212], 'true,false,false': [4.856615632758965e-05, 0.03266851462209156]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.032
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8337586911970727;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7253772022935289;  // std dev = 0.132, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return -0.12566079568334546;  // std dev = 0.019, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return -0.0723312437875768;  // std dev = 0.823, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.7291742163215502;  // std dev = 0.130, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12838111308625863;  // std dev = 0.051, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.7413433124639606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.16843990085920693;  // std dev = 1.930, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.23031033020396466;  // std dev = 1.818, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5644113166427045;  // std dev = 0.176, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(E, A) )
%   | | then return 0.2868636804188515;  // std dev = 0.899, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6307693463750628;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.553908114504935;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.553908114504935;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11512567027161513;  // std dev = 0.145, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return 0.040735228495412105;  // std dev = 2.087, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1000785762744132;  // std dev = 2.575, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0.2000526600847274;  // std dev = 1.525, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, A) )
%   | | | then return 0.4340314912630363;  // std dev = 0.318, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.11008924171422578;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4762458749051409;  // std dev = 0.168, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return -0.11444696313134639;  // std dev = 0.017, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.44188041553858587;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10767195950769343;  // std dev = 0.007, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.4164328622707685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.03485107878411964;  // std dev = 2.024, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.09286372842105046;  // std dev = 1.620, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(A, F) )
%   | | | then return 0.28935967986598554;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.36623581999569754;  // std dev = 0.203, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.10517913637433403;  // std dev = 0.876, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5814946320608821;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.308371412555474;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3252708898547343;  // std dev = 1.185, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.09397694930282649;  // std dev = 0.733, 106.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.05614965879676749;  // std dev = 0.877, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | | else return 0.037621958715181376;  // std dev = 2.634, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2622507732885476;  // std dev = 0.029, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.29522293449062437;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2590601579095631;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04561328922104257;  // std dev = 0.127, 91.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=9 */
%   | | else return -0.05694254813539238;  // std dev = 0.135, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.265390303439336;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.49297450266182885;  // std dev = 0.556, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5588328539912921;  // std dev = 0.234, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13339671183794125;  // std dev = 0.041, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2098531105538231;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, D), tweets(A, E) )
%   | | | then return 0.04595589287184104;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.20572786628249273;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23672567598328573;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2568755377453723;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.08032394105230635;  // std dev = 0.444, 92.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
%   | | | else return 0.01084621814842971;  // std dev = 1.369, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.012852174803513998;  // std dev = 0.799, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | | else return 0.0653639001851912;  // std dev = 2.059, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18213431512736278;  // std dev = 0.021, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return 0.31979836526831373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return -0.03700963869255651;  // std dev = 0.926, 61.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=8 */
%   | | | else return 0.02516274796499172;  // std dev = 1.284, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.33426604030163115;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12317060754860078;  // std dev = 0.198, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.4837776547939042;  // std dev = 0.179, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12421410451728135;  // std dev = 0.238, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.08054570347989846;  // std dev = 0.309, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11370655411007018;  // std dev = 0.960, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.15766759003845102;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17286772128379832;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.23086051708280556;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.02804890698411262;  // std dev = 0.142, 155.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=28 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25642450997993155;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1010250084517787;  // std dev = 0.096, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07158802053218583;  // std dev = 1.376, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return -0.04031456374178339;  // std dev = 1.162, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.08681403052820184;  // std dev = 1.346, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.14761803289745434;  // std dev = 0.053, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.29121604858920735;  // std dev = 0.092, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06955590283910805;  // std dev = 0.057, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.18233663841453035;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.22902530103934518;  // std dev = 0.939, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.10919939509431088;  // std dev = 0.202, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2566809957553875;  // std dev = 0.416, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05229301931484426;  // std dev = 1.035, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.308', 'seconds']
Refined model CLL: -0.11361


******************************************
Best model found
******************************************
Results 

CLL : -0.111784 

AUC ROC : 0.993 

AUC PR : 0.345479 

Precision : 0.344538 

Recall : 0.97619 

F1 : 0.509317 

Total Learning Time : 8.032 

Total Inference Time : 11.99567699432373 

Total revision time: 30.576336246490477
Best scored revision CLL: -0.11361


Results 

CLL : -0.111784 

AUC ROC : 0.993 

AUC PR : 0.345479 

Precision : 0.344538 

Recall : 0.97619 

F1 : 0.509317 

Total Learning Time : 36.16395793533325 

Total Inference Time : 11.99567699432373 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.814
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11621003925946208;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6953705441979113;  // std dev = 1.409, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02914703228354887;  // std dev = 3.087, 130.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05735015020955405;  // std dev = 1.499, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.49953474159194033;  // std dev = 0.762, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11111417164867578;  // std dev = 4.058, 114.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5610146794766869;  // std dev = 0.913, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.642292620135115;  // std dev = 0.115, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6088108256069849;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5883042389561922;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5613100483667307;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018636629173395074;  // std dev = 4.014, 203.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=26 */
%   | | | else return 0.07108192319845992;  // std dev = 3.152, 78.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.49929586203158965;  // std dev = 1.859, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else return -0.1246647325510945;  // std dev = 0.128, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46689031154088556;  // std dev = 0.105, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13003274989181077;  // std dev = 0.000132, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4153665422275796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08390075466878445;  // std dev = 2.980, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3004691231678756;  // std dev = 1.182, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else return 0.45491720946782066;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.307175435444693;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.46833397262170384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6017338417696091;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10543947344093368;  // std dev = 0.929, 167.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=1 */
%   | | else return 0.001343251022963283;  // std dev = 0.297, 138.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030053455612863912;  // std dev = 2.773, 190.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=64 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.255066585919474;  // std dev = 0.144, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5389559800977317;  // std dev = 1.228, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13068035334056183;  // std dev = 0.206, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.12500704551900377;  // std dev = 0.121, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3009375384131735;  // std dev = 1.382, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return -0.09523158759327768;  // std dev = 1.286, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06195677276347794;  // std dev = 1.977, 69.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=27 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16180577653028277;  // std dev = 1.395, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.23661116354164485;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04491154636442271;  // std dev = 1.723, 125.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=14 */
%   | | | else return -0.08618935628221028;  // std dev = 0.623, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03095148391573559;  // std dev = 2.075, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | | else return 0.026784036078641323;  // std dev = 2.457, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18188551244400755;  // std dev = 0.048, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2528924164078632;  // std dev = 1.181, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09297340290457777;  // std dev = 0.106, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3072545115720321;  // std dev = 0.322, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09132113454407721;  // std dev = 0.050, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06422024859995788;  // std dev = 2.119, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15521266601895936;  // std dev = 1.609, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0.12761180858439453;  // std dev = 0.810, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08330123588047085;  // std dev = 0.049, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09238090223216848;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.022656913538510688;  // std dev = 0.837, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13854231285792673;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027119367742649603;  // std dev = 2.400, 109.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=32 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.703', 'seconds']
Parameter learned model CLL:-0.115607 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 86], 'true,false,true': [8.16e-08, 110, 0], 'true,false,false,true': [0.987, 38, 1], 'true,false,false,false': [1.195, 5, 2], 'false,true,true': [1.33e-07, 0, 25], 'false,true,false': [0.0, 0, 10], 'false,false': [8.12e-09, 67, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.409, 2, 71], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.087, 115, 15], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.499, 35, 3], 'false,false,false,true': [0.762, 1, 3], 'false,false,false,false': [4.058, 82, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.115, 0, 2], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.148, 0, 6], 'false,false,true,false': [2.98e-08, 0, 15], 'false,false,false,true': [4.014, 177, 26], 'false,false,false,false': [3.152, 59, 19]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.859, 2, 92], 'true,false': [0.128, 172, 0], 'false,true,true': [0.105, 0, 13], 'false,true,false': [0.000132, 34, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98, 44, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.182, 2, 57], 'true,false': [0.0, 0, 1], 'false,true,true': [0.019, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.075, 0, 20], 'false,false,true,false': [0.929, 166, 1], 'false,false,false': [0.297, 114, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.773, 126, 64], 'false,true': [0.144, 0, 22], 'false,false,true': [1.228, 1, 38], 'false,false,false,true': [0.206, 73, 0], 'false,false,false,false': [0.121, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.382, 1, 93], 'true,false': [1.286, 197, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.977, 42, 27]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.395, 2, 69], 'true,false,true': [0.005, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.723, 111, 14], 'false,false,true,false': [0.623, 26, 1], 'false,false,false,true': [2.075, 81, 19], 'false,false,false,false': [2.457, 47, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.048, 0, 58], 'false,true,true,true': [1.181, 1, 34], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 163, 0], 'false,false,true,true': [0.322, 0, 15], 'false,false,true,false': [0.05, 39, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.119, 35, 17]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.609, 2, 67], 'true,true,false': [0.81, 1, 19], 'true,false,true': [0.049, 129, 0], 'true,false,false,true': [0.017, 17, 0], 'true,false,false,false': [0.837, 16, 3], 'false,true': [0.036, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.4, 77, 32]}]
{'': [0.23251485554265539, 0.22539407920030902], 'true': [-3.304849933767908e-16, 0.018860946745562008], 'false': [1.6240976817373718e-15, 6.628197161941232e-17], 'true,false': [6.055761952500853e-17, 0.06096408317580325], 'true,false,false': [0.024983563445101973, 0.20408163265306126], 'false,true': [7.105427357601002e-16, -8.881784197001253e-17]}
{'': [0.027212447270982792, 0.10908193192480242], 'false': [0.07328329486200594, 0.13349537472844789], 'false,false': [0.05911006460673141, 0.14941397359678493], 'false,false,false': [0.14511905650097756, 0.1444504168776726], 'false,true': [nan, 0.07328329486200594], 'false,true,false': [0.07328329486200594, nan], 'false,false,true': [nan, 0.05911006460673141]}
{'': [0.014660449572379396, 0.10833742750655889], 'false': [nan, 0.10833742750655946], 'false,false': [0.0011896919601309093, 0.09432318031587958], 'false,false,false': [0.07938695562820709, 0.12738060207506793], 'true': [0.015432796707681322, 0.002892318107646341], 'true,true': [0.015432796707681322, nan], 'true,false': [0.006558176930221538, 0.0], 'false,false,true': [0.003643431627900743, 5.921189464667501e-17]}
{'': [0.1020113651543585, 0.11419715857941011], 'false': [0.07436228329019481, 0.14266522622677438], 'false,false': [0.0, 0.14322231686075404], 'false,false,false': [nan, 0.14322231686075404], 'true': [0.03675024651944878, 9.566587371930035e-05], 'false,true': [0.011086873156736229, 1.7426691981615923e-08]}
{'': [0.023669802142898606, 0.07013969724511533], 'false': [0.0011957861780495119, 0.06792762324321999], 'false,false': [0.05240907249517483, 0.0883981035467452], 'false,false,true': [0.000278584055180664, 0.005166245004521599], 'true': [0.02367341504070445, 0.0], 'false,true': [1.8810053378903736e-05, 0.0]}
{'': [0.040476455564315623, 0.09043086905004132], 'false': [0.000939139478375196, 0.09850792737067347], 'false,false': [0.03868623654654039, 0.0005455938659191837], 'true': [nan, 0.040476455564315575], 'true,false': [nan, 0.040476455564315623], 'false,false,false': [0.0005810543408652144, 0.0004449848765370114]}
{'': [0.04615597948002111, 0.05663941052732606], 'false': [nan, 0.056639410527326114], 'false,false': [nan, 0.05663941052732606], 'false,false,false': [nan, 0.05663941052732606], 'true': [0.020317711983289143, 0.008228368443159224]}
{'': [0.02681591864749845, 0.044114854302670495], 'false': [nan, 0.04411485430267036], 'false,false': [0.02234043904528546, 0.06311705419853941], 'false,false,false': [0.04306140329850592, 0.09149633761995386], 'true': [0.027417607640547556, 1.3424315620645666e-05], 'false,false,true': [0.023758416028778484, 0.014374532111063296], 'true,false': [1.3424315620645666e-05, nan]}
{'': [0.0023462654982722114, 0.038142612153956965], 'false': [0.02451074002259912, 0.060114115896015466], 'false,false': [0.03383193208464836, 0.08638351485429054], 'false,false,false': [nan, 0.08638351485429054], 'false,false,true': [0.006891333724593081, 6.521577442693022e-05], 'false,true': [0.03986478224559264, 6.83508315603338e-05], 'false,true,true': [0.03986478224559264, nan]}
{'': [0.027498708876493402, 0.05177572393794041], 'false': [0.0004356956985889504, 0.05285620564797658], 'false,false': [nan, 0.0528562056479767], 'true': [0.03659493204075857, 0.004653770723812415], 'true,true': [0.03751217447573896, 0.03283983096763253], 'true,false': [1.8670020670063554e-05, 0.020662172509105275], 'true,false,false': [1.6079947860548764e-05, 0.03683931471947168]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 11.299
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.11621003925946208;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6681913609289035;  // std dev = 0.221, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | else return 0.7247244547741709;  // std dev = 0.021, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.11924915715388779;  // std dev = 0.081, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7357412269139824;  // std dev = 0.162, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1297058145202107;  // std dev = 0.110, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.25007449513353996;  // std dev = 2.182, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | | else return 0.15619471171805693;  // std dev = 2.182, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5444576843190998;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.589656803365527;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.6130216811267811;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3331153317960729;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5596839018462277;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11362432787400119;  // std dev = 0.012, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return -0.011632572763086397;  // std dev = 2.327, 87.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=13 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.07129639591486375;  // std dev = 1.886, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0.14493134978898195;  // std dev = 3.034, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.41568224639018814;  // std dev = 0.182, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | else return 0.5549644362537334;  // std dev = 0.055, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.11089019080491241;  // std dev = 0.012, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.38392452182976605;  // std dev = 0.627, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.4882539881988566;  // std dev = 0.179, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10776639844457384;  // std dev = 0.005, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.41518841438432685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.025226441350347;  // std dev = 2.198, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0.14504853210062965;  // std dev = 1.814, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3136955118074032;  // std dev = 0.142, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else return -0.14424900239594296;  // std dev = 0.754, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.31905006236400535;  // std dev = 9.60e-05, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19955153917160878;  // std dev = 1.326, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.40190791673105053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4230130384323945;  // std dev = 0.112, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09357172450372421;  // std dev = 0.791, 150.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.057975966483068304;  // std dev = 1.005, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return 0.12750291526052976;  // std dev = 2.794, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2831612939806245;  // std dev = 0.038, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return -0.08661795970984991;  // std dev = 0.003, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2640641073866688;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.048963124904635356;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2784768814151837;  // std dev = 0.034, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.31472133774203515;  // std dev = 1.178, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.583839701190477;  // std dev = 0.107, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.14095620669103157;  // std dev = 0.388, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.12732262932701918;  // std dev = 0.385, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D) )
%   | then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.0900432470050002;  // std dev = 2.237, 47.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=41 */
%   | | | else return 0.2653082734466424;  // std dev = 0.442, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.08322867159446684;  // std dev = 0.007, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.27564624476883165;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.10125699843880884;  // std dev = 0.031, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2145456429472894;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then return -0.05312740416117937;  // std dev = 0.146, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.013555689900217924;  // std dev = 1.867, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return 0.07434313917319836;  // std dev = 1.239, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19149310135205244;  // std dev = 0.018, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14224566676033693;  // std dev = 1.402, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.4531585400183775;  // std dev = 0.159, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.07671813032534631;  // std dev = 0.062, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.13276607784221556;  // std dev = 0.358, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.421968241151726;  // std dev = 0.186, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07697454454802612;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.015462950771598547;  // std dev = 0.724, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08981411176152633;  // std dev = 1.319, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.1685281754659823;  // std dev = 0.018, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.2201879118077794;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1520006815546015;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2586576917497634;  // std dev = 0.328, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07101259928677044;  // std dev = 0.006, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21567622194317976;  // std dev = 0.260, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0898961346287341;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03593164315725703;  // std dev = 1.175, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.040609247108213155;  // std dev = 1.351, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.15404334440771272;  // std dev = 0.036, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13198145016626892;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.06240473791460647;  // std dev = 0.673, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06134424512218545;  // std dev = 0.046, 168.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17316026847544463;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.14618423638509848;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07012096060941207;  // std dev = 0.008, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04975596192441249;  // std dev = 0.622, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.004228713912918915;  // std dev = 1.852, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '35.124', 'seconds']
Refined model CLL: -0.109196


******************************************
Best model found
******************************************
Results 

CLL : -0.101836 

AUC ROC : 0.993713 

AUC PR : 0.395364 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 11.299 

Total Inference Time : 32.50972533226013 

Total revision time: 57.4093387966156
Best scored revision CLL: -0.109196


Results 

CLL : -0.101836 

AUC ROC : 0.993713 

AUC PR : 0.395364 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 62.996960485458374 

Total Inference Time : 32.50972533226013 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.224
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09423201728144012;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7011232506326779;  // std dev = 1.411, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04022151223649262;  // std dev = 3.506, 187.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.044615979306191385;  // std dev = 1.770, 43.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.452026689509473;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.12822773020172185;  // std dev = 4.528, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5598240720898594;  // std dev = 1.067, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7195287609612165;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6262447657203892;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5888857476763553;  // std dev = 0.146, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.562238433107682;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02000727680473063;  // std dev = 4.607, 270.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=34 */
%   | | | else return 0.03779596044536337;  // std dev = 3.586, 113.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.49617612574683684;  // std dev = 2.354, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | else return -0.12380236652585519;  // std dev = 0.117, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4008314571868154;  // std dev = 0.255, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12588277813397233;  // std dev = 0.002, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4161413028095208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07669917463520312;  // std dev = 3.414, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2916854619325965;  // std dev = 1.822, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return -0.05568592323531407;  // std dev = 0.694, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.26210474278361046;  // std dev = 0.978, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.4675336583349311;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5365868063738561;  // std dev = 1.366, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return -0.09882738065054415;  // std dev = 1.351, 176.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=3 */
%   | | else return 0.02711288313403817;  // std dev = 0.317, 141.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023113350965721337;  // std dev = 3.407, 254.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26860277415957023;  // std dev = 0.213, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.537233359674632;  // std dev = 1.361, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13437351916970863;  // std dev = 0.208, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return -0.12284414315601604;  // std dev = 0.140, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31080836637383735;  // std dev = 1.646, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09554694826937885;  // std dev = 1.765, 281.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020001931178821843;  // std dev = 2.276, 96.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18431122242150325;  // std dev = 1.003, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2744810310386842;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04074745171064151;  // std dev = 2.030, 160.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=18 */
%   | | | else return -0.08939470096065659;  // std dev = 0.646, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.011114024560017702;  // std dev = 2.052, 106.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=28 */
%   | | | else return 0.07136293684661636;  // std dev = 2.522, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15792374987822344;  // std dev = 0.170, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29981930698826204;  // std dev = 0.938, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09295979468749703;  // std dev = 0.129, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3287258873963221;  // std dev = 0.427, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09456944807773474;  // std dev = 0.033, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.061149335579601984;  // std dev = 2.362, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18277985207318678;  // std dev = 1.038, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16532951448515742;  // std dev = 0.359, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08284114265317574;  // std dev = 0.053, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09625019185226123;  // std dev = 0.024, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.020150740909242827;  // std dev = 0.975, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13987319333887777;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021636912933355897;  // std dev = 2.729, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.284', 'seconds']
Parameter learned model CLL:-0.116267 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 156, 0], 'true,false,false,true': [1.38, 40, 2], 'true,false,false,false': [1.195, 5, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.93e-09, 97, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.411, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.506, 168, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.77, 39, 4], 'false,false,false,true': [1.477, 3, 8], 'false,false,false,false': [4.528, 94, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.067, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [3.65e-08, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.146, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.607, 236, 34], 'false,false,false,false': [3.586, 90, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.354, 4, 115], 'true,false': [0.117, 213, 0], 'false,true,true': [0.255, 1, 17], 'false,true,false': [0.002, 41, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.414, 60, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.822, 4, 77], 'true,false': [0.694, 1, 1], 'false,true,true': [0.978, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.366, 2, 26], 'false,false,true,false': [1.351, 173, 3], 'false,false,false': [0.317, 113, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.407, 172, 82], 'false,true': [0.213, 0, 22], 'false,false,true': [1.361, 1, 52], 'false,false,false,true': [0.208, 85, 0], 'false,false,false,false': [0.14, 65, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.646, 1, 121], 'true,false': [1.765, 274, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.276, 68, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.003, 1, 83], 'true,false,true': [0.055, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.03, 142, 18], 'false,false,true,false': [0.646, 35, 1], 'false,false,false,true': [2.052, 78, 28], 'false,false,false,false': [2.522, 46, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.17, 2, 78], 'false,true,true,true': [0.938, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.129, 207, 0], 'false,false,true,true': [0.427, 0, 19], 'false,false,true,false': [0.033, 37, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.362, 44, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.038, 1, 85], 'true,true,false': [0.359, 0, 19], 'true,false,true': [0.053, 168, 0], 'true,false,false,true': [0.024, 38, 0], 'true,false,false,false': [0.975, 21, 4], 'false,true': [0.056, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.729, 105, 40]}]
{'': [0.2270135275754447, 0.21990837151187081], 'true': [0.009433106575965852, 0.01913146936347402], 'false': [0.0384000000000006, 7.783006770568107e-17], 'false,true': [0.025623268698062793, 0.07638888888888877], 'true,false': [-1.3664283380001927e-16, 0.0749687630154101], 'true,false,false': [0.04535147392290247, 0.20408163265306126]}
{'': [0.022899569301958765, 0.11338825768736359], 'false': [0.0657261073826995, 0.14989452139694878], 'false,false': [0.07286557775343323, 0.1638242759345173], 'false,false,false': [0.19834710743801648, 0.15303649541964348], 'false,false,true': [nan, 0.07286557775343323], 'false,true': [nan, 0.0657261073826995], 'false,true,false': [0.0657261073826995, nan]}
{'': [0.01628971338198722, 0.10125344626689366], 'false': [nan, 0.10125344626689137], 'false,false': [0.0011593132632191903, 0.08968664336186037], 'false,false,false': [0.07861851972620093, 0.11377717731147162], 'true': [0.01675476156936937, 0.006151275978730553], 'true,true': [0.01675476156936937, nan], 'true,false': [0.01622602130279412, 1.6653345369377348e-16], 'false,false,true': [0.0035503968686091034, 0.0]}
{'': [0.10512478881982715, 0.11527069995506743], 'false': [0.07864779144387075, 0.14012353626262858], 'false,false': [0.0, 0.14044009356334022], 'false,false,false': [nan, 0.14044009356334017], 'true': [0.046573454162793064, 6.419873832464052e-05], 'false,true': [0.0649945280616203, 2.8911020160089072e-06]}
{'': [0.048651952989361515, 0.08233500000608994], 'false': [0.04530091248879974, 0.08041581440772405], 'false,false': [0.0659114688315469, 0.10051401880610097], 'false,false,true': [0.066652787184446, 0.01037670194824801], 'true': [0.04099589969112758, 0.24096286797854274], 'false,true': [0.04553986973667239, 0.0]}
{'': [0.045700038559253066, 0.09050354214948794], 'false': [0.002069812595328094, 0.09518406781454579], 'false,false': [0.03494503832691914, 0.00045074690152186863], 'true': [nan, 0.04570003855925311], 'true,false': [nan, 0.045700038559253066], 'false,false,false': [0.0005083826835120425, 0.00030005200971523825]}
{'': [0.04930239356080077, 0.053951312205229446], 'false': [nan, 0.05395131220522951], 'false,false': [nan, 0.053951312205229446], 'false,false,false': [nan, 0.053951312205229446], 'true': [0.022196152736204598, 0.011082834455982384]}
{'': [0.011928602350444474, 0.0430055364753492], 'false': [nan, 0.043005536475349354], 'false,false': [0.023510794888512626, 0.06093039625809731], 'false,false,false': [0.03972905494067976, 0.09084907583556452], 'false,false,true': [0.02575563883056649, 0.011601829183571246], 'true': [0.011987526955500025, 0.0015122581424249215], 'true,false': [0.0015122581424249215, nan]}
{'': [0.028943538848135657, 0.03957481764950738], 'false': [0.023873730109378346, 0.06623088183493461], 'false,false': [0.04344049571724861, 0.08579790792623042], 'false,false,false': [nan, 0.08579790792623042], 'false,false,true': [0.00959339500224525, 2.8584333945287004e-05], 'false,true': [0.023140251989647857, 7.994535600210724e-05], 'false,true,true': [0.023140251989647857, nan]}
{'': [0.021033282593245394, 0.04937576223272418], 'false': [0.00039386675712960867, 0.051347240762241134], 'false,false': [nan, 0.051347240762241106], 'true': [0.011539043460625608, 0.004566223021299694], 'true,true': [0.012534308132772608, 0.006784749562795097], 'true,false': [1.684560941516065e-05, 0.016492895821014528], 'true,false,false': [1.5418349370796413e-05, 0.03804560118925422]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 14.131
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.03206197857777315;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7241059574248813;  // std dev = 0.205, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.12129625266399625;  // std dev = 0.872, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | | else return -0.06911676847910166;  // std dev = 0.816, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.7323046164231043;  // std dev = 0.181, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.13014178584371677;  // std dev = 0.076, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.6900616475050725;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1561947117180572;  // std dev = 1.690, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.2202036549558862;  // std dev = 1.948, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5568081308254016;  // std dev = 0.112, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.4572695633527412;  // std dev = 0.736, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.6772725095007514;  // std dev = 0.151, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5626168883801569;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5630491868836138;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10675513337553562;  // std dev = 0.854, 121.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=1 */
%   | | | else return 0.011855706171665755;  // std dev = 2.458, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07654683838603268;  // std dev = 3.194, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.10593182927375054;  // std dev = 2.298, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.37152529930275946;  // std dev = 1.382, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.43170422230678895;  // std dev = 0.269, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.5268254666656421;  // std dev = 0.167, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return -0.11140173154140708;  // std dev = 0.191, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4363871012727384;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1079015573691119;  // std dev = 0.032, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41452163087275806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.07704457733833872;  // std dev = 2.242, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0.16980815113394881;  // std dev = 1.654, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.3109634949167253;  // std dev = 1.004, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.1185395610096793;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.058647289438674664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.34623715876601124;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32569146664178217;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.08974067011576983;  // std dev = 0.789, 138.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=1 */
%   | | | else return -0.021121802256616636;  // std dev = 1.993, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07022086337087888;  // std dev = 2.720, 92.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=29 */
%   | | | else return 0.013578687091935611;  // std dev = 2.201, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.24365341759303516;  // std dev = 0.989, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.3031575736652089;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.13964854429754417;  // std dev = 0.789, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.42994894304432585;  // std dev = 0.299, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09185050533845623;  // std dev = 0.076, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.07651427160784235;  // std dev = 0.090, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2644452969405227;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4584986047567848;  // std dev = 0.115, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12161863610843233;  // std dev = 0.030, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then return 0.19942033655639455;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.24389773813260893;  // std dev = 0.222, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29292744694805645;  // std dev = 1.426, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else return -0.09092729914646724;  // std dev = 0.440, 273.000 (wgt'ed) examples reached here.  /* #neg=272 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2029868931300188;  // std dev = 0.001, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3897539881929917;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0817707471608816;  // std dev = 0.058, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05181632171282944;  // std dev = 1.010, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.0999982036356455;  // std dev = 1.588, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.14775312266808222;  // std dev = 1.332, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.02552597345189735;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.17839898016835432;  // std dev = 0.087, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.30275450149919475;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.041245097818086655;  // std dev = 0.117, 212.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), follows(J, I) )
%   | | | then return 0.21483485112587686;  // std dev = 1.165, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.11469517784645458;  // std dev = 0.915, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.1311548498590922;  // std dev = 0.541, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.032206185689289374;  // std dev = 1.845, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1705515714548441;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return -0.08728032168151645;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.12452681490712969;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.21965755438502088;  // std dev = 0.089, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07597046129729813;  // std dev = 0.124, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26061217771137585;  // std dev = 0.367, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10230571990425266;  // std dev = 0.208, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.018744605184350137;  // std dev = 1.099, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.04569728449940394;  // std dev = 1.580, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.15231454712454126;  // std dev = 0.130, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.13145339602859202;  // std dev = 0.118, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.08756570261798224;  // std dev = 0.963, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.06441199274347151;  // std dev = 0.045, 229.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.11164004096301172;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2151250906117133;  // std dev = 0.325, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09864135058272176;  // std dev = 0.193, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.00816231857562517;  // std dev = 1.351, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return -0.011827209242397024;  // std dev = 1.449, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.845', 'seconds']
Refined model CLL: -0.103843


******************************************
Best model found
******************************************
Results 

CLL : -0.103747 

AUC ROC : 0.993381 

AUC PR : 0.363002 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 14.131 

Total Inference Time : 25.020241737365723 

Total revision time: 55.59952662467957
Best scored revision CLL: -0.103843


Results 

CLL : -0.103747 

AUC ROC : 0.993381 

AUC PR : 0.363002 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 61.18714831352234 

Total Inference Time : 25.020241737365723 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.392
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04573538845864177;  // std dev = 1.798, 53.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08578487415644509;  // std dev = 1.035, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5669160701763346;  // std dev = 0.167, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7286109381970336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04376948360764776;  // std dev = 1.607, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | | else return -0.0426723200590829;  // std dev = 0.785, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4812430374008365;  // std dev = 0.581, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.11708562572032927;  // std dev = 0.031, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4895459491200141;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.11606237137530387;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009905602314091091;  // std dev = 0.768, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3164423318678841;  // std dev = 0.174, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.027884909126018598;  // std dev = 0.587, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.306989454064699;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6264079459446854;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10564540913945732;  // std dev = 0.033, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.061924876269970466;  // std dev = 0.206, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.048428413042969916;  // std dev = 1.431, 52.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24578481975682465;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5847499481255187;  // std dev = 0.193, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10228264111448382;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.10080042410219746;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24536896347386997;  // std dev = 0.967, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.08294944487102902;  // std dev = 0.683, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02374456424682929;  // std dev = 0.393, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1918393808686526;  // std dev = 0.029, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.05533382177929344;  // std dev = 1.065, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | | else return -0.0569740433118451;  // std dev = 0.441, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03765127531530331;  // std dev = 0.324, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.0355415339473508;  // std dev = 0.755, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1891285392426949;  // std dev = 0.067, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.27406952847939353;  // std dev = 0.340, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0879825227087037;  // std dev = 0.025, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26888579458898176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08748727028278044;  // std dev = 0.000118, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2582366864119485;  // std dev = 0.510, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14721139162474395;  // std dev = 0.948, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.1350928817170325;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08131163946926746;  // std dev = 0.010, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07636691493480716;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0693503682829097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012731532263636193;  // std dev = 0.650, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.642', 'seconds']
Parameter learned model CLL:-0.110083 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true': [2.79e-08, 31, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.798, 48, 5], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.035, 6, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.167, 0, 15], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [1.607, 40, 4], 'false,false,false,false': [0.785, 9, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.581, 0, 22], 'true,false': [0.031, 29, 0], 'false,true,true': [0.075, 0, 2], 'false,true,false': [1.32e-09, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.768, 5, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.174, 0, 15], 'true,false': [0.587, 1, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.027, 0, 4], 'false,false,true,false': [0.033, 48, 0], 'false,false,false': [0.206, 14, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.431, 33, 19], 'false,true': [0.0, 0, 4], 'false,false,true': [0.193, 0, 2], 'false,false,false,true': [0.023, 8, 0], 'false,false,false,false': [0.05, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.967, 1, 21], 'true,false': [0.683, 42, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.393, 5, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.029, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.065, 35, 4], 'false,false,true,false': [0.441, 11, 1], 'false,false,false,true': [0.324, 6, 1], 'false,false,false,false': [0.755, 5, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.067, 0, 16], 'false,true,true,true': [0.34, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.025, 49, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.000118, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.51, 1, 1]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.948, 1, 20], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.01, 46, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.65, 7, 2]}]
{'': [0.23929845422116636, 0.17283950617283952], 'true': [3.089316242435218e-16, 3.489272363107635e-17], 'false': [0.0, -7.93016446160826e-18], 'true,false': [2.5069552168955147e-17, 0.0], 'false,true': [0.0, nan], 'true,false,false': [0.0, nan]}
{'': [1.9737298215558337e-16, 0.06768483233427873], 'false': [0.059980176801772464, 0.09915090450905216], 'false,false': [0.0, 0.13385372108722043], 'false,false,false': [nan, 0.13385372108722043], 'false,true': [nan, 0.059980176801772464], 'false,true,false': [0.06099421964814617, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.0032827437653190628, 0.07816893557412513], 'false': [nan, 0.07816893557412492], 'false,false': [0.0, 0.0592198871434705], 'false,false,false': [0.058671605844089085, 0.061631344012868974], 'true': [0.0032827437653190628, nan], 'true,true': [0.001867516453159072, 0.0], 'false,false,true': [0.0, 3.700743415417188e-17]}
{'': [0.09446013222811084, 0.0742141769746388], 'true': [0.015365326155274498, 3.292854997429894e-05], 'false': [0.059801989822787935, 0.09821980969648679], 'false,false': [nan, 0.09821980969648679], 'false,false,false': [nan, 0.09821980969648679], 'false,true': [0.0056007988314119295, 1.734723475976807e-18]}
{'': [0.030666411636060587, 0.04378072105759345], 'false': [0.0, 0.03912784865018392], 'false,false': [0.038087230134125745, 0.04261228026372616], 'false,false,true': [0.0001803660219672487, 2.2895885271032035e-05], 'true': [0.0020262625489720835, 0.17199807136031733], 'false,true': [0.0, nan]}
{'': [0.03936871131048222, 0.042555972522512794], 'false': [0.0, 0.03763848157753661], 'true': [nan, 0.03936871131048228], 'true,false': [nan, 0.03936871131048222], 'false,false': [0.01863705538158239, 0.00013933310700305448], 'false,false,false': [6.459120128425241e-05, 0.00018124387022416612]}
{'': [0.04569127878251825, 0.01930188161775287], 'true': [0.04251049628907521, 0.010834878954051282], 'false': [nan, 0.01930188161775287], 'false,false': [nan, 0.01930188161775287], 'false,false,false': [nan, 0.01930188161775287]}
{'': [4.5726371737429985e-05, 0.03136497089297654], 'false': [nan, 0.03136497089297654], 'false,false': [0.026047207666837005, 0.051938013690458286], 'false,false,false': [0.014980045388970487, 0.09505324667856757], 'false,false,true': [0.029071221952087462, 0.01621710393113853], 'true': [4.5726371737429985e-05, nan]}
{'': [0.004429454151733722, 0.02312189633903739], 'false': [0.016409707208500716, 0.06703294602684175], 'false,false': [0.020320284618981294, 0.13001285506896038], 'false,false,false': [nan, 0.13001285506896038], 'false,false,true': [0.0, 3.500507969426969e-09], 'false,true': [0.01649295232656998, 1.2604077587982483e-05], 'false,true,true': [0.01649295232656998, nan]}
{'': [0.02363920867393027, 0.0468798875665595], 'false': [nan, 0.0468798875665595], 'false,false': [nan, 0.0468798875665595], 'true': [0.037436109861917415, 5.772266823896571e-06], 'true,true': [0.04276576827117914, -2.3129646346357427e-18], 'true,false': [2.187226591763581e-06, 1.0940428204056496e-05], 'true,false,false': [0.0, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.551
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.01982988218597315;  // std dev = 1.581, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return -0.01982988218597316;  // std dev = 0.790, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.031564855112908505;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.15619471171805724;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5665725564616998;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.13941233461189828;  // std dev = 0.826, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7234582324775122;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1213722893753233;  // std dev = 0.032, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0192812595552795;  // std dev = 0.774, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.06401990631827961;  // std dev = 0.719, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.41479084602954414;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5994569241242098;  // std dev = 0.141, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.11075490121645795;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.10077273267422215;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13512612859867548;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.5547542686431761;  // std dev = 0.198, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.110754901216458;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.04513736714699217;  // std dev = 0.272, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32557473615236465;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.11637836546411465;  // std dev = 0.637, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4549334876930591;  // std dev = 0.153, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10293209986232651;  // std dev = 0.053, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09607153057646964;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.06791380629581935;  // std dev = 0.710, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.2526439575968435;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.24414307396732327;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3869636594475782;  // std dev = 0.203, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.048753537886502205;  // std dev = 0.123, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else return -0.0919645979940119;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.5714460037141391;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10731399394718852;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.10254181923530503;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then if ( tweets(C, D) )
%   | | then return 0.20797016270964802;  // std dev = 5.89e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2018196156097558;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3046842489514285;  // std dev = 0.181, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.12546960214058925;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.08642893997811728;  // std dev = 0.017, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.10447669397815822;  // std dev = 0.525, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.17597819377995555;  // std dev = 0.000613, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1709975091070454;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16910388967193227;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2695634095280377;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06776194090487332;  // std dev = 0.442, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | else return -0.13245730756029075;  // std dev = 0.721, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.014469129499722903;  // std dev = 0.342, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.12370969309501773;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.010283053619564539;  // std dev = 0.572, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.15324302338458798;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.12175922265658916;  // std dev = 0.940, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.26499983243618;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1537195151681528;  // std dev = 0.000213, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07509808914420027;  // std dev = 0.012, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.07337027664103776;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.307541028137743;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08537454194553978;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.06357587398663121;  // std dev = 0.538, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1329197576717126;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.24519556051562433;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13482343448156853;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0701896068070475;  // std dev = 0.002, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06971128456874953;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.06576006883198328;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return 0.0023360088565219095;  // std dev = 0.282, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, J) )
%   | | then return -0.10276766919863523;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.001768741301001145;  // std dev = 0.565, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.176', 'seconds']
Refined model CLL: -0.107716


******************************************
Best model found
******************************************
Results 

CLL : -0.102389 

AUC ROC : 0.994686 

AUC PR : 0.418617 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 3.551 

Total Inference Time : 4.439897298812866 

Total revision time: 12.343510787963867
Best scored revision CLL: -0.107716


Results 

CLL : -0.102389 

AUC ROC : 0.994686 

AUC PR : 0.418617 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 17.93113247680664 

Total Inference Time : 4.439897298812866 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.566
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6943358129816799;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.010477934170840244;  // std dev = 2.821, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.007085835047355736;  // std dev = 1.360, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5833875097947185;  // std dev = 0.253, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.7216477470804584;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5667962813204295;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5667962813204295;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040597774974429415;  // std dev = 2.409, 91.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=9 */
%   | | | else return -0.03369087428993275;  // std dev = 1.384, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4826531140227457;  // std dev = 1.122, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return -0.12034252987565043;  // std dev = 0.034, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49631418679285694;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12152814201961523;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02040572359158319;  // std dev = 1.096, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3268394065188158;  // std dev = 0.265, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.43405830125023614;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3138111797999237;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6248490638712189;  // std dev = 0.000821, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10839458268309088;  // std dev = 0.031, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.02734602354949398;  // std dev = 0.239, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04185608258353118;  // std dev = 2.190, 111.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25045797146259485;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5426031402634203;  // std dev = 0.406, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09611788301100364;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.10469424508830227;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.253450623503708;  // std dev = 1.588, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else return -0.08264191041903826;  // std dev = 1.041, 80.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04690824127226145;  // std dev = 0.484, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19433882390501342;  // std dev = 0.048, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.023358003257541247;  // std dev = 1.550, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
%   | | | else return 0.043689371908442846;  // std dev = 0.649, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.058988826937745126;  // std dev = 0.409, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.030893409314778866;  // std dev = 0.936, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15307159543636903;  // std dev = 0.178, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.30023201995480553;  // std dev = 0.542, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09375070257891292;  // std dev = 0.078, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.29837825511090665;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.07868852439946725;  // std dev = 0.000622, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007058210638013281;  // std dev = 0.946, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20328941344860524;  // std dev = 0.580, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.13424311708545092;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08949256694542598;  // std dev = 0.049, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07826858498621898;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06821105854676689;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.38944733095154715;  // std dev = 0.715, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0012364911432175703;  // std dev = 0.983, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.652', 'seconds']
Parameter learned model CLL:-0.110962 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.989, 1, 46], 'true,false,true': [6.5e-08, 64, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.985, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.821, 66, 13], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 10, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.36, 18, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.253, 0, 28], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.409, 82, 9], 'false,false,false,false': [1.384, 25, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.122, 1, 42], 'true,false': [0.034, 62, 0], 'false,true,true': [0.115, 0, 6], 'false,true,false': [0.004, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.096, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.265, 0, 29], 'true,false': [0.0, 0, 1], 'false,true,true': [0.003, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.000821, 0, 9], 'false,false,true,false': [0.031, 69, 0], 'false,false,false': [0.239, 27, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.19, 73, 38], 'false,true': [0.002, 0, 8], 'false,false,true': [0.406, 0, 4], 'false,false,false,true': [0.029, 13, 0], 'false,false,false,false': [0.041, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.588, 2, 42], 'true,false': [1.041, 77, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.484, 6, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.048, 0, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.55, 54, 11], 'false,false,true,false': [0.649, 5, 2], 'false,false,false,true': [0.409, 20, 2], 'false,false,false,false': [0.936, 9, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.178, 1, 30], 'false,true,true,true': [0.542, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 86, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.000622, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.946, 11, 2]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.58, 0, 40], 'true,true,false': [0.014, 0, 6], 'true,false,true': [0.049, 80, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.016, 5, 0], 'false,true': [0.715, 1, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.983, 17, 3]}]
{'': [0.23713014617611822, 0.1955555555555554], 'true': [0.020823902218199193, 6.78469626159818e-17], 'false': [0.0, -1.0092936587501423e-17], 'true,false': [6.591949208711867e-17, -6.938893903907228e-18], 'false,true': [0.0, nan], 'true,false,false': [-6.938893903907228e-18, nan]}
{'': [0.028546712802768534, 0.0938336630536248], 'false': [0.09973582161930813, 0.07842909894233006], 'false,true': [nan, 0.09973582161930813], 'false,true,false': [0.1007673635518682, 0.0], 'false,false': [2.7755575615628915e-18, 0.10691706961477238], 'false,false,false': [0.0, 0.0880134341087488], 'false,false,true': [nan, 2.7755575615628915e-18]}
{'': [0.0027908461946037615, 0.08244891836236753], 'false': [nan, 0.08244891836236765], 'false,false': [1.1102230246251565e-16, 0.0648763664703923], 'false,false,false': [0.06377880072226232, 0.0684069746458235], 'true': [0.0028512457132018982, 0.0], 'true,true': [0.002293907185716902, 0.0], 'false,false,true': [3.700743415417188e-17, 0.0], 'true,false': [nan, 0.0]}
{'': [0.09992584221662917, 0.0987999067174268], 'true': [0.029278523629071372, 1.8784627180246094e-05], 'false': [0.09442234720788961, 0.10003304105580753], 'false,false': [nan, 0.10003304105580753], 'false,false,false': [nan, 0.10003304105580753], 'false,true': [0.013183150215050085, 1.7436676436105582e-05]}
{'': [0.0027116089986151484, 0.059105554640380656], 'false': [9.428589035215262e-07, 0.05557731093853211], 'false,false': [0.054890752813252175, 0.05735322701575183], 'false,false,true': [7.486676922852098e-08, 1.4301241646289911e-05], 'true': [0.002421916377607213, 0.0], 'false,true': [9.428589035215262e-07, nan]}
{'': [0.04319530885031283, 0.05646180666725286], 'false': [7.156839400973558e-07, 0.05831335946363815], 'false,false': [0.04128141629027532, 0.00012849674110781007], 'true': [nan, 0.0431953088503129], 'true,false': [nan, 0.04319530885031283], 'false,false,false': [6.6279926859046e-05, 0.00016780460727243153]}
{'': [0.054933570602155486, 0.02127811335305365], 'true': [0.05732657251584568, 0.013535480680440628], 'false': [nan, 0.02127811335305365], 'false,false': [nan, 0.02127811335305365], 'false,false,false': [nan, 0.02127811335305365]}
{'': [6.921253303970865e-05, 0.037692927541683206], 'false': [nan, 0.03769292754168319], 'false,false': [0.03960940734900408, 0.03340964643801519], 'false,false,true': [0.036948057430557, 0.06026363975626078], 'false,false,false': [0.007621490437673065, 0.0796000808428631], 'true': [6.921253303970865e-05, nan]}
{'': [0.03173872961674752, 0.02916225643935897], 'false': [0.024307108576806093, 0.05602241452067586], 'false,false': [0.022748774309372798, 0.06879030769133455], 'false,false,false': [nan, 0.06879030769133455], 'false,true': [0.01730952812899969, 7.112252311242129e-05], 'false,false,true': [0.0, 9.664465100596431e-08], 'false,true,true': [0.01730952812899969, nan]}
{'': [0.02059164217289575, 0.07954365815747091], 'false': [0.2552956514292577, 0.04826776281713875], 'false,false': [nan, 0.04826776281713875], 'true': [0.007864215181685636, 5.8207413194367495e-05], 'true,true': [0.008416989395396946, 3.349632957951506e-05], 'true,false': [3.0140475654379107e-05, 5.364508262864498e-05], 'true,false,false': [0.0, 5.1603887362548784e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.85
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.7891834178581324;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.5903227824105397;  // std dev = 0.350, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.7366859233000419;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7240422498965304;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5428697281292049;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.035982727273637244;  // std dev = 2.397, 85.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=9 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.03297749598523597;  // std dev = 1.319, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5583780232668675;  // std dev = 0.977, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.6350361279753368;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6148976892928104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.553456492907415;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7251327845053034;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1216064244175963;  // std dev = 0.042, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02711614758311838;  // std dev = 0.800, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.15151823246659055;  // std dev = 0.972, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.46198958251594796;  // std dev = 0.067, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.26335757017429573;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.41598987433762685;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5609484431662101;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G) )
%   | | then return -0.11088610175512414;  // std dev = 0.016, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.10075151790429253;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4849610561615905;  // std dev = 0.273, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11811899882909314;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.0624825104278941;  // std dev = 0.357, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.30424205301362656;  // std dev = 0.973, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.03018532847605515;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4004486794304495;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1488714083959502;  // std dev = 0.701, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3179240487671986;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.42168235246122016;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09919902875852425;  // std dev = 0.030, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.07610141212113128;  // std dev = 0.725, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.12488324215110902;  // std dev = 0.907, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.28036336859552174;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3339857614370266;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.04877767311758755;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.32521013515597724;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0902128057505012;  // std dev = 0.007, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.07536638308169565;  // std dev = 0.174, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.25327499997084246;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2992234687527141;  // std dev = 0.817, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.10848854673940933;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.23246557281845062;  // std dev = 0.014, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2772834975217362;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20811952005557802;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(H, F), follows(H, A) )
%   | | | then return 0.2634088061307669;  // std dev = 0.096, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.24105623799417672;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08457114539204469;  // std dev = 0.005, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09547420757758124;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.29494400477019217;  // std dev = 0.527, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20499194038789342;  // std dev = 0.725, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.1962117325152124;  // std dev = 0.025, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.17586973430415803;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return 0.21575937362883976;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.3517804587556;  // std dev = 0.296, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0803138502304999;  // std dev = 0.010, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.21562633978730206;  // std dev = 0.261, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08644540376305009;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.012407289294001695;  // std dev = 0.335, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.07520413206015428;  // std dev = 0.910, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1645721412995779;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.016267059217392323;  // std dev = 0.918, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.09539659207935107;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.1882551996604125;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.12765862223226032;  // std dev = 0.244, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07365736291795068;  // std dev = 0.005, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( tweets(A, H) )
%   | | then return -0.05905601257262196;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1372456885851995;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.01739510107899166;  // std dev = 0.886, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1543902762876168;  // std dev = 0.158, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.09655599287777296;  // std dev = 1.026, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.13705987853046225;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0703476921268218;  // std dev = 0.009, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.0650689225539845;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.05535766036081041;  // std dev = 0.266, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.21279914292909008;  // std dev = 0.614, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.11459081874142507;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11213922363604496;  // std dev = 0.780, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.803', 'seconds']
Refined model CLL: -0.10251


******************************************
Best model found
******************************************
Results 

CLL : -0.101519 

AUC ROC : 0.994146 

AUC PR : 0.384094 

Precision : 0.329177 

Recall : 0.846154 

F1 : 0.473968 

Total Learning Time : 6.85 

Total Inference Time : 11.05354118347168 

Total revision time: 24.375625959396363
Best scored revision CLL: -0.10251


Results 

CLL : -0.101519 

AUC ROC : 0.994146 

AUC PR : 0.384094 

Precision : 0.329177 

Recall : 0.846154 

F1 : 0.473968 

Total Learning Time : 29.963247648239136 

Total Inference Time : 11.05354118347168 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.431
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8278459047964823;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6847323198528575;  // std dev = 1.385, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.010628084214886297;  // std dev = 3.263, 126.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=17 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07284390097819386;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09154025028356282;  // std dev = 2.062, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5661618583705202;  // std dev = 1.059, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.7276599126024608;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.876439786709779;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.571364824014852;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5713648240148521;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03341176434296709;  // std dev = 2.892, 115.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=13 */
%   | | | else return 0.01117406395290781;  // std dev = 1.875, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.48345462633610675;  // std dev = 1.704, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return -0.12199173125035191;  // std dev = 0.040, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4091840691281643;  // std dev = 0.302, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.12382559653186576;  // std dev = 0.004, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09204741458415014;  // std dev = 1.485, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.34736941561131757;  // std dev = 0.457, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.42843640591494453;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3200051249253983;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6244181963457032;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09676079083668779;  // std dev = 0.994, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else return -0.025849268448273868;  // std dev = 0.250, 52.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04040510011144991;  // std dev = 2.748, 158.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25369206906829234;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.26855469960322786;  // std dev = 2.030, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11364226225443698;  // std dev = 0.072, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11707941773577711;  // std dev = 0.074, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2730627958914631;  // std dev = 1.955, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else return -0.0835747704723853;  // std dev = 1.456, 147.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005872517009788518;  // std dev = 0.567, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11873587333225814;  // std dev = 1.914, 51.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.04400174544221622;  // std dev = 1.743, 118.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=14 */
%   | | | else return -0.007785264557302647;  // std dev = 0.945, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013737093887035376;  // std dev = 1.118, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.08577805021445059;  // std dev = 1.429, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1473366280225145;  // std dev = 0.231, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.30980469880286166;  // std dev = 0.645, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09412909503148637;  // std dev = 0.061, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4442281833694247;  // std dev = 0.260, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09216705708628037;  // std dev = 0.000571, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0580912284135231;  // std dev = 1.221, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1652925935248122;  // std dev = 1.677, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | | else return 0.1479821723706257;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08625347810256687;  // std dev = 0.047, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08756494927024747;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.042254700844226466;  // std dev = 0.451, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17646792080405227;  // std dev = 0.060, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027524129584613848;  // std dev = 1.450, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.441', 'seconds']
Parameter learned model CLL:-0.115392 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false,true': [0.972, 17, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.385, 2, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.263, 109, 17], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.97, 16, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.062, 23, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.059, 1, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 6], 'false,false,true,false': [2.11e-08, 0, 5], 'false,false,false,true': [2.892, 102, 13], 'false,false,false,false': [1.875, 30, 6]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.704, 2, 58], 'true,false': [0.04, 94, 0], 'false,true,true': [0.302, 1, 12], 'false,true,false': [0.004, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.485, 12, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.457, 0, 43], 'true,false': [0.047, 0, 2], 'false,true,true': [0.021, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.04, 0, 11], 'false,false,true,false': [0.994, 110, 2], 'false,false,false': [0.25, 46, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.748, 103, 55], 'false,true': [0.013, 0, 9], 'false,false,true': [2.03, 3, 11], 'false,false,false,true': [0.072, 22, 0], 'false,false,false,false': [0.074, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.955, 3, 64], 'true,false': [1.456, 141, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.567, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.914, 4, 47], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.743, 104, 14], 'false,false,true,false': [0.945, 15, 3], 'false,false,false,true': [1.118, 22, 6], 'false,false,false,false': [1.429, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.231, 3, 45], 'false,true,true,true': [0.645, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 129, 0], 'false,false,true,true': [0.26, 0, 4], 'false,false,true,false': [0.000571, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.221, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.677, 3, 58], 'true,true,false': [0.009, 0, 6], 'true,false,true': [0.047, 103, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.451, 11, 1], 'false,true': [0.06, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.45, 26, 8]}]
{'': [0.21994394080957572, 0.23668639053254442], 'false': [-8.881784197001253e-17, -6.938893903907228e-18], 'true': [0.02938475665748315, 0.007462264684266983], 'true,false': [3.8616453030440226e-17, 0.052469135802469175], 'true,false,false': [0.052469135802469175, nan], 'false,true': [-8.881784197001253e-17, nan]}
{'': [0.03915035401915812, 0.09653831867988727], 'false': [0.08285901947704476, 0.12787756210659937], 'false,false': [0.05536332179930797, 0.15129942138642574], 'false,false,false': [0.0, 0.1371637012973935], 'false,true': [nan, 0.08285901947704476], 'false,true,false': [0.08452527557308412, -4.625929269271485e-18], 'false,false,true': [nan, 0.05536332179930797]}
{'': [0.026938806466569546, 0.09598498640100471], 'false': [nan, 0.09598498640100475], 'false,false': [1.2111523905001707e-16, 0.0790074224544574], 'false,false,false': [0.0727056120005194, 0.09762424525457501], 'true': [0.02666229930239984, 0.022908465790395665], 'true,true': [0.026690566614766268, 0.0], 'true,false': [0.0, 0.0], 'false,false,true': [1.4802973661668753e-16, 8.881784197001253e-17]}
{'': [0.1060323508715083, 0.10994562479238393], 'false': [0.1002026979734871, 0.12978897956724883], 'false,false': [nan, 0.12978897956724883], 'false,false,false': [nan, 0.12978897956724883], 'true': [0.04837476611058055, 1.7418348158977547e-05], 'false,true': [0.09117090338532689, 1.7068990533951712e-05]}
{'': [0.0049680677858022545, 0.057605648149549], 'false': [3.9502223203772985e-05, 0.05396439905775383], 'false,false': [0.05039136990518785, 0.062387055529457884], 'false,false,true': [0.00014638927563029566, 0.008813214324321144], 'true': [0.004856025204833763, 0.0010972088893760334], 'false,true': [3.9502223203772985e-05, nan]}
{'': [0.047787479933249145, 0.09748714282984469], 'false': [2.0082727343144018e-05, 0.10309072207910419], 'false,false': [0.2944331076112911, 0.0002611261001932051], 'true': [nan, 0.04778747993324916], 'true,false': [nan, 0.047787479933249145], 'false,false,false': [0.000235568633386615, 0.0002843797166989208]}
{'': [0.055124312430878536, 0.01893972547985524], 'true': [0.05705690144599971, 0.014422193564355958], 'false': [nan, 0.01893972547985524], 'false,false': [nan, 0.01893972547985524], 'false,false,false': [nan, 0.01893972547985524]}
{'': [0.07182138590239046, 0.042205941323879725], 'true': [0.07182138590239046, nan], 'false': [nan, 0.04220594132387955], 'false,false': [0.02906027676414989, 0.08139777194514346], 'false,false,false': [0.04464326818718251, 0.15701699696709495], 'false,false,true': [0.025755192374927193, 0.0495889061556527]}
{'': [0.053326869343794325, 0.032881502965140086], 'false': [0.023087691486211284, 0.0712910061565423], 'false,false': [0.04940488231045299, 0.09941695327614884], 'false,false,false': [nan, 0.09941695327614884], 'false,false,true': [0.016848446975742865, 2.034742378059784e-08], 'false,true': [0.018905814324230826, 2.8858543847644176e-05], 'false,true,true': [0.018905814324230826, nan]}
{'': [0.029689210591230055, 0.059695317394868413], 'false': [0.0018080497696416412, 0.061867992287764295], 'false,false': [nan, 0.061867992287764295], 'true': [0.04201204812674123, 0.0018315679892625337], 'true,true': [0.04611618706459141, 1.3819300697603953e-05], 'true,false': [2.1829029009084957e-05, 0.010206046438465408], 'true,false,false': [-3.0839528461809902e-18, 0.01698071614770258]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.212
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287249857613824;  // std dev = 0.051, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.01139530186908203;  // std dev = 2.967, 103.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=14 */
%   | | | else return -0.026708738238803483;  // std dev = 1.394, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.005097495028609892;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.128637418717317;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.020039637321685424;  // std dev = 2.187, 45.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5160462835144753;  // std dev = 1.361, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.7363529069557695;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3163011646199735;  // std dev = 0.623, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.6567688496704321;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5530807490365127;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1046637212919949;  // std dev = 1.182, 91.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=2 */
%   | | | else return 0.024963866492012866;  // std dev = 2.306, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.049828875773006966;  // std dev = 1.498, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.13174668216868976;  // std dev = 1.403, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.37862517768562154;  // std dev = 1.372, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.2491538216638266;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.42598599283689054;  // std dev = 1.135, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.7171000872304555;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.11924875848641106;  // std dev = 0.101, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4464773532014404;  // std dev = 0.239, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.11557445781433374;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.27239022341079266;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1709299379282716;  // std dev = 0.374, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3196725521716364;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return 0.4719653425273168;  // std dev = 0.102, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4725888024443928;  // std dev = 0.169, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3227822899368389;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.19017276720599674;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5558421042985245;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09819770070392249;  // std dev = 0.913, 125.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=2 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06410560654771241;  // std dev = 0.998, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | | else return 0.06014921103323907;  // std dev = 1.369, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.23723104994985622;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.10421220032582401;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.29823041875979817;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4056529778014132;  // std dev = 0.158, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09598888899984208;  // std dev = 0.047, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.03957536076118251;  // std dev = 0.191, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.289228135086284;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4956275310611132;  // std dev = 0.147, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12432022709595117;  // std dev = 0.038, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.1537660104237355;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.2196017458614894;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2961575922633515;  // std dev = 0.089, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.21186362315735438;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.08901999291624836;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.07361672006243528;  // std dev = 0.607, 81.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=2 */
%   | | | else return 0.003403459142652211;  // std dev = 0.964, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015196485510260127;  // std dev = 1.355, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | | else return 0.01781704430077916;  // std dev = 1.145, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.21130937037736888;  // std dev = 0.235, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.02063715391080021;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2061702042873933;  // std dev = 0.109, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.38834447332012106;  // std dev = 0.412, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08557835691150932;  // std dev = 0.099, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0010000283367831285;  // std dev = 0.834, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.028067279294627108;  // std dev = 1.124, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.13309597765172074;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.15462503630429755;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.22963915176640853;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06533259133700287;  // std dev = 0.895, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.030748152699186272;  // std dev = 0.122, 146.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=22 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.36430839769465234;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09864611813377187;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04751143555385403;  // std dev = 0.762, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0278079319822954;  // std dev = 0.797, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10401819781738958;  // std dev = 1.375, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.2716604502705232;  // std dev = 0.466, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.19925047770754203;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07386972614287887;  // std dev = 0.039, 118.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.20854912693937766;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3495089376431046;  // std dev = 0.252, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12324484881662508;  // std dev = 0.201, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03434915359459608;  // std dev = 0.526, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.054710644152707065;  // std dev = 0.767, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.243', 'seconds']
Refined model CLL: -0.112405


******************************************
Best model found
******************************************
Results 

CLL : -0.113566 

AUC ROC : 0.993996 

AUC PR : 0.37283 

Precision : 0.342163 

Recall : 0.99359 

F1 : 0.509031 

Total Learning Time : 7.212 

Total Inference Time : 12.52423620223999 

Total revision time: 29.39764916229248
Best scored revision CLL: -0.112405


Results 

CLL : -0.113566 

AUC ROC : 0.993996 

AUC PR : 0.37283 

Precision : 0.342163 

Recall : 0.99359 

F1 : 0.509031 

Total Learning Time : 34.985270851135255 

Total Inference Time : 12.52423620223999 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.711
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8236661764788223;  // std dev = 1.702, 87.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11243930019460538;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7114547882811132;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03930505201721702;  // std dev = 3.426, 178.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=18 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08704039073418095;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09354212024082065;  // std dev = 2.522, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5168143304011408;  // std dev = 1.920, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | else return 0.7341222352306269;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8807424380382805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6159463602843244;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.565835286237924;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5658352862379241;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044142062898287954;  // std dev = 3.217, 172.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=16 */
%   | | | else return 0.006408272745003916;  // std dev = 2.168, 50.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5017544586901963;  // std dev = 1.342, 80.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | else return -0.11854265232087347;  // std dev = 0.087, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4911601767430316;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.10599050590445697;  // std dev = 0.091, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23751655263593072;  // std dev = 1.565, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30860323110454285;  // std dev = 1.504, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.42682270240849823;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31991049106529906;  // std dev = 0.136, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5560931940116636;  // std dev = 0.957, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09171450692577375;  // std dev = 1.207, 139.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=3 */
%   | | else return -0.027356027389976254;  // std dev = 0.259, 62.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05206450995484515;  // std dev = 3.041, 201.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=75 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.14572218147305077;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5368441982927517;  // std dev = 0.554, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12743347794614462;  // std dev = 0.122, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.11801261139145645;  // std dev = 0.158, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2923183554608675;  // std dev = 1.434, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | else return -0.0798851781930376;  // std dev = 1.654, 195.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 6.878173158287658E-4;  // std dev = 0.582, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18251063626791694;  // std dev = 0.996, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.29749416380892746;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04481646876431815;  // std dev = 1.879, 136.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=15 */
%   | | | else return -0.0400544953338036;  // std dev = 0.944, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02469648266251738;  // std dev = 1.362, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0.0030490281335316324;  // std dev = 1.434, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16155213134609162;  // std dev = 0.166, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3025418484791931;  // std dev = 0.716, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09236812296503996;  // std dev = 0.075, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3937211847151256;  // std dev = 0.291, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08846340571468708;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031452720537391794;  // std dev = 1.373, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12554109241826872;  // std dev = 2.392, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   | | else return 0.14927016736753365;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08529917909510032;  // std dev = 0.054, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08136752896949344;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.03212452121939769;  // std dev = 0.397, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14963901864434517;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.053043577346197086;  // std dev = 1.544, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.651', 'seconds']
Parameter learned model CLL:-0.113079 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.702, 3, 84], 'true,false,true': [0.0, 143, 0], 'true,false,false,true': [0.985, 33, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false': [7.21e-09, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.993, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.426, 160, 18], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.866, 1, 3], 'false,false,false,false': [2.522, 34, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.92, 4, 57], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.217, 156, 16], 'false,false,false,false': [2.168, 42, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.342, 1, 79], 'true,false': [0.087, 159, 0], 'false,true,true': [0.109, 0, 13], 'false,true,false': [0.091, 34, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.565, 8, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.504, 2, 60], 'true,false': [0.03, 0, 2], 'false,true,true': [0.136, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.957, 1, 13], 'false,false,true,false': [1.207, 136, 3], 'false,false,false': [0.259, 54, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.041, 126, 75], 'false,true': [0.949, 1, 9], 'false,false,true': [0.554, 0, 16], 'false,false,false,true': [0.122, 19, 0], 'false,false,false,false': [0.158, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.434, 1, 86], 'true,false': [1.654, 186, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.582, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.996, 1, 65], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.879, 121, 15], 'false,false,true,false': [0.944, 23, 3], 'false,false,false,true': [1.362, 41, 9], 'false,false,false,false': [1.434, 25, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.166, 2, 62], 'false,true,true,true': [0.716, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 180, 0], 'false,false,true,true': [0.291, 0, 6], 'false,false,true,false': [0.001, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.373, 17, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.392, 6, 78], 'true,true,false': [0.01, 0, 6], 'true,false,true': [0.054, 148, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.397, 8, 1], 'false,true': [0.053, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.544, 27, 12]}]
{'': [0.2183052112029392, 0.17751479289940778], 'true': [0.03329369797859672, 0.005617798206134719], 'false': [-2.3684757858670006e-16, 5.773159728050814e-17], 'true,false': [-9.006004955001269e-17, 0.02854671280276823], 'true,false,false': [0.02854671280276823, nan], 'false,true': [-2.3684757858670006e-16, nan]}
{'': [0.014702606371129901, 0.08510132571264913], 'false': [0.06562856057671414, 0.12580810047926763], 'false,false': [0.03993055555555557, 0.1526369833331804], 'false,false,false': [0.18750000000000006, 0.1382994697639141], 'false,true': [nan, 0.06562856057671414], 'false,true,false': [0.06595580768280866, 0.0], 'false,false,true': [nan, 0.03993055555555557]}
{'': [0.058851723804709856, 0.08418466025547562], 'false': [nan, 0.08418466025547527], 'false,false': [1.9032394707859825e-16, 0.06823777366590582], 'false,false,false': [0.06016551071211798, 0.09402654801708202], 'true': [0.06021328795291013, 0.013146930523852296], 'true,true': [0.060438734171180085, 0.0], 'true,false': [0.0, -7.401486830834377e-17], 'false,false,true': [9.868649107779169e-17, 0.0]}
{'': [0.09324852952944511, 0.10560090149563858], 'false': [0.07970262613584798, 0.16329937238929848], 'false,false': [nan, 0.16329937238929848], 'false,false,false': [nan, 0.16329937238929848], 'true': [0.022510734872464643, 4.7067421307531005e-05], 'false,true': [0.011914245494443216, 0.00830499686646818]}
{'': [0.03578605384013728, 0.05893910292599151], 'false': [0.0013308331987379146, 0.05516342147879647], 'false,false': [0.050384060880378334, 0.06693927133941008], 'false,false,true': [0.06537925625125597, 0.010473966220442893], 'true': [0.0364895292426449, 0.0004392180731213613], 'false,true': [0.0013308331987379146, nan]}
{'': [0.04601095911074111, 0.08180011180856354], 'false': [0.09003970449932595, 0.07885879485460495], 'false,false': [0.01916826566459151, 0.0007186488321136471], 'true': [nan, 0.04601095911074118], 'true,false': [nan, 0.04601095911074111], 'false,false,false': [0.0007791256894713371, 0.0006588261612211079]}
{'': [0.04655234678984493, 0.019956959280555825], 'true': [0.023637390240418433, 0.014036276368935108], 'false': [nan, 0.019956959280555825], 'false,false': [nan, 0.019956959280555825], 'false,false,false': [nan, 0.019956959280555825]}
{'': [0.015006544488136802, 0.03442311361438395], 'false': [nan, 0.03442311361438387], 'false,false': [0.027305181874943966, 0.04788050635854838], 'false,false,false': [0.03711239582123298, 0.06423628067716873], 'false,false,true': [0.025967136809615612, 0.03428514986186329], 'true': [0.015036584857816603, 0.0], 'true,false': [0.0, nan]}
{'': [0.02771416233628165, 0.029318080032998187], 'false': [0.019716386899372114, 0.06988956860742149], 'false,false': [0.05469383022270942, 0.08196906424744309], 'false,false,false': [nan, 0.08196906424744309], 'false,false,true': [0.014116604556244639, 1.0287305602993616e-07], 'false,true': [0.01972512302940985, 3.1624896455159956e-05], 'false,true,true': [0.01972512302940985, nan]}
{'': [0.03328727426423937, 0.05743359888517499], 'false': [0.0009479767744419304, 0.061112169648447894], 'false,false': [nan, 0.061112169648447894], 'true': [0.06360086509011688, 0.0011244017233749113], 'true,true': [0.06810516815768031, 1.5091079477525896e-05], 'true,false': [1.967816777609827e-05, 0.010440195195755592], 'true,false,false': [-9.912705577010326e-19, 0.01749946472180586]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.135
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6759951513413898;  // std dev = 0.204, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.6280959012503997;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.7194734122109543;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.02240585185286124;  // std dev = 3.066, 123.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=15 */
%   | | | else return -0.034212933086655885;  // std dev = 1.394, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7523355672866044;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.1337163036637104;  // std dev = 0.050, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.08255400021351443;  // std dev = 2.552, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5526281163150889;  // std dev = 1.000, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.7239733007332689;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7457484091036838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5926762356658115;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7243655055725843;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12236236901954317;  // std dev = 0.059, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07699355499124391;  // std dev = 1.637, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.09315060246879682;  // std dev = 1.907, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, G) )
%   | | | then return 0.42866120691917003;  // std dev = 0.897, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.06098241606834125;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.4992426509686386;  // std dev = 0.187, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.11525529198656148;  // std dev = 0.173, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.4522945786272686;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5690083965075908;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10861128819990663;  // std dev = 0.012, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.13271283331403264;  // std dev = 0.959, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1510094103170492;  // std dev = 1.378, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), tweets(A, G) )
%   | | | then return 0.3006215909875486;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.34156061324064335;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.44847849176531784;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4027529789138748;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3053182090776515;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.23546657008228086;  // std dev = 1.532, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.09912623004038043;  // std dev = 0.042, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.037365202339075615;  // std dev = 1.458, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.10517680387788013;  // std dev = 1.652, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26516021520573907;  // std dev = 0.069, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.24760563142047623;  // std dev = 1.359, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.09096776391711288;  // std dev = 0.008, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.054007153664006546;  // std dev = 0.123, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.24374103131938454;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.12113158033792845;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4661719614000069;  // std dev = 1.167, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1301893131959447;  // std dev = 0.122, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12972709858611214;  // std dev = 0.259, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21474008387693722;  // std dev = 0.074, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.28944403600306723;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3128414171082937;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.04890130005285906;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3317003472253632;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.083191579808847;  // std dev = 0.050, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.007408986385987879;  // std dev = 1.212, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.05050363705777361;  // std dev = 1.363, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18088936409074816;  // std dev = 0.064, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.17214485784633493;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.25097663188137337;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.30982301716789595;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07639696668499871;  // std dev = 0.051, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return -0.050550528679313825;  // std dev = 0.315, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.009195016669802906;  // std dev = 1.240, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09937298781811872;  // std dev = 0.717, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.03620134855541362;  // std dev = 1.149, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.14026741921715116;  // std dev = 0.998, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.11733316558324991;  // std dev = 0.667, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23240211190164364;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.1688895415080024;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08080271186002908;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.06913030087656842;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then return -0.0406234875501893;  // std dev = 0.084, 206.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=26 */
%   | else if ( tweets(A, J) )
%   | | then return 0.028625532295756706;  // std dev = 0.245, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else return 0.011907089751425176;  // std dev = 0.318, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12783760404179187;  // std dev = 0.993, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.21424085742255883;  // std dev = 0.128, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.14978394176459942;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06749693818981237;  // std dev = 0.022, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2141608081200311;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.40775902845414286;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13512828613680644;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07467855687455545;  // std dev = 0.788, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0645942567682773;  // std dev = 1.057, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.903', 'seconds']
Refined model CLL: -0.109374


******************************************
Best model found
******************************************
Results 

CLL : -0.113913 

AUC ROC : 0.994356 

AUC PR : 0.388348 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 8.135 

Total Inference Time : 14.610058307647705 

Total revision time: 35.13591055488587
Best scored revision CLL: -0.109374


Results 

CLL : -0.113913 

AUC ROC : 0.994356 

AUC PR : 0.388348 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 40.72353224372864 

Total Inference Time : 14.610058307647705 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.218
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6894330621541894;  // std dev = 1.708, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.040873105201685876;  // std dev = 3.782, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09166743038995856;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5517378088213117;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.08761290203039857;  // std dev = 3.052, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5556148830007062;  // std dev = 1.360, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7314067908753534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8049987819371228;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6072024213161327;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5674526775372826;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5674526775372826;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04394745987664834;  // std dev = 3.693, 223.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=21 */
%   | | | else return 0.013890713319934614;  // std dev = 2.553, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.48172395535836826;  // std dev = 2.020, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.11805576934267659;  // std dev = 0.072, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4489479877595569;  // std dev = 0.222, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10631287042830136;  // std dev = 0.090, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11659231039772142;  // std dev = 2.050, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2947247495219653;  // std dev = 1.734, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.19955508753478007;  // std dev = 0.962, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.2677097967862505;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6303447596037101;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09231751417761246;  // std dev = 1.428, 198.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=4 */
%   | | else return -0.012302951693484913;  // std dev = 0.269, 82.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03030337573334859;  // std dev = 3.609, 274.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2699202365193889;  // std dev = 0.116, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5015010216307499;  // std dev = 1.332, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1214442326801702;  // std dev = 0.130, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.1184403545557474;  // std dev = 0.120, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29320435840611625;  // std dev = 1.855, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07512094677408637;  // std dev = 1.969, 222.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050032563854170826;  // std dev = 0.628, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18838583286762456;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.28696616423314963;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03940594370099833;  // std dev = 1.862, 153.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=17 */
%   | | | else return -0.04863145982725729;  // std dev = 1.370, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.002071893049125136;  // std dev = 1.463, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.10891237828980051;  // std dev = 1.582, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16712694381709625;  // std dev = 0.169, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.30132271489081436;  // std dev = 0.803, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09226862082025968;  // std dev = 0.081, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38942241786887444;  // std dev = 0.381, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09095818842865787;  // std dev = 0.000490, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12723674923040118;  // std dev = 1.465, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17480078682802655;  // std dev = 1.712, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.13697945380713067;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08457461178849704;  // std dev = 0.069, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09022640583266701;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.045009945583795744;  // std dev = 0.497, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15763862723141223;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02811877551011383;  // std dev = 1.871, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.647', 'seconds']
Parameter learned model CLL:-0.11412 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 181, 0], 'true,false,false,true': [0.972, 17, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [7.21e-09, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.708, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.782, 197, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.791, 1, 4], 'false,false,false,false': [3.052, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.36, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.104, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.693, 202, 21], 'false,false,false,false': [2.553, 55, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.02, 3, 97], 'true,false': [0.072, 175, 0], 'false,true,true': [0.222, 1, 19], 'false,true,false': [0.09, 35, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.05, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.734, 4, 73], 'true,false': [0.962, 1, 4], 'false,true,true': [0.99, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.045, 0, 17], 'false,false,true,false': [1.428, 194, 4], 'false,false,false': [0.269, 71, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.609, 183, 91], 'false,true': [0.116, 0, 13], 'false,false,true': [1.332, 1, 22], 'false,false,false,true': [0.13, 36, 0], 'false,false,false,false': [0.12, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.855, 2, 107], 'true,false': [1.969, 211, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.628, 9, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.862, 136, 17], 'false,false,true,false': [1.37, 36, 5], 'false,false,false,true': [1.463, 46, 13], 'false,false,false,false': [1.582, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.169, 2, 77], 'false,true,true,true': [0.803, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 209, 0], 'false,false,true,true': [0.381, 0, 9], 'false,false,true,false': [0.00049, 17, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.465, 12, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.712, 2, 94], 'true,true,false': [0.014, 0, 9], 'true,false,true': [0.069, 205, 0], 'true,false,false,true': [9.13e-09, 16, 0], 'true,false,false,false': [0.497, 15, 2], 'false,true': [0.088, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.871, 45, 17]}]
{'': [0.2246900826446303, 0.21172022684310035], 'true': [0.01868480725623786, 0.009755150573903597], 'false': [0.07939508506616269, 5.3097622916855314e-17], 'false,true': [0.04338842975206614, 0.0], 'true,false': [-2.011895867829013e-16, 0.0826446280991736], 'true,false,false': [0.052469135802469175, 0.18750000000000003]}
{'': [0.03431975222684225, 0.08701039246522416], 'false': [0.06453076130618815, 0.1299054593145419], 'false,false': [0.03840000000000001, 0.1498780417307303], 'false,false,false': [0.12505784441851167, 0.136948814519552], 'false,true': [nan, 0.06453076130618815], 'false,true,false': [0.0653180910371145, 2.3129646346357427e-18], 'false,false,true': [nan, 0.03840000000000001]}
{'': [0.025532567041653326, 0.08519840283314957], 'false': [nan, 0.08519840283314965], 'false,false': [-5.224578939412501e-17, 0.07033046389056871], 'false,false,false': [0.06114506055697144, 0.09878470716236111], 'true': [0.025762305450423326, 0.010493127336405875], 'true,true': [0.025696789291164812, 0.0], 'true,false': [0.005397115159278543, 0.0], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.09810322887400938, 0.11121144119386975], 'false': [0.093585601951953, 0.1448489244394164], 'false,false': [nan, 0.1448489244394164], 'false,false,false': [nan, 0.1448489244394164], 'true': [0.040809445851452394, 2.9545035614493287e-05], 'false,true': [0.04922140716103081, 0.008120012323113756]}
{'': [0.04849958162574454, 0.0592006373408148], 'false': [0.05439904017147539, 0.05446567174467398], 'false,false': [0.047527466366884166, 0.07227855174325744], 'false,true': [0.05439904017147539, nan], 'true': [0.039069785549234654, 0.18521344887067817], 'false,false,true': [0.00011866785626313923, 0.01030446316846761]}
{'': [0.047531673154296426, 0.08674976360002137], 'false': [0.0010374004056496594, 0.09205003351795307], 'false,false': [0.07712359259029278, 0.00045727359230932193], 'true': [nan, 0.04753167315429637], 'true,false': [nan, 0.047531673154296426], 'false,false,false': [0.00047145814491010113, 0.00043709173469030075]}
{'': [0.052071767918593456, 0.02320199859484325], 'true': [0.031576863443719495, 0.017459884043039015], 'false': [nan, 0.02320199859484325], 'false,false': [nan, 0.02320199859484325], 'false,false,false': [nan, 0.02320199859484325]}
{'': [0.012204893458797106, 0.037857149019970705], 'false': [nan, 0.037857149019970886], 'false,false': [0.02757330667607672, 0.05765894668793876], 'false,false,false': [0.03627575955954265, 0.10010566750260455], 'false,false,true': [0.022670006084642723, 0.04580386641932799], 'true': [0.012253862139620628, 0.0007377507974562353], 'true,false': [0.0007377507974562353, nan]}
{'': [0.028639044592263956, 0.032627724367297085], 'false': [0.020543775308637876, 0.07996764950488823], 'false,false': [0.057811917196341794, 0.10724707807945995], 'false,false,false': [nan, 0.10724707807945995], 'false,false,true': [0.016127026394936288, 1.4098583441225041e-08], 'false,true': [0.02016869908492143, 3.169094222416733e-05], 'false,true,true': [0.02016869908492143, nan]}
{'': [0.023061366233942768, 0.05411202362826752], 'false': [0.001924709597054465, 0.05646225669052149], 'false,false': [nan, 0.05646225669052149], 'true': [0.02803676752707731, 0.001165111256153856], 'true,true': [0.030540431202810275, 2.3178698098499002e-05], 'true,false': [2.292343299040684e-05, 0.007992449608909944], 'true,false,false': [5.204170427930421e-18, 0.014523468685632557]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.456
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8409075557891676;  // std dev = 0.991, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.13195007480147844;  // std dev = 0.099, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7084354798128548;  // std dev = 0.130, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.7263898754458912;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03242068139678267;  // std dev = 3.293, 153.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=17 */
%   | | | else return -0.011492876184088436;  // std dev = 1.770, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015423782293054559;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.13811374310034782;  // std dev = 0.145, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09314805244558133;  // std dev = 3.009, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5483805875849599;  // std dev = 0.994, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.7303180187596848;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7349746657227182;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6711715352696744;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5552222928537761;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10458652824817151;  // std dev = 1.454, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   | | | else return 0.0034995820118084746;  // std dev = 2.711, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07305481214701554;  // std dev = 2.049, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.11487082460268074;  // std dev = 2.099, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.398218348767883;  // std dev = 0.171, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0.6595000833389836;  // std dev = 0.098, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.11857480110207133;  // std dev = 0.162, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return 0.4549847158662511;  // std dev = 0.179, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.09876993325236731;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5684756926850024;  // std dev = 0.374, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1206728198923767;  // std dev = 0.033, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1040335055513493;  // std dev = 1.202, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.2252399942936959;  // std dev = 1.364, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.34741651760547687;  // std dev = 0.051, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.3271205468186553;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.03509907333028076;  // std dev = 1.086, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3599336817889483;  // std dev = 0.202, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31846919101233573;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5140612429039687;  // std dev = 0.944, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09493727963289682;  // std dev = 1.251, 174.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=4 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07616342346910991;  // std dev = 1.227, 68.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=3 */
%   | | | else return 0.02949822878605313;  // std dev = 1.990, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2557316304048699;  // std dev = 0.123, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.08256338903490783;  // std dev = 0.647, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.046225965935856234;  // std dev = 1.912, 158.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=15 */
%   | | | else return -0.10508468229725768;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.049080946319259015;  // std dev = 0.186, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.27129361425459475;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.3055366605254378;  // std dev = 0.307, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5430176640463339;  // std dev = 0.406, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12022330397452599;  // std dev = 0.035, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.20442034252461838;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.016528900282587255;  // std dev = 1.246, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09661386683172143;  // std dev = 0.847, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21789434783733408;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07768154798178631;  // std dev = 0.075, 174.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=3 */
%   | | else return 0.010928986952193197;  // std dev = 0.219, 97.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18943153594186618;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.02859759581442056;  // std dev = 1.131, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.04979894028203958;  // std dev = 1.543, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1606349539299441;  // std dev = 0.172, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else return 0.1880931994321131;  // std dev = 0.091, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2686237911618137;  // std dev = 0.099, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.1699525567990733;  // std dev = 0.900, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5006837685270482;  // std dev = 0.245, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08558597275704427;  // std dev = 0.622, 198.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.16229436685919268;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.053842738660249245;  // std dev = 1.068, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.04115698811408126;  // std dev = 1.530, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.10903271901574277;  // std dev = 1.920, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | | | else return 0.23529713646054162;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1941322458238002;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22622741562521717;  // std dev = 0.341, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.03316285697757981;  // std dev = 0.126, 236.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31926864995548787;  // std dev = 0.184, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11806785755183831;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3369668393392296;  // std dev = 0.572, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.019611692280439325;  // std dev = 1.191, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08062436206213605;  // std dev = 2.371, 77.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=71 */
%   | | | else return 0.3139556210747353;  // std dev = 0.546, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.08256483675054922;  // std dev = 0.222, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07455069206443646;  // std dev = 0.043, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11644475219049094;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.28637022657583616;  // std dev = 0.290, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1393421181400012;  // std dev = 0.224, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.045426587325058505;  // std dev = 0.677, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.004301406676720056;  // std dev = 1.203, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.901', 'seconds']
Refined model CLL: -0.112859


******************************************
Best model found
******************************************
Results 

CLL : -0.118846 

AUC ROC : 0.994161 

AUC PR : 0.334008 

Precision : 0.344498 

Recall : 0.923077 

F1 : 0.501742 

Total Learning Time : 8.456 

Total Inference Time : 15.044013500213623 

Total revision time: 38.79444620513916
Best scored revision CLL: -0.112859


Results 

CLL : -0.118846 

AUC ROC : 0.994161 

AUC PR : 0.334008 

Precision : 0.344498 

Recall : 0.923077 

F1 : 0.501742 

Total Learning Time : 44.38206789398193 

Total Inference Time : 15.044013500213623 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.254
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048774;  // std dev = 3.23e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.0797733925424808;  // std dev = 1.162, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12490145057956303;  // std dev = 2.005, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5098065737759497;  // std dev = 0.998, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.054540995964809075;  // std dev = 1.600, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | | else return 0.03972776493597984;  // std dev = 1.644, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.46042072191588684;  // std dev = 0.795, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.11444949439018058;  // std dev = 0.061, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42492681201603083;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11824994655827092;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23250237637389734;  // std dev = 1.370, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3334743508903107;  // std dev = 0.185, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.009152860285574854;  // std dev = 0.453, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3133525346702428;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6133208268364755;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11247510596275728;  // std dev = 0.236, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.01606177334776221;  // std dev = 0.276, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06504867861128898;  // std dev = 1.227, 42.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2627980627670058;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5664991492747843;  // std dev = 0.256, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14068502398803015;  // std dev = 0.146, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.1269856840655215;  // std dev = 0.132, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3067036944569059;  // std dev = 0.510, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.10325811278913735;  // std dev = 0.122, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0019157569202507244;  // std dev = 0.741, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19293988455721986;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20525659814430874;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05581672047774656;  // std dev = 0.634, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return -0.10391911309917627;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.001473464059562335;  // std dev = 0.512, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.015680084784077758;  // std dev = 1.106, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1315358153668305;  // std dev = 0.184, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.10784284077786359;  // std dev = 0.673, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08564960021875775;  // std dev = 0.034, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2546468749469081;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09695523829949143;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0763876781365706;  // std dev = 1.021, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16911495426787587;  // std dev = 0.292, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1593189059004885;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07876389061397245;  // std dev = 0.021, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07570572102972975;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.029895867253948365;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05122916084126416;  // std dev = 1.355, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.695', 'seconds']
Parameter learned model CLL:-0.108489 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [1.83e-08, 25, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 1], 'false,false': [3.23e-09, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [7.3e-08, 0, 21], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.162, 35, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.005, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.998, 1, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [1.6, 42, 4], 'false,false,false,false': [1.644, 19, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.795, 1, 23], 'true,false': [0.061, 42, 0], 'false,true,true': [0.005, 0, 3], 'false,true,false': [0.002, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.37, 6, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.185, 0, 17], 'true,false': [0.453, 1, 1], 'false,true,true': [0.007, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.041, 0, 4], 'false,false,true,false': [0.236, 42, 0], 'false,false,false': [0.276, 28, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.227, 24, 18], 'false,true': [0.057, 0, 5], 'false,false,true': [0.256, 0, 8], 'false,false,false,true': [0.146, 17, 0], 'false,false,false,false': [0.132, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.51, 0, 26], 'true,false': [0.122, 57, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.741, 13, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.026, 0, 20], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.634, 27, 2], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.512, 9, 3], 'false,false,false,false': [1.106, 14, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.184, 1, 18], 'false,true,true,true': [0.673, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 29, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.03, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.021, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.292, 0, 18], 'true,true,false': [0.004, 0, 4], 'true,false,true': [0.021, 31, 0], 'true,false,false,true': [0.012, 5, 0], 'true,false,false,false': [0.204, 5, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.355, 36, 8]}]
{'': [0.2406894429055105, 0.18750000000000014], 'true': [1.6148698540002277e-16, 0.027755102040816354], 'false': [-2.220446049250313e-16, 9.25185853854297e-18], 'true,false': [1.3322676295501878e-17, 0.09000000000000005], 'true,false,false': [-9.25185853854297e-18, 0.0], 'false,true': [-2.5376526277146434e-16, 0.0]}
{'': [2.5376526277146434e-16, 0.08537994554946159], 'false': [0.036502597423347126, 0.1258771319938596], 'false,false': [0.0, 0.14884876528766355], 'false,false,false': [nan, 0.14884876528766358], 'false,true': [nan, 0.036502597423347126], 'false,true,false': [0.036502597423347126, nan], 'false,false,true': [nan, 0.0]}
{'': [0.0524724172421438, 0.09006490632670042], 'false': [nan, 0.0900649063267003], 'false,false': [0.0, 0.07717869332229377], 'false,false,false': [0.05564852620103397, 0.11260508172906925], 'true': [0.05527830410632791, 0.0], 'true,true': [0.05527830410632791, nan], 'false,false,true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.08609913893570656, 0.13321387493103062], 'false': [0.06916396102595308, 0.1706895466941765], 'false,false': [nan, 0.1706895466941765], 'false,false,false': [nan, 0.1706895466941765], 'true': [0.026316357183791255, 8.772283703518362e-05], 'false,true': [2.747797363526298e-05, 5.47921161179743e-06]}
{'': [0.023679979007619225, 0.06000257189927128], 'false': [1.1007225995188219e-05, 0.057176764388670503], 'false,false': [0.043075969032581145, 0.07618671080848223], 'false,false,true': [0.00043030510048469583, 0.0013305272645155093], 'true': [0.0020171416159772988, 0.10277789161295431], 'false,true': [1.1007225995188219e-05, nan]}
{'': [0.03584770054823096, 0.0787841282856751], 'false': [0.0006469274772252231, 0.0812176968209897], 'false,false': [0.008197995302433148, 0.0012589757377770676], 'true': [nan, 0.035847700548230985], 'true,false': [nan, 0.03584770054823096], 'false,false,false': [0.0012570224156171778, 0.001161488798413122]}
{'': [0.03946610241271389, 0.0305369589559425], 'true': [0.009998521570979059, 0.0002594337712022589], 'false': [nan, 0.0305369589559425], 'false,false': [nan, 0.0305369589559425], 'false,false,false': [nan, 0.0305369589559425]}
{'': [3.884110471000103e-05, 0.031288316755076165], 'false': [nan, 0.031288316755076165], 'false,false': [0.012749332333430357, 0.04798130168937259], 'false,false,false': [0.021819440583906228, 0.06439068139223364], 'false,false,true': [0.013851306265225051, -2.3129646346357427e-18], 'true': [3.3559282155665174e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.03367862178512351, 0.03486705194020938], 'false': [0.018299186898905605, 0.053239577984295586], 'false,false': [0.022013036301022422, 0.08021533388152163], 'false,false,false': [nan, 0.08021533388152163], 'false,false,true': [0.0, 8.83211822520838e-05], 'false,true': [0.07553611689027112, 3.889349993088366e-05], 'false,true,true': [0.07553611689027112, nan]}
{'': [0.015042030110338746, 0.041709863526304514], 'false': [nan, 0.04170986352630452], 'false,false': [nan, 0.041709863526304514], 'true': [0.003886466414904477, 0.0012907180369598852], 'true,true': [0.004731724869978199, 4.28854229586953e-06], 'true,false': [1.4828239858449294e-05, 0.004305864294146611], 'true,false,false': [2.8642999476363727e-05, 0.00691633232623918]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.164
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(F, C), tweets(F, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.07208736922817452;  // std dev = 0.213, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1433929230704915;  // std dev = 1.846, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.04095283345445679;  // std dev = 0.802, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5130507034624179;  // std dev = 0.239, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.1162265884962313;  // std dev = 0.012, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.07848530511694278;  // std dev = 0.916, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.20041902256290942;  // std dev = 1.688, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.02042715449826545;  // std dev = 0.775, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.42783910108597717;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.27066900215538525;  // std dev = 0.730, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5706289698284952;  // std dev = 0.143, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.12212718863994183;  // std dev = 0.035, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.42439726211008805;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10182100719680202;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6452075595918674;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15237342272586857;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.010991573001731638;  // std dev = 0.781, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3460189853182921;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.35350729648188783;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2960342248714991;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5555495241210298;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10808397024431038;  // std dev = 0.142, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09171791112452511;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.05607973728679836;  // std dev = 1.292, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.2564445011341175;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3561241705724542;  // std dev = 0.243, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0631211679925397;  // std dev = 0.125, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else return -0.08642856796029962;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.24612528147603613;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3709509537978153;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5213654516667348;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13511366674921477;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.12470854652098075;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.16800813245586044;  // std dev = 1.017, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.09593060641628832;  // std dev = 0.713, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3643515555453125;  // std dev = 0.260, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.34873288205012953;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.0811322835742174;  // std dev = 0.002, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.13070383991753362;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.19654960289342244;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A) )
%   | | then return -0.07547701649544644;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.04509502220847237;  // std dev = 0.746, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18739063572714088;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.16736368088273929;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20241013577492095;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.05246234393126426;  // std dev = 0.166, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.07473006604017082;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.0011118061658728917;  // std dev = 0.760, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.0883985968285839;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08221973239158256;  // std dev = 0.545, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.006047375761116884;  // std dev = 0.659, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12286353243504614;  // std dev = 0.236, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.21880494569659142;  // std dev = 0.329, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.07208248959093536;  // std dev = 0.012, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.06536625303784767;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22019099591211133;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09508161480988164;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04105520982812468;  // std dev = 0.583, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.03555012109241264;  // std dev = 0.679, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17826027706257697;  // std dev = 0.386, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.16971342109978513;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1202148111747244;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.06092526673000671;  // std dev = 0.031, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.02357172321527115;  // std dev = 0.120, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return -0.08064187542993587;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.2503734673396154;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13742125642103187;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.005359419798165006;  // std dev = 0.253, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.364', 'seconds']
Refined model CLL: -0.096419


******************************************
Best model found
******************************************
Results 

CLL : -0.095079 

AUC ROC : 0.993485 

AUC PR : 0.405806 

Precision : 0.343109 

Recall : 0.928571 

F1 : 0.501071 

Total Learning Time : 3.164 

Total Inference Time : 4.850674390792847 

Total revision time: 12.67547799873352
Best scored revision CLL: -0.096419


Results 

CLL : -0.095079 

AUC ROC : 0.993485 

AUC PR : 0.405806 

Precision : 0.343109 

Recall : 0.928571 

F1 : 0.501071 

Total Learning Time : 12.693856018066406 

Total Inference Time : 4.850674390792847 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.941
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804642;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287115373823417;  // std dev = 0.009, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05626414966280556;  // std dev = 2.014, 72.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17716546278543127;  // std dev = 2.998, 51.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5769008373789343;  // std dev = 0.239, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.09427181941554566;  // std dev = 0.649, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.3021262322605522;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5648227572224077;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013438831547631345;  // std dev = 2.552, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return 0.12368713825774069;  // std dev = 2.361, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5137030326247555;  // std dev = 0.797, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.12817110142218133;  // std dev = 0.345, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.45459296251923903;  // std dev = 0.092, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13173381561447056;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19876953045004356;  // std dev = 2.022, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3269688537765752;  // std dev = 0.296, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.40255383868893657;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.19918296608102903;  // std dev = 0.815, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5859311924849271;  // std dev = 0.098, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11177371045692353;  // std dev = 0.202, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return 0.04124478926493161;  // std dev = 0.329, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.003966776371178416;  // std dev = 2.089, 116.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27270331143814214;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44155162344258553;  // std dev = 1.218, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15712938947263264;  // std dev = 0.238, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.14338877686418838;  // std dev = 0.228, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31676902974288673;  // std dev = 0.749, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return -0.10639259995649912;  // std dev = 0.681, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04342857857175218;  // std dev = 1.262, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1926699254539142;  // std dev = 0.056, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return -0.3071464790419252;  // std dev = 0.717, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.044341550454673376;  // std dev = 0.998, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
%   | | | else return -0.10533361503361094;  // std dev = 0.837, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018696572544860728;  // std dev = 1.058, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.024089349629320182;  // std dev = 1.712, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14700235811265103;  // std dev = 0.181, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.19597967635030766;  // std dev = 1.062, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09090946720677875;  // std dev = 0.234, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27989632837819095;  // std dev = 0.171, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09474256013199397;  // std dev = 0.039, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06671496475364314;  // std dev = 1.568, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1840583198655449;  // std dev = 0.540, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.1527571254594569;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07840229973592268;  // std dev = 0.044, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08314007613988142;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.0710996020121034;  // std dev = 0.332, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.2703454280034821;  // std dev = 0.915, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.040680077167346874;  // std dev = 1.718, 51.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=19 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.431', 'seconds']
Parameter learned model CLL:-0.117907 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.38, 2, 40], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false,true': [7.45e-09, 20, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 4], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.009, 0, 35], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.014, 66, 6], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 20, 0], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [2.998, 32, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.239, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.649, 1, 1], 'true,false,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.552, 69, 11], 'false,false,false,false': [2.361, 26, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.797, 0, 42], 'true,false': [0.345, 92, 0], 'false,true,true': [0.092, 0, 9], 'false,true,false': [0.003, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.022, 14, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.296, 0, 31], 'true,false': [0.0, 0, 1], 'false,true,true': [0.815, 1, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.098, 0, 10], 'false,false,true,false': [0.202, 92, 0], 'false,false,false': [0.329, 39, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.089, 83, 33], 'false,true': [0.042, 0, 8], 'false,false,true': [1.218, 2, 21], 'false,false,false,true': [0.238, 30, 0], 'false,false,false,false': [0.228, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.749, 0, 50], 'true,false': [0.681, 99, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.262, 18, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.056, 0, 34], 'true,false,true': [0.717, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.998, 50, 5], 'false,false,true,false': [0.837, 13, 1], 'false,false,false,true': [1.058, 32, 10], 'false,false,false,false': [1.712, 24, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.181, 1, 32], 'false,true,true,true': [1.062, 1, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.234, 90, 0], 'false,false,true,true': [0.171, 0, 8], 'false,false,true,false': [0.039, 17, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.568, 17, 11]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.54, 0, 33], 'true,true,false': [0.007, 0, 7], 'true,false,true': [0.044, 69, 0], 'true,false,false,true': [0.032, 15, 0], 'true,false,false,false': [0.332, 10, 1], 'false,true': [0.915, 2, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.718, 32, 19]}]
{'': [0.214129935720846, 0.23097502972651607], 'false': [0.0, 3.900783600034334e-17], 'true': [0.045351473922903854, 0.010987654320987725], 'true,false': [6.75787928032704e-17, 0.045351473922902535], 'true,false,false': [2.7755575615628915e-18, 0.0], 'false,true': [-2.0898315757650005e-16, 0.0]}
{'': [2.510086960886123e-06, 0.11105250970159981], 'false': [0.056345633701804024, 0.1516380027760504], 'false,false': [0.0, 0.1811153384319718], 'false,false,false': [0.22222222222222232, 0.17627115365703938], 'false,true': [nan, 0.056345633701804024], 'false,true,false': [0.056345633701804024, nan], 'false,false,true': [nan, 0.0]}
{'': [0.05126372470862684, 0.11565276175616923], 'false': [nan, 0.1156527617561694], 'false,false': [-1.2688263138573217e-16, 0.10653865918986993], 'false,false,false': [0.0813826080983901, 0.14675060973727608], 'true': [0.0019693802736115065, 0.22790563670149214], 'true,false': [0.21050868425691147, 0.22222222222222224], 'true,true': [0.0019693802736115065, nan], 'false,false,true': [nan, -1.2688263138573217e-16]}
{'': [0.09429308135700702, 0.13056062873645222], 'false': [0.0878415566599782, 0.163579574406424], 'false,false': [nan, 0.163579574406424], 'false,false,false': [nan, 0.163579574406424], 'true': [0.01513222427416642, 0.0012966516657815159], 'false,true': [0.008507233610700679, 8.402908369423609e-06]}
{'': [0.002907271483705856, 0.06994676005617131], 'false': [0.08298472728636558, 0.06700830038402193], 'false,true': [0.08298472728636558, nan], 'false,false': [0.04353876008736029, 0.10830244994714404], 'false,false,true': [0.0009528791765899492, 0.0004429414031123151], 'true': [0.0028225203740368235, 0.0]}
{'': [0.03762556984497257, 0.08996681806831697], 'false': [0.00021963449391770862, 0.09340900821046381], 'false,false': [0.06445255402644727, 0.0020240977881508106], 'true': [nan, 0.03762556984497256], 'true,false': [nan, 0.03762556984497257], 'false,false,false': [0.001888431226449616, 0.0020839134249983804]}
{'': [0.04662366524620802, 0.05490704591457819], 'false': [nan, 0.054907045914578234], 'false,false': [nan, 0.05490704591457819], 'false,false,false': [nan, 0.05490704591457819], 'true': [0.011222446913447258, 0.004635686129308212]}
{'': [0.027479708751119172, 0.04069723667708201], 'false': [nan, 0.04069723667708201], 'false,false': [0.025186534320853424, 0.053035615675186686], 'false,false,false': [0.026627533112757975, 0.08372678649394023], 'true': [9.361618475277415e-05, 0.25710553518748536], 'true,false': [0.25710553518748536, nan], 'false,false,true': [0.01811849659215661, 0.04998858254587588]}
{'': [0.03269502688711998, 0.0368256494430384], 'false': [0.02014279420805784, 0.061778630516789265], 'false,false': [0.03176813459871371, 0.0877584703902649], 'false,false,false': [nan, 0.0877584703902649], 'false,false,true': [0.0036399967991955634, 9.153035697177384e-05], 'false,true': [0.09402304931560063, 0.0006091075634146583], 'false,true,true': [0.09402304931560063, nan]}
{'': [0.016811428917103556, 0.07540689947426434], 'false': [0.20946788900337215, 0.05785690370626978], 'false,false': [nan, 0.05785690370626984], 'true': [0.007445168022163129, 0.001202492142026209], 'true,true': [0.008851422294556552, 7.377658886246038e-06], 'true,false': [2.8119871039567727e-05, 0.004319003286352683], 'true,false,false': [6.880378283277052e-05, 0.010031091602895299]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.093
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.1073683062797981;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.6718543645919066;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7383796359317121;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7443356231566909;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.07844516172570186;  // std dev = 0.207, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1292767980229859;  // std dev = 1.67e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.11585102855443351;  // std dev = 2.259, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0.26909943481147774;  // std dev = 2.101, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.48897450811391235;  // std dev = 0.278, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7179930514113076;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.550693084032654;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.06797071501188295;  // std dev = 1.381, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   | | | else return -0.11635630797099027;  // std dev = 0.027, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.22208770597750527;  // std dev = 2.428, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | | else return 0.10957914247653262;  // std dev = 1.386, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(A, E) )
%   | | | then return 0.26913285831399514;  // std dev = 1.758, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | | else return 0.4687824482395127;  // std dev = 0.226, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.6238637719693774;  // std dev = 0.158, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11860346964905714;  // std dev = 0.225, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.45385629425595336;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10946853259753511;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(J, A) )
%   | | then return -0.10405108538245916;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.22348187057073;  // std dev = 1.547, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.11842397467481737;  // std dev = 1.301, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3626599605496648;  // std dev = 0.164, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.4568902637624379;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.30706717082058915;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4813136887312609;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10624813636436636;  // std dev = 0.197, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0570095899133277;  // std dev = 0.730, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.09807345779238295;  // std dev = 2.150, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2968042595450191;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2405795013362763;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then return -0.06194769452950889;  // std dev = 0.098, 52.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=3 */
%   | | else return -0.010360534829613181;  // std dev = 0.239, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25855430058713336;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.38218127463874196;  // std dev = 1.140, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5683052067356619;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1382294514415021;  // std dev = 0.288, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.13982553810932566;  // std dev = 0.221, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.22091531293137984;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.11090928540542432;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.21324028012644203;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2241284979163568;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then return -0.054216568772565164;  // std dev = 0.114, 98.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=6 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.27655069662958276;  // std dev = 0.089, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12269583896248464;  // std dev = 0.000231, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06828149077679853;  // std dev = 1.464, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.046095731949199074;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2052495517769788;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.16650039424826207;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.044821775817918116;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.24741605074719208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.21980097533327586;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07778195732285242;  // std dev = 0.027, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.018756320650984898;  // std dev = 1.016, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03840401761213069;  // std dev = 1.522, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | | else return -0.0452522193471417;  // std dev = 1.260, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.1793604300902785;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.14521343538324005;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4455894328100373;  // std dev = 0.276, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16396361241726037;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07447429549475715;  // std dev = 0.048, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.14918228514863452;  // std dev = 0.845, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.11628429865819367;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.010217431932521686;  // std dev = 1.554, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.0513696512861432;  // std dev = 0.862, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14277517879002566;  // std dev = 0.184, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return 0.14271032872305126;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06674875955280424;  // std dev = 0.024, 105.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=1 */
%   else if ( follows(A, F), tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return -0.2034807862126001;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20626573644291613;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10206792374281098;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.44075319285743575;  // std dev = 0.000597, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.23167481334714812;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.008418924514115335;  // std dev = 0.277, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.875', 'seconds']
Refined model CLL: -0.114138


******************************************
Best model found
******************************************
Results 

CLL : -0.106079 

AUC ROC : 0.993466 

AUC PR : 0.394185 

Precision : 0.342618 

Recall : 0.97619 

F1 : 0.507216 

Total Learning Time : 7.093 

Total Inference Time : 9.99643874168396 

Total revision time: 25.015903314590453
Best scored revision CLL: -0.114138


Results 

CLL : -0.106079 

AUC ROC : 0.993466 

AUC PR : 0.394185 

Precision : 0.342618 

Recall : 0.97619 

F1 : 0.507216 

Total Learning Time : 25.03428133392334 

Total Inference Time : 9.99643874168396 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.277
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8264029033534809;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7100760102797644;  // std dev = 1.007, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02933232027667169;  // std dev = 3.000, 124.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09270307956351982;  // std dev = 0.835, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12300262765357303;  // std dev = 3.624, 88.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5821149041790847;  // std dev = 0.315, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7203222772185132;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.642911966099871;  // std dev = 0.109, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5655016549812287;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.022766892715250783;  // std dev = 3.504, 164.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=20 */
%   | | | else return 0.0761355657164966;  // std dev = 2.968, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5326244467490676;  // std dev = 1.066, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return -0.12247718207650077;  // std dev = 0.105, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4719866211206936;  // std dev = 0.112, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.13036426497858206;  // std dev = 0.001, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4062738178640495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17594996944452687;  // std dev = 2.613, 41.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30610093115253284;  // std dev = 0.901, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return 0.4238750233298124;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3063049114756866;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.44288151981550383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5449398755939137;  // std dev = 0.999, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.11181926181135202;  // std dev = 0.095, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return 0.01812741403319231;  // std dev = 0.312, 93.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04190298456910022;  // std dev = 2.437, 142.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25968558098554206;  // std dev = 0.113, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.532149466583818;  // std dev = 0.663, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13372495816841198;  // std dev = 0.197, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.12126132033421967;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3155428718548632;  // std dev = 0.959, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return -0.10294183205578504;  // std dev = 0.901, 171.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01691185070174985;  // std dev = 1.878, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16504549299088914;  // std dev = 0.914, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2181385455982084;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0321215414434574;  // std dev = 1.572, 101.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=13 */
%   | | | else return -0.0789501509051564;  // std dev = 0.615, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029999689801837058;  // std dev = 1.205, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | | | else return 0.07385902187044312;  // std dev = 1.982, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13170033186445093;  // std dev = 0.206, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29759031185053525;  // std dev = 0.612, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09172860113409884;  // std dev = 0.099, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2921028422989271;  // std dev = 0.236, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09032810039062976;  // std dev = 0.038, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062168733507264505;  // std dev = 1.875, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19590426736394317;  // std dev = 0.629, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.1552937198525174;  // std dev = 0.254, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08428034949505046;  // std dev = 0.049, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08506232730160476;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.06708521101529763;  // std dev = 0.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05989625989397631;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02493291762684391;  // std dev = 2.088, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.394', 'seconds']
Parameter learned model CLL:-0.116925 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [8.16e-08, 111, 0], 'true,false,false,true': [1.83e-08, 25, 0], 'true,false,false,false': [1.195, 5, 2], 'false,true,true': [8.43e-08, 0, 23], 'false,true,false': [0.0, 0, 7], 'false,false': [8.12e-09, 60, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.007, 1, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.0, 110, 14], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.835, 25, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [3.624, 62, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.315, 0, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.109, 0, 2], 'false,false,true,false': [3.65e-08, 0, 9], 'false,false,false,true': [3.504, 144, 20], 'false,false,false,false': [2.968, 51, 17]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.066, 0, 63], 'true,false': [0.105, 99, 0], 'false,true,true': [0.112, 0, 12], 'false,true,false': [0.001, 23, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.613, 24, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.901, 1, 44], 'true,false': [0.0, 0, 1], 'false,true,true': [0.018, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.999, 1, 18], 'false,false,true,false': [0.095, 109, 0], 'false,false,false': [0.312, 74, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.437, 92, 50], 'false,true': [0.113, 0, 12], 'false,false,true': [0.663, 0, 31], 'false,false,false,true': [0.197, 42, 0], 'false,false,false,false': [0.2, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.959, 0, 74], 'true,false': [0.901, 169, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.878, 35, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.914, 1, 46], 'true,false,true': [0.007, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.572, 88, 13], 'false,false,true,false': [0.615, 18, 1], 'false,false,false,true': [1.205, 62, 13], 'false,false,false,false': [1.982, 30, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.206, 2, 45], 'false,true,true,true': [0.612, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.099, 136, 0], 'false,false,true,true': [0.236, 0, 11], 'false,false,true,false': [0.038, 27, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.875, 26, 15]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.629, 0, 50], 'true,true,false': [0.254, 0, 11], 'true,false,true': [0.049, 94, 0], 'true,false,false,true': [0.029, 16, 0], 'true,false,false,false': [0.338, 17, 2], 'false,true': [0.909, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.088, 58, 26]}]
{'': [0.21229616363465012, 0.22222222222222357], 'false': [1.3026616822268502e-15, 6.29126380620922e-17], 'true': [0.030738221214411016, 0.013790405398796952], 'true,false': [6.00120553851436e-17, 0.05859375000000002], 'true,false,false': [1.3322676295501878e-17, 0.20408163265306126], 'false,true': [3.089316242435218e-16, -2.5376526277146434e-16]}
{'': [0.02068914850254263, 0.10875879223321733], 'false': [0.07258096779779855, 0.1387666479913879], 'false,false': [0.026800242086254072, 0.15754384212843056], 'false,false,false': [0.0, 0.14923634339064923], 'false,true': [nan, 0.07258096779779855], 'false,true,false': [0.07258096779779855, nan], 'false,false,true': [nan, 0.026800242086254072]}
{'': [0.02508674350309424, 0.10299747577060232], 'false': [nan, 0.10299747577060218], 'false,false': [0.0019809442206563414, 0.09290602724273814], 'false,false,false': [0.07486509376071734, 0.12950186650278525], 'true': [0.0024840004401900815, 0.15183232854094317], 'true,false': [0.0, 0.16], 'true,true': [0.0024840004401900815, nan], 'false,false,true': [0.005992356267485011, 1.4802973661668753e-16]}
{'': [0.10907980406602712, 0.13120817477191457], 'false': [0.08606415553731134, 0.1637902717724345], 'false,false': [0.0, 0.1665220832319353], 'false,false,false': [nan, 0.1665220832319353], 'true': [0.018052246405161728, 0.00011159785565290463], 'false,true': [0.012587610413315464, 2.0563029427955253e-06]}
{'': [0.017950055484965054, 0.07839328912714782], 'false': [0.0015699616221573696, 0.07738029407421991], 'false,false': [0.06239350903515009, 0.09739704520502232], 'false,false,true': [0.0525517759762944, 8.311293311347473e-05], 'true': [0.018047407850588313, 0.0], 'false,true': [3.1215062045109046e-05, 0.0]}
{'': [0.04183222395389731, 0.08325504094839857], 'false': [0.0010582033029340094, 0.0871240120840489], 'false,false': [0.014166013850042862, 0.0009151996261085118], 'true': [nan, 0.04183222395389731], 'true,false': [nan, 0.04183222395389731], 'false,false,false': [0.0009215496165154105, 0.0008371503260735912]}
{'': [0.04398948960408986, 0.067792675850921], 'false': [nan, 0.067792675850921], 'false,false': [nan, 0.067792675850921], 'false,false,false': [nan, 0.067792675850921], 'true': [0.0124277947773137, 0.004751525639868979]}
{'': [0.017176526012786228, 0.035939706661772944], 'false': [nan, 0.03593970666177298], 'false,false': [0.024045048779254855, 0.04630639144170583], 'false,false,false': [0.019345850097080765, 0.0818550226644962], 'false,false,true': [0.0244744681398766, 0.019916639319967632], 'true': [0.017791330746243773, 2.47985509689852e-05], 'true,false': [2.47985509689852e-05, nan]}
{'': [0.04238961398763654, 0.03518524687614846], 'false': [0.020595921247941497, 0.060141346948089286], 'false,false': [0.03158785951610527, 0.08576538609266667], 'false,false,false': [nan, 0.08576538609266667], 'false,false,true': [0.005073192854336636, 5.361308771507357e-05], 'false,true': [0.01700653657176662, 7.19826235852911e-05], 'false,true,true': [0.01700653657176662, nan]}
{'': [0.019087387674776295, 0.05867026112497854], 'false': [0.16517559496598683, 0.0519263888550522], 'false,false': [nan, 0.05192638885505219], 'true': [0.007795650476447926, 0.0009482802282589978], 'true,true': [0.007918901190521894, 0.005883603097948013], 'true,false': [2.5292433777909027e-05, 0.003368439397929267], 'true,false,false': [5.10444307636514e-05, 0.0060142972351945765]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.255
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6924463851839279;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return 0.758526709513223;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.033827018568703175;  // std dev = 2.393, 83.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | | else return -0.08319873599142409;  // std dev = 0.824, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.1320415114439665;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.038261473287017664;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19273906543380925;  // std dev = 3.402, 69.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5369896224534991;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return 0.7548226187618761;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.39479693625574724;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6502628903068117;  // std dev = 0.148, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3890629225337385;  // std dev = 0.383, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5720299703051471;  // std dev = 1.300, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.12127122903616622;  // std dev = 0.055, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09307679010357256;  // std dev = 2.324, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | | else return 0.16997323082742533;  // std dev = 2.513, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4364149242892703;  // std dev = 0.184, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.49689631730996897;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6319067843545987;  // std dev = 0.131, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12013169820056305;  // std dev = 0.271, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4599791302393596;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.10797362761369377;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.3853411068222723;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.10332612422346704;  // std dev = 2.204, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.06784330641755928;  // std dev = 1.525, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3345102543213465;  // std dev = 0.218, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.09804020138672154;  // std dev = 0.822, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.34942065503951747;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4943356469285779;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.474606813531259;  // std dev = 0.133, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10824234144665583;  // std dev = 0.201, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06418049979807398;  // std dev = 0.797, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | | else return 0.08527083945276516;  // std dev = 2.657, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2569524401599962;  // std dev = 0.010, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.05311367022996645;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.25311367022996645;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05370130744665951;  // std dev = 0.117, 107.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=9 */
%   | | else return -0.04646824483440457;  // std dev = 0.156, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.30243014155997955;  // std dev = 0.069, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4217299117672047;  // std dev = 0.980, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.5670830256339766;  // std dev = 0.171, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.13109736281489523;  // std dev = 0.041, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.174537158518622;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.2343568790988427;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, F) )
%   | | | then return -0.06844296924508235;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3164134896005001;  // std dev = 0.157, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.09074574146666861;  // std dev = 0.182, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.45943776766037825;  // std dev = 0.259, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1661740693036141;  // std dev = 0.589, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.244245888780698;  // std dev = 0.519, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24770677760402046;  // std dev = 0.847, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14688473240500935;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.17130246667323992;  // std dev = 0.849, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1841212672590634;  // std dev = 0.058, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3173762911148723;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04035968789026156;  // std dev = 0.108, 139.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24214553766096542;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11197040637530054;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05250701899627009;  // std dev = 1.522, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.06768769670213351;  // std dev = 1.018, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.16920518401250648;  // std dev = 0.121, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.22185174541580238;  // std dev = 0.093, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15993870756504058;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.29806164914279737;  // std dev = 0.131, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07437909883352284;  // std dev = 0.060, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20040740306000568;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10034680270325813;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03483659621534545;  // std dev = 1.358, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return -0.005577192286210655;  // std dev = 1.097, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.141175551021542;  // std dev = 0.068, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.013444142686879258;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1556493136665629;  // std dev = 0.977, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.06510660098883495;  // std dev = 0.037, 122.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.16773729411575983;  // std dev = 0.000719, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2683941435322237;  // std dev = 0.434, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11954229219036731;  // std dev = 0.222, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.019101889717168974;  // std dev = 0.366, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.012340497819565829;  // std dev = 1.074, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.856', 'seconds']
Refined model CLL: -0.110382


******************************************
Best model found
******************************************
Results 

CLL : -0.106381 

AUC ROC : 0.993265 

AUC PR : 0.376863 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 6.255 

Total Inference Time : 15.645811080932617 

Total revision time: 32.98913186264038
Best scored revision CLL: -0.110382


Results 

CLL : -0.106381 

AUC ROC : 0.993265 

AUC PR : 0.376863 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 33.00750988197326 

Total Inference Time : 15.645811080932617 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.767
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8461007423284279;  // std dev = 0.994, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11407328712270995;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7956489350995116;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.725580550478233;  // std dev = 0.164, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.027043479685711497;  // std dev = 3.380, 155.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07340464073702022;  // std dev = 1.516, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5652465227131466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1407014696026431;  // std dev = 4.145, 108.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5170609863505656;  // std dev = 1.749, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7178323930630848;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6080456404026993;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5969217809236425;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5568330016941089;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014133643767688997;  // std dev = 4.141, 209.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=28 */
%   | | | else return 0.09074142206735338;  // std dev = 3.272, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5183657717675785;  // std dev = 1.760, 89.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=87 */
%   | else return -0.12659285913057536;  // std dev = 0.166, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46506471160480634;  // std dev = 0.098, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1320957084736766;  // std dev = 0.000904, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.40887861127903624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13215333965104728;  // std dev = 3.008, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31965106407067473;  // std dev = 1.149, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else return -0.07526559586465836;  // std dev = 0.706, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30146754923126845;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4539480573308763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6035453706854732;  // std dev = 0.067, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10900194060109894;  // std dev = 0.713, 163.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=1 */
%   | | else return 0.028036275788604296;  // std dev = 0.320, 117.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03745414219650431;  // std dev = 2.776, 191.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=65 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25848616439949573;  // std dev = 0.219, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4876509214297704;  // std dev = 1.813, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13067586175765972;  // std dev = 0.224, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.12857137190913723;  // std dev = 0.181, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29103532975809965;  // std dev = 2.009, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.09859516744865997;  // std dev = 1.263, 218.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06757842450756918;  // std dev = 1.892, 55.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1882639967511483;  // std dev = 0.080, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.27396138383508095;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03381958014839387;  // std dev = 1.891, 124.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=17 */
%   | | | else return -0.07962170755089393;  // std dev = 0.614, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.023398152593796764;  // std dev = 1.892, 99.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=20 */
%   | | | else return 0.059377217941032255;  // std dev = 2.322, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15171432915238608;  // std dev = 0.194, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.22214708553949297;  // std dev = 1.571, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09420468947631902;  // std dev = 0.127, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3192801811798408;  // std dev = 0.332, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09473985386859511;  // std dev = 0.065, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.058067479738123644;  // std dev = 2.207, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17999941887703166;  // std dev = 1.283, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.16988011850992185;  // std dev = 0.380, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08587927549229471;  // std dev = 0.072, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09101459446835475;  // std dev = 0.031, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.03834499897946688;  // std dev = 0.662, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14372833686266517;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006974793431819743;  // std dev = 2.567, 126.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=34 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.128', 'seconds']
Parameter learned model CLL:-0.11864 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 82], 'true,false,true': [0.0, 131, 0], 'true,false,false,true': [0.986, 35, 1], 'true,false,false,false': [1.195, 5, 2], 'false,true,true': [1.369, 2, 30], 'false,true,false': [0.0, 0, 9], 'false,false': [8.12e-09, 61, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.164, 0, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.38, 137, 18], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.516, 46, 3], 'false,false,false,true': [0.913, 1, 5], 'false,false,false,false': [4.145, 74, 34]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.749, 3, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.228, 0, 3], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.139, 0, 4], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.141, 181, 28], 'false,false,false,false': [3.272, 58, 21]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.76, 2, 87], 'true,false': [0.166, 177, 0], 'false,true,true': [0.098, 0, 15], 'false,true,false': [0.000904, 21, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.008, 39, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.149, 1, 58], 'true,false': [0.706, 1, 1], 'false,true,true': [0.024, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.067, 0, 23], 'false,false,true,false': [0.713, 162, 1], 'false,false,false': [0.32, 92, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.776, 126, 65], 'false,true': [0.219, 0, 17], 'false,false,true': [1.813, 2, 42], 'false,false,false,true': [0.224, 58, 0], 'false,false,false,false': [0.181, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.009, 3, 97], 'true,false': [1.263, 214, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.892, 32, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.08, 0, 62], 'true,false,true': [0.057, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.891, 107, 17], 'false,false,true,false': [0.614, 17, 1], 'false,false,false,true': [1.892, 79, 20], 'false,false,false,false': [2.322, 43, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.194, 2, 59], 'false,true,true,true': [1.571, 2, 31], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.127, 179, 0], 'false,false,true,true': [0.332, 0, 15], 'false,false,true,false': [0.065, 44, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.207, 36, 19]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.283, 1, 67], 'true,true,false': [0.38, 0, 15], 'true,false,true': [0.072, 128, 0], 'true,false,false,true': [0.031, 24, 0], 'true,false,false,false': [0.662, 18, 3], 'false,true': [0.042, 0, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.567, 92, 34]}]
{'': [0.22135081530379036, 0.23615916955017438], 'false': [0.04640095181439758, 6.188128333976282e-17], 'true': [0.011903033822034635, 0.016944114149821478], 'false,true': [0.05859375000000133, -2.9605947323337506e-16], 'true,false': [-4.0679927619853064e-17, 0.06489994591671158], 'true,false,false': [0.027006172839506234, 0.20408163265306126]}
{'': [0.00042024270851603873, 0.11257883573223433], 'false': [0.07369677580204224, 0.14264913358045309], 'false,false': [0.046889153919196416, 0.16700216090983935], 'false,false,false': [0.13888888888888887, 0.1590777724017307], 'false,true': [nan, 0.07369677580204224], 'false,true,false': [0.07369677580204224, nan], 'false,false,true': [nan, 0.046889153919196416]}
{'': [0.05251950182678667, 0.10900300413087502], 'false': [nan, 0.10900300413087481], 'false,false': [0.001506665831357057, 0.09892512488635777], 'false,false,false': [0.08206533263698663, 0.1355471259342195], 'true': [0.05666423988060996, 0.00933118931842225], 'true,true': [0.05666423988060996, nan], 'true,false': [0.017349964603472417, -8.881784197001253e-17], 'false,false,true': [0.004821330660342904, -2.590520390792032e-16]}
{'': [0.10436545683437992, 0.12779401778295854], 'false': [0.09064168074901124, 0.14957199807123156], 'false,false': [0.0, 0.1508095060834966], 'false,false,false': [nan, 0.15080950608349664], 'true': [0.03482199975526748, 0.00015515624724154109], 'false,true': [0.00952189167340561, 8.175197908791684e-07]}
{'': [0.034779040385161664, 0.0764777430521592], 'false': [0.0013988991403438705, 0.07552862163186548], 'false,false': [0.05777351736194814, 0.1022851602571383], 'false,false,true': [0.00019662876346137205, 0.003114829041929819], 'true': [0.022388821240892597, 0.249444752200538], 'false,true': [3.9014998638734846e-05, 0.0]}
{'': [0.04034149787478119, 0.09601762074748178], 'false': [0.0028112120249417748, 0.10240737669388313], 'false,false': [0.07471199516543979, 0.0008015355129799348], 'true': [nan, 0.04034149787478122], 'true,false': [nan, 0.04034149787478119], 'false,false,false': [0.0008683800526470688, 0.0007147833163865851]}
{'': [0.050435052295642775, 0.06511906789951985], 'false': [nan, 0.06511906789951985], 'false,false': [nan, 0.06511906789951985], 'false,false,false': [nan, 0.06511906789951985], 'true': [0.04036271828195449, 0.007315790145840725]}
{'': [0.00037211455686361056, 0.04382425797760522], 'false': [nan, 0.04382425797760479], 'false,false': [0.028060388967602445, 0.05635769609100057], 'false,false,false': [0.03616790398664908, 0.08297217792472097], 'false,false,true': [0.028826775882306102, 0.020948922522297637], 'true': [0.0001020173694778309, 0.0016305865300909328], 'true,false': [0.0016305865300909328, nan]}
{'': [0.03754063103108002, 0.03894503143217997], 'false': [0.024874546568070383, 0.06111195051677691], 'false,false': [0.034440396136463707, 0.08855318464978908], 'false,false,false': [nan, 0.08855318464978908], 'false,false,true': [0.0073510325403120785, 9.593456650953453e-05], 'false,true': [0.07481193328770307, 8.996410291273616e-05], 'false,true,true': [0.07481193328770307, nan]}
{'': [0.023602230551759393, 0.051002283689556435], 'false': [0.0003461842374005653, 0.05229864744863797], 'false,false': [nan, 0.052298647448638], 'true': [0.02158570400774221, 0.0028220785069697197], 'true,true': [0.024204917115918375, 0.009628043744879237], 'true,false': [4.070086973197596e-05, 0.010453830240229727], 'true,false,false': [3.898042689797163e-05, 0.02087700305373331]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.768
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8392810105712104;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.034619523334806335;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return -0.14185106490048774;  // std dev = 2.79e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7264586758554027;  // std dev = 0.184, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.7275455412766948;  // std dev = 0.130, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1265201184687844;  // std dev = 0.060, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7244493230784979;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13462528737609575;  // std dev = 3.327, 72.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=22 */
%   | | | else return 0.21335190024527062;  // std dev = 2.273, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5582724343405331;  // std dev = 0.000569, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(E, A) )
%   | | then return 0.6784575551298923;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3925989623769592;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5998911333740469;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5536408734141941;  // std dev = 5.16e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5643172416282731;  // std dev = 0.108, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11422928468036478;  // std dev = 0.078, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09279952260584547;  // std dev = 2.734, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.15628971954257528;  // std dev = 2.924, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.3790122630840532;  // std dev = 0.199, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0.6283201962384204;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11321619793059001;  // std dev = 0.310, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3363649423420126;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.4359245091156658;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10132389052935015;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.40504231449644634;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.11711046658091102;  // std dev = 2.576, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0.15256814708265354;  // std dev = 1.539, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.3325629408921211;  // std dev = 0.022, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0809915979494999;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3406549146386648;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.38087847375769496;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33199834214086993;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.41919794791091747;  // std dev = 0.470, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09848602350035902;  // std dev = 0.649, 158.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.0577913152555245;  // std dev = 0.776, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0.09334959413103058;  // std dev = 3.014, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.21746470301595777;  // std dev = 1.393, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.07140104673728058;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.26843754389491;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04482600705071528;  // std dev = 0.105, 109.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=13 */
%   | | else return -0.06706008846832302;  // std dev = 0.090, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2666898556389692;  // std dev = 0.035, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.40383186003886007;  // std dev = 0.347, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5753268611368948;  // std dev = 0.395, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.1362778608359025;  // std dev = 0.044, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22334188684245548;  // std dev = 0.158, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12580751551112943;  // std dev = 0.977, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2620401750849244;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08013996609591995;  // std dev = 0.027, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.19536913640027642;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.02769253665993474;  // std dev = 2.153, 72.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=22 */
%   | | | else return -0.01230561471591127;  // std dev = 1.772, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15770136598472054;  // std dev = 0.988, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.19157711752190756;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17898228532119975;  // std dev = 0.027, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10158621294914123;  // std dev = 0.873, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.043706497923876035;  // std dev = 0.092, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30573717364355363;  // std dev = 0.336, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12053535722163815;  // std dev = 0.061, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0797641998828655;  // std dev = 1.708, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | | else return 0.009699884099762735;  // std dev = 1.487, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1334206905437499;  // std dev = 0.988, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.145406297525589;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16615581488191086;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.023746934581897947;  // std dev = 0.440, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1664735546661721;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.03511567315510591;  // std dev = 0.112, 201.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=31 */
%   | else if ( tweets(A, H) )
%   | | then return 0.0024604805430269864;  // std dev = 0.174, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.008481165979519865;  // std dev = 1.971, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return 0.02111614225616619;  // std dev = 1.253, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14892087288711955;  // std dev = 0.099, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.13042102221919077;  // std dev = 1.366, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.08244568043229539;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06365342970993168;  // std dev = 0.044, 165.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1225724807945175;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.26327512922658275;  // std dev = 0.097, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10460752633893558;  // std dev = 0.008, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03528042346795796;  // std dev = 1.728, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | | else return 0.062908746847363;  // std dev = 1.496, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.332', 'seconds']
Refined model CLL: -0.115827


******************************************
Best model found
******************************************
Results 

CLL : -0.107925 

AUC ROC : 0.992869 

AUC PR : 0.344493 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 7.768 

Total Inference Time : 15.741041660308838 

Total revision time: 37.46247545242309
Best scored revision CLL: -0.115827


Results 

CLL : -0.107925 

AUC ROC : 0.992869 

AUC PR : 0.344493 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 37.48085347175598 

Total Inference Time : 15.741041660308838 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.51
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10411521584388395;  // std dev = 1.387, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7111645538653827;  // std dev = 0.999, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04178391793880857;  // std dev = 3.525, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07498026722541334;  // std dev = 1.810, 65.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10108170859438109;  // std dev = 4.619, 147.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5177890770500134;  // std dev = 1.926, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return -0.27028860870049637;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4529852458716428;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.587714206327369;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5727015896007681;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.559765478811599;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02266062530268764;  // std dev = 4.645, 270.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=34 */
%   | | | else return 0.03198103969087029;  // std dev = 3.598, 118.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5014866489802047;  // std dev = 2.397, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | else return -0.12431026007605728;  // std dev = 0.240, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4071967533266266;  // std dev = 0.254, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12442435365466868;  // std dev = 0.000151, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41763458277856946;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10306923345643855;  // std dev = 3.285, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30699811775065605;  // std dev = 1.544, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4036084834903415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3077940703958301;  // std dev = 0.031, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3751540508268907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5079108298642498;  // std dev = 1.634, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.09861208395089563;  // std dev = 1.363, 204.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=3 */
%   | | else return 0.022586681659170105;  // std dev = 0.316, 142.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027419084642366323;  // std dev = 3.358, 253.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25241562363449;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5199982171726907;  // std dev = 1.611, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13075309014433148;  // std dev = 0.265, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.12770018522831728;  // std dev = 0.170, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2925100093839198;  // std dev = 2.178, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08766602734743603;  // std dev = 1.671, 239.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02616400145459592;  // std dev = 2.193, 91.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18614630399535909;  // std dev = 0.999, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20036843310419455;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03664379302697411;  // std dev = 1.973, 160.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=18 */
%   | | | else return -0.08330796210952551;  // std dev = 0.648, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012629453558394945;  // std dev = 2.302, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | | else return 0.07474376954827286;  // std dev = 2.466, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16101822294595;  // std dev = 0.167, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.27116321156619305;  // std dev = 1.489, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09395505149120789;  // std dev = 0.155, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.34451051305960434;  // std dev = 0.389, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09379199402902401;  // std dev = 0.054, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01934905887449077;  // std dev = 2.483, 81.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.187221730377288;  // std dev = 1.100, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1654567778427708;  // std dev = 0.389, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08367254462201161;  // std dev = 0.051, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09022697182672577;  // std dev = 0.033, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.0031353682656358344;  // std dev = 0.997, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12809361703993175;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018476439436927963;  // std dev = 2.897, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.904', 'seconds']
Parameter learned model CLL:-0.115125 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 145, 0], 'true,false,false,true': [1.387, 51, 2], 'true,false,false,false': [0.816, 1, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 76, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.999, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.525, 166, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.81, 61, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.619, 107, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.926, 4, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.86, 1, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.645, 236, 34], 'false,false,false,false': [3.598, 95, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.397, 3, 115], 'true,false': [0.24, 233, 0], 'false,true,true': [0.254, 1, 17], 'false,true,false': [0.000151, 29, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.285, 54, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.544, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.031, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.634, 3, 26], 'false,false,true,false': [1.363, 201, 3], 'false,false,false': [0.316, 114, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.358, 171, 82], 'false,true': [0.081, 0, 22], 'false,false,true': [1.611, 2, 52], 'false,false,false,true': [0.265, 80, 0], 'false,false,false,false': [0.17, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.178, 4, 121], 'true,false': [1.671, 232, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.193, 63, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.999, 1, 83], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.973, 142, 18], 'false,false,true,false': [0.648, 26, 1], 'false,false,false,true': [2.302, 98, 28], 'false,false,false,false': [2.466, 47, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.167, 2, 78], 'false,true,true,true': [1.489, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.155, 195, 0], 'false,false,true,true': [0.389, 0, 19], 'false,false,true,false': [0.054, 42, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.483, 60, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.1, 1, 85], 'true,true,false': [0.389, 0, 19], 'true,false,true': [0.051, 157, 0], 'true,false,false,true': [0.033, 33, 0], 'true,false,false,false': [0.997, 17, 4], 'false,true': [0.045, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.897, 104, 40]}]
{'': [0.22837370242214783, 0.23654400000000053], 'false': [0.019991670137443407, 7.011934892369409e-17], 'true': [0.009433106575965852, 0.01950446771119516], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-9.800589458760002e-17, 0.06632653061224474], 'true,false,false': [0.036311854752580947, 0.22222222222222224]}
{'': [0.011607699266387916, 0.10677977406831478], 'false': [0.06715946218612377, 0.13423470380916228], 'false,false': [0.050407505036581764, 0.1567259818431175], 'false,false,false': [0.09876543209876543, 0.14511772588145141], 'false,true': [nan, 0.06715946218612377], 'false,true,false': [0.06715946218612377, nan], 'false,false,true': [nan, 0.050407505036581764]}
{'': [0.06098511136016943, 0.10082227181612229], 'false': [nan, 0.1008222718161224], 'false,false': [0.00027321299975460603, 0.08961145458184705], 'false,false,false': [0.07991714197609727, 0.10971567043216994], 'true': [0.060010209311458756, 0.06572607211199533], 'true,false': [0.1850769544789987, 0.0], 'true,true': [0.052229500766309195, 0.0], 'false,false,true': [0.0008367148117482959, 0.0]}
{'': [0.10392447224198421, 0.12171910672251188], 'false': [0.0915671807240713, 0.13959432806705133], 'false,false': [0.0, 0.14013863425197973], 'false,false,false': [nan, 0.14013863425197973], 'true': [0.04867887237945639, 0.0002466085375989554], 'false,true': [0.06470887528775233, 2.2745040316702346e-08]}
{'': [0.029529829221702768, 0.07632508120749219], 'false': [0.0002529522983846709, 0.07526236293295194], 'false,false': [0.059515829177898404, 0.0998018375816377], 'false,false,true': [0.09204466364599523, 0.009105231672654262], 'true': [0.029783722916994337, 0.0], 'false,true': [4.95348197956158e-05, 0.0]}
{'': [0.04457538441205584, 0.09303035845696], 'false': [0.00029902653740407093, 0.09965093487977456], 'false,false': [0.048060296442554266, 0.0007263017072679601], 'true': [nan, 0.04457538441205631], 'true,false': [nan, 0.04457538441205584], 'false,false,false': [0.0008772203164360088, 0.0005090436462991764]}
{'': [0.05329038409376741, 0.05285804280372999], 'true': [0.03795373911899074, 0.011677775543634111], 'false': [nan, 0.0528580428037298], 'false,false': [nan, 0.05285804280372999], 'false,false,false': [nan, 0.05285804280372999]}
{'': [0.011621434720308067, 0.0428682604546499], 'false': [nan, 0.04286826045464994], 'false,false': [0.023321647950535124, 0.05953608223442728], 'false,false,false': [0.04206008007493147, 0.08566712140543203], 'false,false,true': [0.02431761704237722, 0.01555646905789324], 'true': [0.011892159886781665, 5.341270124691738e-05], 'true,false': [5.341270124691738e-05, nan]}
{'': [0.027842563130798796, 0.041947420075054184], 'false': [0.028096373971949373, 0.062341807151647506], 'false,false': [0.043726671539288456, 0.07612580750881127], 'false,false,false': [nan, 0.07612580750881127], 'false,false,true': [0.007957559949371154, 7.06794752810745e-05], 'false,true': [0.056868483521072, 0.00012339439244939807], 'false,true,true': [0.056868483521072, nan]}
{'': [0.022882058524999728, 0.055809732251624236], 'false': [0.00025174266251911173, 0.05826387009060474], 'false,false': [nan, 0.05826387009060469], 'true': [0.01302577339415367, 0.005330796456100575], 'true,true': [0.014060665081769903, 0.007953533173249977], 'true,false': [1.6536757101469742e-05, 0.020226371744998344], 'true,false,false': [3.242415528025726e-05, 0.04732447231745355]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.295
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.06185106490048773;  // std dev = 0.271, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7252497052877467;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7546133214359588;  // std dev = 0.167, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.672031142581136;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12771585406447794;  // std dev = 0.058, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.07897101890854706;  // std dev = 2.849, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.18291963622707613;  // std dev = 3.399, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.548062404085828;  // std dev = 0.123, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6885160434977312;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.43556204883093624;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5664114327100483;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5225853711960524;  // std dev = 1.002, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1143625397650647;  // std dev = 0.053, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07890275771192695;  // std dev = 3.576, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.11241155165657801;  // std dev = 2.711, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.41009906045156924;  // std dev = 0.148, 90.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=88 */
%   | | else return 0.5856974126615253;  // std dev = 0.243, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.11219463701080552;  // std dev = 0.290, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.421952393019071;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1715245300225867;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.10143770726745263;  // std dev = 0.007, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.4163183915821974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.10871548485207413;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11048124250048152;  // std dev = 3.165, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), tweets(A, G) )
%   | | then return 0.33476956515507456;  // std dev = 0.238, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15993822832918653;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.27124612780242985;  // std dev = 0.987, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.4656511643429717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3346683933295923;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.30298358972320266;  // std dev = 0.960, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09334378560713047;  // std dev = 0.043, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.08392383825159885;  // std dev = 3.086, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | | | else return 0.11668534145112146;  // std dev = 2.363, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2635182114750884;  // std dev = 0.147, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return -0.04738865312466598;  // std dev = 0.108, 137.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=14 */
%   | | else return -0.09531733016796026;  // std dev = 0.141, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2681239205864344;  // std dev = 0.189, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.30388442391045345;  // std dev = 0.155, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5578622451950135;  // std dev = 0.468, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.15337928627985345;  // std dev = 0.261, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.12520918802257883;  // std dev = 0.387, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.20949980087707967;  // std dev = 2.11e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.040500199122920244;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20949980087707984;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.21923261161839866;  // std dev = 0.028, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2736769931468086;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.0788240866434668;  // std dev = 0.057, 226.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23142773407859749;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.019186615922535077;  // std dev = 2.460, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.07796229352481336;  // std dev = 1.803, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18162508588989676;  // std dev = 0.019, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return -0.07172254758568969;  // std dev = 0.306, 110.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=1 */
%   | | | else return -0.060077120693476635;  // std dev = 0.287, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.23646025091252845;  // std dev = 0.222, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07397178904845725;  // std dev = 0.011, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.375646237932879;  // std dev = 0.639, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1461437911048948;  // std dev = 0.142, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.00290900969298506;  // std dev = 0.905, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.005360392354942129;  // std dev = 1.398, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15544146649440574;  // std dev = 0.090, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.10880809639776913;  // std dev = 0.239, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.15349752769458538;  // std dev = 0.946, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.044130727110964864;  // std dev = 1.340, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.06962796034637388;  // std dev = 0.014, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2688905060179707;  // std dev = 0.924, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.11854201493761128;  // std dev = 0.119, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.00927369035600912;  // std dev = 1.661, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.04494976213053372;  // std dev = 1.331, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14392754685264064;  // std dev = 0.019, 87.000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.07362430184830974;  // std dev = 0.964, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.08518408838455982;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.058519214095822905;  // std dev = 0.046, 187.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.016294644950163986;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26090620023197164;  // std dev = 0.134, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10664029225453432;  // std dev = 0.095, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.014748496039689427;  // std dev = 1.707, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
%   | | | else return -0.06925852956149241;  // std dev = 1.549, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.143', 'seconds']
Refined model CLL: -0.10798


******************************************
Best model found
******************************************
Results 

CLL : -0.102999 

AUC ROC : 0.993037 

AUC PR : 0.353286 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 8.295 

Total Inference Time : 16.073781490325928 

Total revision time: 41.15442054748535
Best scored revision CLL: -0.10798


Results 

CLL : -0.102999 

AUC ROC : 0.993037 

AUC PR : 0.353286 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 41.17279856681824 

Total Inference Time : 16.073781490325928 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.194
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6640816671497414;  // std dev = 0.982, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05197350368149175;  // std dev = 1.615, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.030532562164244395;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.08320050726644132;  // std dev = 1.470, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5813718471961601;  // std dev = 0.155, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7842152290330187;  // std dev = 0.091, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5689992774590942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5689992774590942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0625280107737788;  // std dev = 1.424, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | | else return 0.06022228076201233;  // std dev = 1.472, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5139495503262866;  // std dev = 0.531, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11520182776665419;  // std dev = 0.030, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4979591885945601;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12887535087028504;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3877475918166531;  // std dev = 0.927, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.34034046741507684;  // std dev = 0.318, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4287586991838548;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30891868012445134;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6323712462559026;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08746860253820442;  // std dev = 0.697, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | else return -0.01605223467877163;  // std dev = 0.279, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.007982395316788685;  // std dev = 1.795, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2693331222584652;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5500921394488282;  // std dev = 0.240, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15560333321652178;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13052371863244014;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.32214129216767373;  // std dev = 0.519, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0582303458432185;  // std dev = 0.898, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17610538512210971;  // std dev = 0.739, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.12491003987084902;  // std dev = 0.972, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2019805075114537;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.025994323983999524;  // std dev = 0.747, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return -0.06403933786579977;  // std dev = 0.618, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0632812724973998;  // std dev = 0.927, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.19640680836412536;  // std dev = 0.648, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19114715909820867;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.35243058082235273;  // std dev = 0.303, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.089865531885539;  // std dev = 0.035, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5165232560720343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08365093381590404;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01979947301875361;  // std dev = 0.781, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14399265455094423;  // std dev = 0.926, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.14901025516111188;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08266358838294871;  // std dev = 0.029, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08502576264908593;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.04366357960588296;  // std dev = 0.358, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17815309935217372;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.20486342755611864;  // std dev = 0.600, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.619', 'seconds']
Parameter learned model CLL:-0.119344 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.982, 1, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.615, 42, 4], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.935, 7, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.47, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.155, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.091, 0, 2], 'true,false,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.424, 34, 3], 'false,false,false,false': [1.472, 14, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.531, 0, 17], 'true,false': [0.03, 40, 0], 'false,true,true': [0.127, 0, 4], 'false,true,false': [0.01, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.927, 2, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.318, 0, 14], 'true,false': [0.023, 0, 2], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.697, 40, 1], 'false,false,false': [0.279, 20, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.795, 37, 16], 'false,true': [0.054, 0, 3], 'false,false,true': [0.24, 0, 6], 'false,false,false,true': [0.075, 5, 0], 'false,false,false,false': [0.072, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.519, 0, 20], 'true,false': [0.898, 36, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.739, 5, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.972, 1, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.747, 19, 3], 'false,false,true,false': [0.618, 15, 1], 'false,false,false,true': [0.927, 11, 2], 'false,false,false,false': [0.648, 2, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.052, 0, 16], 'false,true,true,true': [0.303, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 40, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.002, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.781, 5, 3]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.926, 1, 16], 'true,true,false': [0.011, 0, 2], 'true,false,true': [0.029, 39, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.358, 2, 2], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.6, 2, 4]}]
{'': [0.23495906016375898, 0.2366863905325442], 'false': [0.0, -6.938893903907228e-18], 'true': [-2.9605947323337506e-16, 0.053877551020408206], 'true,false': [2.3790493384824782e-17, 0.20408163265306126], 'true,false,false': [0.18750000000000003, 0.22222222222222224], 'false,true': [0.0, nan]}
{'': [0.06024019119147045, 0.08905308308078963], 'false': [0.055585550087827305, 0.14164247657536808], 'false,false': [0.10937499999999999, 0.14951529499594488], 'false,false,false': [0.0, 0.13504569448810144], 'false,false,true': [nan, 0.10937499999999999], 'false,true': [nan, 0.055585550087827305], 'false,true,false': [0.05667908038475889, 0.0]}
{'': [0.06724768785387374, 0.08864735750865005], 'false': [nan, 0.08864735750865006], 'false,false': [0.0, 0.07960071869663674], 'false,false,false': [0.05480996271912823, 0.12042308649683545], 'true': [0.001836965782782858, 0.2598672690322038], 'true,false': [0.004124257055492131, 0.25], 'true,true': [0.001836965782782858, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.08779912450585618, 0.1262556090966831], 'false': [0.08486940783288587, 0.14307610892972086], 'false,false': [nan, 0.14307610892972086], 'false,false,false': [nan, 0.14307610892972086], 'true': [0.01655607938599659, 2.242286677596461e-05], 'false,true': [0.016110806041818332, 0.00010955144471164191]}
{'': [0.007205171516306119, 0.05217425848006144], 'false': [0.0, 0.050194807838293005], 'false,false': [0.03429240922351061, 0.07776300517217948], 'false,false,true': [0.0, 0.011864306979860103], 'true': [0.007219395262626922, 0.0002650445465828821], 'false,true': [0.0, nan]}
{'': [0.06080961307188514, 0.09272163097702309], 'false': [0.0009879420054454506, 0.10024196881276015], 'false,false': [0.009637778364428176, 0.0008586289947612013], 'true': [nan, 0.060809613071885114], 'true,false': [nan, 0.06080961307188514], 'false,false,false': [0.0011285245349987704, 0.0005140188687470543]}
{'': [0.05008745044489663, 0.09095157128999524], 'false': [nan, 0.09095157128999524], 'false,false': [nan, 0.09095157128999524], 'false,false,false': [nan, 0.09095157128999524], 'true': [0.01344891747917618, 0.02017918926006045]}
{'': [0.05943026872218419, 0.04485074607597175], 'true': [0.06302104557560013, 0.0], 'false': [nan, 0.044850746075971705], 'false,false': [0.025100611110880054, 0.08189155078877385], 'false,false,false': [0.06609340295021135, 0.06997915050355157], 'false,false,true': [0.025382826274681244, 0.023874583476762374], 'true,false': [0.0, nan]}
{'': [0.0026758257862449786, 0.03142628738949631], 'false': [0.021392560607519966, 0.05806427723926592], 'false,false': [0.039398531590516116, 0.07632592929808646], 'false,false,false': [nan, 0.07632592929808646], 'false,false,true': [0.0, 7.609703487422768e-07], 'false,true': [0.018401478056150732, 3.024022460644815e-05], 'false,true,true': [0.018401478056150732, nan]}
{'': [0.025162829844160708, 0.051509398577772446], 'false': [0.0, 0.05999237810748273], 'false,false': [nan, 0.05999237810748273], 'true': [0.04513361441102638, 0.003916040680898834], 'true,true': [0.05043423946474226, 5.577527707233826e-05], 'true,false': [2.2040923244019222e-05, 0.018347122169411065], 'true,false,false': [0.0, 0.03208049887561016]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.347
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7270555508123272;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.0012930690825104757;  // std dev = 1.349, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return -0.019829882185973174;  // std dev = 0.790, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -1.2784210178492147E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11596051882570745;  // std dev = 1.428, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5662409818953928;  // std dev = 0.159, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.4822345200978031;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5534933673708156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5534933673708156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7113033397654901;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13269681727008736;  // std dev = 0.094, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3735716710027269;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13934273280906803;  // std dev = 0.681, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.41303194284674977;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4769179068540332;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5980842152782146;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return -0.11171903696762801;  // std dev = 2.38e-05, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.14914250619341796;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.12362000858634387;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.2590117959447518;  // std dev = 0.967, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.1696500748491119;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.335086254025822;  // std dev = 0.868, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.19752367965949227;  // std dev = 0.385, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.35195489693330395;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4180443399774117;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3066951040327963;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4088238715685262;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09409525534548481;  // std dev = 0.487, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.13569222466162845;  // std dev = 0.947, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.1045776939000526;  // std dev = 0.731, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.2884507394711042;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return -0.01850748766225126;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0928713477893123;  // std dev = 1.29e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.08725504283846693;  // std dev = 0.261, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2899031221420591;  // std dev = 0.109, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2886700075028237;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4274436962937996;  // std dev = 0.246, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14074617908620088;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.14363983643072936;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.2226219347263973;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2941823473007056;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3842568680970893;  // std dev = 0.214, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.08533440293849469;  // std dev = 1.76e-05, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.153251654214759;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.23495875984539152;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.15076969753659578;  // std dev = 0.752, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0371857595410767;  // std dev = 0.330, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03890951568011329;  // std dev = 0.609, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18193324110120812;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.23697439980474633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.26491123205111766;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3508883556513715;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08219985075216757;  // std dev = 0.044, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.14201907168710476;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.14308781415778032;  // std dev = 0.554, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.16043338619554692;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19530951408844374;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25619430346419086;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20630832515269365;  // std dev = 0.208, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return -0.0782418450322993;  // std dev = 0.073, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.12056490600899632;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, J) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.2695082326261028;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.09711738626461387;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2077025285281407;  // std dev = 0.540, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14425411019568848;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.0023161662901383107;  // std dev = 0.945, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.11553450088722894;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07767404900789096;  // std dev = 0.017, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.03852809026968014;  // std dev = 0.149, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13254714270667745;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08741643540214053;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.017412733731292485;  // std dev = 0.274, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04216689311590236;  // std dev = 0.676, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.315', 'seconds']
Refined model CLL: -0.121564


******************************************
Best model found
******************************************
Results 

CLL : -0.129859 

AUC ROC : 0.994462 

AUC PR : 0.369425 

Precision : 0.345324 

Recall : 0.923077 

F1 : 0.502618 

Total Learning Time : 3.347 

Total Inference Time : 5.371184349060059 

Total revision time: 12.810872188568116
Best scored revision CLL: -0.119344


Results 

CLL : -0.129859 

AUC ROC : 0.994462 

AUC PR : 0.369425 

Precision : 0.345324 

Recall : 0.923077 

F1 : 0.502618 

Total Learning Time : 12.829250207901001 

Total Inference Time : 5.371184349060059 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.73
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6480448407823831;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.020590580117915192;  // std dev = 2.875, 81.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=14 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05106448733171501;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1020332982091249;  // std dev = 1.911, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5563694209507279;  // std dev = 1.036, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7185308319916353;  // std dev = 0.206, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5729277032086344;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5729277032086344;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014568743340741225;  // std dev = 2.700, 88.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=12 */
%   | | | else return 0.018381649935689446;  // std dev = 1.695, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5007224955947337;  // std dev = 1.465, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | else return -0.12819979588836064;  // std dev = 0.032, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5052376898610543;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1298324640993514;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11558698133444247;  // std dev = 1.271, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3514635756048471;  // std dev = 0.412, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.33677437730490833;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3141104222127984;  // std dev = 0.000842, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6017506371967779;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10705255023932807;  // std dev = 0.717, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   | | else return -0.027237698734354103;  // std dev = 0.268, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031959476487256895;  // std dev = 2.327, 110.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2433037069125809;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.40278444947266484;  // std dev = 1.193, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14177680143766977;  // std dev = 0.179, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.12556335890423673;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3077044532936707;  // std dev = 1.265, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.08768802892519073;  // std dev = 1.031, 92.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06006879088923433;  // std dev = 0.290, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15213036817964712;  // std dev = 0.983, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.14024824725077123;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.027053196077686758;  // std dev = 1.388, 71.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
%   | | | else return -0.014878901295947858;  // std dev = 0.897, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036940874828910925;  // std dev = 1.188, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0.269302106429559;  // std dev = 0.730, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19330006173893938;  // std dev = 0.064, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.34369525336368023;  // std dev = 0.439, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09908206634519448;  // std dev = 0.161, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3498471839476657;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08687339051003357;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07890131984798235;  // std dev = 0.864, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20554666465527294;  // std dev = 0.554, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.14689833490260795;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08856854083718438;  // std dev = 0.043, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0877261860365608;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.018573321291308616;  // std dev = 0.410, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14352887128707664;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02517358973054063;  // std dev = 1.375, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.339', 'seconds']
Parameter learned model CLL:-0.118786 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.46e-07, 0, 39], 'true,false,true': [6.66e-08, 66, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.363, 2, 26], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.875, 67, 14], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.953, 10, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.911, 19, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.036, 1, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.206, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.7, 76, 12], 'false,false,false,false': [1.695, 23, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.465, 2, 36], 'true,false': [0.032, 76, 0], 'false,true,true': [0.113, 0, 10], 'false,true,false': [0.005, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.271, 8, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.412, 0, 27], 'true,false': [0.075, 0, 2], 'false,true,true': [0.000842, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.029, 0, 11], 'false,false,true,false': [0.717, 82, 1], 'false,false,false': [0.268, 32, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.327, 74, 36], 'false,true': [0.026, 0, 4], 'false,false,true': [1.193, 1, 10], 'false,false,false,true': [0.179, 13, 0], 'false,false,false,false': [0.059, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.265, 1, 45], 'true,false': [1.031, 88, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.29, 6, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.983, 1, 25], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.388, 60, 11], 'false,false,true,false': [0.897, 15, 3], 'false,false,false,true': [1.188, 24, 6], 'false,false,false,false': [0.73, 2, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.064, 0, 29], 'false,true,true,true': [0.439, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.161, 93, 0], 'false,false,true,true': [0.226, 0, 4], 'false,false,true,false': [0.002, 9, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.864, 5, 3]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.554, 0, 37], 'true,true,false': [0.002, 0, 2], 'true,false,true': [0.043, 91, 0], 'true,false,false,true': [1.86e-09, 3, 0], 'true,false,false,false': [0.41, 4, 2], 'false,true': [0.042, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.375, 21, 7]}]
{'': [0.23118490093194574, 0.2448979591836735], 'false': [-2.9605947323337506e-16, -1.1564823173178714e-17], 'true': [1.548618783066885e-15, 0.026296566837107422], 'true,false': [6.728624391667616e-17, 0.18750000000000003], 'true,false,false': [0.12244897959183677, 0.0], 'false,true': [-2.9605947323337506e-16, nan]}
{'': [0.06632653061224472, 0.11570212242744995], 'false': [0.10107375964706226, 0.14297471987840782], 'false,false': [0.0826446280991735, 0.15570738983615437], 'false,false,false': [0.0, 0.14045400319211304], 'false,true': [nan, 0.10107375964706226], 'false,true,false': [0.10206150719285692, 0.0], 'false,false,true': [nan, 0.0826446280991735]}
{'': [0.0388493954178229, 0.0957034602754368], 'false': [nan, 0.09570346027543682], 'false,false': [0.0, 0.08780791370137189], 'false,false,false': [0.0828493058073021, 0.1025684538993399], 'true': [0.04130575386029838, 0.017255790524644876], 'true,true': [0.04130575386029838, nan], 'true,false': [0.021200271111399216, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.1067340023184503, 0.10850145723020999], 'false': [0.09717298782904107, 0.13469215451964733], 'false,false': [nan, 0.13469215451964733], 'false,false,false': [nan, 0.13469215451964733], 'true': [0.0564800851619669, 1.321132190919356e-05], 'false,true': [0.012772987825532045, 2.1126558703405467e-05]}
{'': [0.00604849362636236, 0.06294086112891971], 'false': [1.7728094361957325e-07, 0.06145559759608987], 'false,false': [0.05738948862337925, 0.0717786815379358], 'false,false,true': [7.609316337253702e-05, 0.0061935212787586095], 'true': [0.006274163201978867, 0.0028010626741335753], 'false,true': [1.7728094361957325e-07, nan]}
{'': [0.049237771367108205, 0.09252646767265085], 'false': [0.00017194487815303666, 0.0975766253019345], 'false,false': [0.12944974234138856, 0.001378767114096435], 'true': [nan, 0.04923777136710811], 'true,false': [nan, 0.049237771367108205], 'false,false,false': [0.0024599326329987924, 0.0002482579131610148]}
{'': [0.05404940502176353, 0.011973357081853453], 'true': [0.034812245134869586, 0.011556246633479636], 'false': [nan, 0.011973357081853453], 'false,false': [nan, 0.011973357081853453], 'false,false,false': [nan, 0.011973357081853453]}
{'': [0.03581037058677993, 0.041476290721845666], 'false': [nan, 0.041476290721845895], 'false,false': [0.03071088035514282, 0.06702494007527571], 'false,false,false': [0.04703413738578491, 0.08882498388100062], 'true': [0.03718246346584131, 0.0], 'false,false,true': [0.027126985955226498, 0.044729115011563306], 'true,false': [0.0, nan]}
{'': [0.004154540946148686, 0.03212734507266934], 'false': [0.02433972600463426, 0.06334505493906373], 'false,false': [0.04455469513170706, 0.09326906651926005], 'false,false,false': [nan, 0.09326906651926005], 'false,false,true': [0.012761823290863256, 2.8803902343369864e-07], 'false,true': [0.01376779063131574, 0.0002795686713397628], 'false,true,true': [0.01376779063131574, nan]}
{'': [0.02029979150138992, 0.06483082645910235], 'false': [0.0008809461963518415, 0.06750130702573877], 'false,false': [nan, 0.06750130702573877], 'true': [0.008038958774034554, 0.0023470988986249177], 'true,true': [0.008296944099581417, 2.9947754494816237e-06], 'true,false': [2.063916256479979e-05, 0.021190847429839635], 'true,false,false': [1.1564823173178713e-18, 0.02801974272537687]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.951
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7789841956482734;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.0018717800761673797;  // std dev = 2.583, 73.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
%   | | | else return 0.06953645010376536;  // std dev = 1.284, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0.024693088425860748;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06618959061211464;  // std dev = 1.975, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5934736370825842;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5767751019025052;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then return 0.7756239980848894;  // std dev = 0.112, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5847813223236262;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6256648584486887;  // std dev = 0.951, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.12880778877921828;  // std dev = 0.049, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2865171825650208;  // std dev = 1.326, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.01305794841836651;  // std dev = 1.098, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.46360351604920697;  // std dev = 0.387, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.20113821525598077;  // std dev = 0.725, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4505990358493432;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6051363571237146;  // std dev = 0.145, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.11971081023071298;  // std dev = 0.142, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4580331777834557;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11976323248121562;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.15556491906854872;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.35243623383206474;  // std dev = 0.614, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then return 0.30875281387131;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.38538352817218424;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.5107356043608393;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.427768951057183;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3342897857123944;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.44640249640087626;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10059825850299219;  // std dev = 0.692, 69.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06022349894705212;  // std dev = 0.753, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.1600904560164558;  // std dev = 1.042, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(A, E) )
%   | | | then return 0.24703767755538822;  // std dev = 0.050, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08068523494258384;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3501451151654629;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.0480593814392177;  // std dev = 1.247, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | | | else return 0.046517095082259596;  // std dev = 0.339, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.031234258297387685;  // std dev = 0.176, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.29731014692298563;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4616316991655266;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14231063674473168;  // std dev = 0.036, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B), follows(A, E) )
%   | | then if ( tweets(C, D), follows(A, C) )
%   | | | then return 0.2054825927976701;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.4500333827840583;  // std dev = 0.924, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.28848710487647006;  // std dev = 0.056, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.08975605763244109;  // std dev = 0.035, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.3139729581102146;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12436113960522757;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2136021307590536;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.010385985323639199;  // std dev = 1.064, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return -0.08563411814102431;  // std dev = 0.610, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16961387360644214;  // std dev = 0.034, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.217186547991156;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.190839781063478;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4061536764952538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then return 0.02384177954412652;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2293806464712361;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.053257863991783914;  // std dev = 1.089, 82.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=7 */
%   | | | else return 0.04350429496014873;  // std dev = 1.182, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else return -0.08987929533746751;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(E, F), follows(E, A) )
%   | | | then return 0.1469469888264503;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.18605863064600117;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19244167375465163;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.20851430412255212;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then return -0.02842233332044873;  // std dev = 0.135, 90.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.261208369534378;  // std dev = 0.152, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10986429683911482;  // std dev = 0.027, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01572820480828679;  // std dev = 0.735, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.06506899806420326;  // std dev = 0.719, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09932160113781037;  // std dev = 0.955, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2832084516729913;  // std dev = 0.349, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.16497266864917415;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.0712767194585378;  // std dev = 0.052, 82.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12483979272711226;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21527341508467457;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0957803102965894;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.118560706703114;  // std dev = 0.635, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.003044960568634625;  // std dev = 0.580, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '58.798', 'seconds']
Refined model CLL: -0.115156


******************************************
Best model found
******************************************
Results 

CLL : -0.122056 

AUC ROC : 0.993752 

AUC PR : 0.334445 

Precision : 0.339492 

Recall : 0.942308 

F1 : 0.499151 

Total Learning Time : 6.951 

Total Inference Time : 17.44944429397583 

Total revision time: 31.34755445098877
Best scored revision CLL: -0.115156


Results 

CLL : -0.122056 

AUC ROC : 0.993752 

AUC PR : 0.334445 

Precision : 0.339492 

Recall : 0.942308 

F1 : 0.499151 

Total Learning Time : 31.365932470321656 

Total Inference Time : 17.44944429397583 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.2
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6582489224150364;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.020970190636419174;  // std dev = 3.267, 136.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=17 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.020556319278847466;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.03453715052479665;  // std dev = 2.025, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5430132479980787;  // std dev = 1.443, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return 0.7236863117630972;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7205470844612165;  // std dev = 0.212, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5704291150274513;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5704291150274513;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038692983296602014;  // std dev = 2.894, 126.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=13 */
%   | | | else return -0.00886812832011102;  // std dev = 1.749, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4638722987142634;  // std dev = 2.071, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return -0.12167670740750983;  // std dev = 0.162, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4973005079821572;  // std dev = 0.106, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.09772007894725032;  // std dev = 0.115, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07660913491645588;  // std dev = 1.341, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.290056738109682;  // std dev = 1.703, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else return 0.35860079748873563;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3385199182662257;  // std dev = 0.124, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6280107275527134;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10215713285458315;  // std dev = 0.739, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | else return -0.04790762723971714;  // std dev = 0.226, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04411015887025857;  // std dev = 2.747, 172.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=58 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24562708888310017;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4854292965138241;  // std dev = 0.622, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11476459128248566;  // std dev = 0.139, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11200728788420017;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3035294220944213;  // std dev = 1.347, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return -0.09623428980547306;  // std dev = 1.235, 148.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.071865056098831;  // std dev = 0.293, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20127590374505014;  // std dev = 0.067, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.21748507533953487;  // std dev = 0.108, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.025328874472625593;  // std dev = 1.563, 90.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=13 */
%   | | | else return -0.03247273447883685;  // std dev = 1.008, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05040822607565021;  // std dev = 1.544, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return -0.018428175866716266;  // std dev = 1.315, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19438795910598725;  // std dev = 0.064, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2671549295804554;  // std dev = 1.267, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09178467484724422;  // std dev = 0.110, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.35946343827605187;  // std dev = 0.233, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0809232546166831;  // std dev = 0.000410, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010496097353522423;  // std dev = 1.055, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19942454847789753;  // std dev = 0.719, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.15197736015955515;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08565647553016979;  // std dev = 0.040, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08008487567052212;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.022482127813728645;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1382755684948533;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025230287298185296;  // std dev = 1.220, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.186', 'seconds']
Parameter learned model CLL:-0.109049 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 62], 'true,false,true': [7.74e-08, 82, 0], 'true,false,false,true': [0.972, 17, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false': [5.89e-09, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.678, 3, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.267, 119, 17], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.943, 8, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.025, 29, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.443, 2, 43], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.212, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.894, 113, 13], 'false,false,false,false': [1.749, 31, 5]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.071, 3, 56], 'true,false': [0.162, 125, 0], 'false,true,true': [0.106, 0, 14], 'false,true,false': [0.115, 21, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.341, 11, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.703, 3, 46], 'true,false': [0.121, 0, 4], 'false,true,true': [0.124, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.02, 0, 12], 'false,false,true,false': [0.739, 99, 1], 'false,false,false': [0.226, 50, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.747, 114, 58], 'false,true': [0.027, 0, 5], 'false,false,true': [0.622, 0, 12], 'false,false,false,true': [0.139, 26, 0], 'false,false,false,false': [0.046, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.347, 1, 70], 'true,false': [1.235, 144, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.293, 11, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.067, 0, 44], 'true,false,true': [0.108, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.563, 77, 13], 'false,false,true,false': [1.008, 26, 4], 'false,false,false,true': [1.544, 29, 8], 'false,false,false,false': [1.315, 15, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.064, 0, 50], 'false,true,true,true': [1.267, 1, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.11, 112, 0], 'false,false,true,true': [0.233, 0, 4], 'false,false,true,false': [0.00041, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.055, 14, 3]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.719, 0, 60], 'true,true,false': [0.002, 0, 2], 'true,false,true': [0.04, 117, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.484, 6, 2], 'false,true': [0.081, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.22, 23, 7]}]
{'': [0.23847340885994953, 0.1819470699432887], 'true': [-6.87622002348484e-16, 0.01940986177825704], 'false': [-1.6148698540002277e-16, 3.489272363107635e-17], 'true,false': [7.311224796312007e-17, 0.09418282548476457], 'true,false,false': [0.052469135802469175, 0.0], 'false,true': [-1.6148698540002277e-16, nan]}
{'': [0.057476051645147255, 0.09513887973935464], 'false': [0.07703403839709218, 0.13856868934202882], 'false,false': [0.09876543209876544, 0.1447190358418098], 'false,false,false': [0.0, 0.11388516045586121], 'false,false,true': [nan, 0.09876543209876544], 'false,true': [nan, 0.07703403839709218], 'false,true,false': [0.07849774505306743, -4.625929269271485e-18]}
{'': [0.04266137105862182, 0.08222876075779649], 'false': [nan, 0.08222876075779652], 'false,false': [-6.344131569286608e-17, 0.07074637538288225], 'false,false,false': [0.06648176471007973, 0.08498066231318203], 'true': [0.045990187677674814, 0.013575056333311094], 'true,true': [0.046302566718502, 0.0], 'true,false': [0.022535404746916843, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.09814467969258493, 0.10412124765385967], 'false': [0.09660735071618237, 0.11985573897195607], 'false,false': [nan, 0.11985573897195607], 'false,false,false': [nan, 0.11985573897195607], 'true': [0.07270924659014241, 0.00020895044497365944], 'false,true': [0.011307360064739948, 0.01320324672176739]}
{'': [0.055327085660470794, 0.05765227892902981], 'false': [0.0021853187191860197, 0.05445954537120059], 'true': [0.059187971373903255, 0.003687535374096912], 'false,false': [0.05588643898065181, 0.05116812632945378], 'false,false,true': [3.174554018621952e-05, 0.005466312439389451], 'false,true': [0.0021853187191860197, nan]}
{'': [0.04386097516129335, 0.06769859403639308], 'false': [0.0001507124388525405, 0.0696169544056791], 'false,false': [0.032283578423894545, 0.0005118738315192305], 'true': [nan, 0.043860975161293315], 'true,false': [nan, 0.04386097516129335], 'false,false,false': [0.0007428309005806633, 0.0001318621473232872]}
{'': [0.05025915827157337, 0.007138676844492635], 'true': [0.025548312770488964, 0.010302805139946773], 'false': [nan, 0.007138676844492635], 'false,false': [nan, 0.007138676844492635], 'false,false,false': [nan, 0.007138676844492635]}
{'': [0.0003637932872985098, 0.04312507404896054], 'false': [nan, 0.043125074048960356], 'false,false': [0.028836103176172325, 0.07363873242176748], 'false,false,false': [0.064400415767224, 0.09095341043814337], 'false,false,true': [0.027139416744871008, 0.03388788641823513], 'true': [0.00010167909491635859, 0.005878991634351703], 'true,false': [0.005878991634351703, nan]}
{'': [0.004091191508366387, 0.03312733523754722], 'false': [0.02832206086202423, 0.048312882681126615], 'false,false': [0.03374015393573493, 0.06545123211418943], 'false,false,false': [nan, 0.06545123211418943], 'false,false,true': [0.013548376201950069, 1.051378111047857e-08], 'false,true': [0.0844835731327101, 0.00010828624592662242], 'false,true,true': [0.0844835731327101, nan]}
{'': [0.02103548515194817, 0.04530720879052571], 'false': [0.001656697527774923, 0.04962383747644146], 'false,false': [nan, 0.04962383747644146], 'true': [0.008410505144412907, 0.00201230684911695], 'true,true': [0.008618152614461298, 2.4658694296429695e-06], 'true,false': [1.342824630313225e-05, 0.01643605365102712], 'true,false,false': [-9.912705577010326e-19, 0.029269164867370964]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.555
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.0793510649004878;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return 0.6830441211539415;  // std dev = 0.197, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.5528067455442875;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0.7194734122109542;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.013363672613988499;  // std dev = 2.837, 98.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=13 */
%   | | | else return 0.015375036594832895;  // std dev = 1.543, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.07690787379175483;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.041658565171307185;  // std dev = 2.006, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5619058173010927;  // std dev = 0.160, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.7163598014530212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7786110827466284;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5786156828821968;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1146511368878264;  // std dev = 0.842, 87.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=1 */
%   | | | else return 0.013675742486710265;  // std dev = 2.448, 61.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15027189409400066;  // std dev = 1.536, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return -0.03663382779868789;  // std dev = 1.121, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.41871620497905404;  // std dev = 0.882, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.510626871564568;  // std dev = 0.302, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6377034441057403;  // std dev = 0.121, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.11829128626155358;  // std dev = 0.109, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.44605012770286456;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5627216913537301;  // std dev = 0.302, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11934007369967392;  // std dev = 0.027, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2655520935167196;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.01474558071566808;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.32812244544947416;  // std dev = 0.067, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.0492117838637256;  // std dev = 0.680, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3991666424891452;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.403949157473309;  // std dev = 0.282, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2939086429886072;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.486271423919846;  // std dev = 1.001, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.10314042892865896;  // std dev = 0.694, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0643019293422663;  // std dev = 0.950, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return -0.007379909019976098;  // std dev = 1.255, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.07036112747080789;  // std dev = 2.181, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.2873671315052075;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27531393836298645;  // std dev = 0.205, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then return -0.027208263765929334;  // std dev = 0.178, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | else return -0.028904880348349486;  // std dev = 0.195, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.24712586736060332;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.32335390905959616;  // std dev = 0.271, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43711058556892324;  // std dev = 0.833, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.11469471122723669;  // std dev = 0.020, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1342608943835128;  // std dev = 1.644, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | | else return 0.20675735134015097;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.35569652298915205;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.00459708433837247;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then return -0.026354507736511563;  // std dev = 0.170, 120.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=17 */
%   | | else return -0.06847159545477713;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.45234598642250345;  // std dev = 0.389, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10255581372121177;  // std dev = 0.070, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.04111386491978018;  // std dev = 0.221, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.203765586527709;  // std dev = 0.195, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.18724564372697455;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E) )
%   | | | then return -0.08669542989467832;  // std dev = 0.795, 82.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=1 */
%   | | | else return -0.08041885704973183;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3940323091537773;  // std dev = 0.421, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09918520244282517;  // std dev = 0.073, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2935961093923246;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11703466346340101;  // std dev = 0.082, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.056673934653416726;  // std dev = 0.273, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14748513667410576;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.19220033112104437;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(E, A) )
%   | | then return -0.1277070506683581;  // std dev = 0.917, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1696584086734143;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.03136032683944556;  // std dev = 0.138, 136.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31128429678822256;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09637196712587395;  // std dev = 0.005, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.020597846888415143;  // std dev = 0.579, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.005970649389360029;  // std dev = 0.669, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09296677252271697;  // std dev = 1.623, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.32815260244229455;  // std dev = 0.445, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.17145350556797828;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.07286747424279184;  // std dev = 0.051, 96.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14713066233107544;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2513386384657678;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08875754962150997;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -6.667253645275777E-4;  // std dev = 0.567, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.05026372958818051;  // std dev = 0.698, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.749', 'seconds']
Refined model CLL: -0.105815


******************************************
Best model found
******************************************
Results 

CLL : -0.107901 

AUC ROC : 0.994253 

AUC PR : 0.379159 

Precision : 0.345154 

Recall : 0.935897 

F1 : 0.504318 

Total Learning Time : 6.555 

Total Inference Time : 8.948235750198364 

Total revision time: 25.49595892906189
Best scored revision CLL: -0.105815


Results 

CLL : -0.107901 

AUC ROC : 0.994253 

AUC PR : 0.379159 

Precision : 0.345154 

Recall : 0.935897 

F1 : 0.504318 

Total Learning Time : 25.514336948394774 

Total Inference Time : 8.948235750198364 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.748
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.07518439823382113;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.56e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240420283029517;  // std dev = 0.132, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.028793388959827294;  // std dev = 3.482, 165.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=19 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07411945392032951;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09832026995458083;  // std dev = 2.613, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.48635684338934904;  // std dev = 2.140, 63.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=57 */
%   | | else return 0.7276712867524012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8081824596776022;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5572488806066183;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5572488806066183;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04125193229524738;  // std dev = 3.205, 161.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=16 */
%   | | | else return 0.02472572483619271;  // std dev = 2.379, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4885228403174506;  // std dev = 1.788, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return -0.12025399541370729;  // std dev = 0.081, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42893702225280755;  // std dev = 0.260, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.10372159771618772;  // std dev = 0.103, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12986189116156158;  // std dev = 1.992, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3132859110308631;  // std dev = 1.510, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.41992088169169184;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3217129163210479;  // std dev = 0.130, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6219830430391712;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1034850312051264;  // std dev = 0.716, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   | | else return 0.006857864303052454;  // std dev = 0.295, 59.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.048109854120010107;  // std dev = 3.107, 204.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=75 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25660118825613726;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5253170278045256;  // std dev = 0.647, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11763852571627022;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.12734010414066724;  // std dev = 0.147, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29720990030444994;  // std dev = 1.441, 90.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=89 */
%   | else return -0.0828786936661684;  // std dev = 1.604, 192.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.008255724424157783;  // std dev = 0.429, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16600386075008075;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25952785148972335;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.037201166400166914;  // std dev = 1.823, 116.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=15 */
%   | | | else return -0.03277745352808342;  // std dev = 1.029, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016430710015437736;  // std dev = 1.004, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.0859864442720538;  // std dev = 1.539, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17734113366162577;  // std dev = 0.137, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.31505477644128826;  // std dev = 0.641, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09365449433203137;  // std dev = 0.088, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31387042117029085;  // std dev = 0.229, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08887042613534099;  // std dev = 0.001, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07335584999814897;  // std dev = 1.493, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15968351006366904;  // std dev = 1.755, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | | else return 0.1361258775562804;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08683941689378825;  // std dev = 0.078, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08709495207213978;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.044922088804772095;  // std dev = 0.468, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14309369422281004;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0030546172145925004;  // std dev = 1.679, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.172', 'seconds']
Parameter learned model CLL:-0.113329 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 175, 0], 'true,false,false,true': [0.966, 14, 1], 'true,false,false,false': [0.913, 5, 1], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false': [4.56e-09, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.132, 0, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.482, 146, 19], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.97, 16, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.613, 36, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.14, 6, 57], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.095, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [3.205, 145, 16], 'false,false,false,false': [2.379, 45, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.788, 2, 73], 'true,false': [0.081, 163, 0], 'false,true,true': [0.26, 1, 17], 'false,true,false': [0.103, 26, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.992, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.51, 2, 60], 'true,false': [0.083, 0, 4], 'false,true,true': [0.13, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.057, 0, 15], 'false,false,true,false': [0.716, 141, 1], 'false,false,false': [0.295, 49, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.107, 129, 75], 'false,true': [0.09, 0, 7], 'false,false,true': [0.647, 0, 18], 'false,false,false,true': [0.093, 23, 0], 'false,false,false,false': [0.147, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.441, 1, 89], 'true,false': [1.604, 184, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.429, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [0.045, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.823, 101, 15], 'false,false,true,false': [1.029, 24, 4], 'false,false,false,true': [1.004, 34, 9], 'false,false,false,false': [1.539, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.137, 1, 64], 'false,true,true,true': [0.641, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 170, 0], 'false,false,true,true': [0.229, 0, 5], 'false,false,true,false': [0.001, 19, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.493, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.755, 3, 77], 'true,true,false': [0.008, 0, 4], 'true,false,true': [0.078, 126, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.468, 15, 2], 'false,true': [0.066, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.679, 48, 13]}]
{'': [0.2094223901454382, 0.23708677685950363], 'false': [-2.0898315757650005e-16, 2.05596856412066e-17], 'true': [0.012046400951813752, 0.010099958350687051], 'true,false': [-1.9032394707859825e-16, 0.08616780045351478], 'true,false,false': [0.06222222222222227, 0.13888888888888892], 'false,true': [-2.0898315757650005e-16, nan]}
{'': [0.0002770405012848003, 0.09607291288609213], 'false': [0.07309645513132043, 0.14020840932176265], 'false,false': [0.05536332179930793, 0.15574122075219834], 'false,false,false': [0.0, 0.13933545197168784], 'false,true': [nan, 0.07309645513132043], 'false,true,false': [0.07348319007052004, 0.0], 'false,false,true': [nan, 0.05536332179930793]}
{'': [0.08085702722264003, 0.08558192193483927], 'false': [nan, 0.08558192193483947], 'false,false': [-8.881784197001253e-17, 0.07457165896086805], 'true': [0.0724799968041438, 0.1574208809745456], 'true,false': [0.004514261537098552, 0.16], 'false,false,false': [0.06379281715462279, 0.102879633196464], 'true,true': [0.07272058762239832, 0.0], 'false,false,true': [-6.344131569286608e-17, -3.700743415417188e-17]}
{'': [0.09343967000337583, 0.11854757892609842], 'false': [0.10138176023009368, 0.14689410670393976], 'false,false': [nan, 0.14689410670393976], 'false,false,false': [nan, 0.14689410670393976], 'false,true': [0.06744559056505375, 0.01051579116921056], 'true': [0.042606333103719245, 4.061749389349064e-05]}
{'': [0.03528648116528931, 0.06201261134803784], 'false': [0.0016857078182727302, 0.05954874900449442], 'false,false': [0.048768767974338295, 0.08701079525103794], 'false,false,true': [0.00021285997395702102, 0.0036140985282199973], 'true': [0.03676264546702845, 0.0017240700640014095], 'false,true': [0.0016857078182727302, nan]}
{'': [0.0473131710121199, 0.07743263741117277], 'false': [0.0011456127686411053, 0.07979572204627494], 'false,false': [0.023229023064027052, 0.0005179352598544535], 'true': [nan, 0.047313171012120236], 'true,false': [nan, 0.0473131710121199], 'false,false,false': [0.00037436294122217517, 0.0005693461907133513]}
{'': [0.04787668559910412, 0.01836610448570986], 'true': [0.023079364426668678, 0.013393832260419338], 'false': [nan, 0.01836610448570986], 'false,false': [nan, 0.01836610448570986], 'false,false,false': [nan, 0.01836610448570986]}
{'': [0.030106082190507602, 0.03797352934444336], 'false': [nan, 0.037973529344443396], 'false,false': [0.030435524052107872, 0.05139120598825617], 'false,false,false': [0.02342767058122602, 0.09110179784344764], 'false,false,true': [0.028644474109890974, 0.03783982399199896], 'true': [0.030761265847755237, 0.0009901905077652762], 'true,false': [0.0009901905077652762, nan]}
{'': [0.01890274026823516, 0.029220665136810844], 'false': [0.01970622620058214, 0.06246053715572399], 'false,false': [0.028931169889679226, 0.09292274183166248], 'false,false,false': [nan, 0.09292274183166248], 'false,false,true': [0.010460743698314224, 1.0209266226711057e-07], 'false,true': [0.017889029081214706, 4.5371585223591745e-05], 'false,true,true': [0.017889029081214706, nan]}
{'': [0.02716565744736461, 0.044583213604622536], 'false': [0.0010876993863147104, 0.04622855120436216], 'false,false': [nan, 0.04622855120436216], 'true': [0.03668340701302565, 0.0016241288144960243], 'true,true': [0.03849040916452392, 1.482869796210276e-05], 'true,false': [4.8021980019780876e-05, 0.007985430047518647], 'true,false,false': [-3.469446951953614e-18, 0.01288625231063872]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.694
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7045360495445152;  // std dev = 0.130, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.7444044791103526;  // std dev = 0.110, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.031190985953401078;  // std dev = 3.178, 137.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=15 */
%   | | | else return -0.04138584895185338;  // std dev = 1.675, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17780077116908896;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10276050180443431;  // std dev = 2.604, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5618021148001169;  // std dev = 0.050, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.7729556821491071;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7743846077147754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.47387060633699285;  // std dev = 0.387, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5613455843511777;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7400129401799985;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12389606223683329;  // std dev = 0.179, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06175362134712485;  // std dev = 1.631, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.16663476136346247;  // std dev = 1.885, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.39668646005526986;  // std dev = 0.990, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.2504996747694871;  // std dev = 1.359, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.5937613304892644;  // std dev = 0.077, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.11778643607677595;  // std dev = 0.373, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.4519965193236927;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5039623226696547;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11042624833890978;  // std dev = 0.054, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1933957689656345;  // std dev = 1.074, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.08312351789720657;  // std dev = 1.541, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), tweets(A, G) )
%   | | | then return 0.21391177022605407;  // std dev = 1.875, 35.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | | else return 0.32549374348467747;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.446161103544785;  // std dev = 0.096, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.422180309758803;  // std dev = 0.217, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3510414716157898;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3950721280814542;  // std dev = 1.019, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.1006755966941037;  // std dev = 0.670, 144.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.08579123079936816;  // std dev = 0.899, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | | else return 0.0921736390440999;  // std dev = 1.876, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2538845265412528;  // std dev = 0.986, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.35667246941533626;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.09726304487998977;  // std dev = 1.308, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.2983777311189729;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.04150007076359321;  // std dev = 0.146, 140.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=17 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3079975536622494;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.10192702724833125;  // std dev = 1.002, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5581101660517445;  // std dev = 0.272, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13851572769984616;  // std dev = 0.040, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.24386507368895607;  // std dev = 0.045, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.13447909962979054;  // std dev = 0.249, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07627779808598263;  // std dev = 0.094, 128.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=5 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.360732571772143;  // std dev = 0.208, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08609787284326119;  // std dev = 0.013, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.34495914620059204;  // std dev = 0.257, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12605379589746085;  // std dev = 0.123, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.22231207472441716;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.008521239736374127;  // std dev = 1.328, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1951984944730831;  // std dev = 0.189, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return 0.25803389398004334;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.23319212285939517;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3354552077894463;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.021388866082541824;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07181080463632115;  // std dev = 0.620, 111.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=2 */
%   | | | else return -0.023167378560352878;  // std dev = 1.259, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0018764056033108616;  // std dev = 0.949, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.0816544910210337;  // std dev = 1.230, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.13914263509261113;  // std dev = 0.145, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.18627541745019915;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.051057610509327875;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.20034782172519572;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.042717735273843975;  // std dev = 0.117, 201.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.10791183921759114;  // std dev = 0.955, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.1017392283894109;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.027547805782735718;  // std dev = 0.802, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.03998810302640718;  // std dev = 1.168, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13266411250135718;  // std dev = 1.005, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.28379474469466803;  // std dev = 0.324, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1642474445719115;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07068387896369709;  // std dev = 0.042, 159.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.04670384632711562;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2925719588901872;  // std dev = 0.200, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09920510157776813;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.048538279881080185;  // std dev = 0.463, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.011802403236269321;  // std dev = 1.220, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.411', 'seconds']
Refined model CLL: -0.106623


******************************************
Best model found
******************************************
Results 

CLL : -0.109475 

AUC ROC : 0.994953 

AUC PR : 0.434631 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 8.694 

Total Inference Time : 13.697836875915527 

Total revision time: 34.43474706840515
Best scored revision CLL: -0.106623


Results 

CLL : -0.109475 

AUC ROC : 0.994953 

AUC PR : 0.434631 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 34.45312508773804 

Total Inference Time : 13.697836875915527 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.121
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10018439823382112;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7145393501794854;  // std dev = 1.002, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.028758824460367826;  // std dev = 3.761, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10444657990552653;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13571184988195203;  // std dev = 2.896, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497205071512989;  // std dev = 1.468, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7308445670450152;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8039284602105794;  // std dev = 0.109, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5635577138276284;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5635577138276284;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040329519534845946;  // std dev = 3.646, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return -0.025267467874092422;  // std dev = 2.581, 88.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.47797687701664215;  // std dev = 1.970, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.11980582246656526;  // std dev = 0.103, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49240215142644805;  // std dev = 0.117, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.10859954119142454;  // std dev = 0.075, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07467536144097565;  // std dev = 2.084, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32085435391973993;  // std dev = 1.148, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.3939355794487289;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32075668828558074;  // std dev = 0.134, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6233184212640598;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0941955555264362;  // std dev = 1.394, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else return -0.012782951106533233;  // std dev = 0.266, 83.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022414903932104196;  // std dev = 3.718, 278.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18284533200212172;  // std dev = 0.973, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5332812609085927;  // std dev = 0.753, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11163034488978267;  // std dev = 0.088, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11422247290335193;  // std dev = 0.119, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25984960572654564;  // std dev = 2.497, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07776588091008395;  // std dev = 1.904, 245.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03776813469283185;  // std dev = 0.662, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18905799885655702;  // std dev = 0.995, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2758076819413636;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03851309894799346;  // std dev = 1.969, 144.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=17 */
%   | | | else return -0.03297995750417583;  // std dev = 1.221, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015929904807555406;  // std dev = 1.425, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
%   | | | else return 0.10759117906972332;  // std dev = 1.546, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1389294568848714;  // std dev = 0.233, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.28344524830429096;  // std dev = 1.125, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09092510670946247;  // std dev = 0.073, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3707285538894534;  // std dev = 0.362, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0939027472429101;  // std dev = 0.000475, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09245230486481354;  // std dev = 1.501, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1586184334413781;  // std dev = 2.247, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.0433417006712728;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08483729426578125;  // std dev = 0.053, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08620653262196372;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.018631460927491083;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0736535565284329;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022873364315147676;  // std dev = 1.860, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.656', 'seconds']
Parameter learned model CLL:-0.112782 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 174, 0], 'true,false,false,true': [0.979, 23, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.002, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.761, 170, 22], 'false,true,false,false': [0.0, 4, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.987, 38, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.896, 38, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.468, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.109, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.646, 189, 21], 'false,false,false,false': [2.581, 77, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.97, 3, 97], 'true,false': [0.103, 184, 0], 'false,true,true': [0.117, 0, 19], 'false,true,false': [0.075, 50, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.084, 25, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.148, 1, 73], 'true,false': [0.105, 0, 4], 'false,true,true': [0.134, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.086, 0, 17], 'false,false,true,false': [1.394, 177, 4], 'false,false,false': [0.266, 72, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.718, 187, 91], 'false,true': [0.973, 1, 13], 'false,false,true': [0.753, 0, 22], 'false,false,false,true': [0.088, 28, 0], 'false,false,false,false': [0.119, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.497, 5, 107], 'true,false': [1.904, 234, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.662, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.995, 1, 80], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.969, 127, 17], 'false,false,true,false': [1.221, 36, 5], 'false,false,false,true': [1.425, 54, 13], 'false,false,false,false': [1.546, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.233, 4, 77], 'false,true,true,true': [1.125, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.073, 193, 0], 'false,false,true,true': [0.362, 0, 9], 'false,false,true,false': [0.000475, 19, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.501, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.247, 4, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.053, 171, 0], 'true,false,false,true': [1.05e-08, 19, 0], 'true,false,false,false': [0.481, 9, 2], 'false,true': [0.91, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86, 46, 17]}]
{'': [0.2246900826446303, 0.2204589843750001], 'true': [0.027500889996442155, 0.009802960494069044], 'false': [0.0, 4.6474452193611206e-17], 'true,false': [-1.8376105235175005e-16, 0.06632653061224494], 'true,false,false': [0.0399305555555556, 0.18750000000000003], 'false,true': [0.0, nan]}
{'': [0.012107133200240504, 0.09263448870941184], 'false': [0.07235384651914206, 0.12721734894242465], 'false,false': [0.024983563445101935, 0.16365453517587136], 'false,false,false': [0.0, 0.15245311968677747], 'false,true': [nan, 0.07235384651914206], 'false,true,false': [0.07367043981872631, 0.0], 'false,false,true': [nan, 0.024983563445101935]}
{'': [0.02939048688735783, 0.0817283536091922], 'false': [nan, 0.08172835360919216], 'false,false': [0.0, 0.06699842783353804], 'false,false,false': [0.06328896419755024, 0.07569068537410525], 'true': [0.02995178300842945, 0.01572411950299646], 'true,true': [0.029918383760789456, 0.0], 'true,false': [0.005983638836546401, 0.0], 'false,false,true': [4.9343245538895844e-17, 5.551115123125783e-17]}
{'': [0.09521663033052173, 0.09519539502436315], 'true': [0.03879044105622423, 5.763057247954861e-05], 'false': [0.07924471141225875, 0.12776186534669148], 'false,false': [nan, 0.12776186534669148], 'false,false,false': [nan, 0.12776186534669148], 'false,true': [0.013575984221075643, 0.005668707688208477]}
{'': [0.01730465511268991, 0.05977641278076779], 'false': [0.0010502844133645805, 0.05644058713458559], 'false,false': [0.050262194953530154, 0.07090294089389641], 'false,false,true': [0.0004326585818118185, 0.010740058481840162], 'true': [0.017818562317385236, 0.002730396840742777], 'false,true': [0.0010502844133645805, nan]}
{'': [0.04973539170392438, 0.08477867489528185], 'false': [0.06761953995666944, 0.0850304661067154], 'false,false': [0.025744449083617314, 0.000332925034301458], 'true': [nan, 0.049735391703924], 'true,false': [nan, 0.04973539170392438], 'false,false,false': [0.0002770902691011815, 0.00037121590124025423]}
{'': [0.0521542709185977, 0.023085758418576314], 'true': [0.05565836860675355, 0.014792643394231761], 'false': [nan, 0.023085758418576314], 'false,false': [nan, 0.023085758418576314], 'false,false,false': [nan, 0.023085758418576314]}
{'': [0.012137828270225429, 0.037017100242071846], 'false': [nan, 0.03701710024207144], 'false,false': [0.029026198488434886, 0.05107114833271729], 'false,false,false': [0.030305586921374198, 0.09561144316654509], 'false,false,true': [0.026924480058787344, 0.03638401314145868], 'true': [0.012228128494944998, 0.0011364991842581773], 'true,false': [0.0011364991842581773, nan]}
{'': [0.054163495536332686, 0.03404684645605266], 'false': [0.02310174312492409, 0.07296265723398536], 'false,false': [0.051776238972272, 0.09800283381523453], 'false,false,false': [nan, 0.09800283381523453], 'false,false,true': [0.014590083267967933, 1.185358899632274e-08], 'false,true': [0.03836308940929582, 2.744779022895017e-05], 'false,true,true': [0.03836308940929582, nan]}
{'': [0.03251639880054272, 0.06369207686063115], 'false': [0.16561357740552085, 0.05491796252444094], 'false,false': [nan, 0.05491796252444094], 'true': [0.05624736020155529, 0.0013903807581856608], 'true,true': [0.05154089280725521, 0.09031245305848513], 'true,false': [1.6232491946718943e-05, 0.008756861207058573], 'true,false,false': [5.843279076974508e-18, 0.020990301547331728]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.458
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.8446354215859994;  // std dev = 0.993, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then return 0.6452696803564597;  // std dev = 0.266, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | | else return 0.7221927572795366;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.743661427045341;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7342926647979221;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.06448834511069657;  // std dev = 3.217, 212.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=15 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09625184999861612;  // std dev = 0.186, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11230059240949958;  // std dev = 2.975, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5477780087336179;  // std dev = 0.164, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.5517041132900617;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4482251857376076;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5655755259593755;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7484028381397291;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12008443569400055;  // std dev = 0.124, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18725643367401368;  // std dev = 1.865, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.11813919341085187;  // std dev = 2.117, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.42538191893797095;  // std dev = 1.012, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.2937218401646485;  // std dev = 0.692, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5764726082489495;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.11410246096710716;  // std dev = 0.246, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.43589074589459414;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5055397447686765;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.106095603887536;  // std dev = 0.009, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09309127999325499;  // std dev = 1.247, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.08928209162709333;  // std dev = 1.547, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.32260152391269054;  // std dev = 0.995, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.517901484850373;  // std dev = 0.246, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.009278268554608523;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.13300094272202073;  // std dev = 0.494, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3300604165953951;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.36358816108143516;  // std dev = 1.326, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.08852232065008632;  // std dev = 1.276, 185.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07290607445075341;  // std dev = 0.907, 68.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=3 */
%   | | | else return 0.091193621594641;  // std dev = 1.898, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2437670682802159;  // std dev = 0.203, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | else return -0.08857509114695536;  // std dev = 0.011, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.17699289466862062;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.28106477010420117;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.034527870269282224;  // std dev = 0.155, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2780809316823528;  // std dev = 0.136, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.07436983442796266;  // std dev = 1.264, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.4973181610049259;  // std dev = 0.974, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.13313365447840084;  // std dev = 0.032, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, C), tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.172226516480155;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.22088723870262203;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22682292723365044;  // std dev = 0.141, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2362827811797331;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0562243337261511;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2535359071648303;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.04542841989716309;  // std dev = 0.118, 239.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.011646222291430613;  // std dev = 0.239, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | else return 0.15709359007823273;  // std dev = 0.306, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.1980666781592082;  // std dev = 0.140, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.07907221303116163;  // std dev = 0.304, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2423762212370913;  // std dev = 0.060, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, G), follows(H, A) )
%   | then if ( follows(I, H), follows(I, A) )
%   | | then return -0.06808301304311314;  // std dev = 0.061, 123.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=3 */
%   | | else if ( follows(J, H) )
%   | | | then return 0.006420732283626613;  // std dev = 1.323, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return -0.10826379667295767;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.2724757827740303;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.03381842151523517;  // std dev = 0.927, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | | | else return -0.010904816835126877;  // std dev = 2.069, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1694164196384294;  // std dev = 0.099, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.07591030354876716;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2970657299002688;  // std dev = 0.287, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.25246739430045456;  // std dev = 0.104, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07655719770760663;  // std dev = 0.074, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3517421351984101;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12424918084432625;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16486709836574975;  // std dev = 0.811, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07086487907230568;  // std dev = 1.143, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.14691441102513933;  // std dev = 0.089, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return -0.036791021390615235;  // std dev = 1.254, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1333044981723266;  // std dev = 0.062, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2972252237630831;  // std dev = 0.243, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06734871232674892;  // std dev = 0.043, 203.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2566475120980787;  // std dev = 0.160, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1112621569901786;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19675800419078254;  // std dev = 0.706, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.08693421736157633;  // std dev = 0.307, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '26.539', 'seconds']
Refined model CLL: -0.110934


******************************************
Best model found
******************************************
Results 

CLL : -0.121045 

AUC ROC : 0.994863 

AUC PR : 0.430825 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 10.458 

Total Inference Time : 22.132434606552124 

Total revision time: 47.79660702133179
Best scored revision CLL: -0.110934


Results 

CLL : -0.121045 

AUC ROC : 0.994863 

AUC PR : 0.430825 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 47.81498504066467 

Total Inference Time : 22.132434606552124 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.624
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4671311426286374;  // std dev = 0.284, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936063;  // std dev = 4.93e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3557819291448651;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.10159632948783626;  // std dev = 2.36e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43911526247819843;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32111636699767504;  // std dev = 0.872, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.279784957345857;  // std dev = 0.042, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.28e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19589711916914868;  // std dev = 0.981, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16335778516880428;  // std dev = 0.981, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1386632674864179;  // std dev = 0.176, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.05e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1514784951126202;  // std dev = 0.005, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.712', 'seconds']
Parameter learned model CLL:-0.084753 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.06e-07, 0, 31], 'false,true': [6.66e-08, 67, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 64, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.284, 3, 31], 'false,true': [0.0, 0, 0], 'false,false': [4.93e-09, 54, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.354, 2, 22], 'true,false': [2.36e-08, 50, 0], 'false,true,true': [5.27e-09, 0, 9], 'false,true,false': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.872, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 50, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.042, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.28e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.981, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 45, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.981, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.176, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 47, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.005, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 63, 0]}]
{'': [1.375244004696968e-15, 6.628197161941232e-17], 'false': [6.628197161941232e-17, nan]}
{'': [-4.584146682323227e-16, -3.8163916471489756e-17], 'false': [-3.8163916471489756e-17, nan]}
{'': [0.08044982698961943, 2.4671622769447922e-17], 'false': [nan, 2.4671622769447922e-17]}
{'': [0.07061733243800691, 0.06963799099525875], 'true': [0.0763888888888889, 1.1102230246251566e-17], 'false': [0.06963799099525875, nan], 'false,true': [2.4671622769447922e-17, -3.96508223080413e-18]}
{'': [0.023754032079520412, -2.8712664429960945e-18], 'true': [0.023754032079520412, nan], 'false': [nan, -2.8712664429960945e-18], 'false,false': [-3.3306690738754695e-18, 0.0], 'false,false,true': [nan, -3.3306690738754695e-18]}
{'': [5.717964183030256e-05, 5.9476233462061954e-18], 'false': [nan, 5.9476233462061954e-18], 'false,false': [nan, 5.9476233462061954e-18]}
{'': [0.030061286321989032, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}
{'': [0.03008016021339054, 3.3042351923367752e-18], 'true': [0.03008016021339054, nan], 'false': [3.1720657846433043e-18, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.0308021893914764, 5.843279076974508e-18], 'false': [nan, 5.843279076974508e-18], 'false,false': [2.362176648138631e-18, 6.938893903907229e-19], 'false,false,true': [nan, 2.362176648138631e-18]}
{'': [2.305426424839104e-05, -2.64338815386942e-18], 'false': [nan, -2.64338815386942e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.215
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 4.21e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5636273354105629;  // std dev = 0.098, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, E) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360624;  // std dev = 5.87e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42428425974968714;  // std dev = 0.099, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783619;  // std dev = 4.59e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4393998982452435;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.3335748933067633;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.06524079600763139;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3251851726417209;  // std dev = 0.071, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.09152572964019996;  // std dev = 0.867, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.31580607848892617;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2514828885168701;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.24864823446967887;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.25304110396242185;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2827407019229464;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.0851847513883968;  // std dev = 3.73e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.08518475138839682;  // std dev = 3.48e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return -0.1408584488669482;  // std dev = 0.483, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0.21601836970520052;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then return 0.23592014544748502;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20625495148245804;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.22125433508843623;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2592680949026801;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21302237318176456;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.17277461684259535;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17473641512787264;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then return -0.019526379140232253;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.192336009724544;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2119331105634772;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17957023733213137;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, G) )
%   | | | then return 0.14877620150394597;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15072965453577633;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.17693870877228013;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16420904667606173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.17869085500971135;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15467289305833828;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.13140220562685379;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13263152023047659;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.1526241487723442;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14289537416504716;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.921', 'seconds']
Refined model CLL: -0.084271


******************************************
Best model found
******************************************
Results 

CLL : -0.091888 

AUC ROC : 0.99253 

AUC PR : 0.353741 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.215 

Total Inference Time : 1.6023249626159668 

Total revision time: 13.543233407974244
Best scored revision CLL: -0.084271


Results 

CLL : -0.091888 

AUC ROC : 0.99253 

AUC PR : 0.353741 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.57792378807068 

Total Inference Time : 1.6023249626159668 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.617
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7036003963379384;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5280325091072556;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.12e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42805727695384715;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4280572769538468;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3119959854799829;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926094;  // std dev = 5.48e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26311607414255184;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 6.04e-09, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19948069649421266;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310916;  // std dev = 5.67e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13740315088333122;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333709;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1479799465933881;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.37e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12870013476961686;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.525', 'seconds']
Parameter learned model CLL:-0.088468 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [8.69e-08, 97, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 135, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 106, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 51], 'true,false': [3.65e-08, 100, 0], 'false,true,true': [5.27e-09, 0, 11], 'false,true,false': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.992, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.48e-08, 104, 0], 'false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [8.43e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 147, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.67e-08, 98, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.692, 3, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 111, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.05e-08, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 112, 0], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 125, 0]}]
{'': [-6.87622002348484e-16, 7.783006770568107e-17], 'false': [7.783006770568107e-17, nan]}
{'': [0.015621063240110917, -9.86864910777917e-18], 'false': [-9.86864910777917e-18, nan]}
{'': [0.0302734375, 6.70323335622736e-17], 'false': [nan, 6.70323335622736e-17]}
{'': [0.06274803773365538, 0.06328428690493504], 'false': [0.06328428690493504, nan], 'false,true': [0.0, -2.64338815386942e-18], 'true': [-4.876273676785002e-16, 1.3322676295501878e-17]}
{'': [0.015621063240111142, 4.819572820078199e-17], 'true': [0.015621063240111142, nan], 'false': [nan, 4.819572820078199e-17], 'false,false': [2.8823097754691566e-17, -1.1102230246251566e-17], 'false,false,true': [nan, 2.8823097754691566e-17]}
{'': [1.1460366705808067e-16, 3.6252180395923476e-17], 'false': [nan, 3.6252180395923476e-17], 'false,false': [nan, 3.6252180395923476e-17]}
{'': [0.015621063240110783, 3.285353848380565e-17], 'false': [nan, 3.285353848380565e-17], 'false,false': [nan, 3.285353848380565e-17], 'false,false,false': [3.285353848380565e-17, nan]}
{'': [0.04402366863905316, -2.585450879264063e-17], 'true': [0.04402366863905316, nan], 'false': [-4.0008036923429064e-18, 3.1720657846433043e-18], 'false,false': [nan, 3.1720657846433043e-18]}
{'': [0.0156210632401109, 2.878355989768924e-17], 'false': [nan, 2.878355989768924e-17], 'false,false': [2.577303450022685e-17, -4.2236745502044e-18], 'false,false,true': [nan, 2.577303450022685e-17]}
{'': [0.015621063240110863, -1.687538997430238e-17], 'false': [nan, -1.687538997430238e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 13.281
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.858148935099512;  // std dev = 1.19e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7214784292227072;  // std dev = 0.086, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.12544463852839105;  // std dev = 8.02e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5574559095034706;  // std dev = 0.111, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.11231637819360624;  // std dev = 9.31e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.38173018805688463;  // std dev = 0.992, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.16651815824610225;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.41651815824610233;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41651815824610233;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.2219921393963228;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.33796210048943276;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.26186082706496433;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.32003707371511564;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926087;  // std dev = 6.83e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.27566841857259944;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2566403813752015;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.3494270198025202;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.07166799106159243;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2547117570022844;  // std dev = 3.33e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2547117570022844;  // std dev = 2.36e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839683;  // std dev = 4.84e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.08518475138839691;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.08518475138839687;  // std dev = 1.29e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11416338162834525;  // std dev = 1.325, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.20943238202560283;  // std dev = 1.29e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.26861580205513846;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20953488891150307;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then return 0.20921961917402201;  // std dev = 0.000369, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07628190368868284;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109168;  // std dev = 4.47e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.07877675473109179;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), follows(H, F) )
%   | | | then return 0.19652416950069868;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.23653101911131424;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.015086014823887828;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17684994411737054;  // std dev = 3.07e-05, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return 0.009988294214962315;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.04532800622371039;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19580482148059197;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, L) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.17502967348490667;  // std dev = 0.061, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.22293380623872333;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1525796527684675;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15011620002705361;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then return 0.1710395433505927;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.02366243474632675;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420268;  // std dev = 3.61e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.06842697784420278;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.15120291720734014;  // std dev = 0.054, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1869106795424017;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.133879195740072;  // std dev = 0.007, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13195230002482272;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return -0.04819662033884957;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.05023968495457119;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.047', 'seconds']
Refined model CLL: -0.085356


******************************************
Best model found
******************************************
Results 

CLL : -0.09048 

AUC ROC : 0.994826 

AUC PR : 0.46814 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.281 

Total Inference Time : 4.34754204750061 

Total revision time: 28.397437570571903
Best scored revision CLL: -0.085356


Results 

CLL : -0.09048 

AUC ROC : 0.994826 

AUC PR : 0.46814 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.432127950668338 

Total Inference Time : 4.34754204750061 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.376
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.700562901734824;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 3.65e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5520123137980714;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360649;  // std dev = 2.28e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39922070642802204;  // std dev = 1.395, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3755364959017057;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.291761744099694;  // std dev = 1.961, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926075;  // std dev = 6.83e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.271661558273006;  // std dev = 0.018, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2106943062205984;  // std dev = 0.996, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.43e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17651589200019302;  // std dev = 0.996, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 8.94e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15113099209605674;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 6.83e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11104575757189318;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.883', 'seconds']
Parameter learned model CLL:-0.089495 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [3.65e-08, 158, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [2.28e-09, 177, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.395, 2, 74], 'true,false': [0.0, 158, 0], 'false,true,true': [0.218, 1, 19], 'false,true,false': [0.0, 31, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.961, 4, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 135, 0], 'false,false,false': [0.0, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.018, 0, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 165, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.43e-08, 169, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.94e-08, 158, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.13e-09, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 155, 0], 'false,false,false': [9.31e-10, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 181, 0]}]
{'': [0.010525124490720615, -1.6753066000331702e-16], 'false': [-1.6753066000331702e-16, nan]}
{'': [0.020609418282546997, 8.432073604748025e-18], 'false': [8.432073604748025e-18, nan]}
{'': [0.010525124490718425, 5.017957173447035e-18], 'false': [nan, 5.017957173447035e-18]}
{'': [0.06332645178092954, 0.07289371568620093], 'false': [0.07289371568620093, nan], 'false,true': [0.0475000000000001, -1.0744093786695063e-17], 'true': [0.025623268698060503, -6.886193443877553e-17]}
{'': [0.03962617833965957, 3.9650822308041306e-17], 'true': [0.03962617833965957, nan], 'false': [nan, 3.9650822308041306e-17], 'false,false': [3.454027187722709e-17, -5.046468293750712e-18], 'false,false,true': [nan, 3.454027187722709e-17]}
{'': [3.5926720876546375e-06, 2.960594732333751e-17], 'false': [nan, 2.960594732333751e-17], 'false,false': [nan, 2.960594732333751e-17]}
{'': [0.010545455674312918, 4.204394886154439e-17], 'false': [nan, 4.204394886154439e-17], 'false,false': [nan, 4.204394886154439e-17], 'false,false,false': [4.204394886154439e-17, nan]}
{'': [0.010542799842822508, 7.173748774501012e-17], 'true': [0.010542799842822508, nan], 'false': [5.0592441628488145e-17, 2.250452076942885e-18], 'false,false': [nan, 2.250452076942885e-18]}
{'': [0.010540681192385448, 3.341997880249196e-17], 'false': [nan, 3.341997880249196e-17], 'false,false': [3.008346260274618e-17, 6.769652589177784e-19], 'false,false,true': [nan, 3.008346260274618e-17]}
{'': [0.0303107163186698, -4.2936802057326494e-18], 'false': [nan, -4.2936802057326494e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 28.507
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.6694734122109542;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.7194734122109544;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.7238005531223877;  // std dev = 0.079, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.2551723247302799;  // std dev = 1.024, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7274065038819156;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 2.98e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5687867253708795;  // std dev = 0.250, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5542085587326465;  // std dev = 0.000845, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.22066731840182485;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5550610724563662;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360656;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.42128978805369177;  // std dev = 0.035, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.33724966783008825;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.4408400893649866;  // std dev = 0.247, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), tweets(A, I) )
%   | | then return 0.3408526277563967;  // std dev = 0.267, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.42614689204721984;  // std dev = 0.077, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), follows(D, G) )
%   | | | then return 0.2597720073512405;  // std dev = 1.364, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return -0.010512232370398519;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, D) )
%   | | | then return 0.4056646538306233;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3113147846899225;  // std dev = 0.000631, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3285515964466462;  // std dev = 0.134, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926067;  // std dev = 7.60e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.27404009970699245;  // std dev = 0.057, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.31003008355858236;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.2646397884612002;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.25450245628298124;  // std dev = 0.048, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.26614218660016664;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.001821606937695582;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2518787418772685;  // std dev = 0.000974, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then return -0.08518475138839678;  // std dev = 4.17e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(F, D), tweets(D, E) )
%   | | | then return 0.21881274103927936;  // std dev = 0.026, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.22901156002408016;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( recursion_accounttype(D, B), follows(G, D) )
%   | | | then return 0.014287842193021705;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2313810138944767;  // std dev = 0.120, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return 0.2173016701231222;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.020054591028453365;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.07189384544034678;  // std dev = 0.968, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2175847468011635;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109146;  // std dev = 4.75e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.09190825488251342;  // std dev = 1.346, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.19400569932290754;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2342947149845525;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18137418768582628;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.18790537497856707;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.24811357332114717;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.1929388686796715;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17913456259687524;  // std dev = 0.023, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333673;  // std dev = 7.45e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.1760812937648835;  // std dev = 0.118, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.09365860306418074;  // std dev = 0.954, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.09417224948575131;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.16092602700348654;  // std dev = 0.050, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.20520599027049405;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.16467534785042523;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15429272064795724;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.35e-09, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, D) )
%   | | | then return 0.153141947469232;  // std dev = 0.109, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.10588219324760426;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.08952827506946753;  // std dev = 0.799, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.137737018977615;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15687174770238102;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14103742303150688;  // std dev = 0.033, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1310726697638474;  // std dev = 0.000589, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.694', 'seconds']
Refined model CLL: -0.08776


******************************************
Best model found
******************************************
Results 

CLL : -0.091972 

AUC ROC : 0.994099 

AUC PR : 0.418043 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.507 

Total Inference Time : 5.940626382827759 

Total revision time: 49.76425324249268
Best scored revision CLL: -0.08776


Results 

CLL : -0.091972 

AUC ROC : 0.994099 

AUC PR : 0.418043 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.798943622589114 

Total Inference Time : 5.940626382827759 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.275
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995104;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6795833279484356;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.556984098364032;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360676;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4056656376639071;  // std dev = 1.707, 104.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=101 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39284512484339335;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3233662964923472;  // std dev = 1.402, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926055;  // std dev = 5.16e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return -0.09269127618926079;  // std dev = 2.95e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25502908857389506;  // std dev = 1.402, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19991030499819273;  // std dev = 1.712, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1827612907526525;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.11e-07, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13289756264994332;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.23e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13871195665191935;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202623;  // std dev = 2.46e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.387', 'seconds']
Parameter learned model CLL:-0.087643 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 124], 'false,true': [0.0, 232, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 229, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.707, 3, 101], 'true,false': [0.0, 199, 0], 'false,true,true': [0.2, 1, 23], 'false,true,false': [0.0, 45, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.402, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.16e-08, 186, 0], 'false,false,false': [2.95e-09, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.402, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 255, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.712, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 255, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.11e-07, 188, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.23e-08, 196, 0], 'false,false,false': [2.46e-09, 40, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-09, 251, 0]}]
{'': [0.030273437500004108, -2.029028286383907e-16], 'false': [-2.029028286383907e-16, nan]}
{'': [0.04402366863905266, -8.042560493347591e-17], 'false': [-8.042560493347591e-17, nan]}
{'': [0.015621063240110747, -7.56309134679146e-17], 'false': [nan, -7.56309134679146e-17]}
{'': [0.06762042878189208, 0.06934575507289995], 'false': [0.06934575507289995, nan], 'false,true': [0.03993055555555571, -2.0970879354030734e-17], 'true': [0.02801405325443703, -9.372737092312879e-17]}
{'': [0.015594065729935916, 2.1291948417468754e-17], 'true': [0.015594065729935916, nan], 'false': [nan, 2.1291948417468754e-17], 'false,false': [1.4325458382260084e-17, 6.7286243916676156e-18], 'false,false,true': [nan, 1.4325458382260084e-17]}
{'': [0.015597128345068491, 3.395976310618126e-17], 'false': [nan, 3.395976310618126e-17], 'false,false': [nan, 3.395976310618126e-17]}
{'': [0.023083865587058158, 1.3932210505100003e-17], 'false': [nan, 1.3932210505100003e-17], 'false,false': [nan, 1.3932210505100003e-17], 'false,false,false': [1.3932210505100003e-17, nan]}
{'': [0.007942432157941482, 6.265158977137813e-17], 'true': [0.007942432157941482, nan], 'false': [6.495985782381235e-17, -1.0473802119105251e-17], 'false,false': [nan, -1.0473802119105251e-17]}
{'': [0.030240341702267068, 1.034953667023451e-17], 'false': [nan, 1.034953667023451e-17], 'false,false': [1.9825411154020653e-17, 5.551115123125783e-18], 'false,false,true': [nan, 1.9825411154020653e-17]}
{'': [0.007915594979910952, 4.423199301295444e-18], 'false': [nan, 4.423199301295444e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 46.771
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(F, A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.8146706742299471;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0.8581489350995121;  // std dev = 1.19e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else return -0.1418510649004885;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7200281554894106;  // std dev = 0.015, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7256812536603394;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.728402557317178;  // std dev = 0.109, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.12544463852839197;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.539529294858331;  // std dev = 0.951, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.47333252597822845;  // std dev = 0.948, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.3098877992285019;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5643677747544701;  // std dev = 0.139, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.11231637819360686;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4244992796820362;  // std dev = 0.042, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.34902507360090756;  // std dev = 1.341, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.434840279145109;  // std dev = 0.143, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.1039292340626424;  // std dev = 0.484, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41315951895254527;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.079826185619212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.41315951895254527;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.328142299270928;  // std dev = 0.134, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.040793352888287907;  // std dev = 1.302, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.33960283332199354;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3520592750668781;  // std dev = 0.072, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2644122869891253;  // std dev = 1.368, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   else if ( follows(A, H) )
%   | then return -0.09249526617953523;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.09269127618926082;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25946147278504367;  // std dev = 0.087, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.06711781936808264;  // std dev = 1.800, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.25878706970915644;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2912687868410701;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.39522927902370575;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26811216120654974;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2758822272439372;  // std dev = 0.060, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.2633647310273434;  // std dev = 0.052, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.08505496349120374;  // std dev = 6.89e-05, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.22893994981923033;  // std dev = 0.190, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.08807419834290527;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return -0.11480465575759981;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.19265866984301772;  // std dev = 0.954, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.22280530812344587;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23366436603220553;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2122520864062593;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2148358808217791;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07865256933889976;  // std dev = 5.34e-05, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.18402929458083808;  // std dev = 0.095, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.21256647689467537;  // std dev = 0.123, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.11940289325827548;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.18928611321935776;  // std dev = 0.076, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), recursion_accounttype(H, B) )
%   | | | then return 0.22445257947969316;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10845904071976793;  // std dev = 0.873, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.19062891361988452;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0557248752287066;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07314256413594229;  // std dev = 5.39e-05, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11131410687361283;  // std dev = 1.377, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return -0.01077092246831337;  // std dev = 1.272, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1920567078086376;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10579291488270934;  // std dev = 0.971, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, A) )
%   | | | then return 0.1974437747805704;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16089399335642976;  // std dev = 0.039, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.16302659557142282;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06731780731355723;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06833226285179529;  // std dev = 4.68e-05, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), follows(D, A) )
%   | | | then return 0.11299867760653672;  // std dev = 0.971, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.15350028390250678;  // std dev = 0.126, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return -0.09732520513999607;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.16663156817659133;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16301706224434145;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14022608806503797;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15159010054958955;  // std dev = 0.072, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, K) )
%   | then return -0.06409072164149034;  // std dev = 6.99e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.06421901866295181;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.237', 'seconds']
Refined model CLL: -0.085534


******************************************
Best model found
******************************************
Results 

CLL : -0.09086 

AUC ROC : 0.995213 

AUC PR : 0.458035 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 46.771 

Total Inference Time : 9.584321737289429 

Total revision time: 74.69487070655822
Best scored revision CLL: -0.085534


Results 

CLL : -0.09086 

AUC ROC : 0.995213 

AUC PR : 0.458035 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 74.72956108665466 

Total Inference Time : 9.584321737289429 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.716
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6994914035015026;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5414445912174083;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360654;  // std dev = 0.000, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4090037635285363;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43190452688731373;  // std dev = 9.13e-09, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 5.74e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.285892329301364;  // std dev = 2.758, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 1.41e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.255415684833399;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1893867249393131;  // std dev = 2.405, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.21e-08, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1761398683825861;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333689;  // std dev = 1.07e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13778265027863765;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 5.37e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.06842697784420262;  // std dev = 3.36e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12533551918924418;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202597;  // std dev = 6.65e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.803', 'seconds']
Parameter learned model CLL:-0.087164 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [1.23e-07, 306, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 309, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 342, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 248, 0], 'false,true,true': [9.13e-09, 0, 28], 'false,true,false': [5.74e-09, 68, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.758, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.41e-07, 267, 0], 'false,false,false': [0.0, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.714, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 304, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.405, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.21e-08, 330, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.07e-07, 277, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 243, 0], 'false,false,false': [3.36e-09, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.65e-09, 300, 0]}]
{'': [0.024375000000006076, 4.9343245538895844e-17], 'false': [4.9343245538895844e-17, nan]}
{'': [0.02437499999999968, -8.623091453399274e-17], 'false': [-8.623091453399274e-17, nan]}
{'': [0.024375000000000435, -3.3761168000297156e-17], 'false': [nan, -3.3761168000297156e-17]}
{'': [0.06670092849340946, 0.05880235501147443], 'true': [0.02237631839636329, -6.625524501795289e-17], 'false': [0.05880235501147443, nan], 'false,true': [9.516197353929913e-17, 3.428629928989454e-17]}
{'': [0.046378997304437335, 1.1404103576210068e-16], 'true': [0.046378997304437335, nan], 'false': [nan, 1.1404103576210068e-16], 'false,false': [7.484649604214538e-17, -2.2551405187698492e-17], 'false,false,true': [nan, 7.484649604214538e-17]}
{'': [0.018484730250989692, 3.7981314000334304e-17], 'false': [nan, 3.7981314000334304e-17], 'false,false': [nan, 3.7981314000334304e-17]}
{'': [0.035711548022702426, 5.382899513334092e-18], 'false': [nan, 5.382899513334092e-18], 'false,false': [nan, 5.382899513334092e-18], 'false,false,false': [5.382899513334092e-18, nan]}
{'': [0.01849000284188194, 1.939546247839129e-17], 'true': [0.01849000284188194, nan], 'false': [4.168346374043909e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.030058358086904987, -4.917766417802707e-17], 'false': [nan, -4.917766417802707e-17], 'false,false': [1.1878929481586037e-17, 1.1102230246251566e-17], 'false,false,true': [nan, 1.1878929481586037e-17]}
{'': [0.02442176804323963, 4.366877230192282e-17], 'false': [nan, 4.366877230192282e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 31.896
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.8581489350995118;  // std dev = 2.06e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.7094560613775849;  // std dev = 0.999, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.22910989281367955;  // std dev = 0.981, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.5348917811753146;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.12544463852839205;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5642684354444122;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.44277857924482505;  // std dev = 1.275, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.5619262908484864;  // std dev = 0.164, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.4220331034129513;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.2443539812257133;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5776873145590465;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360683;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4084731124805906;  // std dev = 0.913, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.43213168363875704;  // std dev = 0.181, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3217222773950206;  // std dev = 1.243, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.41770873180742396;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.45918129701742216;  // std dev = 0.088, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.11710412651689577;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4430941870691764;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783617;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.30772102843988003;  // std dev = 0.884, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.3334365583273711;  // std dev = 0.221, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.35675598058430613;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13502628445160225;  // std dev = 0.817, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.34935516896321045;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.23705267901836471;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.26582727787650867;  // std dev = 0.977, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.092691276189261;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(D, G) )
%   | | | then return 0.26539587835780276;  // std dev = 0.042, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.2588655417741614;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, H), follows(D, H) )
%   | | | then return 0.27458408252898053;  // std dev = 0.067, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.31966262398096024;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(I, J), follows(J, K) )
%   | | | then return -0.0011141442829092044;  // std dev = 1.914, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.2514645559420469;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.20215150834209836;  // std dev = 1.370, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.2991067797253865;  // std dev = 0.207, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.19004619793584193;  // std dev = 0.991, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.11635495583745799;  // std dev = 0.821, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.21663676688546935;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.22861753137880328;  // std dev = 0.077, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), follows(J, A) )
%   | | | then return 0.2632657737142735;  // std dev = 0.228, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.22249656645626398;  // std dev = 0.102, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2250709314211555;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.22775146176203923;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.13082823485832962;  // std dev = 1.357, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.1904552761130828;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.18213588427384722;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.19087275913010485;  // std dev = 0.068, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.10330020777374171;  // std dev = 1.360, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.4682717128765403;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.11357160388094081;  // std dev = 0.994, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.164919353119882;  // std dev = 1.010, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.16451896383748837;  // std dev = 0.035, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.09530533419254862;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2114456280098138;  // std dev = 0.064, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15146620046018355;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(I, H) )
%   | | | then return -0.25174146249035967;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.09770503067201165;  // std dev = 0.892, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1620266953317666;  // std dev = 0.162, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.12369344793158227;  // std dev = 0.986, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.06842697784420308;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.14464249689732644;  // std dev = 0.053, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.17535635089723178;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.13535189467211922;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15472316382910564;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18568653068483856;  // std dev = 0.170, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.09972531368284242;  // std dev = 1.314, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.1988778587711737;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14731730839687515;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202608;  // std dev = 5.27e-09, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.203', 'seconds']
Refined model CLL: -0.084765


******************************************
Best model found
******************************************
Results 

CLL : -0.091108 

AUC ROC : 0.994353 

AUC PR : 0.453482 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.896 

Total Inference Time : 11.212568998336792 

Total revision time: 66.33570147705078
Best scored revision CLL: -0.084765


Results 

CLL : -0.091108 

AUC ROC : 0.994353 

AUC PR : 0.453482 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 66.37039185714721 

Total Inference Time : 11.212568998336792 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.529
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360629;  // std dev = 5.43e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783631;  // std dev = 1.83e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32071184716014955;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1810981684954155;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.08e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.222300110793654;  // std dev = 3.33e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18624254962154474;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15964725081100362;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10091207398776508;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.040', 'seconds']
Parameter learned model CLL:-0.085983 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.33e-07, 0, 25], 'false,true': [5.58e-08, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [5.43e-09, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 24], 'true,false': [1.83e-08, 43, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.11e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 60, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [3.33e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.05e-08, 53, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.83e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 52, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 48, 0]}]
{'': [7.105427357601002e-16, 5.86532918669894e-17], 'false': [5.86532918669894e-17, nan]}
{'': [-7.105427357601002e-17, -3.766828119263924e-17], 'false': [-3.766828119263924e-17, nan]}
{'': [-2.842170943040401e-16, 2.921639538487254e-17], 'false': [nan, 2.921639538487254e-17]}
{'': [0.06195105941723603, 0.0374270975619041], 'true': [0.0, 7.745742032268534e-18], 'false': [0.0374270975619041, nan], 'false,true': [0.0, 0.0]}
{'': [1.7763568394002505e-17, 0.0], 'true': [1.7763568394002505e-17, nan], 'false': [nan, 0.0], 'false,false': [-1.8503717077085942e-18, 0.0], 'false,false,true': [nan, -1.8503717077085942e-18]}
{'': [0.06858710562414265, 4.336808689942018e-18], 'false': [nan, 4.336808689942018e-18], 'false,false': [nan, 4.336808689942018e-18]}
{'': [4.4408920985006264e-17, 2.09476042382105e-18], 'false': [nan, 2.09476042382105e-18], 'false,false': [nan, 2.09476042382105e-18], 'false,false,false': [2.09476042382105e-18, nan]}
{'': [1.3322676295501878e-17, 1.0675221390626506e-18], 'true': [1.3322676295501878e-17, nan], 'false': [2.220446049250313e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.0, 5.843279076974508e-18], 'false': [nan, 5.843279076974508e-18], 'false,false': [4.270088556250602e-18, 6.938893903907229e-19], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.03698224852071003, -2.3129646346357427e-18], 'false': [nan, -2.3129646346357427e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.508
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5319045176838226;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4068585879990681;  // std dev = 0.843, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5747177652193504;  // std dev = 0.199, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.83e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4338484092453403;  // std dev = 0.210, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.26345919794216316;  // std dev = 0.396, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4128150651491831;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.32340563096559666;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4276108905290321;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3134416946525028;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, E) )
%   | then return -0.0919266023282378;  // std dev = 0.021, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.24794655877674993;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2753957000150201;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3279762665440546;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 7.997996829657572E-4;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.24980918711999256;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return -0.08524436003458122;  // std dev = 1.67e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.07578961306950474;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.20464029183299148;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2603647748299655;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, G) )
%   | | | then return -0.09823976680308111;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.03894638943533346;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return 0.23321522267926734;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20596203757241083;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I), follows(I, J) )
%   | then return -0.07882793720159052;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.07285293369173701;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.17234874134208217;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1880831619147556;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.24173679573168264;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19273150491291574;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.0535514051744976;  // std dev = 0.829, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return -0.07329062450700971;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06394562656960609;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07429291755395466;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.14975969106917764;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15978738248770297;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1779885357889285;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.20478036948330955;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16045604092038;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.06846583945599327;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.060223125570324006;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06934238255755998;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.13167305876806581;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13949475557445987;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15346276775614243;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.1734529376782056;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14002189480624797;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.06430151809449433;  // std dev = 0.001, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.06422612660642692;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.056903638399141296;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.653', 'seconds']
Refined model CLL: -0.084178


******************************************
Best model found
******************************************
Results 

CLL : -0.086463 

AUC ROC : 0.994193 

AUC PR : 0.364485 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.508 

Total Inference Time : 1.6398556232452393 

Total revision time: 12.716701328277587
Best scored revision CLL: -0.084178


Results 

CLL : -0.086463 

AUC ROC : 0.994193 

AUC PR : 0.364485 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.751391708374022 

Total Inference Time : 1.6398556232452393 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.272
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146066;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7111468298594117;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5713369615143865;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 8.01e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38779963594113775;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4294663026078044;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29891362299884666;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926103;  // std dev = 3.16e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2175081435165629;  // std dev = 1.681, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2329819199397641;  // std dev = 0.014, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310916;  // std dev = 5.58e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1939529436345757;  // std dev = 0.012, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16541516523485;  // std dev = 0.002, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.21e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10537771098841281;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.244', 'seconds']
Parameter learned model CLL:-0.089619 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [7.88e-08, 84, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 109, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 0, 0], 'false,false': [8.01e-09, 97, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.384, 2, 46], 'true,false': [0.0, 116, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.386, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.16e-08, 91, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.681, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 88, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.014, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 96, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.012, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 76, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.002, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.21e-08, 88, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 115, 0]}]
{'': [0.053399786400854646, 7.401486830834377e-17], 'false': [7.401486830834377e-17, nan]}
{'': [0.019223375624757687, -8.148425868808489e-18], 'false': [-8.148425868808489e-18, nan]}
{'': [-2.842170943040401e-16, 6.180623023686439e-17], 'false': [nan, 6.180623023686439e-17]}
{'': [0.06126993477319002, 0.06267278204629997], 'false': [0.06267278204629997, nan], 'false,true': [0.0, -5.204170427930421e-18], 'true': [0.03993055555555569, -1.5313421029312504e-17]}
{'': [0.036933541754610374, 2.4424906541753444e-17], 'true': [0.036933541754610374, nan], 'false': [nan, 2.4424906541753444e-17], 'false,false': [1.0980227716072976e-17, 0.0], 'false,false,true': [nan, 1.0980227716072976e-17]}
{'': [0.05333424083099797, 3.027880976250427e-17], 'false': [nan, 3.027880976250427e-17], 'false,false': [nan, 3.027880976250427e-17]}
{'': [4.004295614752351e-06, 3.23815048849004e-17], 'false': [nan, 3.23815048849004e-17], 'false,false': [nan, 3.23815048849004e-17], 'false,false,false': [3.23815048849004e-17, nan]}
{'': [3.056377505705754e-06, -5.551115123125783e-18], 'true': [3.056377505705754e-06, nan], 'false': [-5.843279076974508e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [2.3786209255582946e-06, 2.1118372751022e-17], 'false': [nan, 2.1118372751022e-17], 'false,false': [2.0185873175002847e-17, 0.0], 'false,false,true': [nan, 2.0185873175002847e-17]}
{'': [0.03695408958569886, -1.7860109526578604e-17], 'false': [nan, -1.7860109526578604e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 10.651
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5681179703118198;  // std dev = 1.280, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.7302664973147039;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7245859262074671;  // std dev = 0.051, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.1254446385283913;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.5656902479381279;  // std dev = 0.095, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.2598474963411109;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5656082915620829;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.11231637819360625;  // std dev = 6.99e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4309141977554765;  // std dev = 0.186, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783624;  // std dev = 4.83e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.2137643800134787;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3331298705953744;  // std dev = 0.155, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( recursion_accounttype(D, B), follows(F, A) )
%   | | | then return 0.10993098405986365;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3194234774597602;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.1630410056630634;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.19685733438891423;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.255190552828669;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3247903963784302;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.015061863740216706;  // std dev = 0.446, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.24966511096551902;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.08785706096537996;  // std dev = 1.270, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839683;  // std dev = 4.93e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.0851847513883969;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(D, G) )
%   | | | then return 0.21795007601744326;  // std dev = 0.065, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2541254576581593;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.30097198609598286;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.05790068198787934;  // std dev = 0.858, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.262334492394141;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21446225644770953;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07877675473109168;  // std dev = 4.17e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.20119032672551412;  // std dev = 0.133, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.17805112021368574;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2471148393260253;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.17635190587953864;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17590741518239617;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.04883177333291697;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.1511168640694442;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17167638424259118;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.0066025775286737256;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.1890958790394511;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1480208567357844;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19160445455281086;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20434281979183427;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420265;  // std dev = 4.47e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1384739419328169;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.13176874273987113;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.17131628913029281;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14157726087140654;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.20414484752132395;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13885716324873038;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.17537427010676224;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.182', 'seconds']
Refined model CLL: -0.08821


******************************************
Best model found
******************************************
Results 

CLL : -0.085583 

AUC ROC : 0.99613 

AUC PR : 0.487925 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.651 

Total Inference Time : 2.2201650142669678 

Total revision time: 20.234480283737184
Best scored revision CLL: -0.08821


Results 

CLL : -0.085583 

AUC ROC : 0.99613 

AUC PR : 0.487925 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.26917066383362 

Total Inference Time : 2.2201650142669678 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.829
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8449910403626706;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6836598652508763;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839127;  // std dev = 5.16e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5542661809076157;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936063;  // std dev = 6.72e-09, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.36124560831582714;  // std dev = 2.158, 73.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=68 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42973875900075786;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3297396200304364;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926075;  // std dev = 6.99e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23443789432975257;  // std dev = 1.697, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1904649163844286;  // std dev = 1.697, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.16e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14642901312938159;  // std dev = 1.947, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 7.88e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13644327141421514;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.23e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1300951090597624;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.983', 'seconds']
Parameter learned model CLL:-0.090132 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 164, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.698, 3, 75], 'false,true': [5.16e-08, 149, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [6.72e-09, 157, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.158, 5, 68], 'true,false': [0.0, 118, 0], 'false,true,true': [7.45e-09, 0, 7], 'false,true,false': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.993, 1, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.99e-08, 135, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.697, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 151, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.697, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.16e-08, 149, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.947, 4, 75], 'true,false': [0.0, 0, 0], 'false,true': [7.88e-08, 147, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.23e-08, 135, 0], 'false,false,false': [9.31e-10, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 146, 0]}]
{'': [0.012984764542935068, -1.5705594006892458e-16], 'false': [-1.5705594006892458e-16, nan]}
{'': [0.03698224852071054, 1.7882786973828024e-17], 'false': [1.7882786973828024e-17, nan]}
{'': [0.01298476454293605, 4.5257499093000014e-17], 'false': [nan, 4.5257499093000014e-17]}
{'': [0.07496787448480192, 0.06569148478052991], 'true': [0.06380183899418235, -2.069907334046902e-17], 'false': [0.06569148478052991, nan], 'false,true': [6.344131569286608e-17, 0.0]}
{'': [0.012967254282045418, 3.881898687500547e-17], 'true': [0.012967254282045418, nan], 'false': [nan, 3.881898687500547e-17], 'false,false': [3.6185046728523623e-17, 0.0], 'false,false,true': [nan, 3.6185046728523623e-17]}
{'': [0.03690433958781936, 2.9409881447024017e-17], 'false': [nan, 2.9409881447024017e-17], 'false,false': [nan, 2.9409881447024017e-17]}
{'': [0.03691164127780793, 4.470696743457006e-17], 'false': [nan, 4.470696743457006e-17], 'false,false': [nan, 4.470696743457006e-17], 'false,false,false': [4.470696743457006e-17, nan]}
{'': [0.04798280184868515, 5.097250364631222e-17], 'true': [0.04798280184868515, nan], 'false': [4.229421046191072e-17, 1.1564823173178713e-18], 'false,false': [nan, 1.1564823173178713e-18]}
{'': [0.03692295142881569, 2.992090420975599e-17], 'false': [nan, 2.992090420975599e-17], 'false,false': [2.878355989768924e-17, 5.782411586589357e-19], 'false,false,true': [nan, 2.878355989768924e-17]}
{'': [0.025264061507361813, -1.0645974208734377e-17], 'false': [nan, -1.0645974208734377e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 19.838
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.7781489350995119;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7312067980474173;  // std dev = 0.112, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( tweets(A, F) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5018526675222027;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.12544463852839133;  // std dev = 4.21e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.5304871861362606;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.5535946859215135;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.34322436942714774;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5524672081239319;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5754043568131877;  // std dev = 0.180, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.11231637819360617;  // std dev = 9.88e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.41183164640258335;  // std dev = 0.995, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2902640681291551;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.43326617651799704;  // std dev = 0.185, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.417944529724272;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3023098886556894;  // std dev = 0.978, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.3297465173696863;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.32484502618684263;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.35270258956051664;  // std dev = 0.178, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926076;  // std dev = 6.83e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(D, E), follows(G, D) )
%   | | | then return 0.27735826127549923;  // std dev = 0.009, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.256793331750398;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.247816435946327;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.25464188869398047;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return -0.10670950104815742;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.31570664711954044;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.25160109276639375;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.30071238316991195;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.35e-09, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(E, D) )
%   | | | then return 0.22467724109926215;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21034320990786212;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.10987424481961798;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2294019814222762;  // std dev = 0.174, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.06279202060968551;  // std dev = 0.925, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.20302949256762856;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23016382135811114;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2581855863928555;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109155;  // std dev = 6.11e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.18599099878525016;  // std dev = 0.028, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.21190818449177762;  // std dev = 0.146, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.16520507093700498;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17668190151831706;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.19358953516130026;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18320560166119385;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.14320091240094004;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19921366093368406;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333678;  // std dev = 7.09e-09, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.12006322892277056;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.15385459229165196;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21686687712827052;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1513973604194954;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1691048187103045;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.3251762878662697;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.17330567075762968;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.35e-09, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.11289196399087824;  // std dev = 0.982, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.19542721880524236;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1338578441293439;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15287439205609338;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16377917315813936;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1998262724747011;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.15321943459205256;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1319164770889005;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.555', 'seconds']
Refined model CLL: -0.089454


******************************************
Best model found
******************************************
Results 

CLL : -0.086338 

AUC ROC : 0.994949 

AUC PR : 0.398848 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.838 

Total Inference Time : 6.253689289093018 

Total revision time: 36.64795464706421
Best scored revision CLL: -0.089454


Results 

CLL : -0.086338 

AUC ROC : 0.994949 

AUC PR : 0.398848 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.682645027160646 

Total Inference Time : 6.253689289093018 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.551
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379727;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048852;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6617496785295878;  // std dev = 2.558, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839172;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5405124475882651;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42368665425501434;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44473928583396244;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3145255832978821;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926058;  // std dev = 4.21e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25695007908361284;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1897352447037197;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 7.45e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15804779371165673;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10897926433765236;  // std dev = 0.241, 107.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 5.96e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11005106345957531;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.144', 'seconds']
Parameter learned model CLL:-0.09107 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 224, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.558, 7, 100], 'false,true': [0.0, 213, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 202, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.0, 161, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.706, 3, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.21e-08, 169, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 184, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 206, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.961, 4, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.08e-07, 185, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.241, 7, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 184, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 183, 0]}]
{'': [0.036982248520711906, -2.339398516174437e-16], 'false': [-2.339398516174437e-16, nan]}
{'': [0.061140710979124505, -6.046285016737941e-17], 'false': [-6.046285016737941e-17, nan]}
{'': [0.03698224852071116, -4.3969228698026004e-17], 'false': [nan, -4.3969228698026004e-17]}
{'': [0.07204362946497132, 0.060174093081120074], 'true': [0.020609418282549318, -7.723290606088045e-17], 'false': [0.060174093081120074, nan], 'false,true': [-6.344131569286608e-17, -3.0839528461809902e-18]}
{'': [0.02826055229122837, 1.3877787807814457e-17], 'true': [0.02826055229122837, nan], 'false': [nan, 1.3877787807814457e-17], 'false,false': [1.0510987215386097e-17, 0.0], 'false,false,true': [nan, 1.0510987215386097e-17]}
{'': [0.01921321073284368, 2.896233977283017e-17], 'false': [nan, 2.896233977283017e-17], 'false,false': [nan, 2.896233977283017e-17]}
{'': [0.036964000797077574, 2.6947160791872732e-17], 'false': [nan, 2.6947160791872732e-17], 'false,false': [nan, 2.6947160791872732e-17], 'false,false,false': [2.6947160791872732e-17, nan]}
{'': [0.03696581928364195, 6.832141690000964e-17], 'true': [0.03696581928364195, nan], 'false': [6.301265815440077e-17, -6.938893903907229e-19], 'false,false': [nan, -6.938893903907229e-19]}
{'': [0.058174981527333525, 2.013357816677745e-17], 'false': [nan, 2.013357816677745e-17], 'false,false': [1.9308226515220113e-17, -7.709882115452476e-19], 'false,false,true': [nan, 1.9308226515220113e-17]}
{'': [0.045435269771412115, -5.4601132358614255e-18], 'false': [nan, -5.4601132358614255e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 22.785
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.3194734122109543;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7341191199111905;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7273224273576779;  // std dev = 0.082, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.558091941845814;  // std dev = 0.094, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.4562281064537148;  // std dev = 1.494, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return 0.05407375289627561;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.5636003363537939;  // std dev = 0.146, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360643;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.4096635507539562;  // std dev = 0.841, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.4395128673944944;  // std dev = 0.147, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4402731468991721;  // std dev = 0.192, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.41551250319132915;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3289249014929342;  // std dev = 0.187, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.30352036531474963;  // std dev = 0.846, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.11153237141393005;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3332535946156514;  // std dev = 0.113, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926061;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.09269127618926089;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.1894448492742857;  // std dev = 1.649, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return 0.2752839926213498;  // std dev = 0.160, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.14118108602552837;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.27720174154402866;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3232210188535449;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24990253396252995;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.269413858589137;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 4.93e-09, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.18996505997833518;  // std dev = 1.252, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return -0.0879981120092942;  // std dev = 0.848, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A), tweets(D, G) )
%   | | | then return 0.22540062140719233;  // std dev = 0.138, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2087680142672376;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.10173477224917711;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07877675473109155;  // std dev = 5.96e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return -0.07877675473109176;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.07877675473109177;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.1947060876974296;  // std dev = 0.107, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.12033059675089122;  // std dev = 0.915, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return -0.1598103620015732;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19598681981685578;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, A) )
%   | | | then return 0.24280399234121305;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2069292881729287;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.1934575585847714;  // std dev = 0.083, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17902051208546976;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333671;  // std dev = 7.68e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, A) )
%   | | | then return 0.1631316915559052;  // std dev = 0.060, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.0843571709915318;  // std dev = 1.304, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.20244338940685705;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1703126095637196;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.1638520448237573;  // std dev = 0.841, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10379317702892049;  // std dev = 0.957, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.1536076225499623;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420262;  // std dev = 5.02e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.0684269778442027;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.12186428036364813;  // std dev = 0.996, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return -0.00887278768633848;  // std dev = 0.871, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18030785130659238;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15032286299290903;  // std dev = 0.096, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.15764848222363895;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1469665185451381;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12145633665995048;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.10916941075413666;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.113', 'seconds']
Refined model CLL: -0.08946


******************************************
Best model found
******************************************
Results 

CLL : -0.084668 

AUC ROC : 0.995854 

AUC PR : 0.460119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.785 

Total Inference Time : 6.157851934432983 

Total revision time: 43.1540251121521
Best scored revision CLL: -0.08946


Results 

CLL : -0.084668 

AUC ROC : 0.995854 

AUC PR : 0.460119 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 43.188715492248534 

Total Inference Time : 6.157851934432983 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.341
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7984474425621968;  // std dev = 2.743, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7234897046759542;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5383020118749113;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41863825183206327;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4353049184987303;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30545720684826244;  // std dev = 1.972, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.19e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21920319783779454;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2227868668660975;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.32e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15606445362833268;  // std dev = 2.153, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.28e-07, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13214631840221427;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.91e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.136817465697758;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202622;  // std dev = 2.95e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.591', 'seconds']
Parameter learned model CLL:-0.092712 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.743, 8, 126], 'false,true': [0.0, 228, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 253, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 213, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 223, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.972, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.19e-08, 243, 0], 'false,false,false': [1.32e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 242, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.32e-08, 245, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.153, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.91e-08, 211, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.95e-09, 256, 0]}]
{'': [0.05613722432613483, -2.1814908554038162e-16], 'false': [-2.1814908554038162e-16, nan]}
{'': [0.007812015624034172, -7.898819938044592e-17], 'false': [-7.898819938044592e-17, nan]}
{'': [0.029822485207099174, -5.837792429953875e-17], 'false': [nan, -5.837792429953875e-17]}
{'': [0.06729339502411288, 0.06670547605377611], 'true': [0.01638888888888914, -7.965725737220854e-17], 'false': [0.06670547605377611, nan], 'false,true': [0.0, 0.0]}
{'': [0.029920080721947538, 5.124106267500723e-17], 'true': [0.029920080721947538, nan], 'false': [nan, 5.124106267500723e-17], 'false,false': [3.4723024638482264e-17, 1.6326809185664067e-18], 'false,false,true': [nan, 3.4723024638482264e-17]}
{'': [0.04984128897564469, 3.303142883182284e-17], 'false': [nan, 3.303142883182284e-17], 'false,false': [nan, 3.303142883182284e-17]}
{'': [0.007809605458473982, 1.6313481178165567e-17], 'false': [nan, 1.6313481178165567e-17], 'false,false': [nan, 1.6313481178165567e-17], 'false,false,false': [1.6313481178165567e-17, nan]}
{'': [0.03538457899364195, 6.030841121420603e-17], 'true': [0.03538457899364195, nan], 'false': [7.270487063916955e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03670053633040165, 1.7529837230923523e-17], 'false': [nan, 1.7529837230923523e-17], 'false,false': [2.2625398132171436e-17, -2.44902137784961e-18], 'false,false,true': [nan, 2.2625398132171436e-17]}
{'': [0.015376943782285782, 8.673617379884035e-18], 'false': [nan, 8.673617379884035e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 35.626
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6706489350995123;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.6463026805036372;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else return 0.7391065042220474;  // std dev = 0.088, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.38614007887762103;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6083623010998431;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.12544463852839194;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.5592374024124026;  // std dev = 0.056, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.4668156426629467;  // std dev = 1.332, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.6023169488970623;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5753290500596706;  // std dev = 0.114, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360692;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.36400130853367646;  // std dev = 1.933, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | | | else return 0.43522565680267705;  // std dev = 0.153, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2578224794977943;  // std dev = 0.843, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3108379558674472;  // std dev = 0.889, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4538605163926688;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.2873407234865277;  // std dev = 1.373, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.33606405204656803;  // std dev = 0.074, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(E, F), follows(F, A) )
%   | | | then return -0.06663321792130814;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3418785245828968;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.3479050341024503;  // std dev = 0.155, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926044;  // std dev = 1.21e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.25321794799745845;  // std dev = 0.995, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.19849124180262417;  // std dev = 0.959, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.28131526064467716;  // std dev = 0.128, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2668086176244344;  // std dev = 0.119, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.16277210628478916;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(H, G) )
%   | | | then return -0.08518475138839678;  // std dev = 6.83e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839678;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.227940055179364;  // std dev = 0.117, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.21712714426364257;  // std dev = 0.095, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.24272797482275404;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.22901962707429943;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20094806145809085;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.0035247743472715254;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1399199858865856;  // std dev = 0.975, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.07877675473109143;  // std dev = 4.37e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.17028870192024165;  // std dev = 0.993, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return -0.024227226715122736;  // std dev = 1.228, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.19468973540304352;  // std dev = 0.091, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17567842259174588;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19618056609428303;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1822552344281875;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20092724225530395;  // std dev = 1.29e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22330635943541666;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333661;  // std dev = 8.84e-09, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.16781284383195177;  // std dev = 0.140, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return -0.09009910417204228;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return -0.16937108878595378;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1558260332271111;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.08420896393844315;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.20697542412481265;  // std dev = 1.122, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.05948104049148511;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.16559539820869024;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.14526816102806855;  // std dev = 0.100, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.15552484796899463;  // std dev = 0.116, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(F, A), recursion_accounttype(D, B) )
%   | | | then return -0.19106035823201128;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11148384323343523;  // std dev = 1.020, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return -0.03765973248587921;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.851', 'seconds']
Refined model CLL: -0.091086


******************************************
Best model found
******************************************
Results 

CLL : -0.085153 

AUC ROC : 0.996183 

AUC PR : 0.480727 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.626 

Total Inference Time : 8.305119037628174 

Total revision time: 61.06421350669861
Best scored revision CLL: -0.091086


Results 

CLL : -0.085153 

AUC ROC : 0.996183 

AUC PR : 0.480727 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 61.09890388679504 

Total Inference Time : 8.305119037628174 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.333
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7244327301873255;  // std dev = 0.087, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02855158366086578;  // std dev = 1.789, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05990944051699805;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.059877364388279036;  // std dev = 1.833, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5755237597912206;  // std dev = 0.226, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8700906503759146;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5934404051584964;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5541414759165694;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04624559158200972;  // std dev = 1.799, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return 0.15210124620260915;  // std dev = 1.360, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5202024865730952;  // std dev = 0.655, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.12126865218086987;  // std dev = 0.027, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4114182663477103;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13963781606267778;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12579911865813717;  // std dev = 1.406, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.28657823544855376;  // std dev = 1.087, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.29254533638909247;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4022197676541136;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.616370843157718;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07948258642375668;  // std dev = 0.694, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else return 0.058917753689269;  // std dev = 0.340, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05489027308047973;  // std dev = 1.429, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2614743765441251;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5596847906348561;  // std dev = 0.307, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1382366692924115;  // std dev = 0.136, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.13805072693981085;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26736650029956693;  // std dev = 1.049, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.09233454792596923;  // std dev = 0.797, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09739127370224103;  // std dev = 0.816, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18785052764319202;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2096087792832324;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.004932380324879369;  // std dev = 0.912, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return -0.1260366460222356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0365669448091001;  // std dev = 0.826, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | | else return 0.037970684255165164;  // std dev = 1.017, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15018297742076442;  // std dev = 0.210, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.25906403637686887;  // std dev = 0.303, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0967450130304587;  // std dev = 0.049, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3916725470922706;  // std dev = 0.173, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08562991261536206;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04814980756586602;  // std dev = 0.971, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.09024501014945349;  // std dev = 1.451, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.1467316567901994;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.09149664004014156;  // std dev = 0.039, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0847795230904125;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.002818371318315294;  // std dev = 0.489, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14671882914288292;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.008044220194119317;  // std dev = 1.143, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.658', 'seconds']
Parameter learned model CLL:-0.119889 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false,true': [0.949, 9, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 1], 'false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.087, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.789, 37, 5], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.833, 21, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.226, 0, 16], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.096, 0, 3], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.799, 47, 5], 'false,false,false,false': [1.36, 8, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.655, 0, 22], 'true,false': [0.027, 43, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [1.86e-09, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.406, 9, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.087, 1, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.007, 0, 3], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.018, 0, 4], 'false,false,true,false': [0.694, 24, 1], 'false,false,false': [0.34, 12, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.429, 30, 20], 'false,true': [0.06, 0, 3], 'false,false,true': [0.307, 0, 8], 'false,false,false,true': [0.136, 15, 0], 'false,false,false,false': [0.106, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.049, 1, 27], 'true,false': [0.797, 53, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.816, 19, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.052, 0, 17], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.912, 18, 5], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.826, 24, 3], 'false,false,false,false': [1.017, 10, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.21, 1, 18], 'false,true,true,true': [0.303, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 44, 0], 'false,false,true,true': [0.173, 0, 2], 'false,false,true,false': [0.01, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.971, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.451, 2, 21], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.039, 31, 0], 'true,false,false,true': [5.27e-09, 9, 0], 'true,false,false,false': [0.489, 7, 2], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.143, 21, 6]}]
{'': [0.22684310018903703, 0.19204389574759959], 'true': [1.6148698540002277e-16, 0.04074241738343147], 'false': [-2.5376526277146434e-16, 2.7755575615628915e-18], 'true,false': [3.489272363107635e-17, 0.13888888888888892], 'true,false,false': [0.09000000000000005, 0.25], 'false,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.0004181121914430048, 0.09851090530616813], 'false': [0.07617085433063793, 0.11915568240085987], 'false,false': [0.07100591715976327, 0.13499588641127228], 'false,false,false': [0.0, 0.12445762883101658], 'false,true': [nan, 0.07617085433063793], 'false,true,false': [0.07617085433063793, nan], 'false,false,true': [nan, 0.07100591715976327]}
{'': [0.007455513031707994, 0.10005010572380323], 'false': [nan, 0.10005010572380321], 'false,false': [0.0026061848542608956, 0.08547804550463065], 'false,false,false': [0.06226669176219447, 0.1540956355904553], 'true': [0.0032004144458730455, 0.024762832661197387], 'true,false': [0.0, 0.0], 'true,true': [0.0032004144458730455, nan], 'false,false,true': [0.0030888116791240408, 0.0]}
{'': [0.09873879369718291, 0.1154481188174744], 'false': [0.07497847060777395, 0.14129950444636064], 'false,false': [nan, 0.14129950444636064], 'false,false,false': [nan, 0.14129950444636064], 'true': [0.01948141733199137, 1.715803637727748e-05], 'false,true': [0.0, 0.0]}
{'': [0.0621761217993075, 0.08842932862779998], 'false': [0.002266424441154394, 0.08929925232124665], 'false,false': [0.07421232124055495, 0.11548463478618454], 'false,false,true': [8.277774416570738e-05, 0.019285186757177206], 'true': [0.0621761217993075, nan], 'false,true': [1.4779036546082777e-05, 0.0]}
{'': [0.04083760864885346, 0.07983066130783595], 'false': [0.0012032410125049446, 0.08100970706110433], 'false,false': [0.011765733707075399, 0.000929402398753245], 'true': [nan, 0.04083760864885348], 'true,false': [nan, 0.04083760864885346], 'false,false,false': [0.0012342414303107229, 0.0006604105758488426]}
{'': [0.04984581272720284, 0.03167947109251828], 'true': [0.0393115994487209, 0.01156078572908361], 'false': [nan, 0.031679471092518285], 'false,false': [nan, 0.03167947109251828], 'false,false,false': [nan, 0.03167947109251828]}
{'': [0.0001772546696124613, 0.03746507560090726], 'false': [nan, 0.03746507560090723], 'false,false': [0.03077313881902153, 0.04214257868180852], 'false,false,false': [0.02526369410185876, 0.06895294783152545], 'false,false,true': [0.03613653668592358, -3.96508223080413e-18], 'true': [0.00016138021963758444, 0.0], 'true,false': [0.0, nan]}
{'': [0.043987607975420145, 0.032683655864715236], 'false': [0.016839253756578777, 0.06835634645741591], 'false,false': [0.05079441321832239, 0.07859833150463294], 'false,false,false': [nan, 0.07859833150463294], 'false,false,true': [0.01500690582750297, 1.8662448091202877e-05], 'false,true': [0.013115876599627374, 5.512769413080916e-05], 'false,true,true': [0.013115876599627374, nan]}
{'': [0.03906723922386082, 0.04748716937132115], 'false': [0.0, 0.04839053908496488], 'false,false': [nan, 0.04839053908496485], 'true': [0.08782049573755964, 0.006065862860241557], 'true,true': [0.09150583060890193, 0.0], 'true,false': [4.986685810891602e-05, 0.014987414926005456], 'true,false,false': [3.0839528461809902e-18, 0.026616014652106515]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 5.357
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.6528067455442876;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.04974543932757249;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.038096321098853005;  // std dev = 1.918, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5697126861980369;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(E, A) )
%   | | then return 0.8261771143201839;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5998192826901778;  // std dev = 0.126, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.548334745772167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11577250527892871;  // std dev = 0.086, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( tweets(A, J) )
%   | | | then return -4.354089975543588E-4;  // std dev = 1.185, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.17628120532680447;  // std dev = 1.342, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.4480034553724157;  // std dev = 0.238, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.3022610221849331;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.5088620764716141;  // std dev = 0.150, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10743826068426685;  // std dev = 0.078, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.43028992464732474;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10128130724155661;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.6100663560348665;  // std dev = 0.222, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15091102722633784;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.12414285295812544;  // std dev = 0.674, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.15881958786554326;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.32743669096123157;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38675711201003765;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3682505757475075;  // std dev = 0.235, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32675549223659905;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.1758183835895588;  // std dev = 1.030, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.07198988628416747;  // std dev = 0.764, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0044159422658669205;  // std dev = 1.016, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.08413842464772302;  // std dev = 0.851, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2749656012020804;  // std dev = 0.158, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, E) )
%   | | then return -0.04342349075308279;  // std dev = 0.113, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else return -0.09205768476620647;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2725193378205672;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5341166036341546;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.1256869020526461;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1432644208173799;  // std dev = 0.102, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.21919524119767778;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2680204959483588;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3803092344378035;  // std dev = 0.312, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08712725080276008;  // std dev = 0.064, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2052086568441597;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return -0.0824901846718373;  // std dev = 0.048, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.02468941957159122;  // std dev = 1.151, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.05187815717970842;  // std dev = 0.563, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.19186123414568487;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15900555541090755;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22659227260382575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.035935601430188785;  // std dev = 0.098, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else return -0.07847040628150964;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return -0.002663955656604362;  // std dev = 0.936, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.09332972058534542;  // std dev = 0.526, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.07819767875421132;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.04876004820732126;  // std dev = 0.620, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16399501820550638;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.14011853110893885;  // std dev = 1.116, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.01718144267616719;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.02823193042531555;  // std dev = 0.416, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.07696866429709306;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1175157811865531;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.09371440472009832;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05798470070484049;  // std dev = 0.736, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.04455808986988631;  // std dev = 0.629, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1646775149130601;  // std dev = 0.160, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06830830243665582;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.13529004748976703;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.06862052719967776;  // std dev = 0.002, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.02888098033099603;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1573670587503373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.05202084782854385;  // std dev = 0.452, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.07067437167524979;  // std dev = 0.702, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.12231525714269413;  // std dev = 0.668, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '38.731', 'seconds']
Refined model CLL: -0.105683


******************************************
Best model found
******************************************
Results 

CLL : -0.103583 

AUC ROC : 0.992635 

AUC PR : 0.348167 

Precision : 0.34072 

Recall : 0.97619 

F1 : 0.505133 

Total Learning Time : 5.357 

Total Inference Time : 9.826903104782104 

Total revision time: 19.850145282745363
Best scored revision CLL: -0.105683


Results 

CLL : -0.103583 

AUC ROC : 0.992635 

AUC PR : 0.348167 

Precision : 0.34072 

Recall : 0.97619 

F1 : 0.505133 

Total Learning Time : 19.87676042556763 

Total Inference Time : 9.826903104782104 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.823
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7218225628313412;  // std dev = 0.088, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03242685744875608;  // std dev = 2.263, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014682366453630039;  // std dev = 1.228, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05987736438827881;  // std dev = 2.592, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.566592142788544;  // std dev = 0.234, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.871361991457077;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3021262322605522;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.42025981595116396;  // std dev = 0.740, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5547862750855092;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04347148710943429;  // std dev = 2.660, 112.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=11 */
%   | | | else return 0.058519346712277084;  // std dev = 2.100, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4714948631519904;  // std dev = 1.674, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.12075219563300049;  // std dev = 0.083, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4516150650971854;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13020353553581007;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10333863341485443;  // std dev = 1.943, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31575213744413383;  // std dev = 0.914, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31794169710288206;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.45717364937788096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6260368033841436;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08831995919997496;  // std dev = 1.004, 76.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=2 */
%   | | else return -2.04502639867027E-4;  // std dev = 0.304, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03573415387848538;  // std dev = 1.989, 104.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2610052402996678;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47027231040771006;  // std dev = 1.428, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12608707723808138;  // std dev = 0.140, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11859033869547753;  // std dev = 0.063, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31634517641193266;  // std dev = 0.808, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.0838108151239435;  // std dev = 1.027, 89.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006272271728443841;  // std dev = 1.209, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1878522540209259;  // std dev = 0.045, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.23036519960175195;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03314086663001792;  // std dev = 1.357, 54.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | | else return -0.10965760477193161;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03144041473927274;  // std dev = 1.193, 52.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=7 */
%   | | | else return 0.043244211736360096;  // std dev = 1.559, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09653761888670816;  // std dev = 0.295, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2641941233544153;  // std dev = 0.511, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09454815040083082;  // std dev = 0.073, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38875852614380424;  // std dev = 0.288, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08701965851461635;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023630203604126855;  // std dev = 1.442, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15721441303238043;  // std dev = 1.128, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.09224830985550937;  // std dev = 0.725, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08450818825259289;  // std dev = 0.024, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08982365656556503;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.024133917488968107;  // std dev = 0.555, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.22570324471580805;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02329395558850896;  // std dev = 1.623, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.567', 'seconds']
Parameter learned model CLL:-0.112481 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.06e-07, 0, 46], 'true,false,true': [5.96e-08, 57, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 2], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.088, 0, 38], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.263, 63, 8], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.228, 14, 2], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [2.592, 42, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.234, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.74, 1, 4], 'false,false,true,false': [3.65e-08, 0, 7], 'false,false,false,true': [2.66, 101, 11], 'false,false,false,false': [2.1, 27, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.674, 2, 46], 'true,false': [0.083, 93, 0], 'false,true,true': [0.098, 0, 8], 'false,true,false': [0.003, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.943, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.914, 1, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.042, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.031, 0, 9], 'false,false,true,false': [1.004, 74, 2], 'false,false,false': [0.304, 39, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.989, 68, 36], 'false,true': [0.097, 0, 10], 'false,false,true': [1.428, 2, 16], 'false,false,false,true': [0.14, 35, 0], 'false,false,false,false': [0.063, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.808, 0, 49], 'true,false': [1.027, 86, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.209, 26, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.045, 0, 37], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.357, 46, 8], 'false,false,true,false': [7.45e-09, 13, 0], 'false,false,false,true': [1.193, 45, 7], 'false,false,false,false': [1.559, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.295, 3, 32], 'false,true,true,true': [0.511, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.073, 70, 0], 'false,false,true,true': [0.288, 0, 5], 'false,false,true,false': [0.021, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.442, 21, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.128, 1, 38], 'true,true,false': [0.725, 1, 8], 'true,false,true': [0.024, 54, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.555, 9, 2], 'false,true': [0.036, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.623, 36, 12]}]
{'': [0.23437500000000056, 0.19915417147251005], 'true': [9.267948727305654e-16, 0.023795359904818594], 'false': [-2.5376526277146434e-16, 3.900783600034334e-17], 'true,false': [6.232831015439475e-17, 0.07360000000000004], 'true,false,false': [0.041587901701323295, 0.25], 'false,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.00020418481957802732, 0.10216386791635061], 'false': [0.07212434748341398, 0.1274423176007627], 'false,false': [0.09426564715644012, 0.13491075828813592], 'false,false,false': [0.22222222222222232, 0.1244576288310166], 'false,false,true': [nan, 0.09426564715644012], 'false,true': [nan, 0.07212434748341398], 'false,true,false': [0.07212434748341398, nan]}
{'': [0.030809381861972365, 0.09648994891298472], 'false': [nan, 0.0964899489129848], 'false,false': [0.050083856904733014, 0.08003346769255795], 'false,false,false': [0.06318521507267569, 0.1260224435553063], 'false,false,true': [0.10964445845047799, 1.9032394707859825e-16], 'true': [0.001881609914990534, 0.22742216970692486], 'true,false': [0.0, 0.22222222222222224], 'true,true': [0.001881609914990534, nan]}
{'': [0.09868437886100803, 0.11261534927376583], 'false': [0.08012719545744129, 0.13984350775579965], 'false,false': [nan, 0.13984350775579965], 'false,false,false': [nan, 0.13984350775579965], 'true': [0.058391499349880895, 7.420891398666507e-05], 'false,true': [0.009578417612272877, 9.598467315430348e-06]}
{'': [0.025299011397897683, 0.07446699229980139], 'false': [0.0017620083328719288, 0.0716940837993007], 'false,false': [0.06017071259695605, 0.09243396664758574], 'false,false,true': [0.00010452781162569498, 0.013251457447421488], 'true': [0.025299011397897683, nan], 'false,true': [0.00017588766304019732, 0.0]}
{'': [0.038041462871536307, 0.0878385006711427], 'false': [0.0009363421130338167, 0.09273035034686802], 'false,false': [0.11325826875392354, 0.00043765201137916217], 'true': [nan, 0.0380414628715363], 'true,false': [nan, 0.038041462871536307], 'false,false,false': [0.0005639972396296576, 0.00019195095047662227]}
{'': [0.04903662672528629, 0.04060929937436435], 'true': [0.013320003169404262, 0.011844921717692369], 'false': [nan, 0.04060929937436442], 'false,false': [nan, 0.04060929937436435], 'false,false,false': [nan, 0.04060929937436435]}
{'': [0.00010021676624319555, 0.03935482847764954], 'false': [nan, 0.03935482847764953], 'false,false': [0.028383303861237063, 0.04720748466547401], 'false,false,false': [0.027389519630562624, 0.07595875810370671], 'false,false,true': [0.03408031331109638, 4.270088556250602e-18], 'true': [5.536347112566597e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.08700609347274786, 0.03796830781756493], 'false': [0.023965750626421492, 0.061760904521225596], 'false,false': [0.04504252526491737, 0.07429672309415106], 'false,false,false': [nan, 0.07429672309415106], 'false,false,true': [0.01662528567670416, 2.6512398885878558e-05], 'false,true': [0.014496329735749016, 7.655886947012564e-05], 'false,true,true': [0.014496329735749016, nan]}
{'': [0.029487987097762583, 0.05425783250977398], 'false': [0.0006531304286149717, 0.05485258095015494], 'false,false': [nan, 0.05485258095015486], 'true': [0.03811282507191715, 0.004640241572658765], 'true,true': [0.03264937726157031, 0.05835853250180488], 'true,false': [1.0334582010833263e-05, 0.016448115203425102], 'true,false,false': [0.0, 0.02796385018724932]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7483828540191295;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.772403825522569;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109543;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.5728476317982784;  // std dev = 0.941, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.044410650537154914;  // std dev = 2.005, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08578487415644485;  // std dev = 2.070, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.18179828901318892;  // std dev = 1.348, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5633979901642502;  // std dev = 0.016, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(E, A) )
%   | | then return 0.7471159191466759;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5912181508057444;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5883597778774123;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7104232231162221;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12005645127142607;  // std dev = 0.123, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08310601024928853;  // std dev = 2.265, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.00378880115760796;  // std dev = 1.059, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.4157794238531787;  // std dev = 0.008, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.4563823204728056;  // std dev = 0.142, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.5228523330182938;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6295044205154289;  // std dev = 0.218, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1179385349265235;  // std dev = 0.020, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.44270220590055825;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10831074918542205;  // std dev = 0.008, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.10411624304254814;  // std dev = 0.370, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return 0.014482942330901595;  // std dev = 0.361, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3183287229042795;  // std dev = 0.002, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3416964736312173;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.38179816986454146;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.22455795007812285;  // std dev = 0.286, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.4598344471582585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4564818698770428;  // std dev = 0.168, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08901532293219122;  // std dev = 0.876, 71.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.08072353339410505;  // std dev = 0.532, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return 0.014563359693537593;  // std dev = 1.934, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25684194553951195;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.30538986008012625;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08857441916870036;  // std dev = 0.045, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.09066090621585073;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2845509004478996;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27345723282802187;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.41402394662645886;  // std dev = 0.265, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6027382466722324;  // std dev = 0.348, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12997246509454208;  // std dev = 0.026, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21090693813022054;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.20556057575712383;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2307639177782977;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07643990822455048;  // std dev = 0.001, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return -0.0250903272065582;  // std dev = 0.656, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.07081874488927023;  // std dev = 0.585, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.13795833119749215;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.053232215304842956;  // std dev = 1.501, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return -0.0322511213861862;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.17755448966859755;  // std dev = 0.006, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.18522125572491413;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2430263795502985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.0467946184402164;  // std dev = 0.093, 83.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=8 */
%   | | else return -0.08414748305212419;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06959769035629201;  // std dev = 0.000520, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.044448286889612124;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.00860130789611238;  // std dev = 0.962, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.08012059092450477;  // std dev = 1.430, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15181554603766154;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.051618833969498776;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.03376938862121397;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return -0.015906034392723978;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.13775517843467586;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.026541816760760305;  // std dev = 0.107, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | else if ( tweets(A, I) )
%   | | then return 0.01715973195310518;  // std dev = 0.213, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08537656674111128;  // std dev = 1.124, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.0035682014322473143;  // std dev = 0.827, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.16553455722167937;  // std dev = 0.046, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.0939325905480409;  // std dev = 0.252, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.07409913762941613;  // std dev = 0.009, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.03530502821060127;  // std dev = 0.108, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.22530264835877944;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35383686834333117;  // std dev = 0.113, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11556332908973269;  // std dev = 0.014, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14272243021653805;  // std dev = 0.998, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 6.746871508092303E-4;  // std dev = 0.830, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.229', 'seconds']
Refined model CLL: -0.115619


******************************************
Best model found
******************************************
Results 

CLL : -0.111592 

AUC ROC : 0.993349 

AUC PR : 0.396145 

Precision : 0.338028 

Recall : 0.952381 

F1 : 0.49896 

Total Learning Time : 6.405 

Total Inference Time : 9.535455703735352 

Total revision time: 23.67427594947815
Best scored revision CLL: -0.112481


Results 

CLL : -0.111592 

AUC ROC : 0.993349 

AUC PR : 0.396145 

Precision : 0.338028 

Recall : 0.952381 

F1 : 0.49896 

Total Learning Time : 23.700891092300417 

Total Inference Time : 9.535455703735352 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.233
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09423201728144018;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048768;  // std dev = 6.72e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7035517950242032;  // std dev = 0.997, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04744514900017674;  // std dev = 2.795, 128.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07469492943970822;  // std dev = 1.272, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.13214197605836125;  // std dev = 3.398, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5720185686267467;  // std dev = 0.283, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.758317807195429;  // std dev = 0.169, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.579255817549972;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5592944885959429;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0207210351730364;  // std dev = 3.495, 155.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=20 */
%   | | | else return 0.058211795804436806;  // std dev = 2.640, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5192056131190558;  // std dev = 1.123, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return -0.12495329397686579;  // std dev = 0.186, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.3895935152885702;  // std dev = 0.289, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.12708458601238898;  // std dev = 0.000908, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14506181040846491;  // std dev = 2.240, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3274072044466871;  // std dev = 0.454, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.3305074543404525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3043852540709606;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.3712568168857987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6001779846882533;  // std dev = 0.083, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09818702252270661;  // std dev = 0.979, 101.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=2 */
%   | | else return 0.026811112137545397;  // std dev = 0.309, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037394895115675154;  // std dev = 2.526, 135.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24836138374562589;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5455051955637508;  // std dev = 0.605, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1402178146396597;  // std dev = 0.233, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.13232219855647925;  // std dev = 0.189, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.287634919169511;  // std dev = 1.287, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return -0.09172448090445606;  // std dev = 1.164, 146.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.003360977727364935;  // std dev = 1.959, 62.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18879305597000873;  // std dev = 0.090, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.18216938017205947;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.033336542581265824;  // std dev = 1.446, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return -0.07760739423732618;  // std dev = 0.641, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.005003557875726718;  // std dev = 1.477, 66.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=14 */
%   | | | else return 0.04091526305547171;  // std dev = 1.804, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17697158312713004;  // std dev = 0.063, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2664482109571279;  // std dev = 0.669, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.095687346416368;  // std dev = 0.194, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33438976799107417;  // std dev = 0.365, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09529532005392273;  // std dev = 0.047, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01084818009170819;  // std dev = 1.815, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1825257151274166;  // std dev = 0.652, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.16017072704416904;  // std dev = 0.273, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08389602909693379;  // std dev = 0.048, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08912839000640704;  // std dev = 0.027, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.05721055878714179;  // std dev = 0.608, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11812264764588315;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027248702549490137;  // std dev = 2.013, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.429', 'seconds']
Parameter learned model CLL:-0.117739 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 65], 'true,false,true': [8.69e-08, 97, 0], 'true,false,false,true': [0.976, 20, 1], 'true,false,false,false': [0.816, 1, 2], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 0, 7], 'false,false': [6.72e-09, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.997, 1, 54], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.795, 116, 12], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.272, 31, 2], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [3.398, 51, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.283, 0, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.169, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.069, 0, 4], 'false,false,true,false': [2.98e-08, 0, 12], 'false,false,false,true': [3.495, 135, 20], 'false,false,false,false': [2.64, 43, 13]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.123, 0, 68], 'true,false': [0.186, 127, 0], 'false,true,true': [0.289, 1, 13], 'false,true,false': [0.000908, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.24, 21, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.454, 0, 43], 'true,false': [0.0, 0, 1], 'false,true,true': [0.039, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.083, 0, 15], 'false,false,true,false': [0.979, 99, 2], 'false,false,false': [0.309, 62, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.526, 85, 50], 'false,true': [0.056, 0, 16], 'false,false,true': [0.605, 0, 27], 'false,false,false,true': [0.233, 45, 0], 'false,false,false,false': [0.189, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.287, 1, 69], 'true,false': [1.164, 142, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.959, 42, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.09, 0, 52], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.446, 76, 11], 'false,false,true,false': [0.641, 19, 1], 'false,false,false,true': [1.477, 52, 14], 'false,false,false,false': [1.804, 29, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.063, 0, 44], 'false,true,true,true': [0.669, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.194, 135, 0], 'false,false,true,true': [0.365, 0, 12], 'false,false,true,false': [0.047, 38, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.815, 28, 11]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.652, 0, 52], 'true,true,false': [0.273, 0, 13], 'true,false,true': [0.048, 109, 0], 'true,false,false,true': [0.027, 21, 0], 'true,false,false,false': [0.608, 21, 3], 'false,true': [0.024, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.013, 51, 23]}]
{'': [0.2319343276679385, 0.23248269896193893], 'false': [7.105427357601002e-16, 4.6474452193611206e-17], 'true': [-8.745141363201234e-16, 0.024178676319923483], 'true,false': [7.783006770568107e-17, 0.10937499999999985], 'true,false,false': [0.045351473922902535, 0.22222222222222224], 'false,true': [-2.9605947323337506e-16, -2.5376526277146434e-16]}
{'': [0.018068804272774294, 0.10018762907922765], 'false': [0.061030834012780096, 0.13735660633051305], 'false,false': [0.049065540446065654, 0.16073326138686936], 'false,false,false': [0.0, 0.1559995557998549], 'false,true': [nan, 0.061030834012780096], 'false,true,false': [0.061030834012780096, nan], 'false,false,true': [nan, 0.049065540446065654]}
{'': [0.003991626683264471, 0.10652771424793689], 'false': [nan, 0.10652771424793743], 'false,false': [0.0003735512377602279, 0.09215193475836003], 'false,false,false': [0.07882168568663452, 0.12447133176357862], 'true': [0.001996793955773901, 0.017399012865512986], 'true,false': [0.01420339634743284, 0.0], 'true,true': [0.001996793955773901, nan], 'false,false,true': [0.0011953639608328626, 7.401486830834377e-17]}
{'': [0.10088912735316492, 0.1260907709775106], 'false': [0.09914707799166979, 0.15206063403472453], 'false,false': [nan, 0.15206063403472453], 'false,false,false': [nan, 0.15206063403472453], 'true': [0.018562492184078155, 0.0002722615322934169], 'false,true': [0.08375148877213401, 8.24413124267398e-07]}
{'': [0.004694156403787836, 0.07708757152736129], 'false': [0.00035529588444199733, 0.0764442183558576], 'false,false': [0.06323001392053494, 0.09537645966954003], 'false,false,true': [0.00046262799901685504, 0.009485478354543494], 'true': [0.0048031043874782525, 0.0], 'false,true': [9.949440715698958e-05, 0.0]}
{'': [0.04727628673063377, 0.08151678063142027], 'false': [0.0001992077638655887, 0.08642183299737936], 'false,false': [0.013569729003138012, 0.0010119042842383606], 'true': [nan, 0.04727628673063381], 'true,false': [nan, 0.04727628673063377], 'false,false,false': [0.0012021165975305485, 0.0007905215942796115]}
{'': [0.04546237978510356, 0.06190233986916753], 'false': [nan, 0.061902339869167565], 'false,false': [nan, 0.06190233986916753], 'false,false,false': [nan, 0.06190233986916753], 'true': [0.023645390085977994, 0.009283928428958208]}
{'': [0.0001568635065780808, 0.038074119827494465], 'false': [nan, 0.03807411982749451], 'false,false': [0.023689781926314015, 0.0508489375495785], 'false,false,false': [0.033067803624639076, 0.07750216836091356], 'false,false,true': [0.024044956075398274, 0.02055120407263212], 'true': [0.0001571960891452344, 0.0001059682076844648], 'true,false': [0.0001059682076844648, nan]}
{'': [0.0040195049819907284, 0.03432869663570023], 'false': [0.020770734280779107, 0.05747090708005942], 'false,false': [0.036384177774707975, 0.08450005472469321], 'false,false,false': [nan, 0.08450005472469321], 'false,false,true': [0.011100577533981934, 5.74466143919413e-05], 'false,true': [0.01720946112456995, 0.0002783717831029001], 'false,true,true': [0.01720946112456995, nan]}
{'': [0.018023774960745628, 0.05354517793809404], 'false': [0.000288682545981047, 0.05476722494427981], 'false,false': [nan, 0.054767224944279776], 'true': [0.007760606190008213, 0.0025217037571686135], 'true,true': [0.008163739724696651, 0.005748275657492778], 'true,false': [2.1082507491183628e-05, 0.008480370047247198], 'true,false,false': [3.593655356981661e-05, 0.015393833644335553]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.859
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.7547006592374428;  // std dev = 1.640, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.11841356490048771;  // std dev = 0.151, 128.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=3 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7388994374304783;  // std dev = 0.203, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.6361400788776209;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.735981226434616;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1280385789008123;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else return -0.09334303391242535;  // std dev = 0.177, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.09334303391242535;  // std dev = 0.986, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return 0.10615634977079955;  // std dev = 0.811, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7816289395752953;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10807216802908079;  // std dev = 3.487, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5499277670343153;  // std dev = 0.155, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return 0.8234431806044059;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.2876103158080991;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.436282852168679;  // std dev = 0.773, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5547767246659033;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11554673160316649;  // std dev = 0.016, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.005966611341847458;  // std dev = 2.145, 60.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07401519686725629;  // std dev = 2.645, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.12428133214586434;  // std dev = 2.199, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41788633903906375;  // std dev = 0.160, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.6168303018838575;  // std dev = 0.090, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11829398156438573;  // std dev = 0.202, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.4955402259226751;  // std dev = 0.133, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11614613347805446;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5332785440255363;  // std dev = 1.058, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.14681993717678685;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.05586772874494319;  // std dev = 0.724, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.06637617825185671;  // std dev = 1.410, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then return 0.30768650631487243;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.4855649368261649;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4845510710235633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.2041552682911095;  // std dev = 0.324, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.5806262989286544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.47938756940315713;  // std dev = 0.257, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09436615580554188;  // std dev = 0.918, 101.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=2 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.054066602926940224;  // std dev = 1.126, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | | else return 0.12847828881934503;  // std dev = 2.192, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.27447236972425837;  // std dev = 0.037, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1995407360430499;  // std dev = 1.014, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.08919085546061674;  // std dev = 0.041, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.03913495877708424;  // std dev = 0.208, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29370115228664256;  // std dev = 0.173, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4606579986489059;  // std dev = 0.315, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5863223765900704;  // std dev = 0.230, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12360416724202261;  // std dev = 0.076, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.13139092177096842;  // std dev = 0.217, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2356045675859885;  // std dev = 0.026, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.22010725752900795;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11221485962069329;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.31824566837133633;  // std dev = 0.150, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08403276155927948;  // std dev = 0.082, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.34898276990843863;  // std dev = 0.277, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11833718658697714;  // std dev = 0.055, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08009345000004532;  // std dev = 0.869, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.16209551597801972;  // std dev = 1.023, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19557335976854834;  // std dev = 0.023, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E), follows(F, E) )
%   | | | then return -0.08710215541963125;  // std dev = 0.690, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.07373202530793277;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(G, E), tweets(G, D) )
%   | | | then return -0.0107302839066197;  // std dev = 1.187, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return -0.09078437513894658;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2333030082041164;  // std dev = 1.202, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.10320484927478574;  // std dev = 0.078, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.02751460740176942;  // std dev = 0.812, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.043063512357958765;  // std dev = 1.295, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.16190471056682354;  // std dev = 0.064, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.20392628641934152;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.1859130504288009;  // std dev = 0.146, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3691983956223094;  // std dev = 0.383, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07527698256110547;  // std dev = 0.108, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26835351009486724;  // std dev = 0.248, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09902075782183101;  // std dev = 0.098, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.011152575791572448;  // std dev = 0.852, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.03302756389058461;  // std dev = 1.122, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14097812654658165;  // std dev = 0.076, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1353802610807383;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23787086738307744;  // std dev = 0.369, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.06864715177670246;  // std dev = 0.075, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.045096359213954294;  // std dev = 0.088, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.1914601036030513;  // std dev = 0.736, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.20478933534943866;  // std dev = 0.198, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08333568358453196;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.017139858008065993;  // std dev = 0.214, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.003', 'seconds']
Refined model CLL: -0.105556


******************************************
Best model found
******************************************
Results 

CLL : -0.104796 

AUC ROC : 0.992601 

AUC PR : 0.337316 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 9.859 

Total Inference Time : 19.615398645401 

Total revision time: 40.189827196121215
Best scored revision CLL: -0.105556


Results 

CLL : -0.104796 

AUC ROC : 0.992601 

AUC PR : 0.337316 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 40.21644233894348 

Total Inference Time : 19.615398645401 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.779
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.994, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10185106490048773;  // std dev = 1.386, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.710660685857739;  // std dev = 1.011, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03655937884930182;  // std dev = 3.105, 143.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05109795273638333;  // std dev = 1.777, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6011516513800758;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1180715006511409;  // std dev = 4.094, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5770830512805881;  // std dev = 0.358, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8015560979948353;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5924330716523708;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5883472110675615;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4891192119130472;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02562543998388809;  // std dev = 4.072, 214.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=26 */
%   | | | else return 0.06244632307455706;  // std dev = 3.218, 82.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5085932392480057;  // std dev = 1.871, 91.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=89 */
%   | else return -0.12270314799760493;  // std dev = 0.107, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4603231436774603;  // std dev = 0.101, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1291172585255212;  // std dev = 0.001, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41460472409808335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2060804638875628;  // std dev = 2.690, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2749605257709101;  // std dev = 1.752, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   | else return -0.12782561914862878;  // std dev = 0.773, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.316283544435167;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.4710947478817936;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6075197332490232;  // std dev = 0.069, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09696483384034416;  // std dev = 1.376, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | else return 0.02133527728518;  // std dev = 0.320, 110.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024182213493163674;  // std dev = 2.952, 185.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=62 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21823884503621055;  // std dev = 1.011, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5157617068451386;  // std dev = 1.281, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1309436758315579;  // std dev = 0.226, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.13638466989754938;  // std dev = 0.232, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2990916350335461;  // std dev = 1.438, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return -0.09651167597656565;  // std dev = 1.525, 227.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04298539360257448;  // std dev = 2.110, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19534922897094917;  // std dev = 0.089, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.28834486846075535;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04281737151622777;  // std dev = 1.755, 122.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=14 */
%   | | | else return -0.07578164845808677;  // std dev = 0.623, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0061855685151212154;  // std dev = 2.012, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.016077059285079402;  // std dev = 2.339, 71.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17546743852921334;  // std dev = 0.098, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.26089059904179274;  // std dev = 1.226, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09237371943940328;  // std dev = 0.110, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3353415269688003;  // std dev = 0.412, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09637371295818768;  // std dev = 0.061, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0731492627793597;  // std dev = 2.132, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17350628433466125;  // std dev = 1.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.1745528518259947;  // std dev = 0.363, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.08290160265760524;  // std dev = 0.055, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0927777534258327;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.01914232064650317;  // std dev = 0.986, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13010920034494453;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.003605986528751903;  // std dev = 2.609, 117.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=32 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.381', 'seconds']
Parameter learned model CLL:-0.117191 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 81], 'true,false,true': [0.0, 149, 0], 'true,false,false,true': [1.386, 48, 2], 'true,false,false,false': [1.225, 6, 2], 'false,true,true': [0.983, 1, 29], 'false,true,false': [0.953, 1, 10], 'false,false': [8.33e-09, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.011, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.105, 128, 15], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.777, 43, 4], 'false,false,false,true': [0.935, 1, 7], 'false,false,false,false': [4.094, 80, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.358, 0, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.105, 0, 2], 'true,false,false': [0.0, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.152, 0, 6], 'false,false,true,false': [0.964, 1, 13], 'false,false,false,true': [4.072, 188, 26], 'false,false,false,false': [3.218, 63, 19]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.871, 2, 89], 'true,false': [0.107, 182, 0], 'false,true,true': [0.101, 0, 15], 'false,true,false': [0.001, 25, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.69, 25, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.752, 4, 59], 'true,false': [0.773, 1, 1], 'false,true,true': [0.042, 0, 18], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.069, 0, 19], 'false,false,true,false': [1.376, 151, 3], 'false,false,false': [0.32, 87, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.952, 123, 62], 'false,true': [1.011, 1, 19], 'false,false,true': [1.281, 1, 43], 'false,false,false,true': [0.226, 54, 0], 'false,false,false,false': [0.232, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.438, 1, 93], 'true,false': [1.525, 221, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11, 48, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.089, 0, 64], 'true,false,true': [0.056, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.755, 108, 14], 'false,false,true,false': [0.623, 18, 1], 'false,false,false,true': [2.012, 79, 23], 'false,false,false,false': [2.339, 51, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.098, 1, 60], 'false,true,true,true': [1.226, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.11, 155, 0], 'false,false,true,true': [0.412, 0, 15], 'false,false,true,false': [0.061, 38, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.132, 28, 17]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.123, 1, 64], 'true,true,false': [0.363, 0, 17], 'true,false,true': [0.055, 128, 0], 'true,false,false,true': [0.03, 30, 0], 'true,false,false,false': [0.986, 22, 4], 'false,true': [0.039, 0, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.609, 85, 32]}]
{'': [0.20761245674740555, 0.21559573361082338], 'false': [0.04640095181439758, 7.490661370964911e-17], 'true': [0.012046400951813752, 0.01895026721743788], 'false,true': [0.03222222222222335, 0.0826446280991734], 'true,false': [-1.1027718633860615e-16, 0.06420927467300819], 'true,false,false': [0.03839999999999996, 0.18750000000000003]}
{'': [0.015246651913026762, 0.11243253008890228], 'false': [0.06741836277946951, 0.1431623619479657], 'false,false': [0.06722057795962204, 0.16149344283816022], 'false,false,false': [0.10937499999999989, 0.14965842661995085], 'false,true': [nan, 0.06741836277946951], 'false,true,false': [0.06741836277946951, nan], 'false,false,true': [nan, 0.06722057795962204]}
{'': [0.003942786197614308, 0.10589119149935304], 'false': [nan, 0.10589119149935333], 'false,false': [0.049655484822809993, 0.09256942053309918], 'false,false,false': [0.07748764455221144, 0.12632133957100183], 'false,false,true': [0.003864040909449843, 0.06632653061224482], 'true': [0.002515418789483838, 0.008782556377650193], 'true,false': [0.005507383585380055, -1.2688263138573217e-16], 'true,true': [0.002515418789483838, nan]}
{'': [0.1014254650697385, 0.12930625269304186], 'false': [0.0852877748080655, 0.16179312639024326], 'false,false': [0.0, 0.1645039680747492], 'false,false,false': [nan, 0.16450396807474926], 'true': [0.03846089575570082, 6.27068769705392e-05], 'false,true': [0.01028129681749886, 1.666196450684776e-06]}
{'': [0.061228931800766585, 0.0781274400547811], 'false': [0.0012891778586299897, 0.07651285754528865], 'false,false': [0.059485282046508214, 0.10226853941307844], 'true': [0.04870572810478285, 0.29846506748631413], 'false,false,true': [0.00025198840239205075, 0.012286513553028348], 'false,true': [9.940365537650407e-05, 0.0]}
{'': [0.04711550760449006, 0.09432702142899564], 'false': [0.05110126846392765, 0.0966308410752442], 'false,false': [0.03731302146559434, 0.0009424245936705307], 'true': [nan, 0.04711550760449005], 'true,false': [nan, 0.04711550760449006], 'false,false,false': [0.0009460534103821914, 0.0009247724822605887]}
{'': [0.046095340686595696, 0.06098492143657046], 'false': [nan, 0.06098492143657046], 'false,false': [nan, 0.06098492143657046], 'false,false,false': [nan, 0.06098492143657046], 'true': [0.021992843934800787, 0.01024687011048705]}
{'': [0.00042144191513794236, 0.042102446285691514], 'false': [nan, 0.04210244628569101], 'false,false': [0.024730549782236273, 0.0551289610223501], 'false,false,false': [0.039671794045920424, 0.07704281391966455], 'false,false,true': [0.02525247652793114, 0.020439014269615984], 'true': [0.00012406767602132773, 0.0015512949349976296], 'true,false': [0.0015512949349976296, nan]}
{'': [0.009645267000569948, 0.04224140309964725], 'false': [0.026117376628824296, 0.06918296641299357], 'false,false': [0.041094385291469915, 0.10105309263209242], 'false,false,false': [nan, 0.10105309263209242], 'false,false,true': [0.01132590343505336, 9.659755377256818e-05], 'false,true': [0.045530240474081815, 7.869083926440052e-05], 'false,true,true': [0.045530240474081815, nan]}
{'': [0.022516220782475723, 0.05574297489649952], 'false': [0.00022268914581609938, 0.058161302670687566], 'false,false': [nan, 0.0581613026706877], 'true': [0.01698060945008623, 0.00583543264060983], 'true,true': [0.0193900696955242, 0.0077670991067811425], 'true,false': [2.3343345104092326e-05, 0.018709035892042924], 'true,false,false': [3.0942759805204406e-05, 0.037355944156391846]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 13.017
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.058148935099512286;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7058233611110508;  // std dev = 0.138, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( tweets(A, E) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.06298030299346746;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6903166371946613;  // std dev = 1.011, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.12756898270439646;  // std dev = 0.090, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07326470769112493;  // std dev = 2.871, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | | | else return 0.18016401812201052;  // std dev = 2.783, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5587345083452105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.3179924314066813;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.5963019246370546;  // std dev = 0.077, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.5793249704799706;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11306414273776022;  // std dev = 0.110, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(J, H) )
%   | | | then return 0.3587345083452102;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5798594826689428;  // std dev = 0.194, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return -0.07467281023070226;  // std dev = 1.079, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return 0.1344381653048465;  // std dev = 3.912, 99.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=33 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.35676362418141455;  // std dev = 1.552, 47.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=43 */
%   | | | else return 0.4428066684316654;  // std dev = 0.775, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.6088176193986752;  // std dev = 0.111, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.11627552379634452;  // std dev = 0.291, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.43960453421821505;  // std dev = 0.148, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10698577595021908;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.46936173248094915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.06728373506474418;  // std dev = 2.327, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0.2752163259967241;  // std dev = 1.467, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3115458495196393;  // std dev = 0.146, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2671946946042649;  // std dev = 0.800, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.08494511178747954;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3063780975799603;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3487138502965767;  // std dev = 0.035, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4374664800933511;  // std dev = 0.431, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08781301795907902;  // std dev = 1.186, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.07208029073708552;  // std dev = 0.918, 57.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=3 */
%   | | | else return 0.060922267384528626;  // std dev = 2.943, 64.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.27631688760806994;  // std dev = 0.233, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.08739624918272167;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.05852534445075993;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05995940002660179;  // std dev = 0.086, 136.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=10 */
%   | | else return -0.05498782282358933;  // std dev = 0.112, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28101101863930833;  // std dev = 0.170, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.40106425101945403;  // std dev = 0.563, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5576681816028168;  // std dev = 0.416, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.1346366133302424;  // std dev = 0.041, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.19733575193627195;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0.24549343571592294;  // std dev = 0.125, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.074806570814823;  // std dev = 0.051, 95.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2621648708028115;  // std dev = 0.797, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08391475297977824;  // std dev = 0.064, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.25081541612433494;  // std dev = 1.199, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.11488935025154627;  // std dev = 0.040, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1835831317288903;  // std dev = 1.336, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.050646462588892084;  // std dev = 1.402, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18721634707362655;  // std dev = 0.101, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.26551860664416427;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), tweets(E, G) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return -0.07545942809458221;  // std dev = 0.032, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.008745133169191533;  // std dev = 1.372, 93.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=19 */
%   | | else return -0.210763187604533;  // std dev = 0.520, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14226899315656844;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.004602505016309337;  // std dev = 2.079, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.07126107906107679;  // std dev = 1.363, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.13159792109027266;  // std dev = 0.984, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return -0.19726208027156614;  // std dev = 1.032, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.19639374086745615;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0010300218819697116;  // std dev = 0.336, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A) )
%   | then return -0.02993149394787441;  // std dev = 0.103, 206.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.29843334602673643;  // std dev = 0.151, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10435422036516591;  // std dev = 0.060, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0288514206350862;  // std dev = 1.529, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | | else return 0.058729068682040746;  // std dev = 1.424, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16782299598983322;  // std dev = 0.052, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.06923085795449978;  // std dev = 0.021, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06726742615211095;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.014814019226098289;  // std dev = 0.741, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.12597365347388906;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3219706090578287;  // std dev = 0.462, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12930298591765005;  // std dev = 0.363, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08724709282150264;  // std dev = 0.610, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.022137746303527335;  // std dev = 1.357, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.043', 'seconds']
Refined model CLL: -0.113307


******************************************
Best model found
******************************************
Results 

CLL : -0.104654 

AUC ROC : 0.993037 

AUC PR : 0.335891 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 13.017 

Total Inference Time : 16.285385370254517 

Total revision time: 44.11583733177185
Best scored revision CLL: -0.113307


Results 

CLL : -0.104654 

AUC ROC : 0.993037 

AUC PR : 0.335891 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 44.142452474594116 

Total Inference Time : 16.285385370254517 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.383
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08921948595311933;  // std dev = 1.376, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7197036674992469;  // std dev = 1.010, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03676940608321018;  // std dev = 3.524, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04997180566127691;  // std dev = 1.791, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7247539622367456;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11359445551525056;  // std dev = 4.559, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5643447451972278;  // std dev = 1.069, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.2641533314772376;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4727393980725843;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4494434195883163;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.593096633205669;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5666064973142488;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01418113663488601;  // std dev = 4.606, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
%   | | | else return 0.08115940498954827;  // std dev = 3.451, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4994505155712264;  // std dev = 2.324, 119.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=115 */
%   | else return -0.12469582390373382;  // std dev = 0.125, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46105484892703363;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13722845828451294;  // std dev = 0.037, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41943878014504377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08539903723579396;  // std dev = 3.332, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3341628352995135;  // std dev = 0.567, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.49998937093935913;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.2630911085234578;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.46993637050013315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5751710792683915;  // std dev = 0.967, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.0998584909642092;  // std dev = 1.348, 212.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=3 */
%   | | else return 0.015846086087196853;  // std dev = 0.309, 146.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028804871912778477;  // std dev = 3.243, 242.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26774638349668645;  // std dev = 0.149, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5430744932822074;  // std dev = 1.038, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1269005767370616;  // std dev = 0.196, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.13009266242255507;  // std dev = 0.194, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2943408824567756;  // std dev = 1.880, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.0922093665601329;  // std dev = 1.647, 274.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02976434480115574;  // std dev = 2.147, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.192612713618761;  // std dev = 0.083, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2484757049423848;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0475225984402418;  // std dev = 2.086, 170.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=18 */
%   | | | else return -0.09181675192547432;  // std dev = 0.637, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011776362871927952;  // std dev = 2.090, 133.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=28 */
%   | | | else return 0.05492198814570691;  // std dev = 2.492, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1549971635480898;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2622524910191542;  // std dev = 1.387, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09385482464472208;  // std dev = 0.134, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3262353250030701;  // std dev = 0.414, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09519264724003665;  // std dev = 0.064, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06570516431655632;  // std dev = 2.307, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1531375324353098;  // std dev = 1.969, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11746127281525616;  // std dev = 1.068, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08348177894663132;  // std dev = 0.060, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0926715159707404;  // std dev = 0.037, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.024509675594685195;  // std dev = 1.006, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.07009810273130553;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015407316803557348;  // std dev = 2.812, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.063', 'seconds']
Parameter learned model CLL:-0.116239 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 151, 0], 'true,false,false,true': [1.376, 36, 2], 'true,false,false,false': [1.225, 6, 2], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.01, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.524, 164, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 40, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.559, 101, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.069, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.891, 1, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.145, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.606, 221, 34], 'false,false,false,false': [3.451, 68, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.324, 4, 115], 'true,false': [0.125, 196, 0], 'false,true,true': [0.095, 0, 17], 'false,true,false': [0.037, 36, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.332, 55, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.567, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.976, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.967, 1, 26], 'false,false,true,false': [1.348, 209, 3], 'false,false,false': [0.309, 118, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.243, 160, 82], 'false,true': [0.149, 0, 22], 'false,false,true': [1.038, 0, 52], 'false,false,false,true': [0.196, 74, 0], 'false,false,false,false': [0.194, 72, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.88, 2, 121], 'true,false': [1.647, 267, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.147, 61, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.083, 0, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.086, 152, 18], 'false,false,true,false': [0.637, 33, 1], 'false,false,false,true': [2.09, 105, 28], 'false,false,false,false': [2.492, 50, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.156, 2, 78], 'false,true,true,true': [1.387, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.134, 201, 0], 'false,false,true,true': [0.414, 0, 19], 'false,false,true,false': [0.064, 60, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.307, 41, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.969, 3, 85], 'true,true,false': [1.068, 1, 19], 'true,false,true': [0.06, 174, 0], 'true,false,false,true': [0.037, 25, 0], 'true,false,false,false': [1.006, 24, 4], 'false,true': [1.25, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.812, 102, 40]}]
{'': [0.22837370242214783, 0.22145065398335392], 'true': [0.04376735964986345, 0.019892293024813733], 'false': [0.019991670137443407, 7.864079757761526e-17], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.1763952578809607e-16, 0.07939508506616241], 'true,false,false': [0.049861495844875335, 0.18750000000000003]}
{'': [0.011860098521986984, 0.11263405305351655], 'false': [0.06787266754052187, 0.145752663301713], 'false,false': [0.07289640096423976, 0.15847520232511084], 'false,false,false': [0.0, 0.14741215590954998], 'false,false,true': [nan, 0.07289640096423976], 'false,true': [nan, 0.06787266754052187], 'false,true,false': [0.06787266754052187, nan]}
{'': [0.043947581504176395, 0.10908589758490299], 'false': [nan, 0.10908589758490386], 'false,false': [0.0011456772237487876, 0.09748187398396435], 'false,false,false': [0.08318604477524005, 0.1308424712030235], 'true': [0.026367020693213183, 0.1295490482684311], 'true,false': [0.19843646745618956, 0.09876543209876555], 'true,true': [0.016806813561970193, 0.0], 'false,false,true': [0.003508636497729478, 2.3684757858670006e-16]}
{'': [0.1087627158856735, 0.11809685928942254], 'false': [0.08178846879243251, 0.14196509859956014], 'false,false': [0.0, 0.1423727266264379], 'false,false,false': [nan, 0.1423727266264379], 'true': [0.04537707604215956, 8.025208742792153e-05], 'false,true': [0.009016697904712915, 0.0013410375391768098]}
{'': [0.004463425786366857, 0.07473763181580917], 'false': [0.045188526626806634, 0.07215390791632026], 'false,false': [0.05717836932717519, 0.09570273478586319], 'false,false,true': [0.03463281200059577, 0.008572947273965405], 'false,true': [0.04539559020980139, 0.0], 'true': [0.004168848253452836, 0.0]}
{'': [0.043460245022016765, 0.08829225825526202], 'false': [0.0010097258244286685, 0.0931567098233539], 'false,false': [0.020707534761608547, 0.0005217554091405765], 'true': [nan, 0.04346024502201627], 'true,false': [nan, 0.043460245022016765], 'false,false,false': [0.0005174136121312402, 0.0005210533156240945]}
{'': [0.04768287656961343, 0.0517752230680202], 'false': [nan, 0.0517752230680203], 'false,false': [nan, 0.0517752230680202], 'false,false,false': [nan, 0.0517752230680202], 'true': [0.02872566687684104, 0.009898671696486776]}
{'': [0.0001539536761464579, 0.0390823753923189], 'false': [nan, 0.03908237539231866], 'false,false': [0.023586017232806126, 0.052127863900076926], 'false,false,false': [0.03285162274726442, 0.08391467580488543], 'false,false,true': [0.02558923755683814, 0.011934938918501751], 'true': [8.252378950863486e-05, 7.104779080695928e-05], 'true,false': [7.104779080695928e-05, nan]}
{'': [0.024415227566681748, 0.03863546134019844], 'false': [0.025611110651403313, 0.05805685579498239], 'false,false': [0.0346639038944128, 0.0858776774561489], 'false,false,false': [nan, 0.0858776774561489], 'false,false,true': [0.009024158529976237, 6.886317555856632e-05], 'false,true': [0.04809514897293736, 8.897055551299243e-05], 'false,true,true': [0.04809514897293736, nan]}
{'': [0.029279872047699385, 0.06276845547572538], 'false': [0.15626360541024184, 0.055703291515679744], 'false,false': [nan, 0.055703291515679765], 'true': [0.046643511066445154, 0.0048786163352617625], 'true,true': [0.04404784621492195, 0.05702734378312833], 'true,false': [2.0477219493703134e-05, 0.02027659950127101], 'true,false,false': [5.370927332270847e-05, 0.03614122484737336]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.516
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.8126943896449667;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.11010503315445595;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.6510180328067346;  // std dev = 0.283, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.6569734122109543;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return -0.018773203942548795;  // std dev = 0.288, 140.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=18 */
%   | | else return -0.104621106758033;  // std dev = 0.147, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.07103094732181896;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.08813455485694857;  // std dev = 1.183, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7323818453029722;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14706853718669124;  // std dev = 4.450, 124.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5693206012020446;  // std dev = 0.380, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7076831319519816;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5682205617442582;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5766730970668668;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.117126828507374;  // std dev = 0.863, 151.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=1 */
%   | | | else return 0.007891773567645626;  // std dev = 3.208, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11082723437310493;  // std dev = 3.803, 95.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=29 */
%   | | | else return 0.25511225779824015;  // std dev = 1.992, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4060084729293312;  // std dev = 1.220, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.5636649845504409;  // std dev = 0.247, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6103753345308307;  // std dev = 0.134, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.1254471938227997;  // std dev = 0.303, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.454713365694903;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1102194304860346;  // std dev = 0.039, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.4290225916766046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.12022007024656896;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11297814732945367;  // std dev = 3.106, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.3287414691649955;  // std dev = 0.122, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.30967132873247033;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.05087364508399165;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11683125932763622;  // std dev = 0.706, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2992898812253619;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5095387681955449;  // std dev = 1.356, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.1039272099263909;  // std dev = 0.165, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.03843661845172561;  // std dev = 2.263, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.08360496704737057;  // std dev = 3.202, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2521944326619976;  // std dev = 0.041, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.14230558064101909;  // std dev = 0.449, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4548834085773024;  // std dev = 0.233, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0946744809818838;  // std dev = 0.058, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.06666152908687685;  // std dev = 0.117, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.24872438178420656;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.46879634764468303;  // std dev = 0.591, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5849037873299905;  // std dev = 0.333, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.14486918585677125;  // std dev = 0.039, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.19038610082216;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0.274947863891916;  // std dev = 0.093, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return -0.07402618024210139;  // std dev = 0.884, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.35953371555304947;  // std dev = 0.248, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.0832401752936846;  // std dev = 0.053, 185.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3167056968180411;  // std dev = 0.599, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11258572159414452;  // std dev = 0.221, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.008557978572429622;  // std dev = 2.044, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return 0.0266154394486361;  // std dev = 1.446, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17378388882778345;  // std dev = 0.131, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.2525940353638404;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 4.3887357915342286E-4;  // std dev = 1.426, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3178208394589599;  // std dev = 0.328, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.08026545097092762;  // std dev = 0.181, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3215415934962191;  // std dev = 1.340, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.13432809957773778;  // std dev = 0.192, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1415677153818471;  // std dev = 0.483, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.0836677191826298;  // std dev = 1.233, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.15833261941956683;  // std dev = 0.112, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.12238478894788865;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1425023676057538;  // std dev = 0.107, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.19880396012434487;  // std dev = 1.028, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07398210182290611;  // std dev = 0.138, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26798205053502516;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11035415884104234;  // std dev = 0.117, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01151605375382535;  // std dev = 1.578, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return -0.007449474417227679;  // std dev = 1.497, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14358497145310467;  // std dev = 0.112, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.11748515241606268;  // std dev = 0.091, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06186711792687169;  // std dev = 0.899, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.06492645081908549;  // std dev = 0.052, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.19033747816817367;  // std dev = 0.051, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.10682838458866552;  // std dev = 0.021, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.35576215054315596;  // std dev = 0.332, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1484897719054988;  // std dev = 2.36e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.06159324785869139;  // std dev = 0.302, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.680', 'seconds']
Refined model CLL: -0.109349


******************************************
Best model found
******************************************
Results 

CLL : -0.102846 

AUC ROC : 0.992929 

AUC PR : 0.339164 

Precision : 0.340599 

Recall : 0.992063 

F1 : 0.507099 

Total Learning Time : 10.516 

Total Inference Time : 33.59022808074951 

Total revision time: 60.550947498321534
Best scored revision CLL: -0.109349


Results 

CLL : -0.102846 

AUC ROC : 0.992929 

AUC PR : 0.339164 

Precision : 0.340599 

Recall : 0.992063 

F1 : 0.507099 

Total Learning Time : 60.5775626411438 

Total Inference Time : 33.59022808074951 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.43
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281643902400934;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.089872226834033;  // std dev = 2.226, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0435389716194778;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5864124426261559;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7100150411515833;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5639392428942599;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.005725391420101422;  // std dev = 2.198, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
%   | | | else return -0.05252651569193034;  // std dev = 0.801, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5398208012513505;  // std dev = 0.642, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.1309149657223597;  // std dev = 0.054, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4823259202823128;  // std dev = 0.064, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.12959940647530566;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.157453302459133;  // std dev = 0.691, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31901220601977853;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.4263194250345749;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30014759861098894;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5894687018703431;  // std dev = 0.000640, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09643618931039263;  // std dev = 0.698, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else return -0.07332045081411039;  // std dev = 0.180, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014877402330042675;  // std dev = 1.795, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24108454369688226;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5870509044402462;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12004650893445724;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11400754779497502;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2666956528902716;  // std dev = 1.052, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.08409597077633148;  // std dev = 0.875, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05795678221364978;  // std dev = 0.284, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18824223560059636;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.0025420182180822585;  // std dev = 1.146, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return -0.06488048512143914;  // std dev = 0.351, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.029259174007500145;  // std dev = 0.629, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -9.277290422899079E-4;  // std dev = 0.640, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18963816283994164;  // std dev = 0.056, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3218244582303361;  // std dev = 0.259, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09944886747121785;  // std dev = 0.046, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3780072352381264;  // std dev = 0.168, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08605577215248282;  // std dev = 0.000388, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03426663146838495;  // std dev = 0.662, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16176900743525313;  // std dev = 0.944, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.12391679608784634;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.09370736327939538;  // std dev = 0.029, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0785643203356749;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06740684458450528;  // std dev = 3.44e-06, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02175737175993368;  // std dev = 0.798, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.559', 'seconds']
Parameter learned model CLL:-0.115541 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [2.11e-08, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.0, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.226, 26, 9], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.309, 12, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.19, 0, 13], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.198, 45, 8], 'false,false,false,false': [0.801, 10, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.642, 0, 22], 'true,false': [0.054, 42, 0], 'false,true,true': [0.064, 0, 2], 'false,true,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.691, 2, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.19, 0, 13], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.00064, 0, 7], 'false,false,true,false': [0.698, 31, 1], 'false,false,false': [0.18, 18, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.795, 43, 20], 'false,true': [0.0, 0, 2], 'false,false,true': [0.187, 0, 3], 'false,false,false,true': [0.034, 7, 0], 'false,false,false,false': [0.048, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.052, 1, 21], 'true,false': [0.875, 51, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.009, 0, 13], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.146, 27, 8], 'false,false,true,false': [0.351, 9, 1], 'false,false,false,true': [0.629, 14, 2], 'false,false,false,false': [0.64, 6, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.056, 0, 14], 'false,true,true,true': [0.259, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.046, 39, 0], 'false,false,true,true': [0.168, 0, 2], 'false,false,true,false': [0.000388, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.662, 8, 1]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.944, 1, 20], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.029, 49, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [3.44e-06, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.798, 10, 3]}]
{'': [0.22726127488032344, 0.1874999999999999], 'true': [0.04158790170132359, 4.163336342344337e-17], 'false': [1.4802973661668753e-16, -9.25185853854297e-18], 'false,true': [1.4802973661668753e-16, nan], 'true,false': [3.489272363107635e-17, -2.7755575615628915e-18], 'true,false,false': [-2.7755575615628915e-18, nan]}
{'': [-2.049642507000289e-16, 0.12021157996914912], 'false': [0.13380847583627853, 0.09102053033930987], 'false,true': [nan, 0.13380847583627853], 'false,true,false': [0.14161766698803657, 0.0], 'false,false': [0.0, 0.11422184199442807], 'false,false,false': [nan, 0.11422184199442807], 'false,false,true': [nan, 0.0]}
{'': [0.03450392794184035, 0.09302417988540021], 'false': [nan, 0.0930241798854002], 'false,false': [0.0, 0.08581763397429752], 'false,false,false': [0.09115158130688832, 0.05830382627110243], 'true': [0.0035926458245152076, 0.0], 'true,true': [0.0027777458840432426, 0.0], 'false,false,true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.10797576339354584, 0.10464010444399163], 'true': [0.018741278223667033, 6.916282539556498e-05], 'false': [0.07758561058396374, 0.15895241372955962], 'false,false': [nan, 0.15895241372955962], 'false,false,false': [nan, 0.15895241372955962], 'false,true': [0.00408349023857435, 0.0]}
{'': [0.003350333890409824, 0.0685792469752146], 'false': [0.0, 0.06781815960828798], 'false,false': [0.08178182749428317, 0.032432375185340874], 'false,false,true': [5.842798111999059e-08, 0.015229060292418767], 'true': [0.0027855633639305346, 0.0], 'false,true': [0.0, nan]}
{'': [0.05113074084835587, 0.07163333265617569], 'false': [0.0, 0.07430376454171433], 'false,false': [0.01161952429056671, 0.0002550895978755289], 'true': [nan, 0.05113074084835598], 'true,false': [nan, 0.05113074084835587], 'false,false,false': [0.0001660981069279699, 0.0003258465630009997]}
{'': [0.05045895769533382, 0.02010669214580831], 'true': [0.05025804838919954, 0.014446290128923197], 'false': [nan, 0.02010669214580831], 'false,false': [nan, 0.02010669214580831], 'false,false,false': [nan, 0.02010669214580831]}
{'': [6.592481169823779e-06, 0.03355020909298806], 'false': [nan, 0.03355020909298798], 'false,false': [0.032709801891190396, 0.0351500325646591], 'false,false,false': [0.02470507472318753, 0.05846584224785208], 'false,false,true': [0.0375274525805838, 0.012312406956538471], 'true': [6.592481169823779e-06, nan]}
{'': [0.0030844447771415213, 0.0335825575616739], 'false': [0.02653828529701251, 0.055918573365048525], 'false,false': [0.05732402769605133, 0.048740589844625454], 'false,false,true': [0.0140973090206013, 5.021498472012239e-08], 'false,false,false': [nan, 0.048740589844625454], 'false,true': [0.008378829409285943, 5.5435515299002585e-05], 'false,true,true': [0.008378829409285943, nan]}
{'': [0.025341112932896058, 0.04904086016836026], 'false': [nan, 0.04904086016836026], 'false,false': [nan, 0.04904086016836026], 'true': [0.038892734577579226, 4.496531094949309e-05], 'true,true': [0.04247221411092358, 0.0], 'true,false': [1.660622140407259e-05, 2.7664285081615305e-05], 'true,false,false': [0.0, 5.9097770080396295e-12]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.34
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7194734122109543;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.017582759710602545;  // std dev = 1.933, 47.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.15619471171805724;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5545776451946759;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.6258078566068166;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.6038727602231444;  // std dev = 0.935, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.12539862883614955;  // std dev = 0.042, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.12046179681618936;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.04155904526247721;  // std dev = 0.754, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4177054275738206;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5818734259428907;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.496537319112067;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.1105797905630612;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1006566880748403;  // std dev = 0.000666, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.12886237679530885;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(I, A), tweets(I, J) )
%   | then if ( follows(K, I), recursion_accounttype(K, B) )
%   | | then return 0.4125880344537816;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10993171583225554;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.008119084863046938;  // std dev = 0.767, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3202371319667457;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.32178585280101035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.01916597357800213;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.43760910284952076;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0891926732306346;  // std dev = 0.520, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return -0.10066772428887626;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09730675566950948;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.25537597566042974;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2532706555102762;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.33985925990372395;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09240602626691496;  // std dev = 2.69e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.09191322118055971;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.014803928817574677;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4771458933232102;  // std dev = 0.274, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11281171320135623;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.11389129055111842;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.20933983027620356;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.2998240661401537;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return -0.05423466613908194;  // std dev = 0.477, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return -0.08576118439198936;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.24338007006836998;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08503687171203955;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, I) )
%   | | then return 0.0510049978538001;  // std dev = 0.411, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.04557875878541986;  // std dev = 0.611, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.08520990871885784;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.24446537014189781;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.17270632759448368;  // std dev = 0.000495, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.241786711390979;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(J, F) )
%   | | | then return -0.07919500046681874;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.08632877785682387;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.12495820301259726;  // std dev = 0.638, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.07877147409782013;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.09021400642934821;  // std dev = 0.830, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2087740049451326;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.07422473662670129;  // std dev = 0.020, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.07276346298270986;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.238626955192218;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.11244976396199663;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.19069971755555687;  // std dev = 0.484, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1514262502072224;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16648433543026503;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19859409451163346;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0695926608745922;  // std dev = 0.005, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.0679984101339538;  // std dev = 0.001, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.07233829803530151;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07241375502527996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, I), follows(I, J) )
%   | then return -0.059645235747509205;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0.11312669107380519;  // std dev = 0.536, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '38.207', 'seconds']
Refined model CLL: -0.108224


******************************************
Best model found
******************************************
Results 

CLL : -0.111887 

AUC ROC : 0.995238 

AUC PR : 0.441619 

Precision : 0.344828 

Recall : 0.897436 

F1 : 0.498221 

Total Learning Time : 4.34 

Total Inference Time : 6.250704050064087 

Total revision time: 14.939585227966308
Best scored revision CLL: -0.108224


Results 

CLL : -0.111887 

AUC ROC : 0.995238 

AUC PR : 0.441619 

Precision : 0.344828 

Recall : 0.897436 

F1 : 0.498221 

Total Learning Time : 14.966200370788574 

Total Inference Time : 6.250704050064087 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.76
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.04604424930488979;  // std dev = 2.930, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062314928302574374;  // std dev = 1.825, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5840184003698773;  // std dev = 0.312, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.7100870403136851;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0298635559950724;  // std dev = 2.727, 101.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=12 */
%   | | | else return -0.03363958659484411;  // std dev = 1.366, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.47492941330867694;  // std dev = 1.599, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else return -0.12502810102849796;  // std dev = 0.054, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.48541013784936604;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12503127583648985;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024516243725183292;  // std dev = 1.077, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2942724090935177;  // std dev = 1.061, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.4256331783765215;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30801562646915465;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.610384859429149;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08153967259749559;  // std dev = 1.220, 69.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=3 */
%   | | else return -0.03440559395123086;  // std dev = 0.237, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03206523051742661;  // std dev = 2.287, 122.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=40 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2467662961866457;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6276849546080102;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10366788491412772;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.10103768498862228;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31000268409703635;  // std dev = 0.637, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.07108898042285906;  // std dev = 1.351, 84.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00285052615891463;  // std dev = 0.483, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15542794282949673;  // std dev = 0.986, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.004884126838806833;  // std dev = 1.434, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return -0.042788301342772624;  // std dev = 0.691, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.028962150483952044;  // std dev = 1.087, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return 0.03632677634331021;  // std dev = 0.877, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1933776997972608;  // std dev = 0.057, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29792300532117977;  // std dev = 0.467, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10069217087613881;  // std dev = 0.059, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.43597778145853333;  // std dev = 0.212, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08963435278403319;  // std dev = 0.000235, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04142095871164066;  // std dev = 0.867, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1990655033893093;  // std dev = 0.539, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.139565725135951;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.09381588781693467;  // std dev = 0.001, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07695661369552631;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07238324995242522;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024514617669539943;  // std dev = 1.148, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.444', 'seconds']
Parameter learned model CLL:-0.114049 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [6.99e-08, 72, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [2.63e-09, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.0, 0, 29], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.93, 58, 15], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.825, 21, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.312, 0, 27], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.727, 89, 12], 'false,false,false,false': [1.366, 23, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.599, 2, 42], 'true,false': [0.054, 72, 0], 'false,true,true': [0.115, 0, 6], 'false,true,false': [0.005, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.077, 9, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.061, 1, 27], 'true,false': [0.0, 0, 1], 'false,true,true': [0.002, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.004, 0, 9], 'false,false,true,false': [1.22, 66, 3], 'false,false,false': [0.237, 27, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.287, 82, 40], 'false,true': [0.0, 0, 4], 'false,false,true': [0.212, 0, 6], 'false,false,false,true': [0.048, 18, 0], 'false,false,false,false': [0.046, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.637, 0, 41], 'true,false': [1.351, 79, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.483, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.986, 1, 29], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.434, 42, 13], 'false,false,true,false': [0.691, 14, 2], 'false,false,false,true': [1.087, 24, 4], 'false,false,false,false': [0.877, 8, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.057, 0, 28], 'false,true,true,true': [0.467, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.059, 88, 0], 'false,false,true,true': [0.212, 0, 4], 'false,false,true,false': [0.000235, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.867, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.539, 0, 40], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.001, 72, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.015, 7, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.148, 19, 6]}]
{'': [0.2272612748803235, 0.1728395061728397], 'true': [1.2918958832001822e-15, 7.311224796312007e-17], 'false': [-1.4802973661668753e-16, 5.28677630773884e-18], 'true,false': [6.78469626159818e-17, -1.1102230246251566e-17], 'true,false,false': [-9.25185853854297e-18, 0.0], 'false,true': [-1.4802973661668753e-16, nan]}
{'': [-3.675221047035001e-16, 0.1086557845344754], 'false': [0.11641274464607679, 0.09293197203688687], 'false,true': [nan, 0.11641274464607679], 'false,true,false': [0.11761002844510271, 0.0], 'false,false': [2.3129646346357427e-18, 0.12338779227793172], 'false,false,false': [nan, 0.12338779227793172], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.004030455870166324, 0.08641335462820335], 'false': [nan, 0.08641335462820335], 'false,false': [-6.344131569286608e-17, 0.07323751239790731], 'false,false,false': [0.07362337536996862, 0.0717272437971655], 'true': [0.004030455870166324, nan], 'true,true': [0.003612114085745688, 0.0], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.10680932108394324, 0.09919856225666361], 'true': [0.058106215637446154, 3.9943447014606503e-05], 'false': [0.09227630811418627, 0.10553438823515465], 'false,false': [nan, 0.10553438823515465], 'false,false,false': [nan, 0.10553438823515465], 'false,true': [0.013123397646886525, 2.8534566021212737e-05]}
{'': [0.03940088151590739, 0.06678343539880766], 'false': [6.092884253159982e-07, 0.06492548625437641], 'false,false': [0.0679468314647794, 0.05629756464765318], 'false,false,true': [1.4828454884726245e-06, 0.021567780777328693], 'true': [0.04021303338311909, 0.0], 'false,true': [6.092884253159982e-07, nan]}
{'': [0.04287374348297504, 0.06541701313107763], 'false': [0.0, 0.06643496680733335], 'false,false': [0.007486247075514522, 0.00012331040344939882], 'true': [nan, 0.04287374348297502], 'true,false': [nan, 0.04287374348297504], 'false,false,false': [0.00012608080759040876, 0.00011708102348432596]}
{'': [0.049862076804995915, 0.017947297542752108], 'true': [0.009885850438836623, 0.021738561511909272], 'false': [nan, 0.017947297542752108], 'false,false': [nan, 0.017947297542752108], 'false,false,false': [nan, 0.017947297542752108]}
{'': [0.03240623854354389, 0.041703683789132036], 'false': [nan, 0.04170368378913199], 'false,false': [0.03609334475239347, 0.052163316325556396], 'false,false,false': [0.04219563610001391, 0.07693192540299226], 'false,false,true': [0.03740991532284291, 0.029807121832247107], 'true': [0.03240623854354389, nan]}
{'': [0.0032544948748785313, 0.03358691438788015], 'false': [0.022817787196209312, 0.08094116512780097], 'false,false': [0.07319462246577668, 0.08342944818189214], 'false,false,false': [nan, 0.08342944818189214], 'false,false,true': [0.011205600255424358, 1.105049153571347e-08], 'false,true': [0.013651050799651787, 3.922674183488724e-05], 'false,true,true': [0.013651050799651787, nan]}
{'': [0.02005701991887278, 0.052743832368937024], 'false': [nan, 0.052743832368937024], 'false,false': [nan, 0.052743832368937024], 'true': [0.006886934802515576, 5.9251351039154206e-05], 'true,true': [0.007253789772567254, 0.0], 'true,false': [2.105818501518808e-08, 1.82783182070067e-05], 'true,false,false': [0.0, 3.421959994217829e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.989
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.02298691092581787;  // std dev = 2.766, 74.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */
%   | | | else return 0.004542753893046442;  // std dev = 1.099, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.04259347609166644;  // std dev = 0.803, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.1561947117180572;  // std dev = 1.543, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4965429073345199;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5553664367462845;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.42909632701154743;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.7185556282711265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.549554247935392;  // std dev = 1.293, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.1258711875100488;  // std dev = 0.035, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17581852151896074;  // std dev = 1.457, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.46400859845956843;  // std dev = 0.978, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.2979611365635944;  // std dev = 0.985, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.6376880609615858;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then return -0.11465988868703807;  // std dev = 0.004, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.10520849236357091;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(I, A), tweets(I, J) )
%   | then if ( follows(K, I), recursion_accounttype(K, B) )
%   | | then if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0.21751358415830996;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.23489472478674137;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11127311439644151;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.0828253974682803;  // std dev = 0.358, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.27332463695512466;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.506439451061532;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.01579443069233908;  // std dev = 0.975, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.495964577111352;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3394664173035922;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3819533889612434;  // std dev = 0.957, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.07873596974162554;  // std dev = 1.018, 68.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06395352984555651;  // std dev = 0.619, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.02037635141769562;  // std dev = 1.018, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.20652847903071936;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.27384875323753016;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.374603628291897;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then return -0.03152879589665654;  // std dev = 0.185, 63.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=10 */
%   | | else return -0.03530619400386675;  // std dev = 0.173, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27479752500899646;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.210805862738743;  // std dev = 0.707, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5610430374317713;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10863051400354143;  // std dev = 0.035, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.22635895469323328;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.09832562520980066;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.36890015472761994;  // std dev = 0.055, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09226571981130544;  // std dev = 0.007, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.03515279431249291;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.09332362079365905;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.42567573300785516;  // std dev = 0.260, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13491391304764713;  // std dev = 0.125, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.007509392390105757;  // std dev = 0.137, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.1889179295271631;  // std dev = 0.003, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.24365850477819453;  // std dev = 0.125, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.32769616572997995;  // std dev = 0.145, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08597731119826937;  // std dev = 0.000486, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else if ( follows(G, A) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.022229086303035616;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.08035135585521841;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30062541112093477;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09071987922216627;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.02410079609539569;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16112654198348905;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.20751013557272766;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.02630727732299437;  // std dev = 0.419, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.1418474307783146;  // std dev = 0.951, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.24654394116497916;  // std dev = 0.143, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07816123069546764;  // std dev = 0.004, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, J) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.2414521284871619;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.090288543841282;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.042051791577494606;  // std dev = 0.197, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10742571769388072;  // std dev = 1.004, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.22879814278028118;  // std dev = 0.119, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.17924128982831256;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07338986135579798;  // std dev = 0.002, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.06665856778766688;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H) )
%   | | then return -0.06880892934232183;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.017543227620465906;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then return 0.04626427991985729;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0458957664389714;  // std dev = 0.627, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '46.251', 'seconds']
Refined model CLL: -0.099605


******************************************
Best model found
******************************************
Results 

CLL : -0.094405 

AUC ROC : 0.994679 

AUC PR : 0.36142 

Precision : 0.354054 

Recall : 0.839744 

F1 : 0.498099 

Total Learning Time : 8.989 

Total Inference Time : 16.465352773666382 

Total revision time: 32.33843247795105
Best scored revision CLL: -0.099605


Results 

CLL : -0.094405 

AUC ROC : 0.994679 

AUC PR : 0.36142 

Precision : 0.354054 

Recall : 0.839744 

F1 : 0.498099 

Total Learning Time : 32.36504762077332 

Total Inference Time : 16.465352773666382 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.237
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7984474425621992;  // std dev = 1.939, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6688637204239861;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.005148171899772647;  // std dev = 3.353, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.17436499237911865;  // std dev = 2.251, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6024050333555215;  // std dev = 0.308, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7303510508693727;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5824134681189818;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5824134681189818;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020137465810548084;  // std dev = 3.146, 124.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=16 */
%   | | | else return 0.011366086245966274;  // std dev = 1.992, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5050145506358072;  // std dev = 1.454, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return -0.12365451412039308;  // std dev = 0.093, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.43581337249015634;  // std dev = 0.262, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.09752241869000142;  // std dev = 0.126, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3700903615459525;  // std dev = 1.133, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3151471535731753;  // std dev = 0.914, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return 0.45766161902343927;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33307468325906464;  // std dev = 0.136, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6160013235259357;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09150189244221936;  // std dev = 1.356, 112.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=4 */
%   | | else return -0.034020180151122154;  // std dev = 0.258, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.040321597788265905;  // std dev = 2.765, 160.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25368860973619467;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5385023818377986;  // std dev = 0.389, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1200723634974849;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.13855256422953116;  // std dev = 0.208, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2571844221966007;  // std dev = 2.071, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | else return -0.09298448747416334;  // std dev = 1.702, 167.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029007919236510717;  // std dev = 0.603, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1788265034810012;  // std dev = 0.991, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.31372041417481067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.031309054768762154;  // std dev = 1.788, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
%   | | | else return -0.06148026850761957;  // std dev = 0.997, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014796461446242698;  // std dev = 1.207, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0.02757214362555643;  // std dev = 1.234, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14670213219373562;  // std dev = 0.226, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2601249287695914;  // std dev = 1.304, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09466812269614036;  // std dev = 0.069, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2406606489950601;  // std dev = 1.108, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09676527916195082;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09196946271830142;  // std dev = 1.059, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19758948709928334;  // std dev = 1.290, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.14070318148207905;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08837233549065805;  // std dev = 0.028, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07841230347200037;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07451706077762439;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11098264070545116;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03194301072319107;  // std dev = 1.438, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.643', 'seconds']
Parameter learned model CLL:-0.119081 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.939, 4, 63], 'true,false,true': [7.88e-08, 112, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.677, 3, 45], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.353, 99, 18], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.251, 20, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.308, 0, 37], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.146, 108, 16], 'false,false,false,false': [1.992, 34, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.454, 1, 60], 'true,false': [0.093, 100, 0], 'false,true,true': [0.262, 1, 9], 'false,true,false': [0.126, 18, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.133, 3, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.914, 1, 38], 'true,false': [0.0, 0, 1], 'false,true,true': [0.136, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 12], 'false,false,true,false': [1.356, 108, 4], 'false,false,false': [0.258, 44, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.765, 105, 55], 'false,true': [0.012, 0, 8], 'false,false,true': [0.389, 0, 12], 'false,false,false,true': [0.085, 17, 0], 'false,false,false,false': [0.208, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.071, 4, 61], 'true,false': [1.702, 160, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.603, 11, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.991, 1, 44], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.788, 85, 15], 'false,false,true,false': [0.997, 35, 3], 'false,false,false,true': [1.207, 31, 7], 'false,false,false,false': [1.234, 10, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.226, 2, 39], 'false,true,true,true': [1.304, 1, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.069, 119, 0], 'false,false,true,true': [1.108, 1, 6], 'false,false,true,false': [0.002, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.059, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.29, 1, 56], 'true,true,false': [0.0, 0, 7], 'true,false,true': [0.028, 103, 0], 'true,false,false,true': [7.45e-09, 15, 0], 'true,false,false,false': [0.025, 6, 0], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.438, 28, 11]}]
{'': [0.21987167440736688, 0.21606648199445933], 'true': [0.056137224326129734, -1.76225876924628e-17], 'false': [-1.4802973661668753e-16, 1.708035422500241e-17], 'true,false': [5.551115123125783e-17, -1.1895246692412391e-17], 'true,false,false': [-1.2810265668751807e-17, 0.0], 'false,true': [-1.4802973661668753e-16, nan]}
{'': [0.05859375000000133, 0.10943280027598407], 'false': [0.09472970833654283, 0.14159732478648115], 'false,false': [2.3129646346357427e-18, 0.16731715135902553], 'false,false,false': [0.0, 0.16342875415435862], 'false,true': [nan, 0.09472970833654283], 'false,true,false': [0.09606238963830138, 0.0], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.0028988484437593508, 0.10202997426393419], 'false': [nan, 0.10202997426393405], 'false,false': [6.832141690000964e-17, 0.08423702881486592], 'false,false,false': [0.07984143531584198, 0.0967851598171724], 'true': [0.0029099871543522412, 0.0], 'true,true': [0.0025578411558829692, 0.0], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.10619813200427872, 0.12552555085484074], 'false': [0.0984466770407109, 0.16060136127018573], 'false,false': [nan, 0.16060136127018573], 'false,false,false': [nan, 0.16060136127018573], 'true': [0.03467111514320858, 8.60571847642766e-05], 'false,true': [0.06887411079898602, 0.015925990363551096]}
{'': [0.021370305642100896, 0.0652062446843743], 'false': [0.0014153976451424842, 0.06101759873417917], 'false,false': [0.058625480191998064, 0.06674820574295122], 'false,false,true': [0.00041981361880124207, 0.01642043381004373], 'true': [0.02141050287546218, 0.0], 'false,true': [0.0014153976451424842, nan]}
{'': [0.04776957267567499, 0.08049382293298639], 'false': [1.925306431768692e-05, 0.0868382920152047], 'false,false': [0.012603465101936514, 0.001450481573472081], 'true': [nan, 0.04776957267567497], 'true,false': [nan, 0.04776957267567499], 'false,false,false': [0.00042837025961888175, 0.0021623625976893352]}
{'': [0.05571162665691614, 0.020220393695074283], 'true': [0.06600971901528598, 0.01734913175200589], 'false': [nan, 0.020220393695074283], 'false,false': [nan, 0.020220393695074283], 'false,false,false': [nan, 0.020220393695074283]}
{'': [0.02172017823844388, 0.03803901419888709], 'false': [nan, 0.03803901419888702], 'false,false': [0.030544262671612313, 0.056574570614309275], 'false,false,false': [0.03831301515133015, 0.10155012589213787], 'false,false,true': [0.03196415802438445, 0.026148056723011275], 'true': [0.02180727566721987, 0.0], 'true,false': [0.0, nan]}
{'': [0.05119884878431023, 0.042341782559383284], 'false': [0.030280513311148494, 0.09300821255438418], 'false,false': [0.0911126488563274, 0.09346601816081124], 'false,false,false': [nan, 0.09346601816081124], 'false,false,true': [0.17539593123322908, 3.5875322205424404e-07], 'false,true': [0.06537958649762984, 4.056104810844125e-05], 'false,true,true': [0.06537958649762984, nan]}
{'': [0.026318362372946946, 0.051820887151308115], 'false': [0.0, 0.05299344626980218], 'false,false': [nan, 0.05299344626980218], 'true': [0.026328619047726244, 2.923910197793406e-05], 'true,true': [0.029208015067035055, 0.0], 'true,false': [7.643912204890376e-06, 3.33126223092831e-05], 'true,false,false': [3.7007434154171884e-18, 0.00010575638119098008]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.73
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.7256401525721038;  // std dev = 0.002, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5944734122109543;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.017190091906481318;  // std dev = 2.989, 89.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=15 */
%   | | | else return -0.03491770452060432;  // std dev = 1.383, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07660098230058286;  // std dev = 2.444, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5304249435311953;  // std dev = 0.983, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.5539638415916758;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7264665992804304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5718514828758336;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7177368152283491;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12402995822870613;  // std dev = 0.059, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07536988104292969;  // std dev = 1.451, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.20136590976901353;  // std dev = 1.740, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.47322397577319014;  // std dev = 0.449, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.3462057039603473;  // std dev = 0.733, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.5977082660229577;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6601323734974354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11776249721002051;  // std dev = 0.014, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( follows(H, A), follows(A, H) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.46804814607696277;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10767915173175199;  // std dev = 0.003, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.22664316672900495;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.08657081481716364;  // std dev = 0.375, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.28492336363908183;  // std dev = 0.982, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.44675856212457127;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1498678395080251;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4457775756288386;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33965696735897555;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.452829036605503;  // std dev = 0.147, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07941153806740626;  // std dev = 1.191, 95.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=4 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06468562688490267;  // std dev = 0.749, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return 0.09853114665097797;  // std dev = 1.481, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.22750404649268513;  // std dev = 0.982, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.34200759462297187;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09557432265353351;  // std dev = 0.001, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.26888968478774217;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.028561535325877435;  // std dev = 0.172, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1756964031894085;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4507053943352353;  // std dev = 0.287, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6161281415697611;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12136153989989554;  // std dev = 0.040, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(A, C) )
%   | | | then return 0.15420491746648476;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.21931606165661466;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.21642821616822083;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.12736604413905206;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then return 0.06609646542667699;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.30935746921365387;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then return -0.05290619528138565;  // std dev = 0.112, 133.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.030731131178123105;  // std dev = 1.024, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.017701340111204437;  // std dev = 1.235, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1261049419795045;  // std dev = 1.374, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.10410019872022096;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1948474868756668;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.16212560278806953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.24665792884088153;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3034868572088182;  // std dev = 0.280, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08309663621164631;  // std dev = 0.046, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02548077751154366;  // std dev = 0.963, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.013220577706817884;  // std dev = 1.415, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.13137408015458316;  // std dev = 0.197, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.1662313290885786;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20427153396826636;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.11847696840634618;  // std dev = 0.285, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return -0.07712723819960551;  // std dev = 0.004, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3793189968836798;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1103614506617116;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04836665694613074;  // std dev = 0.735, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.004408550582682293;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16350115834335802;  // std dev = 0.142, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.12247964045952008;  // std dev = 0.833, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.19216924358157664;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07196277846341667;  // std dev = 0.004, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.08744910160649533;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2952995707986407;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10332494802817534;  // std dev = 0.027, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14512882239834668;  // std dev = 0.632, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06618181301161938;  // std dev = 1.096, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.576', 'seconds']
Refined model CLL: -0.108534


******************************************
Best model found
******************************************
Results 

CLL : -0.114073 

AUC ROC : 0.993473 

AUC PR : 0.300894 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 7.73 

Total Inference Time : 15.894712209701538 

Total revision time: 32.892814151763915
Best scored revision CLL: -0.108534


Results 

CLL : -0.114073 

AUC ROC : 0.993473 

AUC PR : 0.300894 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 32.91942929458618 

Total Inference Time : 15.894712209701538 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.636
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.006442096170736813;  // std dev = 3.502, 142.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=20 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1340603023762055;  // std dev = 0.151, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15619471171805735;  // std dev = 2.759, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5035118180565425;  // std dev = 2.002, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | else return 0.7207717894121193;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.024577769514305254;  // std dev = 3.403, 156.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=19 */
%   | | | else return 0.0021995742743644887;  // std dev = 2.389, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.49807305675829666;  // std dev = 1.521, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.1235883747768594;  // std dev = 0.114, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49165177539007604;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10917169207391193;  // std dev = 0.089, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1146149391054855;  // std dev = 2.026, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2975567156996933;  // std dev = 1.470, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return 0.4343486359133585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32578334431486283;  // std dev = 0.130, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6060904374085472;  // std dev = 0.067, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09030912552514779;  // std dev = 1.358, 131.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=4 */
%   | | else return 0.00195213938868876;  // std dev = 0.283, 63.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.045726384169897646;  // std dev = 3.036, 199.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25600136015256353;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5232587451340781;  // std dev = 0.915, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11804158278070015;  // std dev = 0.094, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11803227394532727;  // std dev = 0.133, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2740316102856273;  // std dev = 1.847, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else return -0.08318171802948203;  // std dev = 1.821, 203.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00461697165732028;  // std dev = 0.726, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1378717916930167;  // std dev = 1.940, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2953878167507008;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.039433570398231095;  // std dev = 1.862, 120.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=16 */
%   | | | else return -0.05384809357719451;  // std dev = 1.025, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009264183656881723;  // std dev = 1.216, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.07839715058192713;  // std dev = 1.531, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19662105127461266;  // std dev = 0.055, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29272989553255246;  // std dev = 0.668, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09595037664295364;  // std dev = 0.061, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.36896681252495206;  // std dev = 0.337, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09831495007606526;  // std dev = 1.07e-06, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14433683001206069;  // std dev = 1.369, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17219764165513335;  // std dev = 1.551, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.1508794299464018;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08828397367636347;  // std dev = 0.048, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08080489834940763;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.07135845434092787;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.35276349391519574;  // std dev = 0.649, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04579067658290819;  // std dev = 1.717, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.465', 'seconds']
Parameter learned model CLL:-0.117139 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 83], 'true,false,true': [0.0, 129, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.19e-07, 0, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.502, 122, 20], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.151, 18, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.759, 32, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.002, 4, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.403, 137, 19], 'false,false,false,false': [2.389, 52, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.521, 1, 77], 'true,false': [0.114, 161, 0], 'false,true,true': [0.108, 0, 14], 'false,true,false': [0.089, 35, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.026, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.47, 2, 55], 'true,false': [0.0, 0, 1], 'false,true,true': [0.13, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.067, 0, 15], 'false,false,true,false': [1.358, 127, 4], 'false,false,false': [0.283, 53, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.036, 126, 73], 'false,true': [0.026, 0, 10], 'false,false,true': [0.915, 1, 17], 'false,false,false,true': [0.094, 26, 0], 'false,false,false,false': [0.133, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.847, 3, 83], 'true,false': [1.821, 194, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.726, 21, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.94, 4, 62], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.862, 104, 16], 'false,false,true,false': [1.025, 34, 4], 'false,false,false,true': [1.216, 30, 9], 'false,false,false,false': [1.531, 17, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.055, 0, 56], 'false,true,true,true': [0.668, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 132, 0], 'false,false,true,true': [0.337, 0, 8], 'false,false,true,false': [1.07e-06, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.369, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.551, 2, 75], 'true,true,false': [0.0, 0, 8], 'true,false,true': [0.048, 140, 0], 'true,false,false,true': [7.45e-09, 22, 0], 'true,false,false,false': [0.013, 6, 0], 'false,true': [0.649, 1, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.717, 32, 16]}]
{'': [0.23280987654321056, 0.201021230851921], 'true': [-5.136453511518796e-16, -8.443949764754712e-17], 'false': [-2.0898315757650005e-16, 4.794144879063176e-17], 'true,false': [-3.0982968129074136e-17, -1.2810265668751807e-17], 'true,false,false': [-1.2810265668751807e-17, nan], 'false,true': [-2.0898315757650005e-16, nan]}
{'': [2.2556912246352386e-16, 0.10317697887954837], 'false': [0.0848854354893187, 0.13652170528443458], 'false,false': [0.0012619042801550278, 0.16174688162476225], 'false,false,false': [0.0, 0.15864144721448295], 'false,true': [nan, 0.0848854354893187], 'false,true,false': [0.08638579103426978, 0.0], 'false,false,true': [nan, 0.0012619042801550278]}
{'': [0.06761468417651925, 0.09458861291035685], 'false': [nan, 0.09458861291035699], 'false,false': [0.05859374999999983, 0.07945777217831508], 'false,false,false': [0.07424655245242698, 0.09205677214933253], 'true': [0.06872201968418146, 0.0], 'true,true': [0.0691068499712849, 0.0], 'false,false,true': [-6.344131569286608e-17, 0.09876543209876533], 'true,false': [nan, 0.0]}
{'': [0.09469666268147134, 0.11138279602274395], 'false': [0.08176650128878941, 0.17099795340662102], 'false,false': [nan, 0.17099795340662102], 'false,false,false': [nan, 0.17099795340662102], 'true': [0.029656787507476495, 8.06853823686067e-05], 'false,true': [0.01170720712021838, 0.007934907418818672]}
{'': [0.03759710656706007, 0.06723045095009708], 'false': [0.0011296479694396992, 0.06431063596049136], 'false,false': [0.05736826375213396, 0.08009959348277768], 'false,false,true': [0.00029905986602294374, 0.014076978919759125], 'true': [0.037934083730717744, 0.0], 'false,true': [0.0011296479694396992, nan]}
{'': [0.046324316099213766, 0.0849382318899168], 'false': [6.547639075600298e-05, 0.09182812335710445], 'false,false': [0.04655460841382128, 0.0005217263147502804], 'true': [nan, 0.04632431609921422], 'true,false': [nan, 0.046324316099213766], 'false,false,false': [0.0003404943581942957, 0.00071020750539172]}
{'': [0.049961145869128414, 0.01818586953461317], 'true': [0.039684640524465485, 0.016343399731314448], 'false': [nan, 0.01818586953461317], 'false,false': [nan, 0.01818586953461317], 'false,false,false': [nan, 0.01818586953461317]}
{'': [0.05652322713508368, 0.03921801548763182], 'true': [0.05700932178459801, 0.0], 'false': [nan, 0.03921801548763158], 'false,false': [0.028640565839711522, 0.060870209071280365], 'false,false,false': [0.037932145801635266, 0.0937411609356999], 'false,false,true': [0.028902614799536867, 0.027655236369334396], 'true,false': [0.0, nan]}
{'': [0.002971034079085436, 0.03854993229550932], 'false': [0.024626333951710634, 0.0806669222442871], 'false,false': [0.05809921266898108, 0.1041069737966988], 'false,false,false': [nan, 0.1041069737966988], 'false,false,true': [0.014236684276602657, 9.457828039257284e-14], 'false,true': [0.0159556388989347, 2.7910350014335375e-05], 'false,true,true': [0.0159556388989347, nan]}
{'': [0.024258536364867328, 0.07350039816001522], 'false': [0.21050503915770158, 0.061438054378921025], 'false,false': [nan, 0.061438054378921025], 'true': [0.028323900052225816, 3.0045921686816524e-05], 'true,true': [0.031223869630045722, 0.0], 'true,false': [1.6797198193660036e-05, 2.1028735631804796e-05], 'true,false,false': [2.523234146875356e-18, 2.802064615375505e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.917
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.805517356152144;  // std dev = 1.686, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), tweets(H, J) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6757888781496163;  // std dev = 0.226, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.7349116728385313;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7377712410506982;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.052703349391891204;  // std dev = 2.912, 151.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=13 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.17095376536426612;  // std dev = 2.753, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5242160278047273;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | else return 0.5947969362557473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3708213741924911;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5848057961405497;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5638277106233628;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7299865652855224;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11886292779531878;  // std dev = 0.043, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12405877968693554;  // std dev = 1.851, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.0952889551202641;  // std dev = 2.095, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.454331713286311;  // std dev = 0.967, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.28475361437980223;  // std dev = 1.080, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.6504992216018055;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.11455422205341972;  // std dev = 0.019, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.4468689442405726;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.16210015447469195;  // std dev = 1.167, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.10697540497160823;  // std dev = 0.013, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08381361973664028;  // std dev = 1.185, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.08748551274234947;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.30075325861148;  // std dev = 0.196, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.31947835839920014;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.023045766576709314;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3860519120670225;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then if ( follows(A, J) )
%   | | then return 0.3605356135222793;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1562059224354583;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( tweets(A, K), follows(A, L) )
%   | | then return -0.039368881344990087;  // std dev = 0.187, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | | else if ( follows(M, A) )
%   | | | then return -0.07342097619881009;  // std dev = 0.863, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | | else return 0.13857177838900842;  // std dev = 1.805, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.27492601824129875;  // std dev = 0.026, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.2014831783783955;  // std dev = 0.960, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.2899768492641079;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.27041690754276615;  // std dev = 1.572, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.09376957755193081;  // std dev = 0.008, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.012370618961159499;  // std dev = 0.194, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31857387955369576;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5534059101467028;  // std dev = 0.077, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12927484509666493;  // std dev = 0.041, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.21130189025227336;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.03406179997078347;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(A, F), follows(C, F) )
%   | | | then return -0.16022687039812378;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.014420001078186973;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.23483379783978653;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then return -0.0431338653132214;  // std dev = 0.144, 197.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.031635444039709394;  // std dev = 0.261, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16425653657956535;  // std dev = 0.660, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.04404531396323505;  // std dev = 1.178, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.119322163402904;  // std dev = 1.598, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.2071913990583803;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2133797253450034;  // std dev = 0.027, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.17782943757803604;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, I) )
%   | | | then return -0.07965972860427506;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3771438368791698;  // std dev = 0.896, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.09106641761152046;  // std dev = 0.021, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else if ( tweets(A, J) )
%   | | then return -0.022619473051565735;  // std dev = 0.175, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else return 0.1428984526527446;  // std dev = 0.320, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17914270586534678;  // std dev = 0.020, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return 0.22633746022547316;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.11227433945073975;  // std dev = 0.980, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.341903111318378;  // std dev = 0.187, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07582127688579839;  // std dev = 0.003, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33138433368190057;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12680010721792753;  // std dev = 0.048, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03243404396903543;  // std dev = 0.802, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.085854279911901;  // std dev = 1.035, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12524694533794156;  // std dev = 1.359, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.2285821786143488;  // std dev = 0.309, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.03252172541739522;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.0709698775521851;  // std dev = 0.003, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.2861390242753932;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1346155935507778;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2764880816961881;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1252124309037175;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.00830725423114419;  // std dev = 0.297, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.498', 'seconds']
Refined model CLL: -0.10915


******************************************
Best model found
******************************************
Results 

CLL : -0.113227 

AUC ROC : 0.99377 

AUC PR : 0.317148 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 11.917 

Total Inference Time : 19.51241421699524 

Total revision time: 43.828885105133054
Best scored revision CLL: -0.10915


Results 

CLL : -0.113227 

AUC ROC : 0.99377 

AUC PR : 0.317148 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 43.85550024795532 

Total Inference Time : 19.51241421699524 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.322
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1073683062797981;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7261693875559795;  // std dev = 0.083, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03031513048343827;  // std dev = 3.774, 192.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09479403940229622;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1195076742842798;  // std dev = 2.977, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5610152841937964;  // std dev = 1.084, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.731150599217507;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7763396543319886;  // std dev = 0.148, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5643290406600241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5606951012685312;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.44958399015742007;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038781127129682465;  // std dev = 3.675, 205.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=21 */
%   | | | else return 0.00573507330736195;  // std dev = 2.551, 70.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4641691458327277;  // std dev = 2.358, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | else return -0.1210593413953983;  // std dev = 0.148, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.449744376129094;  // std dev = 0.200, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.11077163734296855;  // std dev = 0.076, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07489408231868581;  // std dev = 2.172, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3096866295025356;  // std dev = 1.415, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.3873214747218431;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3339033479780118;  // std dev = 0.127, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6307870658370125;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09233224426585535;  // std dev = 1.423, 172.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=4 */
%   | | else return -0.014138842371475419;  // std dev = 0.271, 82.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.042671794125117755;  // std dev = 3.453, 252.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2633024871087509;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.497267096438696;  // std dev = 1.304, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12004946087896777;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.11684356514541944;  // std dev = 0.143, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.284738661598997;  // std dev = 1.882, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.08101516432221241;  // std dev = 1.973, 274.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.022346768111600187;  // std dev = 1.061, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14920582745829347;  // std dev = 1.958, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2421321880284824;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04868004300885942;  // std dev = 2.046, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | | else return -0.04135251763204353;  // std dev = 1.223, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0213389440839794;  // std dev = 1.641, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
%   | | | else return 0.03023504984732353;  // std dev = 1.734, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15702240628753408;  // std dev = 0.181, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3075037331557293;  // std dev = 0.786, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.092140036378257;  // std dev = 0.104, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3927763816685053;  // std dev = 0.381, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09141837328758215;  // std dev = 0.000426, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06727629861135885;  // std dev = 1.633, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15777033366380722;  // std dev = 2.091, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.15354394481673822;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08589751749328776;  // std dev = 0.063, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08100193524044778;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.08066564185592402;  // std dev = 0.748, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13824855202748523;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030805455943101273;  // std dev = 1.962, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.686', 'seconds']
Parameter learned model CLL:-0.112286 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 165, 0], 'true,false,false,true': [0.983, 28, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [7.21e-09, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.083, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.774, 170, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.977, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.084, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.148, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.675, 184, 21], 'false,false,false,false': [2.551, 59, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.358, 4, 97], 'true,false': [0.148, 186, 0], 'false,true,true': [0.2, 1, 19], 'false,true,false': [0.076, 49, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.172, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.415, 2, 73], 'true,false': [0.101, 0, 4], 'false,true,true': [0.127, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.058, 0, 17], 'false,false,true,false': [1.423, 168, 4], 'false,false,false': [0.271, 71, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.453, 161, 91], 'false,true': [0.041, 0, 13], 'false,false,true': [1.304, 1, 22], 'false,false,false,true': [0.084, 24, 0], 'false,false,false,false': [0.143, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.882, 2, 107], 'true,false': [1.973, 263, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.061, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.958, 4, 80], 'true,false,true': [0.076, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.046, 139, 17], 'false,false,true,false': [1.223, 39, 5], 'false,false,false,true': [1.641, 56, 13], 'false,false,false,false': [1.734, 29, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.181, 3, 77], 'false,true,true,true': [0.786, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.104, 217, 0], 'false,false,true,true': [0.381, 0, 9], 'false,false,true,false': [0.000426, 20, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.633, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.091, 4, 94], 'true,true,false': [0.006, 0, 9], 'true,false,true': [0.063, 160, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.748, 15, 2], 'false,true': [0.074, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.962, 46, 17]}]
{'': [0.2267992631902132, 0.2049164946519049], 'true': [0.027500889996442155, 0.010099958350687046], 'false': [0.07939508506616269, 5.773159728050814e-17], 'false,true': [0.04338842975206614, 0.0], 'true,false': [-1.6417843515668981e-16, 0.060353798126951116], 'true,false,false': [0.03329369797859696, 0.25]}
{'': [8.417399513049872e-05, 0.09589287386657039], 'false': [0.07319700541410687, 0.13574481716047682], 'false,false': [0.03329369797859693, 0.16273266589153443], 'false,false,false': [0.0, 0.15021369794827885], 'false,true': [nan, 0.07319700541410687], 'false,true,false': [0.07420148364984268, 2.3129646346357427e-18], 'false,false,true': [nan, 0.03329369797859693]}
{'': [0.016834948655816636, 0.08822699740041866], 'false': [nan, 0.0882269974004186], 'false,false': [0.05246913580246915, 0.0731418325530448], 'false,false,false': [0.06586544336662736, 0.09297399664290967], 'false,false,true': [-1.4802973661668753e-16, 0.09876543209876533], 'true': [0.016706488600820704, 0.013641487696682017], 'true,true': [0.016539763126361788, 0.0], 'true,false': [0.01095879621700424, 0.0]}
{'': [0.09755889847988714, 0.10110514267198177], 'false': [0.07973569835802954, 0.14740391182581097], 'false,false': [nan, 0.14740391182581097], 'false,false,false': [nan, 0.14740391182581097], 'true': [0.055041464473130866, 0.00011764424353643632], 'false,true': [0.04018615963373486, 0.005790313459571863]}
{'': [0.025758483203367124, 0.06321548828804521], 'false': [0.0009559306387299352, 0.059589021793520366], 'false,false': [0.053538539016080904, 0.07341403069150469], 'false,false,true': [0.00020082330165603052, 0.01177681843789704], 'true': [0.02669128240006265, 0.0025465021967564228], 'false,true': [0.0009559306387299352, nan]}
{'': [0.0473077489282446, 0.08091607066120152], 'false': [0.0001322626165597418, 0.08493541678648744], 'false,false': [0.07391451768040971, 0.000365068434295004], 'true': [nan, 0.04730774892824496], 'true,false': [nan, 0.0473077489282446], 'false,false,false': [0.00029101398786659377, 0.00039600179879458017]}
{'': [0.046647173893846414, 0.04327481045453382], 'true': [0.03248702968688555, 0.01420824258250775], 'false': [nan, 0.04327481045453382], 'false,false': [nan, 0.04327481045453382], 'false,false,false': [nan, 0.04327481045453382]}
{'': [0.044857783623496114, 0.03773856762956563], 'true': [0.04565636132031975, 0.002883032995729236], 'false': [nan, 0.03773856762956619], 'false,false': [0.028422225743433466, 0.05388846950880941], 'false,false,false': [0.03904521898159266, 0.07912543988305255], 'false,false,true': [0.026833292291936876, 0.03401383682151147], 'true,false': [0.002883032995729236, nan]}
{'': [0.03260895427097203, 0.03219412143570083], 'false': [0.020415354595023708, 0.07488655057556691], 'false,false': [0.055193376416303515, 0.09524691942079065], 'false,false,false': [nan, 0.09524691942079065], 'false,false,true': [0.016159399931053666, 9.057325650596581e-09], 'false,true': [0.019329638354511486, 4.9819409018854985e-05], 'false,true,true': [0.019329638354511486, nan]}
{'': [0.029783899170660735, 0.058170559094369946], 'false': [0.0013826826716886384, 0.06108694339179631], 'false,false': [nan, 0.06108694339179631], 'true': [0.04084800006450141, 0.0028939347559498478], 'true,true': [0.044597435013704105, 4.459585551394276e-06], 'true,false': [2.4722325893922205e-05, 0.01598933528160817], 'true,false,false': [-6.938893903907228e-18, 0.032919161535190644]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.594
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8392810105712104;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.132922493471917;  // std dev = 0.094, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.6713454430968173;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | else return 0.7275838927783095;  // std dev = 0.150, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03866487089925544;  // std dev = 3.348, 166.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=17 */
%   | | | else return -0.031545662627319476;  // std dev = 1.862, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | | else return -0.12642745700929728;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.10339675760031444;  // std dev = 0.182, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.0857415145175816;  // std dev = 3.017, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5378997354492027;  // std dev = 1.402, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.7413579519624043;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7576912780639817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6722031355694223;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5695701095316514;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7420112850064674;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12145462552413354;  // std dev = 0.047, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09515669840205435;  // std dev = 2.153, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.13268423101124696;  // std dev = 1.952, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.41048610786664674;  // std dev = 0.171, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0.5378755549961733;  // std dev = 0.248, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else return -0.11468551125312262;  // std dev = 0.196, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.30867960921514204;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4197907203262531;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5404081035152574;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.03737848305876682;  // std dev = 0.203, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15235966930577538;  // std dev = 1.198, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.12349995856351563;  // std dev = 1.506, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32828030558489174;  // std dev = 0.125, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.22566392133400515;  // std dev = 1.278, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3044392149835329;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4097032399559737;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3476164306098636;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.473520704827702;  // std dev = 0.218, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08875395485289261;  // std dev = 1.312, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.07377023703976134;  // std dev = 1.244, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | | else return 0.10120179692636817;  // std dev = 1.877, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2817100609149407;  // std dev = 0.274, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04752998475154579;  // std dev = 1.433, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | | else return -0.048068779163089;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return -0.027129480576879677;  // std dev = 0.203, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.29776178414422627;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1589753635962992;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3205183785090676;  // std dev = 0.364, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.519089735561751;  // std dev = 0.724, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.13281840372251216;  // std dev = 0.041, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21942802745496984;  // std dev = 4.47e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.1017809686314406;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( tweets(C, D) )
%   | | | then return -0.2805719725450301;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.21942802745496992;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24100089968513616;  // std dev = 0.236, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2932380759022813;  // std dev = 0.103, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then return -0.05382803865036183;  // std dev = 0.129, 209.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.06505957069964503;  // std dev = 1.179, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return -0.0054777125981573535;  // std dev = 1.617, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.17994595812056136;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, C), tweets(C, E) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return -0.30562168058210865;  // std dev = 0.952, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.01649299922817298;  // std dev = 0.837, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2081087725851569;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then return -0.040628429575927244;  // std dev = 0.138, 240.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21463053163163437;  // std dev = 1.189, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12351474945737644;  // std dev = 0.081, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10341422005906535;  // std dev = 0.849, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.013111586891101798;  // std dev = 1.313, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1524904941776435;  // std dev = 0.998, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.04046030745160773;  // std dev = 1.251, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.3133871137239575;  // std dev = 0.253, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07371518967069098;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.030181661638119528;  // std dev = 0.139, 235.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=32 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21848722472689408;  // std dev = 1.035, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.11342274218201706;  // std dev = 0.068, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02546724717399137;  // std dev = 0.849, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.022421843899125667;  // std dev = 1.255, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13977291812961795;  // std dev = 0.964, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.32775554339852697;  // std dev = 1.144, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.17177232501759956;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07471455455525776;  // std dev = 0.044, 183.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13535943452627894;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28010181516510363;  // std dev = 0.203, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10193336045439999;  // std dev = 0.044, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04073286699776476;  // std dev = 0.825, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.0017402925746418955;  // std dev = 1.289, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.381', 'seconds']
Refined model CLL: -0.110767


******************************************
Best model found
******************************************
Results 

CLL : -0.113213 

AUC ROC : 0.994233 

AUC PR : 0.350585 

Precision : 0.34186 

Recall : 0.942308 

F1 : 0.501706 

Total Learning Time : 8.594 

Total Inference Time : 15.98380446434021 

Total revision time: 39.343623271942135
Best scored revision CLL: -0.110767


Results 

CLL : -0.113213 

AUC ROC : 0.994233 

AUC PR : 0.350585 

Precision : 0.34186 

Recall : 0.942308 

F1 : 0.501706 

Total Learning Time : 39.3702384147644 

Total Inference Time : 15.98380446434021 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.392
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7332722094628731;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.003444632800378214;  // std dev = 1.581, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.059752327751768905;  // std dev = 0.820, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7439976143448208;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12609900171513996;  // std dev = 1.921, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5742401464576647;  // std dev = 0.160, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6700870628005582;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5800195020751666;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5631690080654836;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02989947209808401;  // std dev = 2.122, 60.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=7 */
%   | | | else return 0.021053277367050063;  // std dev = 1.530, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5319365103896044;  // std dev = 0.659, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.12452305024843005;  // std dev = 0.091, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42062536319912613;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12534622102016127;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1638354761639351;  // std dev = 1.418, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32123160562172853;  // std dev = 0.182, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.3790824165863519;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30130903170388945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.615063071424012;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11142942079490961;  // std dev = 0.036, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.0710970131483076;  // std dev = 0.336, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0360509921555781;  // std dev = 1.453, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.259498541651169;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5289852590470533;  // std dev = 0.456, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14058461796930494;  // std dev = 0.106, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.12170069864182224;  // std dev = 0.103, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2970092135137282;  // std dev = 0.536, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09602747616102661;  // std dev = 0.652, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.007402151109915371;  // std dev = 1.005, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18790181428025465;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.19324910416856078;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.027396822321273235;  // std dev = 0.860, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return -0.11522281063752075;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009000989186666553;  // std dev = 0.846, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.028546399450898152;  // std dev = 1.124, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11227819918530932;  // std dev = 0.237, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.21336172576298454;  // std dev = 0.839, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09370622291218367;  // std dev = 0.042, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.09760944107584518;  // std dev = 0.784, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.099413999060525;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049776473803871325;  // std dev = 1.069, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14238918928027733;  // std dev = 0.886, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.23921409767525703;  // std dev = 0.237, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08612871345480148;  // std dev = 0.024, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09182194561330381;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.04676373060047393;  // std dev = 0.226, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.36997403345179214;  // std dev = 1.007, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019403340419731924;  // std dev = 1.231, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.775', 'seconds']
Parameter learned model CLL:-0.122068 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.977, 1, 21], 'true,false,true': [3.94e-08, 38, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.935, 1, 7], 'false,true,false': [0.0, 0, 2], 'false,false': [2.63e-09, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.078, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.581, 24, 4], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.82, 12, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.921, 17, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.16, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.122, 53, 7], 'false,false,false,false': [1.53, 18, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.659, 0, 22], 'true,false': [0.091, 41, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.003, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.418, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.182, 0, 17], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.013, 0, 5], 'false,false,true,false': [0.036, 39, 0], 'false,false,false': [0.336, 18, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.453, 30, 18], 'false,true': [0.043, 0, 3], 'false,false,true': [0.456, 0, 10], 'false,false,false,true': [0.106, 10, 0], 'false,false,false,false': [0.103, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.536, 0, 25], 'true,false': [0.652, 46, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.005, 16, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.033, 0, 16], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.86, 24, 4], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.846, 15, 5], 'false,false,false,false': [1.124, 12, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.237, 1, 18], 'false,true,true,true': [0.839, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 49, 0], 'false,false,true,true': [0.784, 1, 3], 'false,false,true,false': [0.049, 15, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.069, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.886, 1, 18], 'true,true,false': [0.237, 0, 3], 'true,false,true': [0.024, 25, 0], 'true,false,false,true': [0.006, 10, 0], 'true,false,false,false': [0.226, 4, 1], 'false,true': [1.007, 2, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.231, 19, 7]}]
{'': [0.21885813148789018, 0.19834710743801665], 'true': [0.04338842975206614, 0.02126654064272216], 'false': [0.08999999999999977, 9.654113257610057e-18], 'false,true': [0.10937499999999978, 0.0], 'true,false': [4.0902953538821554e-17, 0.10937500000000004], 'true,false,false': [-6.938893903907228e-18, 0.25]}
{'': [0.00035597242752019424, 0.12238990574841997], 'false': [0.08930400838581162, 0.14202471645495512], 'false,false': [0.05178575634206824, 0.1689884784516991], 'false,false,false': [0.0, 0.15370172123372397], 'false,true': [nan, 0.08930400838581162], 'false,true,false': [0.08930400838581162, nan], 'false,false,true': [nan, 0.05178575634206824]}
{'': [0.001908459346132337, 0.08975951298228052], 'false': [nan, 0.08975951298228055], 'false,false': [0.0, 0.08395585727069771], 'false,false,false': [0.07502709185050041, 0.10640738982742488], 'true': [0.0017159814741836144, 0.0018027034433382532], 'true,false': [0.0, 0.0], 'true,true': [0.0017159814741836144, nan], 'false,false,true': [nan, 0.0]}
{'': [0.10496577154205988, 0.1198051835785934], 'false': [0.07154540163792669, 0.15474911109450312], 'false,false': [nan, 0.15474911109450312], 'false,false,false': [nan, 0.15474911109450312], 'true': [0.019757573490952227, 0.00020055470565129803], 'false,true': [0.0, 8.347753243783304e-06]}
{'': [0.0020174643899236854, 0.07672639909269559], 'false': [0.0, 0.07649833509370328], 'false,false': [0.05319377710074696, 0.11275659095059691], 'false,false,true': [3.370393196662213e-05, 3.288231828313535e-05], 'true': [0.0019502100808424091, 0.0], 'false,true': [0.0, nan]}
{'': [0.04396892890762554, 0.08395543836237014], 'false': [0.0006205830902526929, 0.08672834350124352], 'false,false': [0.0207821855278393, 0.0008045197977753326], 'true': [nan, 0.04396892890762557], 'true,false': [nan, 0.04396892890762554], 'false,false,false': [0.0011185544840191825, 0.0005286349849311089]}
{'': [0.044905139590497384, 0.04808069490953539], 'false': [nan, 0.048080694909535385], 'false,false': [nan, 0.04808069490953539], 'false,false,false': [nan, 0.04808069490953539], 'true': [0.01147888209527121, 0.009046925098943661]}
{'': [6.65212850219039e-05, 0.04105562868231604], 'false': [nan, 0.04105562868231599], 'false,false': [0.024506048849102333, 0.0535981681251159], 'false,false,false': [0.035808219345245966, 0.07432102067819815], 'false,false,true': [0.02638523846681381, -2.3129646346357427e-18], 'true': [6.899689420934024e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.05626649394449564, 0.037395098311647695], 'false': [0.022928799785660123, 0.06163379853591541], 'false,false': [0.03891311447471978, 0.08795235760465715], 'false,false,false': [nan, 0.08795235760465715], 'false,false,true': [0.15359736863460471, 0.00015838649597784137], 'false,true': [0.10067452440160105, 3.592705972160883e-05], 'false,true,true': [0.10067452440160105, nan]}
{'': [0.027900715903592777, 0.1018746625964266], 'false': [0.25365456529020947, 0.05830860976476669], 'false,false': [nan, 0.05830860976476664], 'true': [0.03931539942903295, 0.0014853065842163587], 'true,true': [0.04128297448335166, 0.018757445532216182], 'true,false': [2.2304390678138385e-05, 0.003869282635978441], 'true,false,false': [3.1790344871662766e-06, 0.01024799467886605]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.593
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7358163643596299;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0435389716194778;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10492913770819928;  // std dev = 1.922, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5764549435450921;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.5513272321106713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1168121914914826;  // std dev = 0.041, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.014145309554419854;  // std dev = 1.379, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.0017896423560954343;  // std dev = 1.078, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.140995022392182;  // std dev = 1.525, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42732983683645576;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5658871392560123;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6539866459076975;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return -0.11183306331271982;  // std dev = 0.009, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.13762800641958914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(A, K) )
%   | | | then return -0.023981159523639016;  // std dev = 0.586, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1190960430837074;  // std dev = 0.949, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.17391484844727326;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3302972415268099;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3918837373979458;  // std dev = 0.140, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3159121085140755;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3185770941641084;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.49446583259457133;  // std dev = 0.093, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10112110484587887;  // std dev = 0.074, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.09864881149777803;  // std dev = 0.687, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.11405052025343367;  // std dev = 1.386, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.16170255159400343;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3073528996756936;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08570970250785423;  // std dev = 0.004, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1420666576610089;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25310814827087785;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.02611587584803236;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5420760972891463;  // std dev = 0.226, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14075430005509537;  // std dev = 0.046, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.01666613564067331;  // std dev = 0.122, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | else return 0.10635204786623573;  // std dev = 0.180, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.30070000125226015;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10620723889507708;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(G, A) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.125622998114255;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.45743190149120594;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.16748817955700945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.014823482705272797;  // std dev = 0.556, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.22159882944446677;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19031037964875241;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.04194956893299012;  // std dev = 0.108, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else return -0.11339906140985348;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.06879370293172961;  // std dev = 0.389, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.006276193237927989;  // std dev = 0.816, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return -0.012297676611374977;  // std dev = 0.468, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.11569985138563511;  // std dev = 0.940, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.18751138616181265;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15473425173612626;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.03524408011624866;  // std dev = 0.905, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2617591520979093;  // std dev = 0.202, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0864897313190418;  // std dev = 0.012, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2547845513676183;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0957474284334191;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01026845661679022;  // std dev = 0.598, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.13488792616738102;  // std dev = 0.593, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.172702588633766;  // std dev = 0.050, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.07785886483469615;  // std dev = 0.013, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.0771429606565029;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10585064584936943;  // std dev = 0.325, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.2431986893477648;  // std dev = 0.993, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2098054806776126;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08965800146669797;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06781097215392393;  // std dev = 0.543, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.20617883978337515;  // std dev = 0.473, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.992', 'seconds']
Refined model CLL: -0.11931


******************************************
Best model found
******************************************
Results 

CLL : -0.111061 

AUC ROC : 0.993682 

AUC PR : 0.417821 

Precision : 0.341737 

Recall : 0.968254 

F1 : 0.505176 

Total Learning Time : 4.593 

Total Inference Time : 6.617445230484009 

Total revision time: 15.879177675247192
Best scored revision CLL: -0.11931


Results 

CLL : -0.111061 

AUC ROC : 0.993682 

AUC PR : 0.417821 

Precision : 0.341737 

Recall : 0.968254 

F1 : 0.505176 

Total Learning Time : 21.462754592895507 

Total Inference Time : 6.617445230484009 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8364098046647294;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.06185106490048781;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6696679747431027;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.01271313137998111;  // std dev = 2.509, 74.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0016233915909099697;  // std dev = 1.532, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7374506595744976;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09001716008595627;  // std dev = 2.469, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5542114437331421;  // std dev = 0.707, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7164761273668214;  // std dev = 0.211, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5732954857711152;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5729560851655898;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5729560851655898;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03237113227847158;  // std dev = 3.081, 116.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=14 */
%   | | | else return 0.04621704746624772;  // std dev = 2.136, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.45459770549128;  // std dev = 2.220, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | else return -0.1326643809629146;  // std dev = 0.370, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.43463518933763146;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1332869483870745;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13017075369160547;  // std dev = 2.011, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3469628831615915;  // std dev = 0.367, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.2892785034203347;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.325025497968552;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5504455114871117;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10479690284339091;  // std dev = 0.957, 86.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=1 */
%   | | else return 0.07369357866078566;  // std dev = 0.353, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04083620315796664;  // std dev = 2.279, 108.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.254688479418133;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5702343842078798;  // std dev = 0.637, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13232901132505032;  // std dev = 0.187, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.12990124207072168;  // std dev = 0.102, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3157048232091836;  // std dev = 0.787, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.08297291750503315;  // std dev = 1.338, 105.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01118176501538722;  // std dev = 1.376, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19825678645923822;  // std dev = 0.034, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.14697046183725648;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.010977866925759893;  // std dev = 1.439, 60.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=10 */
%   | | | else return -0.11814893069586438;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03100321317608371;  // std dev = 1.352, 52.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
%   | | | else return 0.057253521026005394;  // std dev = 1.679, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1456008764082344;  // std dev = 0.187, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.295969858767725;  // std dev = 1.113, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10055716081887191;  // std dev = 0.168, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.34528972499328453;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09090420510912126;  // std dev = 0.048, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04292026445552188;  // std dev = 1.498, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14886609098622272;  // std dev = 1.446, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0.17799447833522933;  // std dev = 0.246, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08710316355949267;  // std dev = 0.039, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09958452999600775;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.00562362322809852;  // std dev = 0.913, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11956153200125108;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.008621946204225895;  // std dev = 1.645, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.616', 'seconds']
Parameter learned model CLL:-0.121311 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.989, 1, 45], 'true,false,true': [6.66e-08, 66, 0], 'true,false,false,true': [1.356, 23, 2], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.953, 1, 10], 'false,true,false': [0.0, 0, 4], 'false,false': [6.45e-09, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.375, 2, 35], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.509, 64, 10], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.532, 18, 3], 'false,false,false,true': [0.0, 0, 3], 'false,false,false,false': [2.469, 32, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.707, 1, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.211, 0, 2], 'true,false,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.081, 102, 14], 'false,false,false,false': [2.136, 29, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.22, 4, 46], 'true,false': [0.37, 109, 0], 'false,true,true': [0.002, 0, 7], 'false,true,false': [0.005, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.011, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.367, 0, 32], 'true,false': [0.0, 0, 1], 'false,true,true': [0.004, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.956, 1, 11], 'false,false,true,false': [0.957, 85, 1], 'false,false,false': [0.353, 28, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.279, 70, 38], 'false,true': [0.023, 0, 7], 'false,false,true': [0.637, 0, 17], 'false,false,false,true': [0.187, 27, 0], 'false,false,false,false': [0.102, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.787, 0, 47], 'true,false': [1.338, 101, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.376, 26, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.034, 0, 34], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.439, 50, 10], 'false,false,true,false': [7.45e-09, 11, 0], 'false,false,false,true': [1.352, 44, 8], 'false,false,false,false': [1.679, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.187, 1, 33], 'false,true,true,true': [1.113, 1, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.168, 87, 0], 'false,false,true,true': [0.13, 0, 3], 'false,false,true,false': [0.048, 23, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.498, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.446, 2, 38], 'true,true,false': [0.246, 0, 7], 'true,false,true': [0.039, 66, 0], 'true,false,false,true': [3.73e-09, 9, 0], 'true,false,false,false': [0.913, 10, 3], 'false,true': [0.021, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.645, 41, 11]}]
{'': [0.2268431001890366, 0.18975206611570195], 'true': [0.021266540642723226, 0.03154536862003773], 'false': [0.06222222222222188, 4.163336342344337e-17], 'false,true': [0.0826446280991734, 0.0], 'true,false': [6.728624391667616e-17, 0.10207100591715962], 'true,false,false': [0.07360000000000004, 0.0]}
{'': [0.05111995609553342, 0.11730651786968994], 'false': [0.08506944322582904, 0.14723359713525136], 'false,false': [0.11179413050412983, 0.15806501224289937], 'false,false,false': [-7.401486830834377e-17, 0.1417556209951658], 'false,false,true': [nan, 0.11179413050412983], 'false,true': [nan, 0.08506944322582904], 'false,true,false': [0.08506944322582904, nan]}
{'': [0.01743972184613827, 0.10331325518986785], 'false': [nan, 0.10331325518986785], 'false,false': [0.0, 0.09299990339776056], 'false,false,false': [0.08184648420193284, 0.12328484494916245], 'true': [0.017212903065300513, 0.01378238118445152], 'true,true': [0.017212903065300513, nan], 'true,false': [0.022155535284474004, 0.0], 'false,false,true': [0.0, 7.401486830834377e-17]}
{'': [0.10620376332249865, 0.11430642117184346], 'false': [0.0683077732749655, 0.14971362250719789], 'false,false': [nan, 0.14971362250719789], 'false,false,false': [nan, 0.14971362250719789], 'true': [0.09857206689286539, 0.0012527307507468415], 'false,true': [2.5932279121525833e-06, 2.82946923078585e-05]}
{'': [0.004179851994478086, 0.08427895635259038], 'false': [2.3601823248009524e-06, 0.08353703916578972], 'false,false': [0.06480034910482116, 0.12490114236236105], 'false,false,true': [0.07618035478102932, 0.010639875433476637], 'true': [0.004209639409725699, 0.0], 'false,true': [2.3601823248009524e-06, nan]}
{'': [0.0481120443621817, 0.08767909562094849], 'false': [7.596699381698777e-05, 0.091331134741139], 'false,false': [0.023871859237101823, 0.0007725473718327247], 'true': [nan, 0.04811204436218178], 'true,false': [nan, 0.0481120443621817], 'false,false,false': [0.0013006721859926931, 0.00032424477656472356]}
{'': [0.04980236258049318, 0.05117261042497177], 'false': [nan, 0.05117261042497178], 'false,false': [nan, 0.05117261042497177], 'false,false,false': [nan, 0.05117261042497177], 'true': [0.013166334088287504, 0.0170542071296488]}
{'': [0.00010641811439148695, 0.047438230579711166], 'false': [nan, 0.047438230579711305], 'false,false': [0.030680608392343708, 0.0628046627084423], 'false,false,false': [0.03514644202403369, 0.11740131990801705], 'false,false,true': [0.03452592172428592, 5.046468293750712e-18], 'true': [3.439699912580033e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.03501794899412272, 0.04184811835368992], 'false': [0.03509021847274605, 0.05499340156297713], 'false,false': [0.020159337784085633, 0.08634180786718547], 'false,false,false': [nan, 0.08634180786718547], 'false,true': [0.0652374093822583, 0.00032295421269138287], 'false,true,true': [0.0652374093822583, nan], 'false,false,true': [0.005643276607405712, 9.906653051782926e-05]}
{'': [0.03468856383197451, 0.05002697389473828], 'false': [0.00014496969338584817, 0.052008545242985066], 'false,false': [nan, 0.052008545242985114], 'true': [0.045892590177519774, 0.010624594673495802], 'true,true': [0.05228042215143325, 0.008668597056448794], 'true,false': [2.2633828395040293e-05, 0.04057887219263457], 'true,false,false': [1.5419764230904951e-18, 0.06414381030479153]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.7748156017661789;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(F, C), tweets(F, G) )
%   | | | then return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.684990653590265;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.7322259441501947;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.735981226434616;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.362544665225983;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06955777819062912;  // std dev = 0.853, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.36707196223672167;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.051170815540240104;  // std dev = 2.509, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5210762414038869;  // std dev = 0.202, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.5638643553458363;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return 0.7419947405185283;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6952498681933762;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5538793767570644;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6099231107590062;  // std dev = 0.272, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11982887316662469;  // std dev = 0.162, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.032320167355518015;  // std dev = 1.116, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.1295840084104229;  // std dev = 2.093, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.4536714882855303;  // std dev = 0.262, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2232251764798281;  // std dev = 0.799, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.48599875301961815;  // std dev = 0.118, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11281448836563444;  // std dev = 0.183, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4225505285045621;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10451035824279266;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then if ( recursion_accounttype(L, B) )
%   | | | then return 0.6442780464406278;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1483597671502332;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.1719025914610308;  // std dev = 0.403, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then return 0.33132436922764724;  // std dev = 0.073, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.4456406001601473;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.43644691152881787;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3069712058406015;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.35185786066203434;  // std dev = 0.312, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09861650187434366;  // std dev = 0.147, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.022056965835151366;  // std dev = 1.414, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | | else return 0.059414221604511264;  // std dev = 1.645, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.20015857226242975;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.25863151901584414;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.29256311415280944;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.02551891330640011;  // std dev = 0.124, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | | else return -0.08391910025430026;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2574880732298189;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3420334297733828;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5730502739803575;  // std dev = 0.232, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12430185513014325;  // std dev = 0.023, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2200459316660755;  // std dev = 0.097, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), tweets(D, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.27450628373969993;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07925554864651596;  // std dev = 0.464, 72.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=1 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.1281420519129825;  // std dev = 0.751, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.07366710948726073;  // std dev = 1.111, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35397546642031913;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09853518245061582;  // std dev = 0.076, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.27260327898515785;  // std dev = 0.531, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05602258191726214;  // std dev = 0.919, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.10421687578369136;  // std dev = 0.278, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.17417777115855448;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.23693168476437687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then return -0.03477572529495197;  // std dev = 0.097, 66.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=10 */
%   | | else return -0.06898973427425387;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.012679499928078042;  // std dev = 0.867, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return -0.049760782377827655;  // std dev = 0.616, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.005715906483471217;  // std dev = 0.853, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.04422240520450664;  // std dev = 1.126, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.11088145220470448;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.15992138094144462;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.18655507588187634;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24702239311392624;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.03217702871297975;  // std dev = 0.132, 93.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38488535593374457;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09447669605062217;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.12993094767608315;  // std dev = 0.853, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.06347134229778414;  // std dev = 1.087, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1686942858403541;  // std dev = 0.027, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.06237866189664976;  // std dev = 0.210, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.06958400702370152;  // std dev = 0.026, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.04824182642720093;  // std dev = 0.122, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.17519350752284327;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return -0.08559979325564913;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.005178338160546671;  // std dev = 0.512, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -7.401582529015633E-4;  // std dev = 0.754, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.10001553459236669;  // std dev = 1.057, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.395', 'seconds']
Refined model CLL: -0.110712


******************************************
Best model found
******************************************
Results 

CLL : -0.110521 

AUC ROC : 0.9918 

AUC PR : 0.301439 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 7.368 

Total Inference Time : 11.848255157470703 

Total revision time: 26.843541936874388
Best scored revision CLL: -0.110712


Results 

CLL : -0.110521 

AUC ROC : 0.9918 

AUC PR : 0.301439 

Precision : 0.339726 

Recall : 0.984127 

F1 : 0.505092 

Total Learning Time : 32.4271188545227 

Total Inference Time : 11.848255157470703 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.316
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8291634278531359;  // std dev = 1.394, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.05094197399139689;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7089747541583096;  // std dev = 1.000, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.026613018593277107;  // std dev = 2.999, 119.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03358203107013837;  // std dev = 1.565, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4069724164817546;  // std dev = 1.086, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.08492881907485514;  // std dev = 3.205, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.550225598462325;  // std dev = 1.022, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7979042328262442;  // std dev = 0.099, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.43062025866229775;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5650939127007268;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5650939127007267;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010499595166978936;  // std dev = 3.640, 153.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=21 */
%   | | | else return 0.06257389624962117;  // std dev = 2.535, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5350662920924114;  // std dev = 1.158, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return -0.12643777630233285;  // std dev = 0.086, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4522396541644807;  // std dev = 0.080, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.13299118800840162;  // std dev = 0.005, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11578254958084211;  // std dev = 2.348, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.27960780841060234;  // std dev = 1.592, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | else return 0.4133595745767581;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3036669764365155;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6070702809840786;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10452771294071717;  // std dev = 0.907, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   | | else return 0.010214099230662202;  // std dev = 0.300, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04555274345003164;  // std dev = 2.803, 146.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=57 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2511048566879545;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4916226725167335;  // std dev = 1.575, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.128872259030948;  // std dev = 0.174, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.12440790883823874;  // std dev = 0.096, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2547139810388759;  // std dev = 2.120, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | else return -0.09427594150534045;  // std dev = 1.554, 152.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06362945529177302;  // std dev = 1.750, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19852974561888118;  // std dev = 0.061, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.21938179186586226;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.015724893778829248;  // std dev = 1.581, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
%   | | | else return -0.08157536237418118;  // std dev = 0.639, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.00612806617143023;  // std dev = 1.627, 61.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=14 */
%   | | | else return 0.033712155381431304;  // std dev = 1.892, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16749075585621864;  // std dev = 0.144, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29307880277199083;  // std dev = 1.065, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1004092919943544;  // std dev = 0.124, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3520526251501813;  // std dev = 0.250, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09543085876826728;  // std dev = 0.059, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04547706704430216;  // std dev = 1.889, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17496260825313503;  // std dev = 1.222, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.1589423378970836;  // std dev = 0.262, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08629418780758968;  // std dev = 0.031, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10131206033061106;  // std dev = 0.032, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.02413093445556094;  // std dev = 0.871, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0177136858894791;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0372073423685669;  // std dev = 1.977, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.348', 'seconds']
Parameter learned model CLL:-0.118839 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.394, 2, 67], 'true,false,true': [7.88e-08, 84, 0], 'true,false,false,true': [1.348, 20, 2], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 9], 'false,false': [7.9e-09, 56, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.0, 1, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.999, 105, 14], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.565, 25, 3], 'false,false,false,true': [1.086, 2, 4], 'false,false,false,false': [3.205, 56, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.022, 1, 44], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.099, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.64, 132, 21], 'false,false,false,false': [2.535, 40, 12]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.158, 0, 69], 'true,false': [0.086, 140, 0], 'false,true,true': [0.08, 0, 12], 'false,true,false': [0.005, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.348, 26, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.592, 3, 49], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.058, 0, 15], 'false,false,true,false': [0.907, 115, 1], 'false,false,false': [0.3, 75, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.803, 89, 57], 'false,true': [0.072, 0, 10], 'false,false,true': [1.575, 2, 26], 'false,false,false,true': [0.174, 52, 0], 'false,false,false,false': [0.096, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.12, 4, 71], 'true,false': [1.554, 147, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.75, 30, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.061, 0, 52], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.581, 66, 13], 'false,false,true,false': [0.639, 21, 1], 'false,false,false,true': [1.627, 47, 14], 'false,false,false,false': [1.892, 33, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.144, 1, 50], 'false,true,true,true': [1.065, 1, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.124, 137, 0], 'false,false,true,true': [0.25, 0, 8], 'false,false,true,false': [0.059, 32, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.889, 25, 11]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.222, 1, 58], 'true,true,false': [0.262, 0, 9], 'true,false,true': [0.031, 96, 0], 'true,false,false,true': [0.032, 24, 0], 'true,false,false,false': [0.871, 10, 3], 'false,true': [0.881, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.977, 49, 19]}]
{'': [0.2381323928716331, 0.20637718314372794], 'true': [0.028145347616045965, 0.026528925619834633], 'false': [3.089316242435218e-16, 5.947623346206196e-17], 'true,false': [7.401486830834377e-17, 0.10207100591715962], 'true,false,false': [0.0826446280991736, 0.18750000000000003], 'false,true': [-2.5376526277146434e-16, -2.9605947323337506e-16]}
{'': [0.018515494911190485, 0.1072230260782862], 'false': [0.07556578167462726, 0.13668715140596838], 'false,false': [0.08746649250025527, 0.14849522643754373], 'false,false,false': [0.19661570353364058, 0.13696321207498427], 'false,false,true': [nan, 0.08746649250025527], 'false,true': [nan, 0.07556578167462726], 'false,true,false': [0.07556578167462726, nan]}
{'': [0.0393977910132608, 0.10623562156227456], 'false': [nan, 0.10623562156227487], 'false,false': [2.220446049250313e-16, 0.09698466632012283], 'false,false,false': [0.08657731036308955, 0.12362104406462163], 'true': [0.023217954613205985, 0.1432248611454601], 'true,false': [0.004931644239351329, 0.15999999999999998], 'true,true': [0.023217954613205985, nan], 'false,false,true': [0.0, 1.2688263138573217e-16]}
{'': [0.10321782925426982, 0.11502682216199231], 'false': [0.08049872885284562, 0.14507856299433777], 'false,false': [nan, 0.14507856299433777], 'false,false,false': [nan, 0.14507856299433777], 'true': [0.019417941537859043, 5.2472138114907046e-05], 'false,true': [0.00642484473490675, 2.2028480784636546e-05]}
{'': [0.04816525283670883, 0.07228182348693088], 'false': [2.8313851386341237e-05, 0.07131743004063319], 'false,false': [0.057649576606215704, 0.09012937412042583], 'false,false,true': [0.00022253177527099173, 0.007093994641635848], 'true': [0.04875396930362181, 0.0], 'false,true': [2.8313851386341237e-05, nan]}
{'': [0.05381891678921243, 0.08792154218637348], 'false': [0.0005170812594280427, 0.09122408982879913], 'false,false': [0.0886370789185382, 0.00044826502138245147], 'true': [nan, 0.05381891678921243], 'true,false': [nan, 0.05381891678921243], 'false,false,false': [0.0005820748313587454, 0.00024856324982592615]}
{'': [0.057389558533973394, 0.0651308002074421], 'false': [nan, 0.06513080020744212], 'false,false': [nan, 0.0651308002074421], 'false,false,false': [nan, 0.0651308002074421], 'true': [0.059936201440168875, 0.015892694161594997]}
{'': [7.941143977729936e-05, 0.045172527237557894], 'false': [nan, 0.045172527237558], 'false,false': [0.029541797192056324, 0.05894614361239536], 'false,false,false': [0.0434132372414662, 0.0795639950937508], 'false,false,true': [0.03165216053101922, 0.018571927234400265], 'true': [7.273466147850183e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.020659774369321687, 0.040181134738133895], 'false': [0.027303768460825665, 0.06533222971648846], 'false,false': [0.033690208870160686, 0.09909891777776886], 'false,false,false': [nan, 0.09909891777776886], 'false,false,true': [0.007818332235525041, 0.00010988435286102619], 'false,true': [0.04537922983948883, 0.0001113635288918113], 'false,true,true': [0.04537922983948883, nan]}
{'': [0.026446135306326876, 0.06435220116036965], 'false': [0.1553435030050545, 0.057455067044619605], 'false,false': [nan, 0.057455067044619605], 'true': [0.022992996635978424, 0.0068888724058267835], 'true,true': [0.02530679263839165, 0.007602097593898284], 'true,false': [9.7224126704235e-06, 0.024128064437357963], 'true,false,false': [4.3557316233113395e-05, 0.05838467047060267]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.457
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.7956489350995123;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.681011873749416;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.7220415904057464;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7328119107273311;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.7460296514335686;  // std dev = 0.139, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3985798560464797;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12791417852986647;  // std dev = 0.009, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.028176825242398607;  // std dev = 2.162, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
%   | | | else return 0.24631930379692052;  // std dev = 2.097, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.563381330323177;  // std dev = 0.005, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.6177985718909209;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4787837244535617;  // std dev = 0.251, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5595234984019859;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5744298648431014;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5846284874104789;  // std dev = 0.949, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.11922671539370046;  // std dev = 0.130, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05016218653569087;  // std dev = 1.076, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | | else return 0.13671500341398166;  // std dev = 2.190, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.3598439828607416;  // std dev = 0.261, 62.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=57 */
%   | | else return 0.5541968679947747;  // std dev = 0.091, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.11175341414945975;  // std dev = 0.020, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.44076923507601196;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.10170812469484922;  // std dev = 0.002, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.5524712163898409;  // std dev = 0.130, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1157915798058618;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.15018158657176373;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1943631438528626;  // std dev = 1.338, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2800977153691679;  // std dev = 1.370, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.33261982721511174;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3293971827315905;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1432005891951032;  // std dev = 0.817, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3416587985240015;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3639722277739799;  // std dev = 0.187, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09023126355337523;  // std dev = 0.747, 118.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=1 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.06803989777844818;  // std dev = 0.810, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | | else return 0.06841799312081537;  // std dev = 2.190, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27504916465538665;  // std dev = 0.008, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.25917161693651;  // std dev = 0.000342, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08386336611647588;  // std dev = 3.65e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.06140500984160391;  // std dev = 0.109, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3352009707538248;  // std dev = 0.166, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27143374594751135;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3407344879534004;  // std dev = 0.300, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5557725771952167;  // std dev = 0.191, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12306209150418825;  // std dev = 0.041, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22923545852315252;  // std dev = 0.026, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.21165801478489582;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03500653180835847;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.2524429697752299;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16999083074825752;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.21341309878645187;  // std dev = 0.885, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.08002403128589743;  // std dev = 0.057, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.04855700532434697;  // std dev = 0.713, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return 0.06051522167126523;  // std dev = 1.651, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18813417096107932;  // std dev = 0.010, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.06460279735682403;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.33532630671589003;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.11610436719870114;  // std dev = 0.333, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.07412587952365275;  // std dev = 0.005, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.282658782944324;  // std dev = 0.358, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10341689204373143;  // std dev = 0.189, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.061034161471889795;  // std dev = 0.738, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.035946554329204045;  // std dev = 1.096, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16439754673370843;  // std dev = 0.018, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.06451224087624281;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1894667133795077;  // std dev = 0.325, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.11198370065301916;  // std dev = 0.805, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.07044615091913704;  // std dev = 0.006, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2803539067219504;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08842857537549284;  // std dev = 0.159, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02850899214500875;  // std dev = 0.668, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.09594981121493604;  // std dev = 1.133, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.12904065383728064;  // std dev = 0.109, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return -0.015459293891657521;  // std dev = 0.409, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.06435574971241279;  // std dev = 0.076, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.10884396697781965;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09850909526948712;  // std dev = 0.786, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else return -0.02786297152003054;  // std dev = 0.144, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2647403884074634;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15550072779826876;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.006900525554179022;  // std dev = 0.295, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.360', 'seconds']
Refined model CLL: -0.102202


******************************************
Best model found
******************************************
Results 

CLL : -0.100842 

AUC ROC : 0.992909 

AUC PR : 0.357285 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 8.457 

Total Inference Time : 14.251823902130127 

Total revision time: 33.282569883346554
Best scored revision CLL: -0.102202


Results 

CLL : -0.100842 

AUC ROC : 0.992909 

AUC PR : 0.357285 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 38.86614680099487 

Total Inference Time : 14.251823902130127 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.928
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8354216623722391;  // std dev = 1.398, 88.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=86 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09056901361843647;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6990290866395035;  // std dev = 1.405, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03996215640646743;  // std dev = 3.222, 159.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01874220254095023;  // std dev = 1.745, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1038239998542142;  // std dev = 3.924, 107.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5573421915582057;  // std dev = 1.038, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7120002996538272;  // std dev = 0.216, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5926117872312864;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5659999279981753;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.033654709697452205;  // std dev = 4.109, 235.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=26 */
%   | | | else return 0.06365272626783061;  // std dev = 3.204, 82.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5152402243240217;  // std dev = 1.724, 90.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=89 */
%   | else return -0.12238139746864544;  // std dev = 0.123, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.40268296650124985;  // std dev = 0.261, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.13022299383934022;  // std dev = 0.004, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4189555245201809;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11040220644862139;  // std dev = 2.905, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.29785269297896755;  // std dev = 1.438, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return 0.40506164114880117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3084146504897868;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.43412761908592834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6132270043850279;  // std dev = 0.083, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10296561914674719;  // std dev = 1.186, 188.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=2 */
%   | | else return 0.02181660735747322;  // std dev = 0.313, 122.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028397272725306955;  // std dev = 3.267, 199.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19373630590681887;  // std dev = 0.964, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5375501519028713;  // std dev = 1.267, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1366090617005239;  // std dev = 0.197, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.12658514693231676;  // std dev = 0.154, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2593141173352184;  // std dev = 2.418, 101.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=96 */
%   | else return -0.08848170476998378;  // std dev = 1.504, 191.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.039684136182974755;  // std dev = 2.097, 73.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18784862312144204;  // std dev = 1.000, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2320409018831156;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03774706944394656;  // std dev = 1.851, 127.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=15 */
%   | | | else return -0.08656808615541435;  // std dev = 0.655, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015088530707892563;  // std dev = 1.850, 97.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=19 */
%   | | | else return 0.06084959558931156;  // std dev = 2.262, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1446875692602177;  // std dev = 0.192, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3036178387554377;  // std dev = 1.040, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0942572697459774;  // std dev = 0.141, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.34936768616985653;  // std dev = 0.362, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09118859012434653;  // std dev = 0.049, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08807541310786747;  // std dev = 2.081, 46.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19592507120421404;  // std dev = 0.718, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else return 0.17694486061229636;  // std dev = 0.340, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.082472644013773;  // std dev = 0.050, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09670838190226384;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.001732403892333889;  // std dev = 0.935, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11920536899723295;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015175033863180162;  // std dev = 2.510, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.680', 'seconds']
Parameter learned model CLL:-0.118072 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.398, 2, 86], 'true,false,true': [7.6e-08, 113, 0], 'true,false,false,true': [1.377, 37, 2], 'true,false,false,false': [1.095, 3, 2], 'false,true,true': [8.43e-08, 0, 23], 'false,true,false': [0.957, 1, 11], 'false,false': [8.54e-09, 80, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.405, 2, 70], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.222, 143, 16], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.745, 29, 4], 'false,false,false,true': [0.0, 0, 5], 'false,false,false,false': [3.924, 78, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.038, 1, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.216, 0, 3], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.119, 0, 5], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [4.109, 209, 26], 'false,false,false,false': [3.204, 63, 19]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.724, 1, 89], 'true,false': [0.123, 176, 0], 'false,true,true': [0.261, 1, 16], 'false,true,false': [0.004, 27, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.905, 40, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.438, 2, 64], 'true,false': [0.0, 0, 1], 'false,true,true': [0.03, 0, 13], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.083, 0, 19], 'false,false,true,false': [1.186, 186, 2], 'false,false,false': [0.313, 98, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.267, 128, 71], 'false,true': [0.964, 1, 15], 'false,false,true': [1.267, 1, 38], 'false,false,false,true': [0.197, 57, 0], 'false,false,false,false': [0.154, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.418, 5, 96], 'true,false': [1.504, 185, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.097, 51, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.0, 1, 68], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.851, 112, 15], 'false,false,true,false': [0.655, 27, 1], 'false,false,false,true': [1.85, 78, 19], 'false,false,false,false': [2.262, 41, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.192, 3, 65], 'false,true,true,true': [1.04, 1, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.141, 159, 0], 'false,false,true,true': [0.362, 0, 12], 'false,false,true,false': [0.049, 39, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.081, 29, 17]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.718, 0, 73], 'true,true,false': [0.34, 0, 13], 'true,false,true': [0.05, 126, 0], 'true,false,false,true': [0.029, 23, 0], 'true,false,false,false': [0.935, 16, 4], 'false,true': [0.033, 0, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.51, 76, 29]}]
{'': [0.23240316534777306, 0.20824196597353634], 'true': [0.022210743801652878, 0.024828593452066925], 'false': [0.027755102040817953, 7.216449660063518e-17], 'false,true': [3.089316242435218e-16, 0.07638888888888877], 'true,false': [5.1089909097794814e-17, 0.0826446280991734], 'true,false,false': [0.048652202498356334, 0.24000000000000005]}
{'': [0.027428447819591244, 0.10735516304518955], 'false': [0.06530858932566704, 0.1436273670260388], 'false,false': [0.09229094233768295, 0.15362913621086347], 'false,false,false': [0.0, 0.14388734464275071], 'false,false,true': [nan, 0.09229094233768295], 'false,true': [nan, 0.06530858932566704], 'false,true,false': [0.06530858932566704, nan]}
{'': [0.018085905328901457, 0.09763200058162103], 'false': [nan, 0.09763200058162101], 'false,false': [0.0011742963869842654, 0.08746723248720027], 'false,false,false': [0.07185395258071701, 0.1251931970493842], 'true': [0.01859088212532007, 0.011593440840215463], 'true,true': [0.01859088212532007, nan], 'true,false': [0.015581987859737856, -4.4408920985006264e-17], 'false,false,true': [0.00283276420737173, -4.9343245538895844e-17]}
{'': [0.10224775402951419, 0.12321691733599792], 'false': [0.09363769385631181, 0.14459388977635207], 'false,false': [0.0, 0.14547324126419905], 'false,false,false': [nan, 0.1454732412641991], 'true': [0.03302917330713531, 8.527356270767778e-05], 'false,true': [0.06806945613541918, 1.3282911187170218e-05]}
{'': [0.031037896250910767, 0.06993752520060605], 'false': [0.0011109556006160734, 0.06834764451761823], 'false,false': [0.04958766936827357, 0.09798459805605779], 'false,false,true': [0.0003659917706881899, 0.007481497204088665], 'true': [0.03133661877088908, 0.0], 'false,true': [6.75744042221747e-05, 0.0]}
{'': [0.053620535693586165, 0.09703248448629413], 'false': [0.058026865183118, 0.09917781618509497], 'false,false': [0.041139323380919725, 0.000608186428367458], 'true': [nan, 0.0536205356935861], 'true,false': [nan, 0.053620535693586165], 'false,false,false': [0.0006792090113125603, 0.00047369455824940675]}
{'': [0.055131909363737096, 0.06026292018696124], 'false': [nan, 0.06026292018696117], 'false,false': [nan, 0.06026292018696124], 'false,false,false': [nan, 0.06026292018696124], 'true': [0.05787510988425218, 0.011841743400329181]}
{'': [0.014150597193265672, 0.0415081680728633], 'false': [nan, 0.04150816807286301], 'false,false': [0.025230258348166675, 0.05576039704955652], 'false,false,false': [0.035291548560831165, 0.08528889888673406], 'false,false,true': [0.026981048879081506, 0.01533624729071775], 'true': [0.014503870496808643, 6.472360626789964e-05], 'true,false': [6.472360626789964e-05, nan]}
{'': [0.03690268013802765, 0.041742816037937544], 'false': [0.02740819160792064, 0.06582765004824244], 'false,false': [0.037545364110273365, 0.09417882002991619], 'false,false,false': [nan, 0.09417882002991619], 'false,false,true': [0.010946333080226356, 6.148544859031092e-05], 'false,true': [0.03486995392493008, 0.0001247370189523172], 'false,true,true': [0.03486995392493008, nan]}
{'': [0.022472280990923035, 0.05774252395047677], 'false': [0.00021970887002427663, 0.059989782410606235], 'false,false': [nan, 0.05998978241060618], 'true': [0.007391918879182152, 0.005939407627083287], 'true,true': [0.00706963748797302, 0.008895860603687446], 'true,false': [2.0197732446698108e-05, 0.02261578319103498], 'true,false,false': [3.749647490304361e-05, 0.043755928329105714]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.436
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.06185106490048781;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7016162693538116;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.7277608158595332;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.09023971974758532;  // std dev = 0.169, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.11551255887422784;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.06617057285883401;  // std dev = 1.158, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5798979056921104;  // std dev = 0.783, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09317581912004469;  // std dev = 3.957, 112.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5603488852572807;  // std dev = 0.018, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(E, A) )
%   | | then return 0.6794490279936749;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5935141197032333;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5706532668589127;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4533190626846377;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.618936042364417;  // std dev = 0.349, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11770210792353175;  // std dev = 0.119, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.026096285135692558;  // std dev = 3.242, 92.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=18 */
%   | | | else return 0.24728375873687602;  // std dev = 2.041, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.39210227141419185;  // std dev = 0.194, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | else return 0.5200093822720598;  // std dev = 0.124, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.11292642163202103;  // std dev = 0.229, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3492193721375941;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5461276823162428;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10714633218544466;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.411791816283122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18083947038720094;  // std dev = 2.017, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.1147390049770924;  // std dev = 2.008, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.31290820812785153;  // std dev = 0.994, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.41992385611432714;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19386857638726532;  // std dev = 0.928, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10482241347379745;  // std dev = 0.674, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.31678927302762455;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3453518529985578;  // std dev = 1.221, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09232345057733561;  // std dev = 1.021, 158.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06496530559636145;  // std dev = 0.948, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return 0.08965279010832551;  // std dev = 3.010, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26553488218548404;  // std dev = 0.039, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.18113264942592522;  // std dev = 0.846, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08391938878454758;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.05920239874931046;  // std dev = 0.128, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26213740826907034;  // std dev = 0.150, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.47128934973922787;  // std dev = 0.421, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6106167466115436;  // std dev = 0.312, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13375254704933623;  // std dev = 0.237, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.13425822886783337;  // std dev = 0.280, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, C), follows(A, D) )
%   | | then return 0.2172532236202164;  // std dev = 0.017, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, C) )
%   | | | then return -0.45092545392635225;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13433595179630003;  // std dev = 0.981, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.22132719158670142;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then return -0.051986166976421486;  // std dev = 0.120, 203.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3356134685321362;  // std dev = 1.201, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.1370038721786592;  // std dev = 0.631, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return -0.005854234884112977;  // std dev = 0.533, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.0793569679566247;  // std dev = 1.691, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1858604661228226;  // std dev = 0.020, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return -0.08590657659572032;  // std dev = 0.710, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.078740277322525;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.27308033613506344;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08093298380799123;  // std dev = 0.084, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3162637293689273;  // std dev = 0.449, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.11516663420329658;  // std dev = 0.203, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.017092228222187186;  // std dev = 1.046, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.09549519417194394;  // std dev = 1.413, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1422084145967576;  // std dev = 0.136, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return -0.1588253813875403;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.15960464348348513;  // std dev = 0.962, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.17304177024763256;  // std dev = 0.241, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.04282745143536032;  // std dev = 0.117, 220.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=30 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.30173414469442444;  // std dev = 0.284, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09362037657462945;  // std dev = 0.164, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.019992095481409063;  // std dev = 1.116, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.09149477002063726;  // std dev = 1.365, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.11533577310953774;  // std dev = 0.996, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.15100126757757928;  // std dev = 0.069, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.21044117576519353;  // std dev = 0.073, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.0613618250049485;  // std dev = 0.059, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1109413219439942;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2991612233676341;  // std dev = 0.407, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09909830872229171;  // std dev = 0.256, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.054216716002634016;  // std dev = 0.662, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.08106548891806534;  // std dev = 1.127, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.001', 'seconds']
Refined model CLL: -0.107014


******************************************
Best model found
******************************************
Results 

CLL : -0.100831 

AUC ROC : 0.993324 

AUC PR : 0.353932 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 9.436 

Total Inference Time : 18.980166912078857 

Total revision time: 42.678136981964116
Best scored revision CLL: -0.107014


Results 

CLL : -0.100831 

AUC ROC : 0.993324 

AUC PR : 0.353932 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 48.26171389961243 

Total Inference Time : 18.980166912078857 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.241
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10263537862597792;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7310982782150965;  // std dev = 0.146, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03676940608321018;  // std dev = 3.524, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0582731292055123;  // std dev = 1.808, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5194734122109546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.13142875269370702;  // std dev = 4.473, 130.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5617504457178457;  // std dev = 1.071, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.2641533314772376;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7155749081357897;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6040520610480192;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5875531147367387;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5638063010507882;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030613020711379082;  // std dev = 4.642, 292.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=34 */
%   | | | else return 0.031788603087365114;  // std dev = 3.574, 114.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.488297018177674;  // std dev = 2.519, 120.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=115 */
%   | else return -0.1247208020210016;  // std dev = 0.181, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46041369058432696;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12510990330321628;  // std dev = 0.000605, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41801465667008875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0947666761950132;  // std dev = 3.274, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31030352117994986;  // std dev = 1.416, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.41910404065703344;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3110838646989219;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4505544658039665;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6126538874700581;  // std dev = 0.129, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09960652694232106;  // std dev = 1.356, 194.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=3 */
%   | | else return 0.03099716659716572;  // std dev = 0.318, 135.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03532747690817396;  // std dev = 3.158, 239.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2551905216768047;  // std dev = 0.120, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.497456342607752;  // std dev = 1.890, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12968157893426144;  // std dev = 0.212, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.12000214470016686;  // std dev = 0.131, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3032926490496382;  // std dev = 1.683, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09343130401454172;  // std dev = 1.764, 268.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03484810035029573;  // std dev = 2.287, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19173386607096077;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.22181761975582737;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03205309575893733;  // std dev = 1.902, 144.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=18 */
%   | | | else return -0.08211567593146936;  // std dev = 0.636, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015386098554611425;  // std dev = 2.260, 131.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=28 */
%   | | | else return 0.0571338265394814;  // std dev = 2.488, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14371754039205106;  // std dev = 0.190, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2797212115315916;  // std dev = 1.109, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09248987529777652;  // std dev = 0.118, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32731624023785627;  // std dev = 0.437, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09327658724408674;  // std dev = 0.052, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04218399221310684;  // std dev = 2.408, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1883893528897509;  // std dev = 0.798, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16443011998867685;  // std dev = 0.394, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08366987046332079;  // std dev = 0.052, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09362782138443052;  // std dev = 0.031, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.03331394808901572;  // std dev = 0.998, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.030951218726431348;  // std dev = 0.920, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021788718808003354;  // std dev = 2.786, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.920', 'seconds']
Parameter learned model CLL:-0.11603 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 168, 0], 'true,false,false,true': [1.386, 49, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true': [2.6e-07, 0, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.146, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.524, 164, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.808, 44, 4], 'false,false,false,true': [1.265, 2, 8], 'false,false,false,false': [4.473, 90, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.071, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.13, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.642, 258, 34], 'false,false,false,false': [3.574, 91, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.519, 5, 115], 'true,false': [0.181, 220, 0], 'false,true,true': [0.099, 0, 17], 'false,true,false': [0.000605, 37, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.274, 55, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.416, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.129, 0, 26], 'false,false,true,false': [1.356, 191, 3], 'false,false,false': [0.318, 107, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.158, 157, 82], 'false,true': [0.12, 0, 22], 'false,false,true': [1.89, 2, 52], 'false,false,false,true': [0.212, 72, 0], 'false,false,false,false': [0.131, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.683, 1, 121], 'true,false': [1.764, 261, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.287, 55, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.902, 126, 18], 'false,false,true,false': [0.636, 23, 1], 'false,false,false,true': [2.26, 103, 28], 'false,false,false,false': [2.488, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.19, 3, 78], 'false,true,true,true': [1.109, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 209, 0], 'false,false,true,true': [0.437, 0, 19], 'false,false,true,false': [0.052, 51, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.408, 49, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.798, 0, 85], 'true,true,false': [0.394, 0, 19], 'true,false,true': [0.052, 165, 0], 'true,false,false,true': [0.031, 41, 0], 'true,false,false,false': [0.998, 30, 4], 'false,true': [0.92, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.786, 97, 40]}]
{'': [0.21879594105202982, 0.22222222222222296], 'false': [5.921189464667501e-16, 7.864079757761526e-17], 'true': [0.04376735964986345, 0.01746172839506162], 'true,false': [-1.691768418476429e-16, 0.06525084641428117], 'true,false,false': [0.03767781622452899, 0.22222222222222224], 'false,true': [1.8243664837083652e-15, -1.6148698540002277e-16]}
{'': [0.0002512260951801061, 0.1137920720334589], 'false': [0.06787266754052187, 0.14876637017984964], 'false,false': [0.06808950766996114, 0.1643577720610326], 'false,false,false': [0.15999999999999984, 0.15393736688364879], 'false,false,true': [nan, 0.06808950766996114], 'false,true': [nan, 0.06787266754052187], 'false,true,false': [0.06787266754052187, nan]}
{'': [0.02455213807807568, 0.09711451111712169], 'false': [nan, 0.09711451111712177], 'false,false': [0.0009206712820166189, 0.08533504245010243], 'false,false,false': [0.07380123919386171, 0.11207718260328815], 'true': [0.026375845365946695, 0.006926830945719089], 'true,true': [0.016877971108841684, 0.0], 'true,false': [0.016353038008804017, -1.1102230246251565e-16], 'false,false,true': [0.002819555801176173, 1.1842378929335003e-16]}
{'': [0.10457334824242978, 0.11300834530799199], 'false': [0.07704272237703941, 0.1369545607662338], 'false,false': [0.0, 0.1373877396470838], 'false,false,false': [nan, 0.13738773964708378], 'true': [0.05285814198986539, 0.00014957860396138466], 'false,true': [0.009815709055859542, 3.6619009323934016e-07]}
{'': [0.025217102883657062, 0.07801050320449258], 'false': [0.000895311462317329, 0.07701281441836197], 'false,false': [0.06130629654788102, 0.10127281274000394], 'false,false,true': [0.0006437603176986811, 0.009480930147525917], 'true': [0.02538833730464635, 0.0], 'false,true': [1.3789008166409378e-05, 0.0]}
{'': [0.04172869729279024, 0.0935648124664612], 'false': [0.0006492550918078089, 0.10057856840101798], 'false,false': [0.06616105420573762, 0.0005071456812597058], 'true': [nan, 0.04172869729279012], 'true,false': [nan, 0.04172869729279024], 'false,false,false': [0.0006271296827394955, 0.0003032940418457615]}
{'': [0.04907675830761705, 0.06301290429404352], 'false': [nan, 0.06301290429404353], 'false,false': [nan, 0.06301290429404352], 'false,false,false': [nan, 0.06301290429404352], 'true': [0.023229107655681133, 0.011608438495414007]}
{'': [0.00011121179693096691, 0.04228048523425156], 'false': [nan, 0.04228048523425133], 'false,false': [0.024242735960217754, 0.055779817338019795], 'false,false,false': [0.03897489586787, 0.0814179474097897], 'false,false,true': [0.0251153846477795, 0.016858619320391854], 'true': [9.092402293008647e-05, 6.941705833096029e-05], 'true,false': [6.941705833096029e-05, nan]}
{'': [0.036112338501614875, 0.037732952034609], 'false': [0.023375742580408, 0.06042426853070367], 'false,false': [0.037755675735571946, 0.08286602337308432], 'false,false,false': [nan, 0.08286602337308432], 'false,false,true': [0.010072000359900518, 5.39417979791965e-05], 'false,true': [0.03153543698909436, 6.641601270144891e-05], 'false,true,true': [0.03153543698909436, nan]}
{'': [0.01998614259961677, 0.05895285614957531], 'false': [0.09400655354706858, 0.05664488342372944], 'false,false': [nan, 0.056644883423729406], 'true': [0.00770911537803183, 0.004513814173249018], 'true,true': [0.00749673093539036, 0.00819008504118991], 'true,false': [1.6658973965750172e-05, 0.014199782649061778], 'true,false,false': [2.293662646640635e-05, 0.0293067471442378]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.979
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8432235619651843;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12315947611544162;  // std dev = 0.135, 214.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266910418586511;  // std dev = 0.225, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6373911280938789;  // std dev = 0.959, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.7449762338830754;  // std dev = 0.198, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12750965775631942;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7247221882716759;  // std dev = 0.047, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15133961886621175;  // std dev = 2.783, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.17886014997723265;  // std dev = 1.855, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5464242423506728;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6965952847439104;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.43847393436937615;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3779494911219965;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5637888065616485;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.51430440716641;  // std dev = 1.014, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1139847864842951;  // std dev = 1.40e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10108327142628298;  // std dev = 3.122, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
%   | | | else return 0.16483740492117382;  // std dev = 2.384, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B), follows(A, G) )
%   | | | then return 0.4217795587884378;  // std dev = 0.088, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.35902455220167917;  // std dev = 1.670, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else return 0.5209439826297958;  // std dev = 0.208, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.10771660662846883;  // std dev = 0.132, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.42525711378263403;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1029697877672828;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.41371497695316406;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.058433030445502146;  // std dev = 2.800, 61.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.11227379067115287;  // std dev = 1.818, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.3260449177051083;  // std dev = 0.073, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.22147175001909328;  // std dev = 0.721, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.41340395065763785;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.49473248660854896;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33497201511964625;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3381579060680718;  // std dev = 0.966, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.09058886656921165;  // std dev = 0.961, 214.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07678537784996427;  // std dev = 0.715, 74.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=3 */
%   | | | else return 0.12124058773111077;  // std dev = 3.098, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26218228878975036;  // std dev = 0.138, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return -0.051030708482239645;  // std dev = 0.107, 144.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=14 */
%   | | else return -0.067181366303532;  // std dev = 0.091, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.29664086858367034;  // std dev = 0.203, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25832935036260657;  // std dev = 0.019, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.33470025439421647;  // std dev = 0.354, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5504502225591452;  // std dev = 1.273, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12493844864694818;  // std dev = 0.333, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.1330605319469799;  // std dev = 0.408, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(C, D), tweets(A, E) )
%   | | then return 0.21158364329029938;  // std dev = 0.049, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.20926060072753233;  // std dev = 0.000539, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19121548162597302;  // std dev = 1.100, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.2251270903404899;  // std dev = 0.043, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.22797247693723902;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.044533073493717525;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.05646785713867326;  // std dev = 0.108, 238.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=17 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.002449004101669008;  // std dev = 2.319, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.05916343889350264;  // std dev = 1.758, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.14467798194189366;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | | else return -0.08910764857857223;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18860291066283574;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.2917648473071245;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04141574708474388;  // std dev = 0.110, 236.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.31056987278196735;  // std dev = 1.235, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.115397361437675;  // std dev = 0.256, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.008608363082252218;  // std dev = 0.646, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.012833985636611292;  // std dev = 1.553, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.15654268016757616;  // std dev = 0.004, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.10525255464748798;  // std dev = 0.993, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.045232307327675005;  // std dev = 0.870, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.1822941221186543;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then return -0.02852062333465831;  // std dev = 0.125, 245.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=38 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21992316201174103;  // std dev = 0.134, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09308492736090258;  // std dev = 0.118, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04959396170363412;  // std dev = 1.563, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0.08837219379112511;  // std dev = 1.453, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11231099851547101;  // std dev = 0.184, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else return 0.28547141146235167;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06697677364511996;  // std dev = 0.059, 235.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B), tweets(G, H) )
%   | | | then return 0.02229406221379615;  // std dev = 0.825, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.27953176299283033;  // std dev = 0.604, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.11757435162231514;  // std dev = 0.041, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.22929641007868318;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11432467819991453;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.05098056598926767;  // std dev = 0.319, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.908', 'seconds']
Refined model CLL: -0.108168


******************************************
Best model found
******************************************
Results 

CLL : -0.104873 

AUC ROC : 0.992771 

AUC PR : 0.340825 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 12.979 

Total Inference Time : 19.095444202423096 

Total revision time: 49.128952236175536
Best scored revision CLL: -0.108168


Results 

CLL : -0.104873 

AUC ROC : 0.992771 

AUC PR : 0.340825 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 54.71252915382385 

Total Inference Time : 19.095444202423096 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.353
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7294533872440253;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03776278973122043;  // std dev = 1.620, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.19952384252520317;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5652256024671086;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5652256024671085;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5652256024671085;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030388621928950817;  // std dev = 1.924, 52.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | | | else return 0.049428899504397425;  // std dev = 1.268, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4906981577386462;  // std dev = 0.851, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.1237974298787872;  // std dev = 0.065, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.3457777572317017;  // std dev = 0.331, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.057780556147593656;  // std dev = 0.182, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3988353117143295;  // std dev = 0.672, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.31721055473017895;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.32479456986237865;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.35129270049053907;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6111779077584348;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08940311472024112;  // std dev = 0.670, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else return 0.04226922535229486;  // std dev = 0.292, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05567777124374787;  // std dev = 1.497, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2414367255521117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4686473791537506;  // std dev = 0.287, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12304987174434096;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.17390557233176168;  // std dev = 0.212, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3196283774802823;  // std dev = 0.507, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08987132347937746;  // std dev = 0.879, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008789906837536223;  // std dev = 0.331, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19102044404865898;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.27455249769921297;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04200923319710403;  // std dev = 0.805, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | | else return -0.02485527533583265;  // std dev = 0.625, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009381699642334559;  // std dev = 0.674, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.2123620488065476;  // std dev = 0.494, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16117797969660172;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3147495498832944;  // std dev = 0.395, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09410258954761201;  // std dev = 0.075, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3284378632517844;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09919705561272553;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04977438875258021;  // std dev = 0.703, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13839091386695768;  // std dev = 1.096, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.1300162139521186;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.0939285865390213;  // std dev = 0.252, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0685916521219653;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14076692014452807;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006493343154408846;  // std dev = 0.849, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.454', 'seconds']
Parameter learned model CLL:-0.125562 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.975, 1, 19], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.62, 35, 4], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.482, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.924, 46, 6], 'false,false,false,false': [1.268, 11, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.851, 1, 17], 'true,false': [0.065, 32, 0], 'false,true,true': [0.331, 1, 4], 'false,true,false': [0.182, 7, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.672, 1, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.041, 0, 11], 'true,false': [0.0, 0, 1], 'false,true,true': [0.105, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.075, 0, 5], 'false,false,true,false': [0.67, 39, 1], 'false,false,false': [0.292, 11, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.497, 28, 17], 'false,true': [0.0, 0, 2], 'false,false,true': [0.287, 0, 6], 'false,false,false,true': [0.116, 9, 0], 'false,false,false,false': [0.212, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.507, 0, 20], 'true,false': [0.879, 46, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.331, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.034, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.805, 25, 3], 'false,false,true,false': [0.625, 6, 1], 'false,false,false,true': [0.674, 9, 3], 'false,false,false,false': [0.494, 1, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.007, 0, 12], 'false,true,true,true': [0.395, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 43, 0], 'false,false,true,true': [0.205, 0, 3], 'false,false,true,false': [0.005, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.703, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.096, 1, 17], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.252, 34, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.849, 13, 5]}]
{'': [0.22805212620027385, 0.24489795918367352], 'false': [-1.4802973661668753e-16, -6.938893903907228e-18], 'true': [0.047499999999999785, 3.2653618371328135e-17], 'true,false': [3.027880976250427e-17, 0.0], 'true,false,false': [0.0, nan], 'false,true': [-1.4802973661668753e-16, nan]}
{'': [2.3684757858670006e-16, 0.0987759184745438], 'false': [0.06577655710226196, 0.14569112499289308], 'false,false': [-1.982541115402065e-18, 0.17482934999147165], 'false,false,false': [0.0, 0.16896722188524876], 'false,true': [nan, 0.06577655710226196], 'false,true,false': [0.06727093282428719, 0.0], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [7.425240526289419e-06, 0.09489244515923907], 'false': [nan, 0.09489244515923906], 'false,false': [0.0, 0.08150782892896888], 'false,false,false': [0.07119753457937363, 0.11478376082290755], 'true': [-1.6148698540002277e-16, 0.0], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0], 'true,true': [-1.6148698540002277e-16, nan]}
{'': [0.10158398962343806, 0.12017907052717136], 'false': [0.10109572111306371, 0.11273205315804244], 'false,false': [nan, 0.11273205315804244], 'false,false,false': [nan, 0.11273205315804244], 'true': [0.04027837509871571, 0.00013066000112811962], 'false,true': [0.10938250100505038, 0.03327828664305611]}
{'': [0.00014308699780283632, 0.06870797353237747], 'false': [0.002736212258516571, 0.06539929010315434], 'false,false': [0.058562589915131746, 0.08516431105292685], 'false,false,true': [0.0011281734845931535, 0.01120702874036381], 'false,true': [0.002736212258516571, nan], 'true': [0.0001513017995668649, 0.0]}
{'': [0.04981229124740939, 0.06878809372619323], 'false': [0.0, 0.06894597802269822], 'false,false': [0.013709902748813452, 0.003142293656017592], 'true': [nan, 0.04981229124740937], 'true,false': [nan, 0.04981229124740939], 'false,false,false': [0.0014837414051817783, 0.003196474489437186]}
{'': [0.0494409756922423, 0.018281838536053974], 'true': [0.01285611074770603, 0.015767775053120787], 'false': [nan, 0.018281838536053974], 'false,false': [nan, 0.018281838536053974], 'false,false,false': [nan, 0.018281838536053974]}
{'': [0.0005103761850651608, 0.038639728452592725], 'false': [nan, 0.038639728452592774], 'false,false': [0.029734228477534583, 0.051434327783999326], 'false,false,false': [0.03790532785788554, 0.06112056095222128], 'false,false,true': [0.023147706836467906, 0.055844908425556124], 'true': [8.165802771694018e-05, 0.0], 'true,false': [0.0, nan]}
{'': [5.562281271190295e-05, 0.0334170055517699], 'false': [0.02528558654687427, 0.05852813621898459], 'false,false': [0.045310388117446164, 0.07064451658863417], 'false,false,false': [nan, 0.07064451658863417], 'false,false,true': [0.014007696758059629, 4.5258530540978614e-06], 'false,true': [0.019544881336747782, 0.00013243697378022246], 'false,true,true': [0.019544881336747782, nan]}
{'': [0.03532924767366822, 0.03879977844089997], 'false': [0.0, 0.04000640624142076], 'false,false': [nan, 0.04000640624142076], 'true': [0.060055583069701844, 0.0018365280619791163], 'true,true': [0.0667214120731357, 0.0], 'true,false': [0.0018722018719093876, 0.0], 'true,false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.98
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0047420598513419916;  // std dev = 1.355, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | | else return -0.03156485511290852;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10925482001031578;  // std dev = 1.606, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.45536643674628463;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12769711880944637;  // std dev = 0.156, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.06471456378544573;  // std dev = 1.490, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.27948716760517883;  // std dev = 1.022, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.04758914286632316;  // std dev = 1.041, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.31701487127714406;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.429764227717727;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.7072113537764682;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3848566194272933;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return -0.11640668456551376;  // std dev = 0.008, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.125013249673717;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.4587998607383016;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A) )
%   | | then return 0.05132829358656362;  // std dev = 0.740, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.22666203604663568;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.365090227476497;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.3636282570577104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3149167989937304;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5429193387775312;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0895734316712531;  // std dev = 0.654, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08947956463560758;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08946203907675812;  // std dev = 1.180, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.28221591118385864;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2954850811896811;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25349122076681424;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.028332044074773396;  // std dev = 0.174, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else return 0.03339402885772208;  // std dev = 0.727, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2539472365685913;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.48224305777167764;  // std dev = 0.304, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.13678949098255655;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.1367532290897538;  // std dev = 0.143, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( follows(A, C), tweets(C, E) )
%   | | | then return 0.2323827148244122;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20870477228317202;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4808205947325746;  // std dev = 0.225, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.09026288177238088;  // std dev = 0.010, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(C, G), follows(G, A) )
%   | | | then return -0.12709091896394556;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.150010718052185;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.34670023251242715;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13033316928718924;  // std dev = 0.000840, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.11478006593427643;  // std dev = 0.733, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18736187983068178;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.05267718208716446;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.1723730569959132;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then return 0.3056064562331796;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.08555910886450484;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.06682585687417691;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.37319051465878667;  // std dev = 0.293, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1364456351034785;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.08753652867975885;  // std dev = 0.645, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16263135699370995;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1985481627377932;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15773437806948384;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3011673818627414;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08494562743197047;  // std dev = 0.051, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.06277728705475627;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.22784672431006014;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10857925506887263;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.059567272368550105;  // std dev = 0.645, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14837888416874348;  // std dev = 0.058, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.24420430230304602;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13176778057701;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07688834646123502;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06516171859743204;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14107536972372603;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.09176913740314745;  // std dev = 0.384, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.012140724017023506;  // std dev = 0.351, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10047468375907709;  // std dev = 0.583, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.760', 'seconds']
Refined model CLL: -0.119121


******************************************
Best model found
******************************************
Results 

CLL : -0.1226 

AUC ROC : 0.993471 

AUC PR : 0.304174 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 3.98 

Total Inference Time : 5.977335453033447 

Total revision time: 14.305645044326782
Best scored revision CLL: -0.119121


Results 

CLL : -0.1226 

AUC ROC : 0.993471 

AUC PR : 0.304174 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 19.889221961975096 

Total Inference Time : 5.977335453033447 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.801
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6654301872506586;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.014614418286111408;  // std dev = 2.377, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.15619471171805735;  // std dev = 1.825, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5854034066067854;  // std dev = 0.208, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5744988393971484;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3244988393971484;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03048870869205962;  // std dev = 2.493, 88.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=10 */
%   | | | else return 0.007466068101449706;  // std dev = 1.512, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.48511130876499403;  // std dev = 1.321, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return -0.12231138071596256;  // std dev = 0.067, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5070919039003642;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07301508515655507;  // std dev = 0.160, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19452774694478606;  // std dev = 1.161, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.29282223449576;  // std dev = 1.017, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return 0.371096303771586;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.36811338880287287;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6168541224232607;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0894286284408434;  // std dev = 0.965, 69.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=2 */
%   | | else return -0.014452360475420489;  // std dev = 0.261, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01424835209260845;  // std dev = 2.469, 121.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.29369753202742;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5042168834099006;  // std dev = 0.450, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1163062376209531;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.13424250118318246;  // std dev = 0.116, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2903636158505807;  // std dev = 1.255, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return -0.08860124999398344;  // std dev = 1.078, 111.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.056694307443730586;  // std dev = 0.873, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20614041275241438;  // std dev = 0.076, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2944270902673015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03456800971222391;  // std dev = 1.207, 58.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=7 */
%   | | | else return -0.0507048245830085;  // std dev = 0.744, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03934955652195408;  // std dev = 1.235, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return -0.005316726067279946;  // std dev = 1.003, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10104451627198736;  // std dev = 0.263, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.32399921324745057;  // std dev = 0.445, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09141488487829875;  // std dev = 0.068, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38599723573939315;  // std dev = 0.250, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09331942678186836;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06858667666856523;  // std dev = 0.884, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17444844736698256;  // std dev = 1.155, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.1618352298787069;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08618097735759325;  // std dev = 0.042, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07200776510234723;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07093744687427748;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15946557322458316;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02149955408602188;  // std dev = 1.144, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.954', 'seconds']
Parameter learned model CLL:-0.113811 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [7.3e-08, 76, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.372, 2, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.377, 60, 9], 'false,true,false,false': [0.0, 4, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.825, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.208, 0, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.866, 1, 3], 'false,false,false,true': [2.493, 78, 10], 'false,false,false,false': [1.512, 20, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.321, 1, 39], 'true,false': [0.067, 66, 0], 'false,true,true': [0.115, 0, 6], 'false,true,false': [0.16, 10, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.161, 5, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.017, 1, 29], 'true,false': [0.0, 0, 1], 'false,true,true': [0.11, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.057, 0, 8], 'false,false,true,false': [0.965, 67, 2], 'false,false,false': [0.261, 25, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.469, 83, 38], 'false,true': [0.0, 0, 3], 'false,false,true': [0.45, 0, 9], 'false,false,false,true': [0.064, 11, 0], 'false,false,false,false': [0.116, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.255, 1, 43], 'true,false': [1.078, 107, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.873, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.076, 0, 31], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.207, 51, 7], 'false,false,true,false': [0.744, 17, 2], 'false,false,false,true': [1.235, 22, 5], 'false,false,false,false': [1.003, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.263, 3, 30], 'false,true,true,true': [0.445, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.068, 86, 0], 'false,false,true,true': [0.25, 0, 4], 'false,false,true,false': [0.001, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.884, 6, 3]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.155, 1, 38], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.042, 56, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.017, 4, 0], 'false,true': [0.052, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.144, 19, 7]}]
{'': [0.21771240234375122, 0.22633136094674564], 'false': [-2.9605947323337506e-16, -3.2653618371328133e-18], 'true': [0.023242630385488926, 7.229359230117299e-17], 'true,false': [7.011934892369409e-17, -1.1102230246251566e-17], 'true,false,false': [-9.25185853854297e-18, 0.0], 'false,true': [-2.9605947323337506e-16, nan]}
{'': [0.055363321799307294, 0.10596767207281771], 'false': [0.07803803374232507, 0.15864144721448348], 'false,false': [0.0, 0.17003724115427624], 'false,false,false': [0.0, 0.15864144721448353], 'false,true': [nan, 0.07803803374232507], 'false,true,false': [0.08188891812634891, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.0014989077496811258, 0.09026900136857614], 'false': [nan, 0.09026900136857617], 'false,false': [0.12244897959183668, 0.07613342962276837], 'false,false,true': [0.0, 0.1875], 'false,false,false': [0.07060714696780439, 0.09526459346031034], 'true': [0.0015458246183839921, 0.0], 'true,true': [0.0015458246183839921, nan], 'true,false': [nan, 0.0]}
{'': [0.10318840328700027, 0.1168111842053542], 'false': [0.09804872827140576, 0.1496727807410768], 'false,false': [nan, 0.1496727807410768], 'false,false,false': [nan, 0.1496727807410768], 'true': [0.04360745136835429, 6.700557071753261e-05], 'false,true': [0.01330228334303781, 0.025500843485396833]}
{'': [0.033533236535007706, 0.06548598951184183], 'false': [0.002032916448790482, 0.06118954290048166], 'false,false': [0.05856941091582909, 0.06814459416953396], 'false,false,true': [0.00040468376347757573, 0.013486100730438573], 'true': [0.03445337141130379, 0.0], 'false,true': [0.002032916448790482, nan]}
{'': [0.05039932319097121, 0.08308225560525725], 'false': [0.0, 0.08551663135617237], 'false,false': [0.022520406742808023, 0.0008127548656332306], 'true': [nan, 0.05039932319097116], 'true,false': [nan, 0.05039932319097121], 'false,false,false': [0.00036785825342616004, 0.0010417556345134259]}
{'': [0.04684865926972786, 0.07625189848277858], 'false': [nan, 0.07625189848277858], 'false,false': [nan, 0.07625189848277858], 'false,false,false': [nan, 0.07625189848277858], 'true': [0.03578406640259142, 0.010466673945583527]}
{'': [0.0004184406116157502, 0.03801232019010457], 'false': [nan, 0.03801232019010455], 'false,false': [0.02616391926035918, 0.05913891214124034], 'false,false,false': [0.05648010878778568, 0.06289837987423172], 'false,false,true': [0.02511886602598136, 0.02915793872553449], 'true': [0.00018835940127960268, 0.0], 'true,false': [0.0, nan]}
{'': [0.06917063625278815, 0.03100212303615464], 'false': [0.021732835507907024, 0.06353881567810725], 'false,false': [0.04909794750153605, 0.08688067054164447], 'false,false,false': [nan, 0.08688067054164447], 'false,false,true': [0.015637513066796727, 1.8807960534575593e-07], 'false,true': [0.015236900224383816, 5.422014303887549e-05], 'false,true,true': [0.015236900224383816, nan]}
{'': [0.027966336016172124, 0.048091896881621944], 'false': [0.0013524287530533481, 0.05032762469546655], 'false,false': [nan, 0.05032762469546655], 'true': [0.031777971125659055, 5.996503354012023e-05], 'true,true': [0.03421106663905983, 0.0], 'true,false': [3.146311723109827e-05, 2.7818139437133088e-05], 'true,false,false': [-9.912705577010326e-19, 7.577087729162581e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 6.099
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03583211799543051;  // std dev = 2.114, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | | else return -0.06045094231767248;  // std dev = 1.148, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.07170290664412274;  // std dev = 1.957, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.5027348577989162;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.23029527177752177;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6028639355136733;  // std dev = 0.932, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.11908161170211515;  // std dev = 0.033, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17131218551099872;  // std dev = 1.337, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.28562597269740236;  // std dev = 1.027, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4260819978165433;  // std dev = 0.006, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6049067215936715;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6178464302993351;  // std dev = 0.224, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11453133951220416;  // std dev = 0.017, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3221541017426923;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.10671705586852188;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.061919239292350624;  // std dev = 0.971, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.014607889290387886;  // std dev = 0.887, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.3303861230416292;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3195469698799662;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.47496041317373255;  // std dev = 0.246, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4210703868028952;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31946931139462065;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4621070040946223;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08760247943846608;  // std dev = 0.879, 77.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=2 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.011275036497873129;  // std dev = 1.159, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.07696798498722053;  // std dev = 0.762, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), follows(D, A) )
%   | | | then return 0.26016762295115464;  // std dev = 0.014, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3364180273381388;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.04673397324771095;  // std dev = 0.916, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.03749729950793479;  // std dev = 0.139, 54.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | else return -0.024801781814198398;  // std dev = 0.172, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2537823898639543;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.41791326935430806;  // std dev = 0.285, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5590567114855911;  // std dev = 0.274, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14167421834275884;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.21207264983913554;  // std dev = 0.005, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, E) )
%   | | then return 0.25425922106356447;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20877545876237502;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.37679832831755483;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08833295628726767;  // std dev = 0.005, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.32661203296109986;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11479777596809179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27181217078942826;  // std dev = 0.530, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06490780335367459;  // std dev = 0.603, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18330834399469423;  // std dev = 0.012, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.07982265683458693;  // std dev = 0.772, 60.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
%   | | | else return -0.07285727769965246;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.2741379839134143;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07823680869323874;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.044142548643336825;  // std dev = 0.561, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.08331409341543987;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.028859581060051733;  // std dev = 0.774, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.01502879273840901;  // std dev = 0.857, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15496958581499062;  // std dev = 0.006, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.21948166199773103;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.20495216283552842;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.05161162543288311;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.07533100251849216;  // std dev = 0.006, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2980409064905089;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10602283005073743;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1041403456994184;  // std dev = 0.619, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.03977752253258707;  // std dev = 0.601, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14359855516927683;  // std dev = 0.156, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.04979833826864968;  // std dev = 1.275, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.12682160714763024;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07137655876448108;  // std dev = 0.006, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12501614361408697;  // std dev = 0.061, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.289183640143777;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1528314383834062;  // std dev = 0.188, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.015029839371917975;  // std dev = 0.462, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.01183626284775156;  // std dev = 0.594, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.018', 'seconds']
Refined model CLL: -0.108284


******************************************
Best model found
******************************************
Results 

CLL : -0.111815 

AUC ROC : 0.994194 

AUC PR : 0.336692 

Precision : 0.339535 

Recall : 0.935897 

F1 : 0.498294 

Total Learning Time : 6.099 

Total Inference Time : 7.783244609832764 

Total revision time: 20.719716453552245
Best scored revision CLL: -0.108284


Results 

CLL : -0.111815 

AUC ROC : 0.994194 

AUC PR : 0.336692 

Precision : 0.339535 

Recall : 0.935897 

F1 : 0.498294 

Total Learning Time : 26.30329337120056 

Total Inference Time : 7.783244609832764 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.352
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7956489350995126;  // std dev = 1.936, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.05851773156715445;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7106365936351323;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.01954850086211407;  // std dev = 3.009, 112.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=14 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07237591597187419;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11034644539886818;  // std dev = 2.485, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5884125136328467;  // std dev = 0.310, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8733483001516091;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5729052528281897;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5729052528281897;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04181174800805318;  // std dev = 2.778, 122.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=12 */
%   | | | else return 0.032374618300594585;  // std dev = 2.384, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4703837978626173;  // std dev = 1.783, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return -0.12116091903342424;  // std dev = 0.060, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5261024550168263;  // std dev = 0.134, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10763719817254778;  // std dev = 0.100, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17712740005725958;  // std dev = 1.766, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2840364580043298;  // std dev = 1.519, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | else return 0.3751662896580179;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3364493619124932;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6310282237340805;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09551201974509776;  // std dev = 0.993, 107.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=2 */
%   | | else return 0.015430808529806809;  // std dev = 0.311, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.043750163903013825;  // std dev = 2.786, 155.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.05236773532593049;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5482239594044057;  // std dev = 0.516, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.125425484220216;  // std dev = 0.111, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.12866929982031952;  // std dev = 0.114, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2764063659356064;  // std dev = 1.865, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else return -0.08216305058367569;  // std dev = 1.513, 147.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037577737151218295;  // std dev = 0.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1613042774078918;  // std dev = 1.387, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.3040343800643659;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05187169485296718;  // std dev = 1.473, 114.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=10 */
%   | | | else return -0.012959955331422426;  // std dev = 1.099, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0026752142281739983;  // std dev = 1.045, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | | | else return 0.14494080220280076;  // std dev = 1.262, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1735490481280137;  // std dev = 0.159, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.34247247770591177;  // std dev = 0.575, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0941954331615072;  // std dev = 0.086, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3590347420009868;  // std dev = 0.273, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09096788535712831;  // std dev = 0.000424, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.27511186504942653;  // std dev = 0.905, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16994791882069316;  // std dev = 1.518, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.1571290832286537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08556943197373634;  // std dev = 0.068, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0939443862783726;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.019090687746739787;  // std dev = 0.364, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13460755424447668;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035108877445123234;  // std dev = 1.406, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.659', 'seconds']
Parameter learned model CLL:-0.123011 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.936, 4, 60], 'true,false,true': [8.43e-08, 107, 0], 'true,false,false,true': [0.957, 11, 1], 'true,false,false,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false': [2.63e-09, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.989, 1, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.009, 98, 14], 'false,true,false,false': [0.0, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.485, 31, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.31, 0, 42], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.778, 110, 12], 'false,false,false,false': [2.384, 42, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.783, 2, 55], 'true,false': [0.06, 133, 0], 'false,true,true': [0.134, 0, 11], 'false,true,false': [0.1, 29, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.766, 12, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.519, 3, 44], 'true,false': [0.0, 0, 1], 'false,true,true': [0.13, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.065, 0, 10], 'false,false,true,false': [0.993, 105, 2], 'false,false,false': [0.311, 41, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.786, 99, 56], 'false,true': [0.894, 1, 4], 'false,false,true': [0.516, 0, 15], 'false,false,false,true': [0.111, 18, 0], 'false,false,false,false': [0.114, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.865, 3, 64], 'true,false': [1.513, 140, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.529, 6, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.387, 2, 45], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.473, 104, 10], 'false,false,true,false': [1.099, 20, 4], 'false,false,false,true': [1.045, 26, 7], 'false,false,false,false': [1.262, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.159, 1, 45], 'false,true,true,true': [0.575, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.086, 111, 0], 'false,false,true,true': [0.273, 0, 5], 'false,false,true,false': [0.000424, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.905, 3, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.518, 2, 56], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.068, 96, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.364, 3, 1], 'false,true': [0.034, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.406, 23, 12]}]
{'': [0.2204012024511507, 0.23765432098765382], 'false': [-2.5376526277146434e-16, 5.046468293750712e-18], 'true': [0.058593749999999445, 0.008129535071217397], 'true,false': [6.640586315514955e-17, 0.06222222222222227], 'true,false,false': [0.07638888888888894, 0.0], 'false,true': [-2.5376526277146434e-16, nan]}
{'': [0.020823902218197757, 0.10059238699161674], 'false': [0.07785408313771613, 0.13675485251902333], 'false,false': [0.05859374999999996, 0.15300086242463518], 'false,false,false': [0.0, 0.1436267077539456], 'false,true': [nan, 0.07785408313771613], 'false,true,false': [0.08085048142304034, 0.0], 'false,false,true': [nan, 0.05859374999999996]}
{'': [0.0039612842265181625, 0.08949223204940145], 'false': [nan, 0.08949223204940143], 'false,false': [-1.1102230246251565e-16, 0.07817335844790917], 'false,false,false': [0.06327552935521084, 0.10926709961433966], 'true': [0.002284513807804869, 0.022469436767716067], 'true,false': [0.0, 0.0], 'true,true': [0.002284513807804869, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.09024164672891898, 0.11520722222519043], 'false': [0.09100882691163245, 0.1559656264357318], 'false,false': [nan, 0.1559656264357318], 'false,false,false': [nan, 0.1559656264357318], 'false,true': [0.0180693217017221, 0.010000009026718116], 'true': [0.055794982819309696, 2.695706389426078e-05]}
{'': [0.04825472411705531, 0.06717621809570071], 'false': [0.0020990072350090816, 0.06454556626447573], 'false,false': [0.04973042665411168, 0.09687165122721118], 'false,false,true': [0.0004289349870612913, 0.009221741381967971], 'true': [0.04910840691200604, 0.0], 'false,true': [0.0020990072350090816, nan]}
{'': [0.0500829298150072, 0.10456785316949392], 'false': [0.16, 0.09921718792488302], 'false,false': [0.017768464000484426, 0.0006838827470994609], 'true': [nan, 0.050082929815007164], 'true,false': [nan, 0.0500829298150072], 'false,false,false': [0.0006819709331644016, 0.0006805749632037634]}
{'': [0.054602715808653564, 0.028027064222625436], 'true': [0.05192317928503685, 0.015570142410526903], 'false': [nan, 0.028027064222625436], 'false,false': [nan, 0.028027064222625436], 'false,false,false': [nan, 0.028027064222625436]}
{'': [0.04050797615713115, 0.03537918838961647], 'true': [0.04094543377767146, 0.0], 'false': [nan, 0.03537918838961621], 'false,false': [0.024693579579252067, 0.05857469202536542], 'false,false,false': [0.03307275968912199, 0.09369672074842761], 'false,false,true': [0.01902739882663097, 0.05035714050292955], 'true,false': [0.0, nan]}
{'': [0.02524982792751589, 0.037720009762014006], 'false': [0.025513175306363725, 0.0739487735403061], 'false,false': [0.04998249271290996, 0.08188414674703898], 'false,false,false': [nan, 0.08188414674703898], 'false,false,true': [0.014945865742966812, 1.7988145978309335e-08], 'false,true': [0.018364764265140405, 6.602392734648102e-05], 'false,true,true': [0.018364764265140405, nan]}
{'': [0.02926686426266655, 0.05398640466849536], 'false': [0.0005682912578924317, 0.056503733876562594], 'false,false': [nan, 0.056503733876562594], 'true': [0.03717871151614562, 0.0016684436308660342], 'true,true': [0.03973215913164813, 0.0], 'true,false': [4.812890533329242e-05, 0.013867681907462195], 'true,false,false': [0.0, 0.033085093749144825]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.707
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.822434649385226;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6962144889477712;  // std dev = 0.166, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return 0.7194734122109544;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04560045545008707;  // std dev = 2.547, 106.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=10 */
%   | | | else return -0.001421936463132561;  // std dev = 1.575, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.11833256961004145;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13166743038995857;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12184844949288082;  // std dev = 2.462, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5815802552920786;  // std dev = 0.314, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(E, A) )
%   | | then return 0.8542041597779584;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5582343302535383;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7259370735096484;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12130901021910037;  // std dev = 0.045, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21785377847477955;  // std dev = 1.544, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.17319286127370975;  // std dev = 1.614, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4228978175143909;  // std dev = 0.004, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4399771054524579;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6005071227147604;  // std dev = 0.146, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.11639601654540198;  // std dev = 0.020, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.33072698987085347;  // std dev = 0.809, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4991991851563545;  // std dev = 0.150, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11202490021182378;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3206160635417217;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.16620556532141853;  // std dev = 0.390, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), tweets(F, G) )
%   | | then if ( tweets(A, H), follows(A, F) )
%   | | | then return 0.26758899009324344;  // std dev = 1.525, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.39103895908869774;  // std dev = 0.290, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.09024183140976831;  // std dev = 0.651, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.04373811388185628;  // std dev = 0.710, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.31641175237024255;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.44136106074830883;  // std dev = 0.122, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09309140350319227;  // std dev = 0.880, 121.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=2 */
%   | | else if ( follows(M, A) )
%   | | | then return -0.047215913538668795;  // std dev = 0.870, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return 0.2685578246975042;  // std dev = 1.349, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.24670803003650552;  // std dev = 1.018, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.014309299118394533;  // std dev = 1.118, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.27471216352111;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return -0.05402664725292749;  // std dev = 1.122, 99.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=9 */
%   | | | else return -0.08836198525452788;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.002072443901401234;  // std dev = 0.192, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.05496624657460565;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.48844810762468865;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.16376284279036993;  // std dev = 0.058, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( tweets(A, D) )
%   | | then return 0.22840741909528042;  // std dev = 0.013, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.2049431960867989;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2498226023009541;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2654769370951483;  // std dev = 0.988, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.027464770845030313;  // std dev = 1.366, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return -0.08656699718530049;  // std dev = 0.005, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3236013069559874;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.17161038519388766;  // std dev = 0.226, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.056647011509603315;  // std dev = 0.276, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.13274872353308761;  // std dev = 1.377, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.19768931882875002;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.001477215179175495;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.19794026831635692;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2627045576819573;  // std dev = 0.253, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.0813921718183554;  // std dev = 0.065, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.27904382102150876;  // std dev = 0.210, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10965295635041197;  // std dev = 0.039, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.013544358536771623;  // std dev = 0.314, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.1840014805231082;  // std dev = 0.043, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.15533282059218612;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.13608173056488845;  // std dev = 1.108, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.23511227311050023;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.0747079525936579;  // std dev = 0.005, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.24080614106946166;  // std dev = 0.172, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09940342477327241;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.05365629096017559;  // std dev = 0.747, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.06563666539888896;  // std dev = 0.935, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11120623024574917;  // std dev = 1.364, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.2050974624801873;  // std dev = 0.254, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.16607877892882295;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.06610400822703011;  // std dev = 0.034, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.27589499268145823;  // std dev = 0.129, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return -0.03752321518635746;  // std dev = 0.575, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return -0.009276174036142948;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.022571405651253252;  // std dev = 0.679, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.024687475201537093;  // std dev = 0.965, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.886', 'seconds']
Refined model CLL: -0.11189


******************************************
Best model found
******************************************
Results 

CLL : -0.117542 

AUC ROC : 0.995313 

AUC PR : 0.460006 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 7.707 

Total Inference Time : 13.190831661224365 

Total revision time: 30.478700622558595
Best scored revision CLL: -0.11189


Results 

CLL : -0.117542 

AUC ROC : 0.995313 

AUC PR : 0.460006 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 36.06227754020691 

Total Inference Time : 13.190831661224365 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.564
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8343394112899883;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 5.59e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7091022015109087;  // std dev = 0.992, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03477624911412535;  // std dev = 3.322, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06853355623325078;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11596051882570767;  // std dev = 2.672, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5608222958975675;  // std dev = 0.897, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.7311444574895622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8765745712351602;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5637900797383679;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4387900797383679;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05113756769386412;  // std dev = 3.211, 184.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=16 */
%   | | | else return 0.027459675147639948;  // std dev = 2.379, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5025775776841908;  // std dev = 1.098, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return -0.1183508873730873;  // std dev = 0.062, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5122438110346988;  // std dev = 0.125, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10484309774223056;  // std dev = 0.102, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23696212798181915;  // std dev = 1.669, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2605130194220073;  // std dev = 2.000, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | else return 0.14388810526125329;  // std dev = 0.910, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32982013090079254;  // std dev = 0.134, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6211739328446844;  // std dev = 0.069, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09279774688056389;  // std dev = 1.201, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else return -0.018178646168201164;  // std dev = 0.268, 69.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02072375000702901;  // std dev = 3.309, 227.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2587918513327761;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4904080503336784;  // std dev = 1.010, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12901698189463087;  // std dev = 0.150, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.12606887889940196;  // std dev = 0.190, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28957551111600077;  // std dev = 1.691, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else return -0.07037043933863822;  // std dev = 1.651, 155.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03516554431960302;  // std dev = 0.633, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1701386098796665;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return -0.14901617228171332;  // std dev = 0.636, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.044517994171874006;  // std dev = 1.591, 122.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=12 */
%   | | | else return -0.03756816035316338;  // std dev = 1.210, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013938232326238307;  // std dev = 1.279, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | | else return 0.01494235869280175;  // std dev = 1.523, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17771436401313645;  // std dev = 0.150, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2738075812593585;  // std dev = 1.064, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09202127169491675;  // std dev = 0.083, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3730858312150664;  // std dev = 0.326, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09107999417800844;  // std dev = 0.000564, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05290786558258808;  // std dev = 1.435, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17151347128405336;  // std dev = 1.682, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | | else return 0.1474237688072072;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.0841413590603296;  // std dev = 0.066, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08747083995708801;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.04962201674632205;  // std dev = 0.414, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.18508372699081643;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.041987462111743624;  // std dev = 1.650, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.499', 'seconds']
Parameter learned model CLL:-0.113879 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 82], 'true,false,true': [0.0, 158, 0], 'true,false,false,true': [0.975, 19, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false': [5.59e-09, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.992, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.322, 139, 17], 'false,true,false,false': [0.0, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [2.672, 35, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.897, 1, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.866, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 8], 'false,false,true,false': [0.935, 1, 7], 'false,false,false,true': [3.211, 168, 16], 'false,false,false,false': [2.379, 44, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.098, 0, 77], 'true,false': [0.062, 138, 0], 'false,true,true': [0.125, 0, 14], 'false,true,false': [0.102, 27, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.669, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [2.0, 4, 56], 'true,false': [0.91, 1, 3], 'false,true,true': [0.134, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.069, 0, 13], 'false,false,true,false': [1.201, 147, 3], 'false,false,false': [0.268, 59, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.309, 155, 72], 'false,true': [0.035, 0, 10], 'false,false,true': [1.01, 1, 18], 'false,false,false,true': [0.15, 22, 0], 'false,false,false,false': [0.19, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.691, 2, 84], 'true,false': [1.651, 146, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.633, 10, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [0.636, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.591, 110, 12], 'false,false,true,false': [1.21, 36, 5], 'false,false,false,true': [1.279, 45, 10], 'false,false,false,false': [1.523, 24, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.15, 1, 59], 'false,true,true,true': [1.064, 1, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.083, 164, 0], 'false,false,true,true': [0.326, 0, 7], 'false,false,true,false': [0.000564, 24, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.435, 15, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.682, 2, 74], 'true,true,false': [0.002, 0, 8], 'true,false,true': [0.066, 136, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.414, 13, 1], 'false,true': [0.085, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.65, 31, 14]}]
{'': [0.21599271349882235, 0.2287326388888884], 'false': [-2.0898315757650005e-16, 2.5069552168955147e-17], 'true': [0.023242630385487066, 0.005555382166598871], 'true,false': [-1.4053456007913375e-16, 0.045351473922902535], 'true,false,false': [0.04750000000000004, 0.0], 'false,true': [-2.0898315757650005e-16, nan]}
{'': [0.014921946740126937, 0.09460751265488683], 'false': [0.0687972321924195, 0.14256617604415703], 'false,false': [0.05859374999999996, 0.15708671409644157], 'false,false,false': [1.4802973661668753e-16, 0.145691124992893], 'false,true': [nan, 0.0687972321924195], 'false,true,false': [0.07074696867834465, -2.7755575615628915e-18], 'false,false,true': [nan, 0.05859374999999996]}
{'': [0.031801292115012286, 0.0844497954992591], 'false': [nan, 0.08444979549925907], 'false,false': [0.058593750000000056, 0.06818540601987008], 'false,false,false': [0.05603969217127002, 0.10479489845188843], 'false,false,true': [5.551115123125783e-17, 0.10937500000000006], 'true': [0.014880997624562234, 0.20220459726500187], 'true,false': [0.0, 0.1875], 'true,true': [0.014633531954711674, 0.0]}
{'': [0.09425525943287054, 0.11987344294450183], 'false': [0.09672422939975588, 0.16387774547492395], 'false,false': [nan, 0.16387774547492395], 'false,false,false': [nan, 0.16387774547492395], 'false,true': [0.015601366095722666, 0.010353576723817159], 'true': [0.015659376002637487, 2.801344857516719e-05]}
{'': [0.07625673635775192, 0.05816954791984492], 'true': [0.06669208801394612, 0.20697517657452277], 'false': [0.001205688512989352, 0.05396381906852618], 'false,false': [0.04628922414381167, 0.07187412827294995], 'false,false,true': [0.0003645550549635437, 0.009614010764358479], 'false,true': [0.001205688512989352, nan]}
{'': [0.04823080247047256, 0.08014257820742492], 'false': [0.00012397375332495741, 0.084097745650941], 'false,false': [0.0536612416947086, 0.000994108508036452], 'true': [nan, 0.04823080247047215], 'true,false': [nan, 0.04823080247047256], 'false,false,false': [0.0010261981328092292, 0.0009717873626725964]}
{'': [0.05291037752818463, 0.02357227270791368], 'true': [0.03324895201208197, 0.01758588046545266], 'false': [nan, 0.02357227270791368], 'false,false': [nan, 0.02357227270791368], 'false,false,false': [nan, 0.02357227270791368]}
{'': [0.0374131075332836, 0.03221779580582564], 'true': [0.029413971177701646, 0.20252070802561226], 'true,false': [0.20252070802561226, nan], 'false': [nan, 0.03221779580582559], 'false,false': [0.02450752183393464, 0.04564854643351556], 'false,false,false': [0.02974645053958297, 0.07245297639985011], 'false,false,true': [0.020738330414267807, 0.03568701353235972]}
{'': [0.022567227592079495, 0.03219040534460502], 'false': [0.022598529586990185, 0.06324343653928106], 'false,false': [0.04108884619276547, 0.09356356901545425], 'false,false,false': [nan, 0.09356356901545425], 'false,false,true': [0.01516491186035242, 1.3247036180959645e-08], 'false,true': [0.040402008512364036, 4.192690935912701e-05], 'false,true,true': [0.040402008512364036, nan]}
{'': [0.02634123561153592, 0.05806168584771676], 'false': [0.0024229657799056067, 0.060491150038341136], 'false,false': [nan, 0.060491150038341136], 'true': [0.03371104091986465, 0.0011756482334049892], 'true,true': [0.03720423536620032, 6.47891912265719e-07], 'true,false': [3.1648659222113305e-05, 0.006716449736737242], 'true,false,false': [-5.337610695313253e-18, 0.012263414751125402]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.554
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8354216623722391;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(H, C), tweets(H, I) )
%   | | | then return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6895631653880768;  // std dev = 0.179, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.5944734122109543;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.050178797537171395;  // std dev = 2.822, 136.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=12 */
%   | | | else return 0.004535627057039697;  // std dev = 1.767, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.031033556233250787;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.13103355623325078;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5082438995261179;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10649364990986067;  // std dev = 2.693, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5479494099147493;  // std dev = 0.989, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.7585732120934467;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.751005488232619;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.673165962648343;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5735858041097338;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10730952705417458;  // std dev = 1.193, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   | | | else return 0.0021893620082233988;  // std dev = 2.487, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06397163402299108;  // std dev = 1.924, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.2521063618797399;  // std dev = 1.614, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4147113487266408;  // std dev = 0.133, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.6290749900045289;  // std dev = 0.206, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.1165069137174484;  // std dev = 0.162, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, A) )
%   | | then return 0.30161840401014206;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.5377460338073942;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5990122466302145;  // std dev = 0.326, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11975351474174;  // std dev = 0.036, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09220481393159542;  // std dev = 1.284, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.022671786950299554;  // std dev = 1.469, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.3481989273368734;  // std dev = 0.052, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, F) )
%   | | then return -0.037794671383774424;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.13274403053963646;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.16871041977925688;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3335013381032542;  // std dev = 0.101, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5061978290547532;  // std dev = 0.957, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09470689166592601;  // std dev = 1.033, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.05470800410989822;  // std dev = 1.148, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.13593655457506756;  // std dev = 1.725, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2767956760729459;  // std dev = 0.240, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.011359973889454608;  // std dev = 0.919, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2503897949986617;  // std dev = 1.554, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.0923582791295299;  // std dev = 0.041, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.027348882378271433;  // std dev = 0.202, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27504682767985733;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3512343051571699;  // std dev = 0.920, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5798636770820536;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12982108077930582;  // std dev = 0.035, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( tweets(A, D), tweets(E, D) )
%   | | | then return 0.1797873156821348;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.0838410741638061;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.23426831496840048;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21957820151256868;  // std dev = 0.055, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return -0.0021056698583590086;  // std dev = 1.208, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2934810933149003;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then return -0.04835005950433433;  // std dev = 0.145, 162.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.00657105315037994;  // std dev = 1.227, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.03133867880310208;  // std dev = 1.339, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16690215090898292;  // std dev = 0.127, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.23113385928720392;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return -0.13307007365896056;  // std dev = 1.298, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.4615370864580111;  // std dev = 0.313, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08345288887661599;  // std dev = 0.089, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3552057524726099;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12291886909737919;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03356676337835436;  // std dev = 0.794, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.018278720175858004;  // std dev = 1.084, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17241348346052876;  // std dev = 0.296, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.21051988131968633;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.3128348552343891;  // std dev = 0.999, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.273118367909332;  // std dev = 0.172, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then return -0.0324831219875486;  // std dev = 0.120, 198.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=27 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32056942526752735;  // std dev = 0.203, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10972286036134198;  // std dev = 0.081, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09035923033078049;  // std dev = 0.713, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.04257589137523836;  // std dev = 1.129, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.07931377763204586;  // std dev = 2.040, 60.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=55 */
%   | | | else return 0.2447298077107798;  // std dev = 1.063, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.16589243297134748;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07175043720560044;  // std dev = 0.035, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.12518179149571806;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2566319365201567;  // std dev = 0.178, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10016148596144638;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11279899131609446;  // std dev = 0.655, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.029022738426971933;  // std dev = 1.030, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.349', 'seconds']
Refined model CLL: -0.10998


******************************************
Best model found
******************************************
Results 

CLL : -0.114309 

AUC ROC : 0.994614 

AUC PR : 0.361045 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 8.554 

Total Inference Time : 18.64204716682434 

Total revision time: 39.34291192817688
Best scored revision CLL: -0.10998


Results 

CLL : -0.114309 

AUC ROC : 0.994614 

AUC PR : 0.361045 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 44.9264888458252 

Total Inference Time : 18.64204716682434 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.328
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.11407328712270995;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7261693875559795;  // std dev = 0.083, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04366632883208946;  // std dev = 3.798, 227.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07852393071425583;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13104834116033887;  // std dev = 2.907, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.536195138975835;  // std dev = 1.679, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7337669230732742;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7758365124144672;  // std dev = 0.147, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5606951012685312;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5606951012685312;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04199679469631108;  // std dev = 3.666, 213.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=21 */
%   | | | else return 0.05295652384014327;  // std dev = 2.438, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.47355235374308186;  // std dev = 2.168, 100.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=97 */
%   | else return -0.12111606842737231;  // std dev = 0.210, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4910070696799809;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.11305878794214164;  // std dev = 0.083, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10965912552689885;  // std dev = 1.989, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.336504343512259;  // std dev = 0.552, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.18159143162169708;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.2637608843203924;  // std dev = 0.988, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6275008848394158;  // std dev = 0.090, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0930472014822757;  // std dev = 1.394, 197.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=4 */
%   | | else return -0.025398629240388982;  // std dev = 0.263, 83.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02396051838181566;  // std dev = 3.636, 282.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26357951815175606;  // std dev = 0.068, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47387388767069416;  // std dev = 1.439, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11452311764033003;  // std dev = 0.101, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1225608139636481;  // std dev = 0.152, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29736691535671084;  // std dev = 1.452, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07705018313733568;  // std dev = 1.921, 232.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024242076901640614;  // std dev = 0.672, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17023697004202512;  // std dev = 1.399, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.26531456346337307;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05166239138173238;  // std dev = 1.992, 191.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=17 */
%   | | | else return -0.02284560127776868;  // std dev = 1.190, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015601439257179153;  // std dev = 1.775, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.030338557361734315;  // std dev = 1.667, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16456707443070426;  // std dev = 0.158, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.23809747013598842;  // std dev = 1.736, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09087041660859674;  // std dev = 0.139, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3813214026139215;  // std dev = 0.379, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09298270714517991;  // std dev = 0.002, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06704271690693617;  // std dev = 1.566, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1689745640017253;  // std dev = 1.838, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.1494949304203891;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0829750613868406;  // std dev = 0.084, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08425428429180756;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.026946509805988436;  // std dev = 0.480, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1458136501840443;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04134600183500588;  // std dev = 1.859, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.183', 'seconds']
Parameter learned model CLL:-0.113215 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 184, 0], 'true,false,false,true': [0.986, 35, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 1, 0], 'false,false': [5.89e-09, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.083, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.798, 205, 22], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.907, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.679, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.147, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.666, 192, 21], 'false,false,false,false': [2.438, 40, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.168, 3, 97], 'true,false': [0.21, 176, 0], 'false,true,true': [0.113, 0, 19], 'false,true,false': [0.083, 42, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.989, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.552, 0, 73], 'true,false': [0.889, 1, 4], 'false,true,true': [0.988, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.09, 0, 17], 'false,false,true,false': [1.394, 193, 4], 'false,false,false': [0.263, 72, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.636, 191, 91], 'false,true': [0.068, 0, 13], 'false,false,true': [1.439, 1, 22], 'false,false,false,true': [0.101, 29, 0], 'false,false,false,false': [0.152, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.452, 1, 107], 'true,false': [1.921, 221, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.672, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.399, 2, 80], 'true,false,true': [0.067, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.992, 174, 17], 'false,false,true,false': [1.19, 29, 5], 'false,false,false,true': [1.775, 39, 13], 'false,false,false,false': [1.667, 27, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.158, 2, 77], 'false,true,true,true': [1.736, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.139, 210, 0], 'false,false,true,true': [0.379, 0, 9], 'false,false,true,false': [0.002, 20, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.566, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.838, 3, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.084, 189, 0], 'true,false,false,true': [5.27e-09, 17, 0], 'true,false,false,false': [0.48, 10, 2], 'false,true': [0.097, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.859, 40, 17]}]
{'': [0.2176438875669264, 0.234375], 'false': [0.04338842975206614, 3.2653618371328135e-17], 'true': [0.027500889996442155, 0.00892784676568444], 'false,true': [0.0, 0.0], 'true,false': [-2.0756343503861623e-16, 0.049861495844875335], 'true,false,false': [0.027006172839506234, 0.25]}
{'': [8.417399513049872e-05, 0.08854942288127399], 'false': [0.06278810397532994, 0.14528846309727445], 'false,false': [0.04749999999999997, 0.16240918158582693], 'false,false,false': [0.0, 0.15092689979732452], 'false,true': [nan, 0.06278810397532994], 'false,true,false': [0.0635306719418886, 2.3129646346357427e-18], 'false,false,true': [nan, 0.04749999999999997]}
{'': [0.037371070102167045, 0.08970259030964053], 'false': [nan, 0.08970259030964046], 'false,false': [0.0, 0.0748209693205868], 'false,false,false': [0.06308679761034182, 0.11655401255280623], 'true': [0.03862462628287258, 0.014419470041447132], 'true,true': [0.03862623602450837, 0.0], 'true,false': [0.010853707280918723, 0.0], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.09888702597942912, 0.10364280774799575], 'false': [0.08618087373989808, 0.14133454562765604], 'false,false': [nan, 0.14133454562765604], 'false,false,false': [nan, 0.14133454562765604], 'true': [0.04698556171434284, 0.0002494898456692813], 'false,true': [0.012741460296322388, 0.0068080141130683345]}
{'': [0.015480150109206342, 0.058101984513354146], 'false': [0.05426428182977397, 0.05330561135344223], 'false,true': [0.05426428182977397, nan], 'false,false': [0.04709228919166522, 0.06924743725228143], 'false,false,true': [0.0004762806094633773, 0.009870961187859], 'true': [0.004167196261544847, 0.1581896000063446]}
{'': [0.04687506976377756, 0.08530532687529746], 'false': [0.00035123811562590786, 0.09100811436344776], 'false,false': [0.08998393961961117, 0.0005191711092347224], 'true': [nan, 0.04687506976377764], 'true,false': [nan, 0.04687506976377756], 'false,false,false': [0.00035097206232247396, 0.0006226159415707198]}
{'': [0.04743969287216524, 0.021513648613131924], 'true': [0.019529217838284027, 0.015902142351913347], 'false': [nan, 0.021513648613131924], 'false,false': [nan, 0.021513648613131924], 'false,false,false': [nan, 0.021513648613131924]}
{'': [0.023577449743259423, 0.03687890058998212], 'false': [nan, 0.036878900589982465], 'false,false': [0.024039066018194832, 0.06787477264417006], 'false,false,false': [0.06058855869771922, 0.07715220013826843], 'false,false,true': [0.02077683724087732, 0.041660192306070376], 'true': [0.02388311354323366, 0.0022207172871115677], 'true,false': [0.0022207172871115677, nan]}
{'': [0.024939040789538226, 0.035766614617854194], 'false': [0.025409800752355417, 0.07266306443785321], 'false,false': [0.05311559981178892, 0.09437924447856116], 'false,false,false': [nan, 0.09437924447856116], 'false,false,true': [0.01600215933322118, 1.1365440771710089e-07], 'false,true': [0.08864834202974137, 9.136176186218907e-05], 'false,true,true': [0.08864834202974137, nan]}
{'': [0.024742349712639312, 0.05748792144294278], 'false': [0.0023321889630850724, 0.06064286050170763], 'false,false': [nan, 0.06064286050170763], 'true': [0.03189424212382252, 0.0012547447430296646], 'true,true': [0.03481967859166139, 1.7299818817021844e-05], 'true,false': [3.699255704368185e-05, 0.008754782809421617], 'true,false,false': [1.6326809185664067e-18, 0.019232182228028777]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.6843856929127088;  // std dev = 0.184, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.727139237043437;  // std dev = 0.142, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04214978068269941;  // std dev = 3.360, 175.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=17 */
%   | | | else return -0.001994513213909575;  // std dev = 1.792, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.11106639216235034;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09285785929347418;  // std dev = 3.010, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5681581201547996;  // std dev = 0.134, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return 0.6688078979378167;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3938329766217204;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5534726851919904;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5826080038940759;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.608365924316579;  // std dev = 1.332, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.12156518742993443;  // std dev = 0.028, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09210350080569694;  // std dev = 2.140, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.15491217264085558;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.3641221264992038;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.445049622998728;  // std dev = 0.186, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4350481195090703;  // std dev = 1.181, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.6304733856954434;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.11175435164452976;  // std dev = 0.148, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.4446769024442175;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.4422628762732952;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05021264890318539;  // std dev = 1.149, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return 0.05028861561421616;  // std dev = 2.014, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3339066074423821;  // std dev = 0.193, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.5505805994636619;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5934409514887652;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32685844191896724;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3349529856436751;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4645532748833261;  // std dev = 0.178, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08563017792331172;  // std dev = 1.258, 153.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.06948964642185824;  // std dev = 1.182, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | | else return 0.04244029342487708;  // std dev = 2.003, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.24656083844195797;  // std dev = 0.990, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.10411258899861375;  // std dev = 1.282, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.024298274875342418;  // std dev = 0.927, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.053481589680216705;  // std dev = 0.118, 165.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=15 */
%   | | else return -0.04478090595399225;  // std dev = 0.178, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27023634087937687;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3210206879662005;  // std dev = 0.276, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.556487691627279;  // std dev = 0.403, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12337232752483487;  // std dev = 0.029, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.20123338350821512;  // std dev = 0.127, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.11339140231534117;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2407712084876002;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.02630620241207591;  // std dev = 1.588, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.39602070498214;  // std dev = 0.438, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08680369003612676;  // std dev = 0.050, 210.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20257050203743193;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.008576888658262982;  // std dev = 1.269, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.05205254323603086;  // std dev = 1.513, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.16671012424852913;  // std dev = 0.990, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.18040937535476972;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.19094933804108874;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2721303982047804;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.3978722161220085;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.16164045998882645;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.05370895287385081;  // std dev = 0.105, 212.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.002219046085751778;  // std dev = 1.258, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.060714631206836275;  // std dev = 1.474, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.07642477428865734;  // std dev = 1.910, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.15621633889372508;  // std dev = 0.040, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3016023184049198;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0038849537029363333;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.035245823716131726;  // std dev = 0.115, 240.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.33421458635505796;  // std dev = 0.143, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11632834856866674;  // std dev = 0.031, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01536379628192158;  // std dev = 0.995, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.005957432017018088;  // std dev = 1.263, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10498576078111685;  // std dev = 1.914, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.2801090157803253;  // std dev = 0.541, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.15374564592091408;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07436792895541408;  // std dev = 0.055, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0035755399200863014;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.0840287704372287;  // std dev = 1.281, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return -0.10412696826398363;  // std dev = 0.029, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.027954837556694853;  // std dev = 0.977, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.00497270599870836;  // std dev = 1.256, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.950', 'seconds']
Refined model CLL: -0.107689


******************************************
Best model found
******************************************
Results 

CLL : -0.110652 

AUC ROC : 0.995003 

AUC PR : 0.467775 

Precision : 0.325359 

Recall : 0.871795 

F1 : 0.473868 

Total Learning Time : 9.405 

Total Inference Time : 21.285258769989014 

Total revision time: 46.985492189407346
Best scored revision CLL: -0.107689


Results 

CLL : -0.110652 

AUC ROC : 0.995003 

AUC PR : 0.467775 

Precision : 0.325359 

Recall : 0.871795 

F1 : 0.473868 

Total Learning Time : 52.56906910705566 

Total Inference Time : 21.285258769989014 

