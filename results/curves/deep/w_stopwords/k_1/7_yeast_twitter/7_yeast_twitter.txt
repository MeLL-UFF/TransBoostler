Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.144
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.14386322081379804;  // std dev = 0.452, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6719008605636748;  // std dev = 0.990, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05545427961788012;  // std dev = 0.242, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.136832517440075;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4478080215931011;  // std dev = 0.855, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11626665004011316;  // std dev = 2.333, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5787555206828434;  // std dev = 0.158, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6651083474853088;  // std dev = 0.139, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.7147114526568932;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.567080680161899;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.567080680161899;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.016177284975044812;  // std dev = 2.186, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -9.722007719993126E-4;  // std dev = 1.553, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5583282792528839;  // std dev = 0.853, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12157315503803803;  // std dev = 0.004, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.119383887369242;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16451183701135466;  // std dev = 0.065, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31910096116754644;  // std dev = 0.241, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.48663158127581463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29828901424583976;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6389072176212676;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10287782219471826;  // std dev = 0.720, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | else return 0.0606054813705404;  // std dev = 0.324, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012385858910495033;  // std dev = 1.271, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.06127807985845768;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5118591626189171;  // std dev = 0.381, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11545143745178721;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1270731076888962;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28864498664955945;  // std dev = 0.425, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08865832037429704;  // std dev = 0.684, 66.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0017919694541983463;  // std dev = 0.982, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1896964544477738;  // std dev = 0.075, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E) )
%   | | then return 0.29110135206210086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.055210256919712826;  // std dev = 0.124, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016984253318340047;  // std dev = 1.328, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return -0.005745649998363441;  // std dev = 1.149, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17451655055132617;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2954706243574705;  // std dev = 0.182, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09171543301934203;  // std dev = 0.044, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3959506033532606;  // std dev = 0.334, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10886503911404637;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16567406048203787;  // std dev = 0.278, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.16052494349561236;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08089647719927119;  // std dev = 0.002, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09440153023927209;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.015550600648987875;  // std dev = 0.255, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.11712467741168904;  // std dev = 0.640, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20536614570708767;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0060101643258986814;  // std dev = 0.745, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.831', 'seconds']
Parameter learned model CLL:-0.108079 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [3.33e-08, 34, 0], 'true,false,false': [0.3, 9, 1], 'false,true,true,true': [0.913, 1, 5], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 9, 0], 'false,false': [0.452, 10, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.242, 31, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 7, 0], 'false,false,false,true': [0.855, 1, 2], 'false,false,false,false': [2.333, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.158, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.139, 0, 2], 'true,false,false': [0.078, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.186, 40, 8], 'false,false,false,false': [1.553, 17, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.853, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.004, 32, 0], 'false,true,false,false': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.065, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.241, 0, 17], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.148, 0, 7], 'false,false,true,false': [0.72, 50, 1], 'false,false,false': [0.324, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.271, 37, 16], 'false,true': [0.926, 1, 4], 'false,false,true': [0.381, 0, 11], 'false,false,false,true': [0.052, 14, 0], 'false,false,false,false': [0.077, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.425, 0, 25], 'true,false': [0.684, 64, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.982, 15, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.075, 0, 16], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.124, 33, 3], 'false,false,false,true': [1.328, 21, 7], 'false,false,false,false': [1.149, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.045, 0, 18], 'false,true,true,true': [0.182, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 39, 0], 'false,false,true': [0.334, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.072, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.278, 0, 17], 'true,true,false': [0.008, 0, 2], 'true,false,true': [0.002, 41, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.255, 3, 1], 'false,true': [0.64, 5, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.745, 9, 3]}]
{'': [0.2166792642983115, 0.22892819979188297], 'false': [0.24221453287197234, 0.20408163265306106], 'false,true': [0.10937499999999978, -9.25185853854297e-18], 'true': [-2.8047739569477637e-16, 0.022210743801652937], 'false,true,true': [0.1388888888888887, 0.0], 'true,false': [3.2653618371328135e-17, 0.09000000000000005]}
{'': [0.054439518210514654, 0.12339645020436783], 'false': [0.058798701082578134, 0.1651873815227287], 'false,false': [7.93016446160826e-18, 0.1850162210088729], 'false,false,false': [0.24346366824476887, 0.17011508588325888], 'false,true': [nan, 0.058798701082578134], 'false,false,true': [nan, 7.93016446160826e-18]}
{'': [0.005057738578442026, 0.11135569248317363], 'false': [nan, 0.11135569248317362], 'false,false': [0.0, 0.10580007508483087], 'false,false,false': [0.09953633266704658, 0.120625453455945], 'true': [0.0017719247154631848, 0.006948412387720815], 'true,false': [0.00960942356086908, 0.003057167193240895], 'true,true': [0.0017719247154631848, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.023484170159211292, 0.0004762074386685078], 'false': [9.313166222213454e-07, 0.00028326860870686956], 'false,false': [nan, 0.00028326860870686956], 'false,false,false': [nan, 0.00028326860870686956], 'false,true': [nan, 9.313166222213454e-07], 'false,true,false': [6.078081619398379e-07, -2.3129646346357427e-18]}
{'': [0.004706356357146545, 0.07524076265975344], 'false': [0.0, 0.07490775845473885], 'false,false': [0.0677024535984487, 0.10520134886198206], 'false,false,true': [0.0031472952505985524, 0.010154080751586731], 'true': [0.0034239503668622587, 0.0], 'false,true': [0.0, nan]}
{'': [0.030458754172002906, 0.09635538259347044], 'false': [0.17151118422868342, 0.08646637034381165], 'false,false': [0.013216138564666302, 0.000354502007981259], 'true': [nan, 0.030458754172002906], 'true,false': [nan, 0.030458754172002906], 'false,false,false': [0.00019296112404833848, 0.0004584363334810698]}
{'': [0.035484503649956645, 0.050772432516800324], 'false': [nan, 0.050772432516800324], 'false,false': [nan, 0.050772432516800324], 'false,false,false': [nan, 0.050772432516800324], 'true': [0.007219164037122603, 0.007081789956786429]}
{'': [0.0008978763984498157, 0.04771098598691582], 'false': [nan, 0.04771098598691573], 'false,false': [0.01537097211378071, 0.07529061608742224], 'false,false,false': [0.0630263041332362, 0.10161979932370192], 'true': [0.0003491140698133957, 0.0], 'true,false': [0.0, nan]}
{'': [0.0020647604847609403, 0.03528487787362974], 'false': [0.013467441913058122, 0.062156238892461205], 'false,false': [0.012365367191407536, 0.0003026699953018088], 'false,true': [0.00831647457107601, 5.034690447664341e-05], 'false,true,true': [0.00831647457107601, nan], 'false,false,false': [nan, 0.0003026699953018088]}
{'': [0.0141141025292259, 0.04234101582533862], 'false': [0.034137285534342234, 0.045510313620424014], 'false,false': [0.0, 0.04624570073142419], 'false,false,false': [nan, 0.04624570073142419], 'true': [0.004067024606222903, 0.0016739300728208426], 'true,true': [0.004538680038284624, 3.4230912773037386e-05], 'true,false': [1.078377385721474e-07, 0.00969009397521343], 'true,false,false': [0.0, 0.01627145340180088]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.395
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.11482403787346067;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284196899675455;  // std dev = 0.148, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12843986592699463;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.12843986592699455;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12843986592699455;  // std dev = 6.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.12843986592699458;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.27304745005634173;  // std dev = 2.136, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5568326450074524;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6694997861403418;  // std dev = 0.154, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5531562115704671;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.15962678980053374;  // std dev = 0.557, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.07964136657797635;  // std dev = 1.036, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return -0.1147347978712666;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0825597870333383;  // std dev = 1.748, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2670855167005062;  // std dev = 1.097, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then return 0.41323872041914006;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.20132666719814188;  // std dev = 1.240, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.6414517908844548;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5949438804183721;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6617108990218172;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10616507577277062;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.10358613673993146;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.17757010762238584;  // std dev = 0.081, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.3193762047425058;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.31138363447758355;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.38535997511425973;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.46890337992772846;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.39168105958978194;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.05041158510411744;  // std dev = 0.917, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return -0.09521880129672053;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06060694596811339;  // std dev = 1.228, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.2846865882871698;  // std dev = 0.785, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.016571338800469616;  // std dev = 0.235, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else return 0.016622042942804175;  // std dev = 0.159, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3001532824970368;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.45741456188456925;  // std dev = 0.187, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4226231392513215;  // std dev = 0.236, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.13811181923137872;  // std dev = 0.118, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.1390968553788197;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, A) )
%   | then return 0.25880522304068726;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.19788346252380962;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.06171034586306353;  // std dev = 0.661, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return -0.007920357696467022;  // std dev = 0.632, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.09236370803179615;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3916175419327492;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1327773132340713;  // std dev = 0.056, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.016092797287563323;  // std dev = 0.393, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.06785656542541503;  // std dev = 0.780, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.094531655228138;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1837459801915902;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22468924888860148;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.24004932357986375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.03393304004834976;  // std dev = 0.174, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | else if ( tweets(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.2839455902800282;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11315656819952351;  // std dev = 0.151, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.021475179977506018;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return -0.10356814962397819;  // std dev = 0.601, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.190629595517962;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1711892564875832;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.21090895074464944;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.40384613341287945;  // std dev = 0.398, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08317696881180464;  // std dev = 0.007, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2739198790003348;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3536542332685612;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.12392387190583769;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.21091337831110615;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20035133100836755;  // std dev = 0.112, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.1495160486767544;  // std dev = 0.050, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.07068650539178242;  // std dev = 0.040, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23496949352993796;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.106029726134278;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10006391348479551;  // std dev = 0.298, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14295746646689134;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.060736478478153055;  // std dev = 0.336, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.0034190592466571967;  // std dev = 0.462, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.723', 'seconds']
Refined model CLL: -0.109153


******************************************
Best model found
******************************************
Results 

CLL : -0.109316 

AUC ROC : 0.993229 

AUC PR : 0.390457 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 6.395 

Total Inference Time : 3.3255743980407715 

Total revision time: 13.49939628982544
Best scored revision CLL: -0.108079


Results 

CLL : -0.109316 

AUC ROC : 0.993229 

AUC PR : 0.390457 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 13.515294994354248 

Total Inference Time : 3.3255743980407715 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.549
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.26555634250691973;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7031821899131702;  // std dev = 1.011, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.039206264288810834;  // std dev = 0.257, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13981214937855652;  // std dev = 1.29e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7670231896714933;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15515596950287808;  // std dev = 3.336, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5390297082150379;  // std dev = 0.839, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6592539671968256;  // std dev = 0.132, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6065060451851716;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6280677995116558;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.39902879747464953;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -9.514057871456684E-5;  // std dev = 2.900, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | | | else return 0.06481382745391703;  // std dev = 2.788, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5542358353764855;  // std dev = 1.521, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12423146998142978;  // std dev = 0.082, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.12903178604878632;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1847477277440604;  // std dev = 0.219, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3118986996506611;  // std dev = 0.198, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.47506546909020597;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3202945593032928;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.482848042683255;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6241483038646497;  // std dev = 0.178, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.11427912792519418;  // std dev = 0.735, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   | | else return 0.011347500240173461;  // std dev = 0.293, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016879619875239796;  // std dev = 1.981, 95.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=30 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2731520912988826;  // std dev = 0.154, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4642875019276861;  // std dev = 1.001, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12906460083666896;  // std dev = 0.131, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.13413602944607256;  // std dev = 0.166, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2799905499337188;  // std dev = 1.043, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return -0.0979904180612611;  // std dev = 0.684, 110.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 8.81605624263636E-4;  // std dev = 1.645, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16153835423938417;  // std dev = 0.989, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( follows(A, E) )
%   | | then return 0.24669962376249832;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04286184643646182;  // std dev = 0.143, 67.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.011299843096937543;  // std dev = 1.204, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.05380608830325941;  // std dev = 1.545, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13732191585722298;  // std dev = 0.186, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20012346172045467;  // std dev = 1.117, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09187591240488349;  // std dev = 0.068, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3822430828668914;  // std dev = 0.494, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12357678775391755;  // std dev = 0.202, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1325450422081408;  // std dev = 1.398, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return 0.15897908393116544;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0812250290067636;  // std dev = 0.013, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09160868480063197;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.038665514263633925;  // std dev = 0.340, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.029885846594449438;  // std dev = 0.888, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.3376201222522519;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006245523213878983;  // std dev = 1.307, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.783', 'seconds']
Parameter learned model CLL:-0.110022 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.987, 1, 38], 'true,false,true': [6.14e-08, 59, 0], 'true,false,false': [0.331, 14, 2], 'false,true,true,true': [0.949, 1, 9], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 18, 0], 'false,false': [0.491, 16, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.011, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 62, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.29e-08, 15, 0], 'false,false,false,true': [0.068, 0, 3], 'false,false,false,false': [3.336, 39, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.839, 1, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.132, 0, 2], 'true,false,false': [0.094, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.153, 0, 3], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [2.9, 79, 14], 'false,false,false,false': [2.788, 34, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.521, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.082, 83, 0], 'false,true,false,false': [0.004, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.219, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.198, 0, 28], 'true,false': [0.0, 0, 1], 'false,true,true': [0.058, 0, 7], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.178, 0, 18], 'false,false,true,false': [0.735, 98, 1], 'false,false,false': [0.293, 28, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.981, 65, 30], 'false,true': [0.154, 0, 10], 'false,false,true': [1.001, 1, 22], 'false,false,false,true': [0.131, 26, 0], 'false,false,false,false': [0.166, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.043, 1, 49], 'true,false': [0.684, 108, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.645, 31, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.989, 1, 31], 'true,false,true': [0.003, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 60, 7], 'false,false,false,true': [1.204, 41, 11], 'false,false,false,false': [1.545, 21, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.186, 1, 29], 'false,true,true,true': [1.117, 1, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.068, 94, 0], 'false,false,true': [0.494, 0, 19], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.202, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.398, 2, 32], 'true,true,false': [0.015, 0, 6], 'true,false,true': [0.013, 57, 0], 'true,false,false,true': [0.01, 11, 0], 'true,false,false,false': [0.34, 9, 2], 'false,true': [0.888, 20, 11], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.307, 23, 10]}]
{'': [0.22776238842720964, 0.23699599876885288], 'false': [0.23222222222222175, 0.2414266117969817], 'false,true': [0.07638888888888877, -3.0839528461809902e-18], 'true': [0.024983563445103548, 0.02595555555555562], 'false,true,true': [0.08999999999999977, 0.0], 'true,false': [6.39789539614497e-17, 0.10937500000000004]}
{'': [0.030033320652225977, 0.130697303145908], 'false': [0.06587107798173292, 0.17732527934225634], 'false,false': [1.1102230246251566e-17, 0.2000751251720799], 'false,false,false': [0.0015474794402805525, 0.19193159182515634], 'false,true': [nan, 0.06587107798173292], 'false,false,true': [nan, 1.1102230246251566e-17]}
{'': [0.02555780587035243, 0.129349817375355], 'false': [nan, 0.12934981737535506], 'false,false': [0.10684365683987204, 0.1181813410145127], 'false,false,false': [0.09043176358282894, 0.17269115470529192], 'false,false,true': [0.007780616439100256, 0.1388888888888888], 'true': [0.028177219199878253, 0.005922722370005707], 'true,true': [0.028177219199878253, nan], 'true,false': [0.008753193493987843, 0.0029228043100652337]}
{'': [0.0367354843242306, 0.0011747615498082726], 'false': [7.4234872854033e-05, 0.001114234382862377], 'false,false': [nan, 0.001114234382862377], 'false,false,false': [nan, 0.001114234382862377], 'false,true': [nan, 7.423487285403535e-05], 'false,true,false': [8.117751894124193e-05, 1.5029433272715422e-06]}
{'': [0.0022435122376904663, 0.079856124201775], 'false': [0.0033170655098379437, 0.07814324846167381], 'false,false': [0.07587355372567309, 0.08584167533690615], 'false,false,true': [0.0017654432690101312, 0.0054592830084623685], 'false,true': [0.00048797764137339543, 0.0], 'true': [0.0014055895833943652, 0.0]}
{'': [0.04131568743258463, 0.08432974720307373], 'false': [0.0023705706249298798, 0.08945881582891073], 'false,false': [0.04355911100720367, 0.0008687059165977481], 'true': [nan, 0.04131568743258473], 'true,false': [nan, 0.04131568743258463], 'false,false,false': [0.0006590604811840667, 0.0010654916579412972]}
{'': [0.04041638122523117, 0.06446341322747941], 'false': [nan, 0.06446341322747935], 'false,false': [nan, 0.06446341322747941], 'false,false,false': [nan, 0.06446341322747941], 'true': [0.0217528847999373, 0.004253034889266801]}
{'': [0.0291885452913948, 0.0358145988304442], 'false': [nan, 0.03581459883044419], 'false,false': [0.020442327006424788, 0.046666184390693685], 'false,false,false': [0.027867556594240225, 0.0745899464672958], 'true': [0.030585919590211966, 4.728908636841833e-06], 'true,false': [4.728908636841833e-06, nan]}
{'': [0.03468502757738364, 0.03769952072581922], 'false': [0.02161365238672288, 0.06243865931751096], 'false,false': [0.012825851115354128, 0.0011079873301334366], 'false,true': [0.08321888733481059, 4.950210657018562e-05], 'false,true,true': [0.08321888733481059, nan], 'false,false,false': [nan, 0.0011079873301334366]}
{'': [0.02772961487767735, 0.04927128836474277], 'false': [0.025444364376432462, 0.06949492047216865], 'false,false': [0.25, 0.051798442560783774], 'false,false,false': [nan, 0.05179844256078375], 'true': [0.04892076652656442, 0.0017132984405900992], 'true,true': [0.0574420408965826, 3.960031891896606e-05], 'true,false': [2.7686128747460513e-06, 0.005958381113102883], 'true,false,false': [9.749563448639572e-06, 0.010505523009502298]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.863
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.11368205081598061;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.2581489350995123;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.6639178566553987;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7704287859323568;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7376983290884596;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12856775771316034;  // std dev = 5.16e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.07739651829097693;  // std dev = 0.205, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1285677577131605;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11289368559879052;  // std dev = 3.235, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5760550818997511;  // std dev = 0.208, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.6077921678884808;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11567989786153987;  // std dev = 0.015, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.651908933119372;  // std dev = 0.256, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12943039977138873;  // std dev = 0.075, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3168176308307325;  // std dev = 1.378, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.11149909866884052;  // std dev = 1.649, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.4232993441622685;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.08366618298118704;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.43736493845421764;  // std dev = 0.202, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5464668331703286;  // std dev = 0.156, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.6037073598774695;  // std dev = 0.140, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7887585198328877;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1036578434958253;  // std dev = 0.024, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.11935620247195762;  // std dev = 0.076, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.15855738276321665;  // std dev = 0.238, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.3286865704103444;  // std dev = 0.020, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.14718182005181119;  // std dev = 0.664, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5051826518342115;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31714097985816364;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4862228629464477;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.41508305336296863;  // std dev = 0.271, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.10026151283713575;  // std dev = 0.550, 107.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09840000940719609;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.274710093369953;  // std dev = 1.120, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26171515069043555;  // std dev = 0.017, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.24295899249258426;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08612854257620958;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.0876841346159961;  // std dev = 0.188, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.30777489387289875;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2539833211702767;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.33704324382216094;  // std dev = 0.124, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4820535522203007;  // std dev = 0.258, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.119965836625622;  // std dev = 0.046, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.20997176282385757;  // std dev = 0.019, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.23756772117258343;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2578433295505558;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.24086769136969047;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07995718983385525;  // std dev = 0.007, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.23127010535163317;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21043435484697026;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.009112181872543592;  // std dev = 1.155, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return -0.06702794417024406;  // std dev = 1.284, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1788316609742411;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.01092595493133682;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2563219506678182;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.19655916688442643;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07482623230029482;  // std dev = 0.031, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2602548844525986;  // std dev = 0.162, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10528263925052016;  // std dev = 0.098, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0706515338241761;  // std dev = 0.374, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17718185455000476;  // std dev = 0.863, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), tweets(F, D) )
%   | | | then return 0.154383476217409;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.045616523782591;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15622647744140178;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.163185443125873;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.1716858816053039;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07047526990803234;  // std dev = 0.038, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.22648402964908507;  // std dev = 0.092, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.35889396532444756;  // std dev = 0.199, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12903609557290138;  // std dev = 0.055, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14075896644942132;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.0174026846314396;  // std dev = 0.319, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.060115035077899934;  // std dev = 0.038, 87.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.17680101654190944;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08597507402649691;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.19714773423568155;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09095290606238143;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.08936202856785878;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.05321688727048749;  // std dev = 0.913, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.579', 'seconds']
Refined model CLL: -0.099076


******************************************
Best model found
******************************************
Results 

CLL : -0.095454 

AUC ROC : 0.992167 

AUC PR : 0.321314 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 8.863 

Total Inference Time : 8.375115394592285 

Total revision time: 23.36979228210449
Best scored revision CLL: -0.099076


Results 

CLL : -0.095454 

AUC ROC : 0.992167 

AUC PR : 0.321314 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 23.3856909866333 

Total Inference Time : 8.375115394592285 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.934
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return -0.0862955093449322;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.10814893509951237;  // std dev = 0.433, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6915513279935865;  // std dev = 1.410, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0406385559955011;  // std dev = 0.254, 110.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10654144164906233;  // std dev = 0.842, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7507219186171548;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1573678055681699;  // std dev = 3.756, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5773145866400003;  // std dev = 0.275, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6668403224483701;  // std dev = 0.142, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5905599388213819;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6332576021582211;  // std dev = 0.165, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.566092161577923;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03784288388628754;  // std dev = 3.339, 166.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=18 */
%   | | | else return 0.10070730841945795;  // std dev = 3.203, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5376735479272342;  // std dev = 1.904, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.116905172254663;  // std dev = 0.004, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.13184644528206108;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1692283930666785;  // std dev = 0.196, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29459221377223277;  // std dev = 0.910, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return 0.49755759717053716;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2988859327804971;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5059529765109991;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6356241896737348;  // std dev = 0.278, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.11066106923670141;  // std dev = 0.720, 138.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=1 */
%   | | else return 0.06159216417502749;  // std dev = 0.337, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029419459305618043;  // std dev = 2.502, 148.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=52 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2621010022780687;  // std dev = 0.182, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5106995939821716;  // std dev = 0.738, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12417368359746511;  // std dev = 0.167, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.12319187880912581;  // std dev = 0.169, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29071855104733046;  // std dev = 0.790, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return -0.09885518924959046;  // std dev = 0.666, 166.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03854199240916083;  // std dev = 1.788, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18707684236099345;  // std dev = 0.063, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.25970256339315917;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044504014174909304;  // std dev = 0.139, 108.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021640361581555863;  // std dev = 1.298, 71.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=14 */
%   | | | else return 0.08304528536814151;  // std dev = 1.772, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1698966783091245;  // std dev = 0.044, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2764824523359051;  // std dev = 0.511, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09071023348776315;  // std dev = 0.089, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3380061907434681;  // std dev = 1.083, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11978884897959666;  // std dev = 0.269, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1750554861565425;  // std dev = 0.550, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.157251974022509;  // std dev = 0.223, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08100516277921904;  // std dev = 0.037, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09364849496085621;  // std dev = 0.020, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.055898143289330716;  // std dev = 0.360, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.027805226987430574;  // std dev = 0.967, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17710925132144895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0015235469133896824;  // std dev = 1.516, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.971', 'seconds']
Parameter learned model CLL:-0.110365 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 63], 'true,false,true': [8.3e-08, 91, 0], 'true,false,false': [0.229, 34, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.433, 42, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.41, 2, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 99, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.842, 33, 1], 'false,false,false,true': [0.108, 0, 4], 'false,false,false,false': [3.756, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.275, 0, 44], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.142, 0, 2], 'true,false,false': [0.149, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.165, 0, 3], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.339, 148, 18], 'false,false,false,false': [3.203, 43, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.904, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.004, 95, 0], 'false,true,false,false': [0.002, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.196, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.91, 1, 49], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 9], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.278, 0, 23], 'false,false,true,false': [0.72, 137, 1], 'false,false,false': [0.337, 28, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.502, 96, 52], 'false,true': [0.182, 0, 12], 'false,false,true': [0.738, 0, 29], 'false,false,false,true': [0.167, 52, 0], 'false,false,false,false': [0.169, 54, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.79, 0, 75], 'true,false': [0.666, 164, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.788, 33, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.063, 0, 51], 'true,false,true': [0.003, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.139, 97, 11], 'false,false,false,true': [1.298, 57, 14], 'false,false,false,false': [1.772, 24, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.044, 0, 50], 'false,true,true,true': [0.511, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.089, 134, 0], 'false,false,true': [1.083, 1, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.269, 70, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.55, 0, 54], 'true,true,false': [0.223, 0, 9], 'true,false,true': [0.037, 103, 0], 'true,false,false,true': [0.02, 19, 0], 'true,false,false,false': [0.36, 14, 2], 'false,true': [0.967, 25, 14], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.516, 36, 13]}]
{'': [0.22450042487870414, 0.19674556213017866], 'true': [0.015380859374999223, 0.01550003100006201], 'false': [0.20659722222222168, 0.18749999999999947], 'false,true': [-2.5376526277146434e-16, 3.2653618371328135e-17], 'true,false': [7.564156871072495e-17, 0.05246913580246913], 'false,true,true': [-1.6148698540002277e-16, 1.4802973661668753e-16]}
{'': [0.03617072960981854, 0.11848320147587578], 'false': [0.0647286447111789, 0.16119713939710684], 'false,false': [0.020833405236852235, 0.19560795993149255], 'false,false,false': [0.002929407457854971, 0.18805786567664326], 'false,true': [nan, 0.0647286447111789], 'false,false,true': [nan, 0.020833405236852235]}
{'': [0.0026759373038190404, 0.10933210902806084], 'false': [nan, 0.10933210902806084], 'false,false': [0.003654069090760048, 0.09926393458791591], 'false,false,false': [0.06715884906448229, 0.17692518090695109], 'false,false,true': [0.009022392816691186, 1.2688263138573217e-16], 'true': [0.001721218598410184, 0.00836113706979765], 'true,false': [0.010150191918777585, 0.005527044003214299], 'true,true': [0.001721218598410184, nan]}
{'': [0.038559946726215634, 0.0007849538825265439], 'false': [3.327988744635878e-05, 0.0007001881367461977], 'false,false': [nan, 0.0007001881367461977], 'false,false,false': [nan, 0.0007001881367461977], 'false,true': [nan, 3.327988744635878e-05], 'false,true,false': [1.5898344189205947e-07, 2.853435092812059e-07]}
{'': [0.017022839276441923, 0.081134044384385], 'false': [0.0038892534721519435, 0.08037401961494507], 'false,false': [0.0718996035249865, 0.11374560367109444], 'false,false,true': [0.0033657960462992213, 0.003758806533289667], 'true': [0.016555552005931132, 0.0], 'false,true': [3.3716686906511604e-05, 0.0]}
{'': [0.042312007831695836, 0.07131244004718869], 'false': [0.002759514559538665, 0.07232430791955985], 'false,false': [0.01875625476201671, 0.0005319546604478181], 'true': [nan, 0.04231200783169557], 'true,false': [nan, 0.042312007831695836], 'false,false,false': [0.0005363302655757125, 0.0005272682382275801]}
{'': [0.03696159906091259, 0.06524910078263338], 'false': [nan, 0.06524910078263337], 'false,false': [nan, 0.06524910078263338], 'false,false,false': [nan, 0.06524910078263338], 'true': [0.008324922362775796, 0.002669244843135599]}
{'': [0.00026595410340865387, 0.03388913995107111], 'false': [nan, 0.03388913995107089], 'false,false': [0.019343431186352702, 0.046388115164557306], 'false,false,false': [0.023734583149519886, 0.08055556960886062], 'true': [7.711623084457891e-05, 5.862058933908676e-06], 'true,false': [5.862058933908676e-06, nan]}
{'': [0.0019573277170587167, 0.03121148971861697], 'false': [0.016421491056940494, 0.053737364318126854], 'false,false': [0.046878412604339434, 0.0010353324578141626], 'false,true': [0.013732828086284088, 5.906643483875438e-05], 'false,true,true': [0.013732828086284088, nan], 'false,false,false': [nan, 0.0010353324578141626]}
{'': [0.016183663453795714, 0.036818498048785585], 'false': [0.023954730013228287, 0.0465615435565828], 'false,false': [0.0, 0.046873585607266025], 'false,false,false': [nan, 0.04687358560726604], 'true': [0.005624448505064699, 0.0010450697970931675], 'true,true': [0.00559817323806424, 0.005510415783376164], 'true,false': [1.3582790855703587e-05, 0.004064699284917585], 'true,false,false': [2.2066857547539237e-05, 0.008091705521700864]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.669
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.12597804902747187;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.15226658215833588;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7252594563565188;  // std dev = 0.213, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return -0.1131985590822474;  // std dev = 0.875, 63.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=1 */
%   | | | else return -0.12719641793159245;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.6596035971217442;  // std dev = 0.983, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12719641793159242;  // std dev = 2.11e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13320374435100027;  // std dev = 2.726, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | | else return 0.0704613952920603;  // std dev = 2.464, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5253657800533725;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5700971342668346;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4289372086248012;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.5906759246804495;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.575408747009597;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.631871563956024;  // std dev = 0.152, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11429704336750736;  // std dev = 0.008, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.039983119885864456;  // std dev = 2.088, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.13544751948737446;  // std dev = 2.949, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.4202397054179161;  // std dev = 0.026, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.373880854533266;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.45692971890962897;  // std dev = 0.203, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4567519333992262;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6722620434659343;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7590010968656584;  // std dev = 0.182, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10342239647645805;  // std dev = 0.008, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.10270982638723031;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.15970037520483285;  // std dev = 0.138, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.32995589087805577;  // std dev = 0.029, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.259017963557571;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.11822124040068076;  // std dev = 0.706, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.30469269428238543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5382478172052597;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33312763976583365;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(I, A) )
%   | | then return -0.07227061965115582;  // std dev = 0.125, 149.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.040513112369925885;  // std dev = 2.217, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | | else return 0.14699953804199134;  // std dev = 1.674, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22093821770594438;  // std dev = 0.984, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.27351586573406494;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.28190276739929027;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then return -0.044808739047663235;  // std dev = 0.140, 77.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=7 */
%   | | else return -0.05935758531568279;  // std dev = 0.110, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.31645435625975615;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.12186330916502226;  // std dev = 0.333, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.47990878237629675;  // std dev = 0.112, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.12452751803239533;  // std dev = 0.033, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.22140008547147993;  // std dev = 0.008, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return 0.2742519780128373;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.15857877003904294;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2837888573888834;  // std dev = 0.982, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.0828649572305337;  // std dev = 0.003, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28412097863969404;  // std dev = 1.240, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.12205240262072668;  // std dev = 0.048, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07089850887244305;  // std dev = 0.623, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.20957300042242022;  // std dev = 1.021, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12640456881351508;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.1700694215370274;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19035357984356252;  // std dev = 0.004, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.274238466350781;  // std dev = 0.000686, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04983231113465218;  // std dev = 0.121, 146.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return -0.021028302728298646;  // std dev = 0.846, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.025732169347731076;  // std dev = 1.244, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.016559245312465252;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.12947851499412005;  // std dev = 1.050, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.1740250742803746;  // std dev = 0.030, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.1332244966851247;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3461931800068274;  // std dev = 0.173, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10362671873249729;  // std dev = 0.758, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.0735120373033759;  // std dev = 0.003, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.31745078007925387;  // std dev = 0.045, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.39262491944826483;  // std dev = 0.135, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.11142147791688686;  // std dev = 0.069, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.19614855925647273;  // std dev = 0.120, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.08718040136475057;  // std dev = 0.230, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.014406340418076147;  // std dev = 0.808, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.26572162861187876;  // std dev = 0.172, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06437937881523943;  // std dev = 0.033, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.01595702927369059;  // std dev = 0.155, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else return 0.07208359646087145;  // std dev = 0.184, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1185776536151042;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03478939540376047;  // std dev = 0.765, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.04676980224950711;  // std dev = 0.985, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.030', 'seconds']
Refined model CLL: -0.103969


******************************************
Best model found
******************************************
Results 

CLL : -0.100085 

AUC ROC : 0.993945 

AUC PR : 0.383478 

Precision : 0.347222 

Recall : 0.992063 

F1 : 0.514403 

Total Learning Time : 12.669 

Total Inference Time : 9.493672132492065 

Total revision time: 31.09006603050232
Best scored revision CLL: -0.103969


Results 

CLL : -0.100085 

AUC ROC : 0.993945 

AUC PR : 0.383478 

Precision : 0.347222 

Recall : 0.992063 

F1 : 0.514403 

Total Learning Time : 31.10596473503113 

Total Inference Time : 9.493672132492065 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.269
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460237;  // std dev = 1.398, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.08185106490048774;  // std dev = 0.237, 50.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.21529179224236922;  // std dev = 0.479, 56.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7141059517409823;  // std dev = 1.017, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04104850343742791;  // std dev = 0.254, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08180466444282267;  // std dev = 1.291, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4317767384523721;  // std dev = 1.421, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.1374859272387536;  // std dev = 4.362, 101.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5598232124508135;  // std dev = 1.070, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7340293607475137;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5487723602427845;  // std dev = 0.863, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6024857167520682;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5624228478108846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042802369788813265;  // std dev = 3.753, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | | else return 0.06083818980588382;  // std dev = 3.790, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5551682207268587;  // std dev = 1.751, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11764567349747915;  // std dev = 0.046, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return -0.12817138327396763;  // std dev = 0.005, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16895761511307955;  // std dev = 0.274, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29828224872204284;  // std dev = 1.444, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else return 0.4696741510569348;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29375655903535414;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.50252277251197;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6362028952146183;  // std dev = 0.246, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10483899768739996;  // std dev = 1.373, 200.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=3 */
%   | | else return 0.001912805437031738;  // std dev = 0.289, 61.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02967987026779046;  // std dev = 2.905, 188.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2507436077072963;  // std dev = 0.180, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43738241302771924;  // std dev = 2.018, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12469243120556094;  // std dev = 0.195, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.12771210257755664;  // std dev = 0.218, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.267385963676988;  // std dev = 1.827, 101.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=98 */
%   | else return -0.08688594789475802;  // std dev = 1.358, 185.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012555385802199977;  // std dev = 2.059, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1877406108171057;  // std dev = 0.078, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E) )
%   | | then return 0.2574398135994479;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04444432551301001;  // std dev = 0.153, 136.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02168161290469652;  // std dev = 1.692, 96.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=18 */
%   | | | else return 0.04350647698863151;  // std dev = 2.362, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15793241001993363;  // std dev = 0.167, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23221816608468532;  // std dev = 1.074, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08936880100601989;  // std dev = 0.051, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.414054941352303;  // std dev = 0.695, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12135859077740986;  // std dev = 0.247, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1798982522644054;  // std dev = 0.673, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.1594642235297563;  // std dev = 0.278, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08116590890320369;  // std dev = 0.027, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0881207909989468;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.027745867346686173;  // std dev = 0.628, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.027133154589052518;  // std dev = 1.373, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.07042149486135292;  // std dev = 0.759, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024170929250693612;  // std dev = 1.832, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.504', 'seconds']
Parameter learned model CLL:-0.109936 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.398, 2, 84], 'true,false,true': [0.0, 148, 0], 'true,false,false': [0.237, 47, 3], 'false,true,true,true': [0.966, 1, 14], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.479, 36, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 70], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 136, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.291, 32, 2], 'false,false,false,true': [1.421, 3, 6], 'false,false,false,false': [4.362, 70, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.07, 1, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.863, 1, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 5], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [3.753, 197, 22], 'false,false,false,false': [3.79, 67, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.751, 0, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 135, 0], 'false,true,false,false': [0.005, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.274, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.444, 2, 65], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.246, 0, 29], 'false,false,true,false': [1.373, 197, 3], 'false,false,false': [0.289, 51, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.905, 120, 68], 'false,true': [0.18, 0, 17], 'false,false,true': [2.018, 4, 39], 'false,false,false,true': [0.195, 58, 0], 'false,false,false,false': [0.218, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.827, 3, 98], 'true,false': [1.358, 180, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.059, 58, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.078, 0, 68], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 121, 15], 'false,false,false,true': [1.692, 78, 18], 'false,false,false,false': [2.362, 47, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.167, 2, 66], 'false,true,true,true': [1.074, 1, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.051, 136, 0], 'false,false,true': [0.695, 0, 31], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.247, 73, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.673, 0, 71], 'true,true,false': [0.278, 0, 13], 'true,false,true': [0.027, 130, 0], 'true,false,false,true': [0.018, 29, 0], 'true,false,false,false': [0.628, 15, 3], 'false,true': [1.373, 26, 17], 'false,false,true': [0.759, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.832, 41, 18]}]
{'': [0.2124950406665352, 0.2192212988611895], 'false': [0.2071938168846606, 0.22959183673469347], 'true': [0.022714981070848902, 0.014921946740128407], 'false,true': [0.05246913580246885, 4.163336342344337e-17], 'false,true,true': [0.06222222222222188, 1.4802973661668753e-16], 'true,false': [-1.0802169969325848e-16, 0.056399999999999846]}
{'': [0.014565285637617845, 0.12296297365118787], 'false': [0.06457921573918134, 0.17340050589627254], 'false,false': [0.049048782390162166, 0.1978520012176281], 'false,false,false': [0.2243191646271706, 0.18840750716561763], 'false,true': [nan, 0.06457921573918134], 'false,false,true': [nan, 0.049048782390162166]}
{'': [0.0298294580612811, 0.10687894103101124], 'false': [nan, 0.10687894103101131], 'false,false': [0.0023511232438455654, 0.09514834787665354], 'false,false,false': [0.06430619195579225, 0.16509805106331207], 'true': [0.01972143693084111, 0.08676495073778749], 'true,false': [0.01689765598884274, 0.10641203018796112], 'true,true': [0.01972143693084111, nan], 'false,false,true': [0.0064201338711936005, -4.0371746350005693e-17]}
{'': [0.024717489455256276, 0.0008635387569181452], 'false': [2.904571909597418e-05, 0.0010162240302623552], 'false,false': [nan, 0.0010162240302623552], 'false,false,false': [nan, 0.0010162240302623552], 'false,true': [nan, 2.9045719095968732e-05], 'false,true,false': [1.5857396429365247e-05, 8.732168322807463e-07]}
{'': [0.03107626893853374, 0.07355834081149207], 'false': [0.002566277144935167, 0.07228412294754034], 'false,false': [0.06923127412223613, 0.08361324673910517], 'false,false,true': [0.002084744946227346, 0.009425383193200776], 'true': [0.031108105845329154, 0.0], 'false,true': [1.3404044845592249e-05, 0.0]}
{'': [0.04489233636518301, 0.08543158114427826], 'false': [0.001897235835791887, 0.08963688110121172], 'false,false': [0.09466486008398298, 0.0007549683341685253], 'true': [nan, 0.044892336365183125], 'true,false': [nan, 0.04489233636518301], 'false,false,false': [0.000658762631013713, 0.0008499707615976039]}
{'': [0.04679354096057005, 0.05364615052080937], 'false': [nan, 0.05364615052080935], 'false,false': [nan, 0.05364615052080937], 'false,false,false': [nan, 0.05364615052080937], 'true': [0.03304727315219415, 0.00997529748440314]}
{'': [0.00022375067169101267, 0.03989589420513635], 'false': [nan, 0.03989589420513651], 'false,false': [0.023323395721213273, 0.05251502169928549], 'false,false,false': [0.02982223153173026, 0.08206439731303944], 'true': [8.89166117376713e-05, 8.892923785344675e-05], 'true,false': [8.892923785344675e-05, nan]}
{'': [0.027887284650822363, 0.039833999529455995], 'false': [0.021691413996941977, 0.06520922062919325], 'false,false': [0.015572403583057996, 0.0008388577906217213], 'false,true': [0.041195606812887524, 1.9082892211181083e-05], 'false,true,true': [0.041195606812887524, nan], 'false,false,false': [nan, 0.0008388577906217213]}
{'': [0.01779584404883953, 0.05567180369255637], 'false': [0.04384381517299864, 0.06385180842694059], 'false,false': [0.19208552214741478, 0.056898495584457996], 'false,false,false': [nan, 0.05689849558445814], 'true': [0.006373020679016218, 0.002516999928276151], 'true,true': [0.0063876405520873645, 0.005940244910252985], 'true,false': [5.803690396048828e-06, 0.009270883618542223], 'true,false,false': [1.1616128977822409e-05, 0.021939468718229875]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.493
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.108, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.04564893509951222;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return -0.14185106490048774;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.09814893509951236;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.21109011157010057;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6742227094237839;  // std dev = 0.213, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else return 0.7305523571349541;  // std dev = 0.179, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7305523571349541;  // std dev = 0.126, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3885084237094986;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12722084816975565;  // std dev = 0.073, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.6528067455442875;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1254446385283913;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.19256897000642398;  // std dev = 2.990, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.12671253106556732;  // std dev = 2.397, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5733489276677062;  // std dev = 0.237, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, A) )
%   | | then return 0.5555357683893672;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4136552763539018;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5915709908961982;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5555357683893672;  // std dev = 4.71e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10839055073816792;  // std dev = 0.712, 106.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=1 */
%   | | | else return -0.024329835746719895;  // std dev = 2.048, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.060382200744901186;  // std dev = 2.255, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.13835871350611623;  // std dev = 3.493, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.42442187372337675;  // std dev = 0.035, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.2971644956484986;  // std dev = 1.339, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.4176391830450434;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6444289097733465;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4286260656521898;  // std dev = 0.185, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5765550648973901;  // std dev = 0.195, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5304375909633576;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7949594151348311;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12440270494166435;  // std dev = 0.037, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3088412554839146;  // std dev = 0.994, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.22079699778503428;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.4160567952701535;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4516567106497261;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3251618979922378;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4975087934045686;  // std dev = 0.566, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10197611073418555;  // std dev = 1.267, 198.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.0914482324234164;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.08338793866786204;  // std dev = 1.968, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.19988564627584976;  // std dev = 1.368, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.2668291782911172;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.27731509146817984;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05248435376366946;  // std dev = 0.147, 121.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=14 */
%   | | else return -0.05733027367020074;  // std dev = 0.116, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2644577915084657;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.31032059104827725;  // std dev = 0.199, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5018223470553744;  // std dev = 1.078, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return -0.12509372220299705;  // std dev = 0.041, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22257861469932405;  // std dev = 0.177, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.24143622399778675;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.28123888838142946;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.047830232981369535;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.07466459244356936;  // std dev = 0.411, 118.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=1 */
%   | | | else return -0.032600238948686425;  // std dev = 1.235, 76.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.008873434128968506;  // std dev = 1.706, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return 0.045442810088421506;  // std dev = 1.770, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16628037442148955;  // std dev = 0.988, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.1873534546504897;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.08607982181106362;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.27592895276138724;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.05479645567901048;  // std dev = 0.891, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.22717388957543053;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.05253830956393556;  // std dev = 0.100, 182.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.004673837227149802;  // std dev = 1.704, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.06120253237819138;  // std dev = 1.721, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then return 0.17246243379132895;  // std dev = 0.026, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return -0.01643958829079717;  // std dev = 0.940, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.08340238650661032;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.160756953965845;  // std dev = 0.098, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3504402125749564;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07722160919182171;  // std dev = 0.048, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.15993679530502544;  // std dev = 0.967, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.42396962442640707;  // std dev = 0.196, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.12067125954309174;  // std dev = 0.040, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.12524954543872333;  // std dev = 0.992, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.054122350230137124;  // std dev = 0.955, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.24614839811593822;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06323252968957728;  // std dev = 0.040, 167.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.16608180934589398;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23414463582422784;  // std dev = 0.993, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.10115307038560041;  // std dev = 0.219, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.009653354268818711;  // std dev = 0.576, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.027785250879798197;  // std dev = 1.116, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.788', 'seconds']
Refined model CLL: -0.104007


******************************************
Best model found
******************************************
Results 

CLL : -0.100277 

AUC ROC : 0.992962 

AUC PR : 0.364858 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 10.493 

Total Inference Time : 11.051759719848633 

Total revision time: 31.75605884742737
Best scored revision CLL: -0.104007


Results 

CLL : -0.100277 

AUC ROC : 0.992962 

AUC PR : 0.364858 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 31.771957551956177 

Total Inference Time : 11.051759719848633 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.587
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.06492798797741081;  // std dev = 0.266, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.1456489350995117;  // std dev = 0.453, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6924158396940212;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.032028220491083094;  // std dev = 0.267, 171.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06658803638214639;  // std dev = 1.794, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7623830528773082;  // std dev = 0.126, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09143751556823387;  // std dev = 5.117, 159.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5540113631799493;  // std dev = 1.263, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7345640691329335;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6019852261861595;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5994967024938512;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5041762833681797;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018006884759117665;  // std dev = 4.645, 268.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=34 */
%   | | | else return 0.04723647298807878;  // std dev = 4.163, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5389865951890352;  // std dev = 2.792, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12136121027239084;  // std dev = 0.041, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | | else return -0.1278048433522391;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15468224838771297;  // std dev = 0.235, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30953692818356787;  // std dev = 1.143, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4747618382450839;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31037579568656015;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5085063918256156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6193236024452846;  // std dev = 1.072, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10081675704470097;  // std dev = 1.815, 265.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=5 */
%   | | else return 0.03708846234367789;  // std dev = 0.316, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0292968441305676;  // std dev = 3.158, 238.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25830457648668775;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.50061958201804;  // std dev = 1.634, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11919853713309939;  // std dev = 0.160, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12564678372725305;  // std dev = 0.172, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2733407091172862;  // std dev = 2.035, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08988322507467075;  // std dev = 1.834, 257.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031791683481991115;  // std dev = 2.299, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16826197428893414;  // std dev = 1.400, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return -0.09729422099738767;  // std dev = 0.871, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04318532195680356;  // std dev = 0.145, 175.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.024171821421552886;  // std dev = 2.000, 96.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=28 */
%   | | | else return 0.05921609276349368;  // std dev = 2.497, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16949684679495902;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20609186575846056;  // std dev = 2.041, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09376528447126481;  // std dev = 0.113, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3817494969851355;  // std dev = 1.283, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11328006192502801;  // std dev = 0.253, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15618064499983533;  // std dev = 1.705, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.1743757873564463;  // std dev = 0.362, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08317316623595873;  // std dev = 0.022, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10076071425219016;  // std dev = 0.012, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.03862807478352003;  // std dev = 1.271, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.017560558440558195;  // std dev = 1.325, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.1404073299265202;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06209188810782259;  // std dev = 1.936, 57.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.268', 'seconds']
Parameter learned model CLL:-0.112227 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 154, 0], 'true,false,false': [0.266, 48, 4], 'false,true,true,true': [1.351, 2, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.453, 57, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 152, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.794, 51, 4], 'false,false,false,true': [0.126, 0, 8], 'false,false,false,false': [5.117, 119, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.263, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.175, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false,true': [4.645, 234, 34], 'false,false,false,false': [4.163, 88, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.792, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 192, 0], 'false,true,false,false': [0.008, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.235, 104, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.143, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.039, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.072, 1, 39], 'false,false,true,false': [1.815, 260, 5], 'false,false,false': [0.316, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.158, 156, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [1.634, 2, 52], 'false,false,false,true': [0.16, 82, 0], 'false,false,false,false': [0.172, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.035, 3, 121], 'true,false': [1.834, 250, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.299, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.4, 2, 83], 'true,false,true': [0.871, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 156, 19], 'false,false,false,true': [2.0, 68, 28], 'false,false,false,false': [2.497, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [2.041, 3, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.113, 216, 0], 'false,false,true': [1.283, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.705, 3, 85], 'true,true,false': [0.362, 0, 19], 'true,false,true': [0.022, 155, 0], 'true,false,false,true': [0.012, 23, 0], 'true,false,false,false': [1.271, 22, 4], 'false,true': [1.325, 49, 25], 'false,false,true': [0.769, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.936, 36, 21]}]
{'': [0.22633136094674802, 0.2145387080452024], 'true': [0.01851192595229848, 0.019040437364501735], 'false': [0.22370343316289376, 0.20484375000000096], 'false,true': [0.06858710562414343, 5.196788625904988e-17], 'false,true,true': [0.07939508506616269, 0.0], 'true,false': [-1.2688263138573217e-16, 0.07100591715976316]}
{'': [0.03360137630652904, 0.12135594166484424], 'false': [0.0714415906054092, 0.15468182131796507], 'false,false': [0.05853364937850042, 0.17738799670949504], 'false,false,false': [0.0019812227547462147, 0.1646485647564601], 'false,true': [nan, 0.0714415906054092], 'false,false,true': [nan, 0.05853364937850042]}
{'': [0.022255772500910754, 0.11488979727717821], 'false': [nan, 0.11488979727717756], 'false,false': [0.04588469636914469, 0.1035383509918712], 'false,false,false': [0.08050736667578824, 0.15613467974638012], 'false,false,true': [0.005385899557923679, 0.05859374999999989], 'true': [0.023129563519923638, 0.010669817208255933], 'true,true': [0.023129563519923638, nan], 'true,false': [0.01610316515745554, 0.0038385436553682317]}
{'': [0.04870636132976251, 0.00041812868527061687], 'false': [1.1697631327447155e-05, 0.000532674871546363], 'false,false': [nan, 0.000532674871546363], 'false,false,false': [nan, 0.000532674871546363], 'false,true': [nan, 1.1697631327447155e-05], 'false,true,false': [8.578075087891749e-06, 2.792442386878591e-06]}
{'': [0.01687211795866441, 0.0795437220453415], 'false': [0.0018532560219939108, 0.07850324257225348], 'false,false': [0.07366572656168943, 0.09964535408097333], 'false,false,true': [0.028723084901349782, 0.012436126464845404], 'true': [0.016742866772062177, 0.0], 'false,true': [7.659819802614542e-05, 0.0]}
{'': [0.04190766870721139, 0.08420819947872651], 'false': [0.0014030326741219562, 0.0885559362326812], 'false,false': [0.049462584710648544, 0.00037470606811126374], 'true': [nan, 0.04190766870721142], 'true,false': [nan, 0.04190766870721139], 'false,false,false': [0.0003122178803196892, 0.000426387588101474]}
{'': [0.04866567051218026, 0.058708915150754555], 'false': [nan, 0.058708915150754555], 'false,false': [nan, 0.058708915150754555], 'false,false,false': [nan, 0.058708915150754555], 'true': [0.033398438131449326, 0.013093584535687982]}
{'': [0.03322131574733375, 0.042136086292508174], 'false': [nan, 0.042136086292508236], 'false,false': [0.021137805910513858, 0.06016408032999491], 'false,false,false': [0.04166034898438417, 0.08315939626773758], 'true': [0.023074717707315645, 0.2525922614341673], 'true,false': [0.2525922614341673, nan]}
{'': [0.01211519314904172, 0.04241635386142969], 'false': [0.028321484176964905, 0.06479880514551417], 'false,false': [0.040151158816565384, 0.0006856820157198984], 'false,true': [0.10164449428125016, 5.938424099484731e-05], 'false,true,true': [0.10164449428125016, nan], 'false,false,false': [nan, 0.0006856820157198984]}
{'': [0.028040026944528913, 0.04664874228074365], 'false': [0.023740474619367617, 0.07424853308554025], 'false,false': [0.19704111973937843, 0.0657354687016912], 'false,false,false': [nan, 0.06573546870169115], 'true': [0.028446584340665233, 0.008192254591626605], 'true,true': [0.033040210756461644, 0.006898564660129041], 'true,false': [3.232876765788969e-06, 0.03391655701633371], 'true,false,false': [6.104479146359799e-06, 0.062102210082878896]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 42.351
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.12123250819945731;  // std dev = 0.142, 194.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.1273797043302816;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7267718551172404;  // std dev = 0.208, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.670634156743224;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12772418867679586;  // std dev = 8.16e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.09935785786454956;  // std dev = 0.153, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.02612196516935794;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.0790961929986594;  // std dev = 1.169, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.6154260705995349;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11734046493065449;  // std dev = 4.739, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5582214808971108;  // std dev = 1.88e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.36443242633760636;  // std dev = 0.987, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.49513509187984067;  // std dev = 1.234, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.8040757389567719;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11671621200779415;  // std dev = 0.079, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5891571148545229;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08190915098473826;  // std dev = 3.601, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.17538996208683116;  // std dev = 2.911, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.40728873248185826;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.2931042306961847;  // std dev = 1.963, 28.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | else return 0.6389291584131415;  // std dev = 0.269, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.4426929901592986;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1960491671580714;  // std dev = 0.936, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6309890012788407;  // std dev = 1.000, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7303058039527321;  // std dev = 0.279, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.10513844189266594;  // std dev = 0.004, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.15880913323336826;  // std dev = 0.190, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32566216577699375;  // std dev = 0.036, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.37600563816830423;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6533911535690915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32242108645276407;  // std dev = 0.047, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5495961783243191;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3578695410883721;  // std dev = 1.052, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09618462732337851;  // std dev = 0.064, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05655975051715891;  // std dev = 2.444, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.082644119871083;  // std dev = 2.732, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.25784007099276357;  // std dev = 5.16e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2041550541929703;  // std dev = 1.361, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.12772273716065094;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.05338919659696982;  // std dev = 0.110, 180.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(A, H) )
%   | | then return 0.3236028109329771;  // std dev = 0.233, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18703219447996955;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2445052822100364;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4867476137320648;  // std dev = 0.111, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12738400652561313;  // std dev = 0.030, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.2175949413008504;  // std dev = 0.075, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.2825242655830661;  // std dev = 0.187, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.29026896515905404;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1823093216782636;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07794909992551305;  // std dev = 0.389, 110.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=1 */
%   | | | else return -0.009903199072138581;  // std dev = 1.489, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0028086162621206437;  // std dev = 2.124, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | | | else return 0.07890358513663968;  // std dev = 2.093, 55.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), tweets(C, E) )
%   | | | then return 0.18257180318541005;  // std dev = 0.053, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.03896310816116006;  // std dev = 1.248, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.1844744086109752;  // std dev = 0.020, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.1910584694929329;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.04447450583741866;  // std dev = 0.133, 223.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.33638654460225886;  // std dev = 0.621, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.13392373207673808;  // std dev = 0.374, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.02217314942556139;  // std dev = 0.838, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.0456073465475365;  // std dev = 1.473, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.14058059267110082;  // std dev = 0.126, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.021177163192190096;  // std dev = 0.953, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.05643579734697853;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.04582783985654891;  // std dev = 1.145, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.2311009128679948;  // std dev = 0.836, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.15842213253168955;  // std dev = 0.278, 42.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | else return -0.07559136636033945;  // std dev = 0.053, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3472030574798419;  // std dev = 0.075, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12663712588424017;  // std dev = 0.026, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11831678767442443;  // std dev = 0.150, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else return 0.19183691600123745;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.06330339993667276;  // std dev = 0.053, 213.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2277488299873052;  // std dev = 0.060, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.10057222239084176;  // std dev = 0.008, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2000737542666184;  // std dev = 0.099, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.11901210178599467;  // std dev = 0.535, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.01871008546899768;  // std dev = 0.596, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.036224815883893244;  // std dev = 1.328, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.979', 'seconds']
Refined model CLL: -0.10269


******************************************
Best model found
******************************************
Results 

CLL : -0.101982 

AUC ROC : 0.993177 

AUC PR : 0.361076 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 42.351 

Total Inference Time : 18.547937393188477 

Total revision time: 73.30222109603882
Best scored revision CLL: -0.10269


Results 

CLL : -0.101982 

AUC ROC : 0.993177 

AUC PR : 0.361076 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 73.31811980056763 

Total Inference Time : 18.547937393188477 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.213
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.0581489350995122;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7278056532693119;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.055547847610515226;  // std dev = 0.349, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.06583273157884716;  // std dev = 0.952, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5815915000610533;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5635819350669629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029911865576599972;  // std dev = 1.590, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | | else return 0.034681296231135084;  // std dev = 1.182, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5102587557682583;  // std dev = 0.701, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12559545475175313;  // std dev = 0.041, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.1338769722135163;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13322631508290783;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23362839728375007;  // std dev = 1.173, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return -0.193838952160459;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.60697987545679;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09194122479113816;  // std dev = 0.884, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | else return -0.09772137750383848;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0783710027975796;  // std dev = 1.537, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.34880646490833933;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.524496089818274;  // std dev = 0.382, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.0994531989153866;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.09735565903621164;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24899530913964876;  // std dev = 1.113, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.09301782724739278;  // std dev = 0.802, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03687501987431411;  // std dev = 0.291, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1434899452548348;  // std dev = 0.977, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03416534849149557;  // std dev = 0.169, 46.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.035773292913793414;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10333575181126141;  // std dev = 0.707, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10329856081995228;  // std dev = 0.270, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.36139788075968343;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09841948561929731;  // std dev = 0.064, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.6942089467261205;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09915790874224861;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1624001574617125;  // std dev = 1.071, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.1802198099460014;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.09367950556749212;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07479960044066285;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then return -0.030199885292688845;  // std dev = 0.177, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21520076384031886;  // std dev = 0.447, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.942', 'seconds']
Parameter learned model CLL:-0.111842 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.979, 1, 23], 'true,false,true': [5.37e-08, 50, 0], 'true,false,false': [0.0, 9, 0], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 1, 0], 'false,false': [0.4, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.349, 26, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.952, 13, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.203, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.59, 30, 4], 'false,false,false,false': [1.182, 9, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.701, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 40, 0], 'false,true,false,false': [0.019, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.046, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.173, 2, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.707, 1, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.014, 0, 5], 'false,false,true,false': [0.884, 40, 1], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.537, 28, 22], 'false,true': [0.0, 0, 1], 'false,false,true': [0.382, 0, 2], 'false,false,false,true': [0.033, 8, 0], 'false,false,false,false': [0.025, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.113, 1, 23], 'true,false': [0.802, 53, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.291, 2, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.977, 1, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.169, 39, 7], 'false,false,false,true': [0.192, 4, 1], 'false,false,false,false': [0.707, 3, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.27, 2, 18], 'false,true,true,true': [0.134, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.064, 41, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.039, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.071, 1, 22], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.011, 30, 0], 'true,false,false,true': [1.86e-09, 5, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.177, 4, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.447, 1, 1]}]
{'': [0.2003193496879092, 0.20408163265306126], 'false': [0.25, 0.16000000000000003], 'false,true': [0.0, 0.0], 'true': [0.039930555555556024, 6.39789539614497e-17], 'true,false': [5.773159728050814e-17, -9.25185853854297e-18], 'false,true,true': [0.0, nan]}
{'': [-1.1102230246251565e-16, 0.10682902065560969], 'false': [0.12167361157247171, 0.07647480716343882], 'false,true': [nan, 0.12167361157247171], 'false,false': [0.0, 0.09883233286361248], 'false,false,false': [0.0, 0.06477806924607951], 'false,false,true': [nan, 0.0]}
{'': [0.002333525576724998, 0.09316530781347131], 'false': [nan, 0.0931653078134713], 'false,false': [0.0, 0.08798037996921154], 'false,false,false': [0.07433815817705877, 0.12699486059835496], 'true': [0.0024325832345726143, 0.0], 'true,true': [0.0024325832345726143, nan], 'false,false,true': [nan, 0.0], 'true,false': [nan, 0.0]}
{'': [0.019629256647005208, 8.268168558013977e-05], 'false': [5.134209980497363e-05, 0.00021395362185896717], 'false,false': [nan, 0.00021395362185896717], 'false,false,false': [nan, 0.00021395362185896717], 'false,true': [nan, 5.134209980497798e-05], 'false,true,false': [4.170307367718784e-05, 3.2602098831867194e-05]}
{'': [0.06883863416102394, 0.06929715405874821], 'false': [0.25, 0.06074970880339116], 'false,true': [0.25, nan], 'true': [0.06883863416102394, nan], 'false,false': [0.06430248086864412, -1.1564823173178713e-18], 'false,false,true': [3.829271921769184e-05, 0.01904276129184371]}
{'': [0.04722957476617585, 0.059093173697768384], 'false': [0.0, 0.054735000517469344], 'false,false': [0.07311530452544318, 0.0001330443152192235], 'true': [nan, 0.04722957476617585], 'true,false': [nan, 0.04722957476617585], 'false,false,false': [0.0001357075369934832, 0.00012607566896826182]}
{'': [0.04903244955875366, 0.028176718623429502], 'true': [0.05159291561856232, 0.011902776809036729], 'false': [nan, 0.028176718623429502], 'false,false': [nan, 0.028176718623429502], 'false,false,false': [nan, 0.028176718623429502]}
{'': [0.056100255791222076, 0.03479084285160597], 'true': [0.056100255791222076, nan], 'false': [nan, 0.034790842851605955], 'false,false': [0.028398972748156785, 0.06442754306249947], 'false,false,false': [0.0073732808089399995, 0.12499463403260586]}
{'': [0.07308729490031116, 0.03124774907883307], 'false': [0.024013293387047087, 0.07729337949144517], 'false,false': [0.0, 0.0002568997844334282], 'false,true': [0.002985358154921939, 9.923172188291431e-05], 'false,true,true': [0.002985358154921939, nan], 'false,false,false': [nan, 0.0002568997844334282]}
{'': [0.03504309693819857, 0.04532632622278014], 'false': [0.006264456399897499, 0.09996565892648566], 'false,false': [nan, 0.09996565892648566], 'false,false,false': [nan, 0.09996565892648566], 'true': [0.047769375650437124, 4.6868367722549146e-05], 'true,true': [0.049833074192598865, 0.0], 'true,false': [3.7582169718275437e-06, 6.938893903907229e-19], 'true,false,false': [6.938893903907229e-19, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true


Refining candidate
***************************
Model training time 6.688
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.04095283345445679;  // std dev = 0.253, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.045188906234183465;  // std dev = 0.904, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2569737038448792;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.022360103746074455;  // std dev = 1.535, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | | else return -0.11536063715749934;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.0836460849880934;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4238653190167701;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5728153473178853;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18761964939840378;  // std dev = 0.563, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6130985717595221;  // std dev = 0.318, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.10822326088821012;  // std dev = 0.019, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12093032383231739;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1170973912865183;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.15299077081559295;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.19432966381100364;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return 0.3345986447628736;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31681108496280713;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.38150731453035264;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3727099726054567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4824174152168233;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09640266392795757;  // std dev = 0.814, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | else return -0.10865247136082037;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.15364681921886852;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2631901089340658;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2760019171713259;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3390259643453618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09017860424028261;  // std dev = 0.013, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.017015930564945724;  // std dev = 0.515, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.29042549990472555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4984120930625655;  // std dev = 0.297, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10014298572814914;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.25082794732070923;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.22966327378326298;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F), tweets(C, G) )
%   | | then return 0.2051123580456672;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2050697404317787;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, I), follows(H, A) )
%   | | then if ( follows(A, J), follows(J, H) )
%   | | | then return -0.014389166998888177;  // std dev = 0.822, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return -0.08566227276443018;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08150627361722794;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, K) )
%   | | then return -0.02615621512649887;  // std dev = 0.291, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10017134316776947;  // std dev = 0.607, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.20668990560982187;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19166020127695113;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F), tweets(C, G) )
%   | | then return 0.17368177490516123;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17373286882794592;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A), tweets(I, J) )
%   | | then if ( tweets(K, H), recursion_accounttype(K, B) )
%   | | | then return 0.2641915971499545;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08265159605874742;  // std dev = 0.025, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.07787826010917605;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(L, A) )
%   | | then return 0.0020196272682446656;  // std dev = 0.520, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.044831483814097295;  // std dev = 0.609, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.17330991953808375;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.15723970358003075;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1681727324693363;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14583577917625787;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.22158280603098157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.044988717054960804;  // std dev = 0.953, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07972009313062559;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.5605225480627813;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.12749126421983747;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.03901974469968939;  // std dev = 1.328, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.24607786011034474;  // std dev = 0.270, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2015249427726401;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0704701386456252;  // std dev = 0.019, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.08844586041131629;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.0723667235527265;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return 3.9812566389191745E-4;  // std dev = 0.150, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.07695507855333039;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.040519034385313395;  // std dev = 0.466, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '20.804', 'seconds']
Refined model CLL: -0.102289


******************************************
Best model found
******************************************
Results 

CLL : -0.100353 

AUC ROC : 0.993806 

AUC PR : 0.343043 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 6.688 

Total Inference Time : 13.454361915588379 

Total revision time: 23.53756210899353
Best scored revision CLL: -0.102289


Results 

CLL : -0.100353 

AUC ROC : 0.993806 

AUC PR : 0.343043 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 23.55346081352234 

Total Inference Time : 13.454361915588379 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.394
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8359267128772897;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6633305428143942;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02795447960236681;  // std dev = 0.330, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.28881117365523334;  // std dev = 0.609, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.11978024987240866;  // std dev = 1.785, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5880951016199644;  // std dev = 0.237, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.718315008365959;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6576951678848171;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5746240767841715;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 1.3600241595027084E-4;  // std dev = 2.450, 66.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=10 */
%   | | | else return 0.019266290323184075;  // std dev = 1.729, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4770731417000476;  // std dev = 1.839, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12646791985315148;  // std dev = 0.044, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.13071742701355715;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.156822792501402;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3034052213721381;  // std dev = 1.032, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0.4355433284580832;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3206133612579136;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5546423774736922;  // std dev = 1.023, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.10767650250577425;  // std dev = 0.868, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   | | else return -0.10032419217483311;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05243131745400084;  // std dev = 2.341, 108.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=42 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2551050395830837;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5402457686049432;  // std dev = 0.371, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11194875143650322;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.10857361694085858;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31088758077727885;  // std dev = 0.653, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.10082109180323737;  // std dev = 0.768, 98.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.009807681017873942;  // std dev = 0.358, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16282091683178299;  // std dev = 0.986, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03389413409363502;  // std dev = 0.185, 81.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.027160391586083545;  // std dev = 0.492, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.015541250938676154;  // std dev = 0.981, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12831213073227452;  // std dev = 0.237, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27660157281483594;  // std dev = 0.959, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09417692360568301;  // std dev = 0.069, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4083282130073676;  // std dev = 0.340, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10438106771055981;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20208462797653676;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.14725589110906856;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08937474810493636;  // std dev = 0.004, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07353120939442871;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06980258598385645;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return -0.03537837967496854;  // std dev = 0.407, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1526723645860704;  // std dev = 0.667, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.909', 'seconds']
Parameter learned model CLL:-0.110827 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.989, 1, 44], 'true,false,true': [6.66e-08, 65, 0], 'true,false,false': [0.0, 7, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.421, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.371, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.33, 58, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 14, 0], 'false,false,false,true': [0.609, 1, 1], 'false,false,false,false': [1.785, 13, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.237, 0, 32], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.45, 56, 10], 'false,false,false,false': [1.729, 19, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.839, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 57, 0], 'false,true,false,false': [0.0, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.059, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.032, 1, 33], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.023, 1, 13], 'false,false,true,false': [0.868, 87, 1], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.341, 66, 42], 'false,true': [0.0, 0, 2], 'false,false,true': [0.371, 0, 6], 'false,false,false,true': [0.047, 10, 0], 'false,false,false,false': [0.073, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.653, 0, 47], 'true,false': [0.768, 97, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.358, 6, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.986, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.185, 68, 13], 'false,false,false,true': [0.492, 13, 3], 'false,false,false,false': [0.981, 12, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.237, 2, 34], 'false,true,true,true': [0.959, 1, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.069, 84, 0], 'false,false,true': [0.34, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.05, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.499, 0, 42], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.004, 73, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.015, 6, 0], 'false,true': [0.407, 14, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.667, 3, 3]}]
{'': [0.23464095258967146, 0.1523437500000002], 'true': [0.0217283950617295, 6.78469626159818e-17], 'false': [0.13296398891966743, 0.17751479289940816], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [6.832141690000964e-17, -7.93016446160826e-18]}
{'': [0.05693296602387453, 0.11339529042208031], 'false': [0.108884434986934, 0.12281459185572485], 'false,false': [3.96508223080413e-18, 0.18049200920465955], 'false,false,false': [0.18546996371782487, 0.1770817578281537], 'false,true': [nan, 0.108884434986934], 'false,false,true': [nan, 3.96508223080413e-18]}
{'': [0.002257685261546924, 0.10585381634870045], 'false': [nan, 0.10585381634870053], 'false,false': [0.0, 0.10110330762630435], 'false,false,false': [0.09095517885414077, 0.12995263303523955], 'true': [0.0021993220596744794, 0.0], 'true,true': [0.0017541955978897517, 0.0], 'false,false,true': [nan, 0.0], 'true,false': [nan, 0.0]}
{'': [0.06382903075193826, 0.0001728677414054757], 'false': [2.95750506678664e-05, 0.0002661401263186822], 'false,false': [nan, 0.0002661401263186822], 'false,false,false': [nan, 0.0002661401263186822], 'false,true': [nan, 2.9575050667860482e-05], 'false,true,false': [3.4580545686926876e-05, 0.0]}
{'': [0.030906576851965833, 0.06697674874722308], 'false': [0.0, 0.06609012668555025], 'false,false': [0.06958993093127815, 2.3129646346357427e-18], 'false,false,true': [0.07478975189444766, 0.008553586854965467], 'true': [0.03131672297979278, 0.0], 'false,true': [0.0, nan]}
{'': [0.0507236044572803, 0.07281282077045118], 'false': [0.0, 0.07440354262035424], 'false,false': [0.02296288795271147, 0.00033188490028083025], 'true': [nan, 0.05072360445728031], 'true,false': [nan, 0.0507236044572803], 'false,false,false': [0.0002192238726246909, 0.00041359438887158666]}
{'': [0.04414285391783574, 0.016062706358662356], 'true': [0.009063117664236935, 0.0060241231242369525], 'false': [nan, 0.016062706358662356], 'false,false': [nan, 0.016062706358662356], 'false,false,false': [nan, 0.016062706358662356]}
{'': [0.030365275475024486, 0.03566467011947364], 'false': [nan, 0.03566467011947361], 'false,false': [0.034068650453350946, 0.03929212004494877], 'false,false,false': [0.015155964547701795, 0.06409622727247463], 'true': [0.030365275475024486, nan]}
{'': [0.056027330633398015, 0.030883107834784256], 'false': [0.024659009939478546, 0.05720379932212961], 'false,false': [0.02318677389946928, 0.00017620893773905816], 'false,true': [0.07658631979299502, 5.623614156498776e-05], 'false,true,true': [0.07658631979299502, nan], 'false,false,false': [nan, 0.00017620893773905816]}
{'': [0.020339916437477807, 0.03337460874346076], 'false': [0.00976610618725808, 0.07412743550380807], 'false,false': [nan, 0.07412743550380807], 'false,false,false': [nan, 0.07412743550380807], 'true': [0.0057816228363536245, 4.3095867024606603e-05], 'true,true': [0.005920293191945964, 0.0], 'true,false': [2.4118619192084886e-07, 2.186694050909868e-05], 'true,false,false': [0.0, 3.989233819804162e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.506
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7299859365048362;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.06574663863802703;  // std dev = 0.229, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11426200966247199;  // std dev = 1.703, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return -0.06395067336532827;  // std dev = 0.935, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5220331034129513;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.60153501721531;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7698736143851594;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6958449070335901;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.6354595655938857;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.026498904447252187;  // std dev = 1.756, 62.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=8 */
%   | | | else return -0.09332970672277999;  // std dev = 0.839, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.24269160270231507;  // std dev = 1.364, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.061154286637210835;  // std dev = 0.937, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.425641713282383;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.4997555173462816;  // std dev = 0.139, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.5417022211859494;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.614565837088196;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7772694575387985;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then return -0.10878497759838113;  // std dev = 0.002, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(H, J), tweets(A, J) )
%   | | | then return -0.1701030011629717;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.19779600332977726;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.15261804237241686;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3262275795895315;  // std dev = 5.58e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.32622757958953175;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.013304360936683949;  // std dev = 1.178, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.4844971137601789;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.016118228064222844;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.03533511055152211;  // std dev = 1.526, 76.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=9 */
%   | | | else return 0.09289159884360275;  // std dev = 1.336, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else return -0.0936882646777543;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.20893241570375473;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2589324157037548;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.34007300812605745;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.43117259706907596;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09639702855421468;  // std dev = 2.58e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.04687935904968353;  // std dev = 0.176, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3457962702891024;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.528309445609722;  // std dev = 0.223, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14653003194524483;  // std dev = 0.050, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21847096198938928;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.04998611319123408;  // std dev = 0.908, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.23972997104854804;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(E, A), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06149219181713784;  // std dev = 0.704, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   | | | else return -0.09040461757796117;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.2785632832315972;  // std dev = 1.077, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09867045900243404;  // std dev = 0.115, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( tweets(A, H) )
%   | | then return -0.08124592363603675;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.11401046172816766;  // std dev = 0.306, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18324027811682758;  // std dev = 0.015, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.20746603222045054;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.18220664466228023;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22061729605793873;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.06211081969944069;  // std dev = 0.725, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | | else return -0.020333686248757928;  // std dev = 0.732, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.3398805062513649;  // std dev = 0.289, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11344588184685558;  // std dev = 0.166, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.04912006220609704;  // std dev = 0.325, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.10304380747570839;  // std dev = 0.973, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.15772241146857624;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15851216244673288;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return -0.07375286165375272;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1356910177805881;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.2935027322777982;  // std dev = 0.098, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07831456625100265;  // std dev = 0.004, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.30733870886630765;  // std dev = 0.233, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11022749901361857;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12195449086933306;  // std dev = 0.955, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.2535525344213591;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17282767250073672;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.0727386149722048;  // std dev = 0.003, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.18708829124652593;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10560204488502789;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.19539525667334776;  // std dev = 0.432, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.043327829167454486;  // std dev = 0.388, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.030787629642416988;  // std dev = 0.458, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.558', 'seconds']
Refined model CLL: -0.101274


******************************************
Best model found
******************************************
Results 

CLL : -0.102859 

AUC ROC : 0.9957 

AUC PR : 0.458367 

Precision : 0.34186 

Recall : 0.942308 

F1 : 0.501706 

Total Learning Time : 7.506 

Total Inference Time : 8.137153625488281 

Total revision time: 20.718598508834837
Best scored revision CLL: -0.101274


Results 

CLL : -0.102859 

AUC ROC : 0.9957 

AUC PR : 0.458367 

Precision : 0.34186 

Recall : 0.942308 

F1 : 0.501706 

Total Learning Time : 20.734497213363646 

Total Inference Time : 8.137153625488281 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.922
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.09639651944594235;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6645398406955291;  // std dev = 1.690, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03609462369361681;  // std dev = 0.265, 139.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13051686112189348;  // std dev = 1.97e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.0957183868362189;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13310567988946917;  // std dev = 2.754, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.587859165803768;  // std dev = 0.299, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.7299441295600495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7741433712576319;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7203367636708847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5729028538294232;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5729028538294232;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01829283666694231;  // std dev = 3.262, 137.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=17 */
%   | | | else return -0.02807118384079166;  // std dev = 2.130, 47.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5387241605958065;  // std dev = 1.238, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1191293216322113;  // std dev = 0.030, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.11857263503201365;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16868326666192632;  // std dev = 0.188, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32106382217230156;  // std dev = 0.328, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.45580147934577464;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3062048657224879;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5622103074068472;  // std dev = 1.001, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07963034507659458;  // std dev = 1.829, 130.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=6 */
%   | | else return -0.10299919943124389;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038386666381604824;  // std dev = 2.587, 155.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26998310969772016;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4827946639190604;  // std dev = 1.068, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11682245131627099;  // std dev = 0.104, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.11604665844770971;  // std dev = 0.156, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29574355247335876;  // std dev = 0.736, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08249770641108198;  // std dev = 1.617, 169.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0136484741041907;  // std dev = 0.425, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16429887357566023;  // std dev = 0.975, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, E) )
%   | | then return 0.21899922837576968;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03854098280952316;  // std dev = 0.153, 120.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.004988221561569378;  // std dev = 1.220, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0.1104577233736027;  // std dev = 1.192, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.07988024084224897;  // std dev = 0.302, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3091169276529807;  // std dev = 0.475, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09170596798590733;  // std dev = 0.043, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41466972692921933;  // std dev = 0.478, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12429694939676116;  // std dev = 0.147, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17778912038526856;  // std dev = 1.101, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.13748452828797147;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.0853514448310568;  // std dev = 0.003, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07700541545601608;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.04079029641168054;  // std dev = 0.259, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.02297030556178951;  // std dev = 1.223, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04138301968014403;  // std dev = 1.188, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.542', 'seconds']
Parameter learned model CLL:-0.111379 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [0.0, 128, 0], 'true,false,false': [0.208, 21, 1], 'false,true,true,true': [0.949, 1, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.5, 5, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.69, 3, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 124, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.97e-08, 17, 0], 'false,false,false,true': [0.79, 2, 1], 'false,false,false,false': [2.754, 29, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.299, 0, 42], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [3.262, 120, 17], 'false,false,false,false': [2.13, 41, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.238, 0, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 88, 0], 'false,true,false,false': [1.49e-08, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.328, 0, 43], 'true,false': [0.034, 0, 2], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.001, 1, 17], 'false,false,true,false': [1.829, 124, 6], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.587, 99, 56], 'false,true': [0.111, 0, 5], 'false,false,true': [1.068, 1, 14], 'false,false,false,true': [0.104, 23, 0], 'false,false,false,false': [0.156, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.736, 0, 65], 'true,false': [1.617, 162, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.425, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.975, 1, 44], 'true,false,true': [0.043, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 105, 15], 'false,false,false,true': [1.22, 33, 9], 'false,false,false,false': [1.192, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.302, 5, 45], 'false,true,true,true': [0.475, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 135, 0], 'false,false,true': [0.478, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.101, 1, 56], 'true,true,false': [0.007, 0, 4], 'true,false,true': [0.003, 107, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.259, 6, 1], 'false,true': [1.223, 14, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.188, 18, 5]}]
{'': [0.20552099009456254, 0.24609374999999953], 'false': [0.24173553719008264, 0.24999999999999983], 'false,true': [0.08999999999999977, -1.1564823173178714e-17], 'true': [0.016124697661918288, 0.006622222222222121], 'false,true,true': [0.08999999999999977, nan], 'true,false': [-2.7755575615628914e-17, 0.04338842975206616]}
{'': [0.05827299575596342, 0.09537108607314525], 'false': [0.06998854156166842, 0.14602179283179673], 'false,false': [2.2857532859929692e-17, 0.18248862326868073], 'false,false,false': [0.20784463797694164, 0.1805842920488247], 'false,true': [nan, 0.06998854156166842], 'false,false,true': [nan, 2.2857532859929692e-17]}
{'': [0.0034883004912716034, 0.09191056771418588], 'false': [nan, 0.09191056771418539], 'false,false': [-6.344131569286608e-17, 0.08248934789814265], 'false,false,false': [0.0776561745607145, 0.09650634160685467], 'true': [0.0025342200290917115, 0.0007237877549984839], 'true,true': [0.002125067044803102, 0.0], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.020419784255558255, 0.000671688734095341], 'false': [8.287719745548162e-06, 0.0011841355464086822], 'false,false': [nan, 0.0011841355464086822], 'false,false,false': [nan, 0.0011841355464086822], 'false,true': [nan, 8.287719745548162e-06], 'false,true,false': [1.0389614807954084e-05, 9.654113257610057e-18]}
{'': [0.003191891355366947, 0.07006676582364582], 'false': [-1.586032892321652e-17, 0.06897283745159359], 'false,false': [0.07338743766420781, 0.0], 'false,false,true': [0.05563488077564996, 0.02574231091311924], 'true': [0.00250680196559447, 0.0005739319197937964], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.043164606024549884, 0.08355946437576876], 'false': [0.0024475933801351045, 0.08587823170467003], 'false,false': [0.07611268482686953, 0.0007653565423017539], 'true': [nan, 0.04316460602454991], 'true,false': [nan, 0.043164606024549884], 'false,false,false': [0.0004668734187380737, 0.0010635387385780047]}
{'': [0.042186274311062893, 0.015038040638069565], 'true': [0.008330309186528198, 0.015467118824937091], 'false': [nan, 0.015038040638069565], 'false,false': [nan, 0.015038040638069565], 'false,false,false': [nan, 0.015038040638069565]}
{'': [0.020387568866539415, 0.034363148763303895], 'false': [nan, 0.0343631487633039], 'false,false': [0.023488276870976318, 0.05487650977891303], 'false,false,false': [0.03543102552306628, 0.10920583173330846], 'true': [0.021125647981886268, 0.000915984586414155], 'true,false': [0.000915984586414155, nan]}
{'': [0.09127838020035434, 0.03062175534023408], 'false': [0.01745635858295021, 0.07595223477566593], 'false,false': [0.01756039299802761, 0.001031741386142606], 'false,true': [0.013283074430375914, 1.3443172687145055e-05], 'false,true,true': [0.013283074430375914, nan], 'false,false,false': [nan, 0.001031741386142606]}
{'': [0.021984370680554026, 0.06424379971272018], 'false': [0.06504665610618908, 0.06137026808440423], 'false,false': [nan, 0.06137026808440423], 'false,false,false': [nan, 0.06137026808440423], 'true': [0.019966190938403232, 0.000667281578697849], 'true,true': [0.021259906332387304, 1.280840666490618e-05], 'true,false': [9.976528940456661e-08, 0.005467279298136539], 'true,false,false': [0.0, 0.00954819492081833]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.092
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.6962300473115589;  // std dev = 0.166, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.7492452436907718;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5944734122109543;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6495248584690587;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.031564855112908526;  // std dev = 0.266, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.13166743038995857;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.15596423794540681;  // std dev = 2.070, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return 0.4582054912315484;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5517264929354138;  // std dev = 0.128, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.7257998392685385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.757137652663874;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.22325770763106934;  // std dev = 0.656, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5571701291192487;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09086659758351594;  // std dev = 1.169, 91.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=3 */
%   | | | else return -0.02274535115862983;  // std dev = 1.759, 53.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.24725764745176057;  // std dev = 1.709, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.09290127763355059;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.42871883758378776;  // std dev = 0.039, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2840030636342149;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.46701679945250096;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4397588027929624;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5836294361190437;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.632112047579616;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7146957357995165;  // std dev = 0.166, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.10848483146564115;  // std dev = 0.006, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return -0.21276570401005176;  // std dev = 0.242, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E) )
%   | | | then return 0.30557947754377524;  // std dev = 0.990, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.025926691402599882;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3588261379141868;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4317726968463428;  // std dev = 0.066, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3229385450970776;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.05554809255978328;  // std dev = 1.679, 125.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=10 */
%   | | | else return 0.04855860579044816;  // std dev = 2.091, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return -0.0982063923754972;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2744864769969626;  // std dev = 0.122, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.3375372258124279;  // std dev = 0.947, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.09060556070248003;  // std dev = 0.022, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.04374020029119406;  // std dev = 0.417, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.03962921619987205;  // std dev = 0.178, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2775667433659473;  // std dev = 0.110, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.48291289171691854;  // std dev = 0.160, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.38367162758536816;  // std dev = 0.886, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.15642368307087354;  // std dev = 0.052, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2321892686305905;  // std dev = 0.025, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.04611250334471409;  // std dev = 0.968, 79.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   | | | else return -0.09058750935163579;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.03611779210105137;  // std dev = 0.947, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.048416631827422583;  // std dev = 0.808, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.35722867143900633;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1347893328659751;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.016767722052761464;  // std dev = 0.755, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0023642720359322855;  // std dev = 0.984, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19304194202926422;  // std dev = 0.124, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.2750004594959426;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19384659674549448;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.39269554977390597;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08376750722530994;  // std dev = 0.087, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0092244047562122;  // std dev = 0.775, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03482000018023246;  // std dev = 0.565, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.12238289217925202;  // std dev = 0.653, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07920398837357753;  // std dev = 1.129, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1237706061836209;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.17412414232550089;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1914692947364282;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.21862391714019352;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.25709246850183715;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07683400344985755;  // std dev = 0.072, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.27617666995455464;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4655987308566584;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14768978068841324;  // std dev = 0.036, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14826906495478123;  // std dev = 0.146, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.2326876126418226;  // std dev = 0.254, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.14683890182372566;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07146996959920492;  // std dev = 0.054, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.051919215296412614;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return -0.10597650191095266;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.1428234906152625;  // std dev = 0.920, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.13416979815225677;  // std dev = 0.136, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.08479159139888987;  // std dev = 0.230, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.622', 'seconds']
Refined model CLL: -0.109067


******************************************
Best model found
******************************************
Results 

CLL : -0.112286 

AUC ROC : 0.994886 

AUC PR : 0.383762 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 10.092 

Total Inference Time : 12.346489191055298 

Total revision time: 29.974067749023437
Best scored revision CLL: -0.109067


Results 

CLL : -0.112286 

AUC ROC : 0.994886 

AUC PR : 0.383762 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 29.989966453552245 

Total Inference Time : 12.346489191055298 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.024
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8458032560871667;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.27920156667845974;  // std dev = 0.494, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7086204899173467;  // std dev = 1.005, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04299461379883321;  // std dev = 0.251, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13166743038995857;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7532009494300843;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14827483570672534;  // std dev = 3.011, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5741195714567874;  // std dev = 0.326, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.7305060078063004;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3235998584976118;  // std dev = 0.624, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.5923490861694575;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5610873684276615;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5610873684276615;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01972725480971231;  // std dev = 3.592, 168.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=21 */
%   | | | else return -0.03978862169630482;  // std dev = 2.508, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47237606173818353;  // std dev = 2.800, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11818596632823092;  // std dev = 0.015, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | | else return -0.1164082870850303;  // std dev = 0.005, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16110069530237567;  // std dev = 0.152, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2895682758648027;  // std dev = 1.329, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else return 0.19082307188161904;  // std dev = 1.044, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3126225136049641;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6338703956099488;  // std dev = 0.184, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08332116289849664;  // std dev = 2.148, 198.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=8 */
%   | | else return -0.10378339339098656;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026218924719828608;  // std dev = 3.046, 217.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=70 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19113859317287707;  // std dev = 1.024, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47537812996399137;  // std dev = 1.265, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11581213379371079;  // std dev = 0.089, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.12168351243199961;  // std dev = 0.158, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26857968931633897;  // std dev = 1.919, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else return -0.07820080638273584;  // std dev = 1.947, 209.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03899722188741682;  // std dev = 0.609, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16894349144164858;  // std dev = 1.393, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, E) )
%   | | then return 0.31587650508372594;  // std dev = 0.166, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04404979039565663;  // std dev = 0.148, 173.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005520413521750509;  // std dev = 1.325, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return 0.16803631525168683;  // std dev = 1.389, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12073463250225279;  // std dev = 0.255, 62.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=57 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2911742519803664;  // std dev = 0.628, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09021422803379844;  // std dev = 0.034, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42848982774434685;  // std dev = 0.561, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12218863441567074;  // std dev = 0.165, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18688692028464854;  // std dev = 1.247, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.033531422353094774;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08340721645430449;  // std dev = 0.008, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08031458124362426;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.04434012998491237;  // std dev = 0.391, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.028025480024337895;  // std dev = 0.992, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23615094362838385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02896689700616642;  // std dev = 1.320, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.625', 'seconds']
Parameter learned model CLL:-0.111558 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [0.0, 139, 0], 'true,false,false': [0.229, 17, 1], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.494, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.251, 167, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 16, 0], 'false,false,false,true': [0.083, 0, 3], 'false,false,false,false': [3.011, 33, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.326, 0, 52], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.624, 1, 1], 'true,false,false': [0.111, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 7], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.592, 147, 21], 'false,false,false,false': [2.508, 63, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.8, 5, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.015, 140, 0], 'false,true,false,false': [0.005, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.329, 2, 54], 'true,false': [1.044, 1, 3], 'false,true,true': [1.49e-08, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 21], 'false,false,true,false': [2.148, 190, 8], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.046, 147, 70], 'false,true': [1.024, 1, 11], 'false,false,true': [1.265, 1, 19], 'false,false,false,true': [0.089, 22, 0], 'false,false,false,false': [0.158, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.919, 3, 83], 'true,false': [1.947, 199, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.609, 10, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.393, 2, 61], 'true,false,true': [0.166, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 155, 18], 'false,false,false,true': [1.325, 43, 11], 'false,false,false,false': [1.389, 9, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.255, 5, 57], 'false,true,true,true': [0.628, 0, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 176, 0], 'false,false,true': [0.561, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.165, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.247, 1, 72], 'true,true,false': [0.945, 1, 8], 'true,false,true': [0.008, 158, 0], 'true,false,false,true': [3.73e-09, 13, 0], 'true,false,false,false': [0.391, 12, 1], 'false,true': [0.992, 22, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.32, 27, 7]}]
{'': [0.22450745003883957, 0.24661979448350413], 'false': [0.24826388888888848, 0.24376731301939059], 'false,true': [-1.6148698540002277e-16, -1.2810265668751807e-17], 'true': [0.01219326322206907, 0.006328857154448325], 'true,false': [-7.348238724137727e-17, 0.052469135802469175], 'false,true,true': [-1.6148698540002277e-16, nan]}
{'': [0.01578187219682048, 0.0953969961902054], 'false': [0.06307039436167089, 0.16643043919886122], 'false,false': [6.938893903907228e-18, 0.19431618387151803], 'false,false,false': [0.0022750935337356726, 0.1849621322397364], 'false,true': [nan, 0.06307039436167089], 'false,false,true': [nan, 6.938893903907228e-18]}
{'': [0.011321860943644742, 0.0939498650001898], 'false': [nan, 0.0939498650001898], 'false,false': [6.344131569286608e-17, 0.08040080628438982], 'false,false,false': [0.0768115059107283, 0.08861089906031852], 'true': [0.0024523467741330305, 0.09756718614914335], 'true,false': [0.19441895632940126, 0.004108880412619402], 'true,true': [0.002038059789508696, 0.0], 'false,false,true': [1.2688263138573217e-16, 1.2688263138573217e-16]}
{'': [0.07468612399977319, 0.00036707776153539176], 'false': [1.8587497670234957e-06, 0.0007253266585564959], 'false,false': [nan, 0.0007253266585564959], 'false,false,false': [nan, 0.0007253266585564959], 'false,true': [nan, 1.8587497670234957e-06], 'false,true,false': [1.5505249746139426e-06, 7.288611753509848e-07]}
{'': [0.048209725534976475, 0.06469314151111372], 'false': [1.586032892321652e-17, 0.0623126709765649], 'false,false': [0.06581768324071714, -1.982541115402065e-18], 'false,false,true': [0.0016209344127942483, 0.023303879723452495], 'true': [0.031555969500229396, 0.27226173573239976], 'false,true': [1.586032892321652e-17, nan]}
{'': [0.04276474339656624, 0.09893235760932877], 'false': [0.08730727243902957, 0.09834097042793993], 'false,false': [0.08000110957550413, 0.0007098402272579919], 'true': [nan, 0.042764743396565885], 'true,false': [nan, 0.04276474339656624], 'false,false,false': [0.00035944284972224983, 0.0010020535808402565]}
{'': [0.050175342761215665, 0.021825539255829512], 'true': [0.042836647512053634, 0.018137203979884563], 'false': [nan, 0.021825539255829512], 'false,false': [nan, 0.021825539255829512], 'false,false,false': [nan, 0.021825539255829512]}
{'': [0.03093517261650312, 0.03348184277161801], 'false': [nan, 0.03348184277161819], 'false,false': [0.021802197274464946, 0.05739332040153788], 'false,false,false': [0.03250449442423146, 0.11354230103025727], 'true': [0.030816041749643256, 0.01376277090150603], 'true,false': [0.01376277090150603, nan]}
{'': [0.06522846036970494, 0.031214191151290892], 'false': [0.018722063898967797, 0.0770977848922716], 'false,false': [0.019702075356651194, 0.0009433099458462016], 'false,true': [0.01460885057725928, 6.547710130234343e-06], 'false,true,true': [0.01460885057725928, nan], 'false,false,false': [nan, 0.0009433099458462016]}
{'': [0.023935954933110126, 0.04170556273084172], 'false': [0.029804726260966537, 0.05174121591425406], 'false,false': [0.0, 0.051254802970242444], 'false,false,false': [nan, 0.051254802970242444], 'true': [0.03215851969333467, 0.0009299971627502939], 'true,true': [0.021317174286283727, 0.09915720202476189], 'true,false': [3.6663644636455396e-07, 0.006197719903343824], 'true,false,false': [1.0675221390626506e-18, 0.011748359235004927]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.736
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.7470378239884011;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.13531511718806977;  // std dev = 0.081, 153.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06648226843284567;  // std dev = 0.406, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7255719741844127;  // std dev = 0.160, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else return 0.6359812264346161;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6606498827991895;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1261634432463538;  // std dev = 8.94e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.07544905091217921;  // std dev = 0.203, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.13720454693716103;  // std dev = 0.127, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7629362160856384;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14501236307866203;  // std dev = 2.941, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4913902592251155;  // std dev = 1.679, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.5960908644218524;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7503787760688548;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6461771108061128;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.572456050023451;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09596401862381787;  // std dev = 1.168, 118.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=3 */
%   | | | else return 0.024737057844529065;  // std dev = 1.999, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08715241207142817;  // std dev = 2.001, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.1470605600138663;  // std dev = 2.133, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(E, F), follows(D, G) )
%   | | | then return 0.41623817896250237;  // std dev = 0.995, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return 0.5518697759189578;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18404764104856092;  // std dev = 0.936, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4304319905619219;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.5711224736475294;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7041721380185019;  // std dev = 0.252, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.10643278418215518;  // std dev = 0.054, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.11607095124867726;  // std dev = 0.038, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.161911561214958;  // std dev = 0.082, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.30342994113385047;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.33956134073168764;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.19856195118166972;  // std dev = 0.936, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4308361397251424;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.31695886049563454;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.33901090424427127;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.464556813324394;  // std dev = 0.209, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08155534068606103;  // std dev = 1.954, 190.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=8 */
%   | | else return -0.09322178401607785;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2744841788996399;  // std dev = 0.021, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04158442391828696;  // std dev = 1.393, 116.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=14 */
%   | | | else return -0.03579668381906801;  // std dev = 0.379, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.07055808561164414;  // std dev = 0.111, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.298288856442017;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2666394971406265;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3603903871314252;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5812217997583032;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11577236685888519;  // std dev = 0.022, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, C) )
%   | | | then return 0.21844106951645495;  // std dev = 0.011, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.14104684716375393;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.12328227806690047;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.23167707567223478;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2517518014994467;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.34279296352496813;  // std dev = 0.163, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08732798971024631;  // std dev = 0.073, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.009845017978607163;  // std dev = 1.206, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.13180786722315443;  // std dev = 1.283, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.18777684431855715;  // std dev = 0.009, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.20427536481848058;  // std dev = 1.115, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.20203764775939576;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07346893167030549;  // std dev = 0.083, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   | | else return -0.026797911522578956;  // std dev = 0.162, 74.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1954450747994405;  // std dev = 1.107, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11620160538508337;  // std dev = 0.050, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09840044711238183;  // std dev = 0.513, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.23441861523552257;  // std dev = 0.897, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.12546422383865238;  // std dev = 0.974, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.1641084234252016;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2017854927873483;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.19957455150947018;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.25792224382911727;  // std dev = 0.216, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.060513765363661605;  // std dev = 0.951, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.0760413229652981;  // std dev = 0.007, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.32782371322115844;  // std dev = 0.081, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.13312050628548303;  // std dev = 0.038, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14623754610728212;  // std dev = 0.015, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.219685989165584;  // std dev = 0.039, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06995657416359917;  // std dev = 0.023, 150.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1805309739633603;  // std dev = 0.118, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08882290747244201;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.061654530792912;  // std dev = 0.168, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17401341419856764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0031935912010259506;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.1076339105915648;  // std dev = 0.793, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.470', 'seconds']
Refined model CLL: -0.107621


******************************************
Best model found
******************************************
Results 

CLL : -0.106246 

AUC ROC : 0.994132 

AUC PR : 0.332116 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 9.736 

Total Inference Time : 10.91426396369934 

Total revision time: 29.305477628707887
Best scored revision CLL: -0.107621


Results 

CLL : -0.106246 

AUC ROC : 0.994132 

AUC PR : 0.332116 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 29.321376333236696 

Total Inference Time : 10.91426396369934 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.29
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030266716282445;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.032159832995423916;  // std dev = 0.267, 199.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10095012902970803;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7486990275884147;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15480109224171915;  // std dev = 3.125, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5569568066002523;  // std dev = 1.245, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7315130566282471;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8205710061095368;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5879547322892604;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4663872753467523;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5663872753467523;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04188268425901254;  // std dev = 3.649, 211.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=21 */
%   | | | else return 0.0016137755167714514;  // std dev = 2.858, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4873612766187807;  // std dev = 2.659, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11850991628898538;  // std dev = 0.064, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.12213399370698992;  // std dev = 3.51e-05, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15148828010056528;  // std dev = 0.152, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28049318256403605;  // std dev = 2.052, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.41408925906548943;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3244834776985781;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.635399186905726;  // std dev = 0.198, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08626268156337889;  // std dev = 2.317, 262.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=9 */
%   | | else return -0.10581425491619488;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.040602760338198346;  // std dev = 3.405, 253.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2625950183816378;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45936656741213505;  // std dev = 1.412, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12586289045763707;  // std dev = 0.110, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.12135987214439505;  // std dev = 0.155, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2913994392960825;  // std dev = 1.286, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07620553291529787;  // std dev = 2.084, 231.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.003824764198502084;  // std dev = 0.689, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1873096067829263;  // std dev = 0.988, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22779371776332985;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04952393616070149;  // std dev = 0.149, 214.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0166513550052248;  // std dev = 1.453, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
%   | | | else return 0.1235061793034871;  // std dev = 1.625, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1797938004775201;  // std dev = 0.105, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2563500637350796;  // std dev = 1.090, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09043449055930143;  // std dev = 0.044, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38611826351610357;  // std dev = 1.312, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11128656560378926;  // std dev = 0.161, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18060914908160325;  // std dev = 1.173, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1426665308225855;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08414997194838612;  // std dev = 0.018, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07782207764129144;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.0013775615132875136;  // std dev = 0.465, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.018232974076705457;  // std dev = 1.382, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.3031207183685136;  // std dev = 0.733, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03521017377386853;  // std dev = 1.427, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.927', 'seconds']
Parameter learned model CLL:-0.110952 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 177, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.101, 0, 4], 'false,false,false,false': [3.125, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.245, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.138, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.649, 190, 21], 'false,false,false,false': [2.858, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.659, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 152, 0], 'false,true,false,false': [3.51e-05, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.052, 4, 73], 'true,false': [0.141, 0, 4], 'false,true,true': [0.045, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.198, 0, 23], 'false,false,true,false': [2.317, 253, 9], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.405, 162, 91], 'false,true': [0.111, 0, 13], 'false,false,true': [1.412, 2, 22], 'false,false,false,true': [0.11, 27, 0], 'false,false,false,false': [0.155, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.286, 1, 107], 'true,false': [2.084, 220, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.689, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.988, 1, 80], 'true,false,true': [0.029, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 192, 22], 'false,false,false,true': [1.453, 57, 13], 'false,false,false,false': [1.625, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.105, 1, 77], 'false,true,true,true': [1.09, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 202, 0], 'false,false,true': [1.312, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.173, 1, 94], 'true,true,false': [0.021, 0, 9], 'true,false,true': [0.018, 189, 0], 'true,false,false,true': [5.27e-09, 21, 0], 'true,false,false,false': [0.465, 7, 2], 'false,true': [1.382, 37, 12], 'false,false,true': [0.733, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.427, 20, 8]}]
{'': [0.2236329235636543, 0.22222222222222235], 'true': [0.027500889996442155, 0.009660916121356167], 'false': [0.22837370242214483, 0.2140309155766945], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.8924256101565169e-16, 0.06420927467300835], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023558921059709127, 0.10124547168782741], 'false': [0.0713962797323486, 0.15897095367890574], 'false,false': [0.03121748178980234, 0.1980121764656407], 'false,false,false': [0.0025624097825737158, 0.1878528626450091], 'false,true': [nan, 0.0713962797323486], 'false,false,true': [nan, 0.03121748178980234]}
{'': [0.02204452863892363, 0.09133712219457524], 'false': [nan, 0.0913371221945753], 'false,false': [0.052469135802469195, 0.07626480834443146], 'false,false,false': [0.06309322894585699, 0.11345425365092814], 'false,false,true': [0.08999999999999994, -5.551115123125783e-17], 'true': [0.021661346896374303, 0.01629541701743542], 'true,true': [0.021544803259562824, 0.0], 'true,false': [0.003300674869574194, 0.00475601114268942]}
{'': [0.0539650960811063, 0.0002956563083822889], 'false': [2.4365948117591305e-05, 0.00045512130354987426], 'false,false': [nan, 0.00045512130354987426], 'false,false,false': [nan, 0.00045512130354987426], 'false,true': [nan, 2.436594811759372e-05], 'false,true,false': [2.7211450298340222e-05, 3.8606829538823106e-11]}
{'': [0.053083175649216566, 0.058204148331945836], 'false': [0.00011938389952145963, 0.05468621439005947], 'false,false': [0.057607555571036424, -6.530723674265627e-18], 'false,false,true': [0.0017081773155454489, 0.02048561393300715], 'true': [0.054701747004597664, 0.004959143754960316], 'false,true': [0.00011938389952145963, nan]}
{'': [0.045826405824520716, 0.08514734228275506], 'false': [0.0009549241145777342, 0.09113767461978754], 'false,false': [0.08302138503797192, 0.000577630535116846], 'true': [nan, 0.04582640582452073], 'true,false': [nan, 0.045826405824520716], 'false,false,false': [0.00045155654229966306, 0.0006634958123314352]}
{'': [0.047023435308724736, 0.01694925323820404], 'true': [0.01532334611440554, 0.01879290259000861], 'false': [nan, 0.01694925323820404], 'false,false': [nan, 0.01694925323820404], 'false,false,false': [nan, 0.01694925323820404]}
{'': [0.011813967289229912, 0.032937741947766434], 'false': [nan, 0.0329377419477665], 'false,false': [0.022127021887331347, 0.054274173735511015], 'false,false,false': [0.03015368162258565, 0.10999699832397407], 'true': [0.012055500484370452, 0.0004324027343292694], 'true,false': [0.0004324027343292694, nan]}
{'': [0.010928334020928635, 0.033024131398943286], 'false': [0.019577591725793857, 0.08009159198258473], 'false,false': [0.09557996314370573, 0.0006013967498297869], 'false,true': [0.035986054271656354, 9.493249434457818e-06], 'false,true,true': [0.035986054271656354, nan], 'false,false,false': [nan, 0.0006013967498297869]}
{'': [0.019620966315551467, 0.059706369385167865], 'false': [0.03898032623418821, 0.09296715188414255], 'false,false': [0.26879683080916084, 0.07277670293192674], 'false,false,false': [nan, 0.07277670293192674], 'true': [0.01334693905919326, 0.001256465017450989], 'true,true': [0.014482232966706449, 4.822329431160443e-05], 'true,false': [1.6622060678995278e-06, 0.008422792534671741], 'true,false,false': [1.32169407693471e-18, 0.02398534028334124]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.677
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.8152917922423699;  // std dev = 1.695, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1317500547994782;  // std dev = 0.100, 198.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7323286987366883;  // std dev = 0.226, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.729765129977075;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.11126729574769764;  // std dev = 1.452, 166.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=3 */
%   | | | else return -0.002747673115960192;  // std dev = 2.708, 82.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.09182000309029774;  // std dev = 2.185, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.1533246802113219;  // std dev = 2.238, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5347855285588665;  // std dev = 0.163, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return 0.648453897565136;  // std dev = 0.243, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3861569628180062;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5528236294846729;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5801031985595505;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09500292507840917;  // std dev = 1.466, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | | else return 0.018823197291316745;  // std dev = 2.669, 70.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.027782623343553733;  // std dev = 2.251, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0.05188842354720664;  // std dev = 2.370, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), follows(D, F) )
%   | | | then return 0.38819439664565847;  // std dev = 1.695, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | | else return 0.5661946821855265;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22287314920323692;  // std dev = 0.939, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.43732207772171305;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.7278103694800575;  // std dev = 0.194, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1118854078568085;  // std dev = 0.137, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.11461147633634111;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.16583706998426612;  // std dev = 0.184, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.2831240750481525;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.336328940293805;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.41736489977541785;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.10174147722748184;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3147382001281478;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.33481511832152466;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5098846902486089;  // std dev = 1.014, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08313906649205703;  // std dev = 2.104, 254.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=9 */
%   | | else return -0.09535760075854614;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2743610256558532;  // std dev = 0.007, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.30920315647193036;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.051151095373321215;  // std dev = 1.766, 150.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=12 */
%   | | | else return -0.06046355283461759;  // std dev = 0.873, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27882362796750393;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.06326961303142715;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3712684443865737;  // std dev = 0.242, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5925175359580345;  // std dev = 0.287, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11271811469172684;  // std dev = 0.026, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21499784066809188;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return -0.0772061509282403;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07554823926655242;  // std dev = 0.085, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3515364484361408;  // std dev = 0.471, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10404398277236444;  // std dev = 0.107, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.19765558762513782;  // std dev = 1.073, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10312013920735216;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09837019775240309;  // std dev = 0.773, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04981425501279662;  // std dev = 1.315, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.12440166037744461;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.18546793333429032;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.20260663847429733;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2909658458004334;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.044645265893265375;  // std dev = 0.144, 204.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2510482149800114;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09481893532724416;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1319553689573978;  // std dev = 0.686, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.13368895051207239;  // std dev = 1.162, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), follows(A, E) )
%   | | then return 0.15311959288617677;  // std dev = 0.131, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.22995726337442224;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.04575195376807289;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.043136935120816;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.1197943666011353;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.17026915707255214;  // std dev = 0.981, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.031676830304457955;  // std dev = 0.129, 240.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=32 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3349545020098269;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11560705785641465;  // std dev = 0.037, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17157950167939737;  // std dev = 0.175, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.18140489322814415;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07438260221066993;  // std dev = 0.031, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.10561627183184319;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.18142758782114615;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07866050568523454;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.07284803994119356;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.11212424998570826;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.004122625129983296;  // std dev = 0.296, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.955', 'seconds']
Refined model CLL: -0.106991


******************************************
Best model found
******************************************
Results 

CLL : -0.101999 

AUC ROC : 0.994923 

AUC PR : 0.390452 

Precision : 0.345982 

Recall : 0.99359 

F1 : 0.513245 

Total Learning Time : 8.677 

Total Inference Time : 8.6660897731781 

Total revision time: 27.668879262924193
Best scored revision CLL: -0.106991


Results 

CLL : -0.101999 

AUC ROC : 0.994923 

AUC PR : 0.390452 

Precision : 0.345982 

Recall : 0.99359 

F1 : 0.513245 

Total Learning Time : 27.684777967453 

Total Inference Time : 8.6660897731781 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.153
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.06492798797741087;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281643902400936;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09957769826267973;  // std dev = 0.146, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021061485041404638;  // std dev = 1.206, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15943985247105166;  // std dev = 2.195, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5639392428942599;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8634053505099887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5639392428942599;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07840557674043373;  // std dev = 1.404, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | | else return 0.1297143504030133;  // std dev = 2.117, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49274622286126263;  // std dev = 1.381, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1137582029137543;  // std dev = 0.067, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.12878836928305892;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17068907688092838;  // std dev = 0.178, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3273191964002632;  // std dev = 0.301, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3101280914473934;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6446552210336189;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10704093392054505;  // std dev = 0.839, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | | else return 0.08160507453312559;  // std dev = 0.350, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02016544642335979;  // std dev = 1.258, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24793640214545576;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.515137259439661;  // std dev = 0.920, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13199638921154475;  // std dev = 0.173, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.14956169415149304;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22259028517085153;  // std dev = 0.929, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return -0.08419513939780536;  // std dev = 0.871, 62.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14870714144864233;  // std dev = 1.179, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19950577363001903;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.07183014736095539;  // std dev = 0.085, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05909480578678606;  // std dev = 0.972, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0.0928123798873531;  // std dev = 1.335, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1453579680613513;  // std dev = 0.190, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.260662523579691;  // std dev = 0.299, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08534451065190404;  // std dev = 0.076, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44175965012441043;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14370488276177185;  // std dev = 0.201, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16632861603064567;  // std dev = 0.240, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.17189530719551863;  // std dev = 0.170, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07345502948076624;  // std dev = 0.023, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10948262581189287;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.0872508005950884;  // std dev = 0.397, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.013309847242305614;  // std dev = 0.420, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08894626522039813;  // std dev = 0.947, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.928', 'seconds']
Parameter learned model CLL:-0.111359 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [2.58e-08, 29, 0], 'true,false,false': [0.266, 12, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 12, 0], 'false,false': [0.49, 9, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.146, 32, 1], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.206, 10, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.195, 17, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [1.404, 50, 3], 'false,false,false,false': [2.117, 15, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.381, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.067, 36, 0], 'false,true,false,false': [0.0, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.301, 0, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.067, 0, 3], 'false,false,true,false': [0.839, 66, 1], 'false,false,false': [0.35, 16, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.258, 38, 18], 'false,true': [0.0, 0, 3], 'false,false,true': [0.92, 1, 10], 'false,false,false,true': [0.173, 25, 0], 'false,false,false,false': [0.162, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.929, 1, 20], 'true,false': [0.871, 60, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.179, 9, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.034, 0, 20], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.085, 37, 1], 'false,false,false,true': [0.972, 19, 3], 'false,false,false,false': [1.335, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.19, 1, 18], 'false,true,true,true': [0.299, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.076, 33, 0], 'false,false,true': [0.258, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.201, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.24, 0, 18], 'true,true,false': [0.17, 0, 4], 'true,false,true': [0.023, 23, 0], 'true,false,false,true': [0.052, 10, 0], 'true,false,false,false': [0.397, 2, 1], 'false,true': [0.42, 5, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.947, 7, 6]}]
{'': [0.2286390532544389, 0.19976218787158156], 'true': [0.04158790170132359, 0.023242630385487597], 'false': [0.12244897959183677, 0.24000000000000007], 'false,true': [0.0, -1.1564823173178714e-17], 'true,false': [2.2970131543968756e-17, 0.07100591715976336], 'false,true,true': [0.0, 0.0]}
{'': [-6.217248937900876e-16, 0.11333757856249868], 'false': [0.02141115515871667, 0.17370859775904257], 'false,false': [0.12121162289761445, 0.19269679783117852], 'false,false,false': [nan, 0.19269679783117843], 'false,false,true': [nan, 0.12121162289761445], 'false,true': [nan, 0.02141115515871667]}
{'': [0.004705429454872611, 0.10387008336608601], 'false': [nan, 0.10387008336608616], 'false,false': [-3.700743415417188e-17, 0.0950285252655827], 'false,false,false': [0.03717321256211118, 0.20379874092969744], 'true': [0.0, 0.0], 'true,true': [0.0, nan], 'true,false': [0.0, nan], 'false,false,true': [nan, -3.700743415417188e-17]}
{'': [0.05781613472810084, 0.0012062451341356645], 'false': [0.00013510951225820245, 0.0018597899857201205], 'false,false': [nan, 0.0018597899857201205], 'false,false,false': [nan, 0.0018597899857201205], 'false,true': [nan, 0.00013510951225820497], 'false,true,false': [0.0001240600481176101, 0.0]}
{'': [0.005024079521509874, 0.0608873546034392], 'false': [0.0, 0.059058442690853884], 'false,false': [0.03329034385392649, 0.12242899814374075], 'false,false,true': [0.0015046016870813677, 0.010497281353092757], 'true': [0.005024079521509874, nan], 'false,true': [0.0, nan]}
{'': [0.028280952720833828, 0.0882053930062534], 'false': [-9.25185853854297e-18, 0.09004501968000359], 'false,false': [0.07692963169354022, 0.0014780769042924107], 'true': [nan, 0.028280952720833797], 'true,false': [nan, 0.028280952720833828], 'false,false,false': [0.001193621581490203, 0.00175933164794189]}
{'': [0.03732630494244493, 0.07725817841267392], 'false': [nan, 0.07725817841267386], 'false,false': [nan, 0.07725817841267392], 'false,false,false': [nan, 0.07725817841267392], 'true': [0.041130618553077154, 0.01222493709112544]}
{'': [5.7283436482719055e-05, 0.04308104989802787], 'false': [nan, 0.043081049898027794], 'false,false': [0.0072850040515684, 0.07388351933389956], 'false,false,false': [0.042941319907776714, 0.09901007689424807], 'true': [5.7283436482719055e-05, nan]}
{'': [0.035910845368282, 0.043491427249427575], 'false': [0.016186934899111355, 0.08240452122182947], 'false,false': [0.00832903188021486, 0.0026875465167303324], 'false,true': [0.01788833576402895, 0.0001764011343089817], 'false,true,true': [0.01788833576402895, nan], 'false,false,false': [nan, 0.0026875465167303324]}
{'': [0.019097835784297443, 0.05496854585317362], 'false': [0.0252515296053485, 0.06896771243686922], 'false,false': [nan, 0.06896771243686926], 'false,false,false': [nan, 0.06896771243686922], 'true': [0.003947751178850944, 0.006976727816069825], 'true,false': [2.2077951250701573e-05, 0.01922498684273706], 'true,false,false': [0.0002674895493539983, 0.05264430520593871], 'true,true': [0.0032105034119598646, 0.007240012270340348]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.239
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109542;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7580193346218546;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( tweets(A, H), tweets(G, H) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return -0.08097526743684687;  // std dev = 0.822, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.13823643655326;  // std dev = 0.149, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.011131118507213706;  // std dev = 0.347, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.14197357824080592;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.08578487415644509;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.3075199785528066;  // std dev = 0.489, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.8566650500616341;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5947969362557473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.09643168823913707;  // std dev = 0.844, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return -0.06652404876809205;  // std dev = 0.810, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.09889877908610568;  // std dev = 1.348, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.40613790462892435;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4405754792625449;  // std dev = 0.080, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2800533099564418;  // std dev = 0.753, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4474534419156601;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6671728249335909;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10971041386297287;  // std dev = 0.008, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.11638151910832137;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, I) )
%   | | then return -0.1269595720110818;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.21994044473590765;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.342532440267191;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.34109492977574285;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.6276219361621105;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09123874938936757;  // std dev = 0.636, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.0034959538406566675;  // std dev = 0.608, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.33400369653755657;  // std dev = 0.554, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.25294184226218003;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.0659112450470442;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.06759887602078024;  // std dev = 0.105, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else return -0.09667112785559488;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2690370685530572;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.5115702356228673;  // std dev = 0.152, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.389078029453736;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10732161705796127;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.1444749342328617;  // std dev = 0.304, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.20892626157903918;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.27077410050089457;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then return -0.08411257564795237;  // std dev = 0.001, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return -0.0032839255671762513;  // std dev = 0.515, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.08230062342337507;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3884182124463935;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10749789000013513;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.09464612581848306;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.00835493633641284;  // std dev = 1.125, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17318746690836026;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.206440781601261;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.037199148285220265;  // std dev = 0.166, 73.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1568676753527446;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.3073448909339588;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2866908685020439;  // std dev = 0.348, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.07743667039828032;  // std dev = 0.023, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.09976834189188848;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.05013454650195848;  // std dev = 0.276, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.032935275765070736;  // std dev = 0.562, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.09099311483340254;  // std dev = 0.301, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13134731393669208;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16485512808242275;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23757678168861815;  // std dev = 0.309, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07047313183833588;  // std dev = 0.003, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07683503759843571;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.01826494109693329;  // std dev = 0.455, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( tweets(A, J), tweets(I, J) )
%   | | then return -0.07575027359407582;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.019813887260521686;  // std dev = 0.161, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return -0.008555953988843288;  // std dev = 0.294, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.081', 'seconds']
Refined model CLL: -0.115471


******************************************
Best model found
******************************************
Results 

CLL : -0.105434 

AUC ROC : 0.993401 

AUC PR : 0.37839 

Precision : 0.345404 

Recall : 0.984127 

F1 : 0.51134 

Total Learning Time : 4.239 

Total Inference Time : 3.0107405185699463 

Total revision time: 11.070535938262939
Best scored revision CLL: -0.111359


Results 

CLL : -0.105434 

AUC ROC : 0.993401 

AUC PR : 0.37839 

Precision : 0.345404 

Recall : 0.984127 

F1 : 0.51134 

Total Learning Time : 11.106324712753295 

Total Inference Time : 3.0107405185699463 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.533
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.08302753548872309;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.17814893509951235;  // std dev = 0.466, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6909019836395263;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.027483125399191947;  // std dev = 0.271, 69.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0481604783766896;  // std dev = 1.401, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12454020875432718;  // std dev = 3.025, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5736222731279773;  // std dev = 0.222, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8623405115943938;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5624100883297507;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5624100883297507;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03125547036366213;  // std dev = 2.834, 111.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=13 */
%   | | | else return 0.08045574872105536;  // std dev = 2.635, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5204490472478681;  // std dev = 1.861, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12203858453989087;  // std dev = 0.053, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.13459625467110398;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17216639162016747;  // std dev = 0.173, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29002553828621874;  // std dev = 1.072, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3032413507719956;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6258323698769883;  // std dev = 0.176, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10315988813961463;  // std dev = 1.095, 84.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=2 */
%   | | else return 0.06348509893783535;  // std dev = 0.339, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038960369397248625;  // std dev = 1.931, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24321168071259472;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5414030989554932;  // std dev = 0.612, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12610032442038727;  // std dev = 0.112, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.13934212591143638;  // std dev = 0.145, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2244477489524409;  // std dev = 1.776, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else return -0.08886126699446324;  // std dev = 1.047, 112.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05468608333659786;  // std dev = 1.583, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19660472622505232;  // std dev = 0.032, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05477903411732032;  // std dev = 0.156, 82.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.015627335782334363;  // std dev = 1.241, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0.012392889731265984;  // std dev = 1.677, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16660166479534003;  // std dev = 0.124, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2944172734780759;  // std dev = 0.483, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0960745729231596;  // std dev = 0.115, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.420991727458013;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1233100284570304;  // std dev = 0.188, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1855240980212783;  // std dev = 0.473, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.19101371772774153;  // std dev = 0.267, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08738263859339722;  // std dev = 0.356, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.11204517103717204;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.049141787242607496;  // std dev = 0.459, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03404007147441528;  // std dev = 0.764, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026639900810968602;  // std dev = 1.433, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.382', 'seconds']
Parameter learned model CLL:-0.110124 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false': [0.235, 16, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 18, 0], 'false,false': [0.466, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.986, 1, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 61, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.401, 12, 3], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [3.025, 37, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.222, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [2.834, 98, 13], 'false,false,false,false': [2.635, 29, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.861, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 82, 0], 'false,true,false,false': [0.02, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.173, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.072, 1, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.176, 0, 13], 'false,false,true,false': [1.095, 82, 2], 'false,false,false': [0.339, 24, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.931, 65, 36], 'false,true': [0.0, 0, 6], 'false,false,true': [0.612, 0, 20], 'false,false,false,true': [0.112, 25, 0], 'false,false,false,false': [0.145, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.776, 3, 46], 'true,false': [1.047, 109, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.583, 25, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.032, 0, 34], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 74, 8], 'false,false,false,true': [1.241, 29, 11], 'false,false,false,false': [1.677, 28, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.124, 1, 32], 'false,true,true,true': [0.483, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.115, 81, 0], 'false,false,true': [0.49, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.473, 0, 37], 'true,true,false': [0.267, 0, 7], 'true,false,true': [0.356, 69, 0], 'true,false,false,true': [0.017, 20, 0], 'true,false,false,false': [0.459, 9, 1], 'false,true': [0.764, 14, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.433, 16, 8]}]
{'': [0.22796630859375092, 0.22004437869822432], 'true': [1.2918958832001822e-15, 0.01176303854875286], 'false': [0.2222222222222223, 0.2176000000000001], 'false,true': [-2.9605947323337506e-16, -3.0839528461809902e-18], 'true,false': [6.628197161941232e-17, 0.055363321799308], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.02775510204081572, 0.12871658987863682], 'false': [0.0731729926660379, 0.17260711717027596], 'false,false': [0.13087093155894888, 0.1820949861581959], 'false,false,false': [0.0, 0.17598954626548557], 'false,false,true': [nan, 0.13087093155894888], 'false,true': [nan, 0.0731729926660379]}
{'': [0.004101677860504749, 0.11127843197525562], 'false': [nan, 0.11127843197525603], 'false,false': [1.2688263138573217e-16, 0.10225757015861806], 'false,false,false': [0.0723755091468714, 0.17807175965085337], 'true': [0.0016971266873192082, 0.020940685028634], 'true,false': [0.0, 0.0], 'true,true': [0.0016971266873192082, nan], 'false,false,true': [0.0, 4.4408920985006264e-17]}
{'': [0.05414215068589712, 0.0007506560673559495], 'false': [5.066487233648544e-05, 0.0008304680303565114], 'false,false': [nan, 0.0008304680303565114], 'false,false,false': [nan, 0.0008304680303565114], 'false,true': [nan, 5.066487233648544e-05], 'false,true,false': [3.4632878550533704e-05, 4.15729117268504e-05]}
{'': [0.03481257675769344, 0.08503993198642555], 'false': [0.0, 0.08527797067847427], 'false,false': [0.07435823501395711, 0.11480414825162799], 'false,false,true': [0.0023709946505995425, 0.014276578696237436], 'true': [0.03481257675769344, nan], 'false,true': [0.0, nan]}
{'': [0.03689998988597454, 0.08893113551687107], 'false': [-1.850371707708594e-17, 0.09292755018153462], 'false,false': [0.018752693389240925, 0.0006316034810226526], 'true': [nan, 0.03689998988597445], 'true,false': [nan, 0.03689998988597454], 'false,false,false': [0.0004985169278674783, 0.0006586715143907969]}
{'': [0.04718032567273831, 0.06597618009529876], 'false': [nan, 0.06597618009529878], 'false,false': [nan, 0.06597618009529876], 'false,false,false': [nan, 0.06597618009529876], 'true': [0.06438117645268948, 0.00977939796453939]}
{'': [2.9608801014070027e-05, 0.04116237475464629], 'false': [nan, 0.041162374754646354], 'false,false': [0.024428574587470872, 0.056537937619709745], 'false,false,false': [0.03851676908244822, 0.07601484736548175], 'true': [2.9608801014070027e-05, nan]}
{'': [0.015281928530384372, 0.039010033769999765], 'false': [0.0226757311358152, 0.06609887093594508], 'false,false': [0.015986953071199513, 0.000953628267717859], 'false,true': [0.015583783341442918, 0.0001634482224011889], 'false,true,true': [0.015583783341442918, nan], 'false,false,false': [nan, 0.000953628267717859]}
{'': [0.020704463899398794, 0.056149582378652176], 'false': [0.025383288800389595, 0.08560714837495863], 'false,false': [nan, 0.08560714837495863], 'false,false,false': [nan, 0.08560714837495863], 'true': [0.006695827838541648, 0.003678263890010928], 'true,true': [0.006036101377893782, 0.010157611843358862], 'true,false': [0.001839360762121136, 0.007898226689666695], 'true,false,false': [1.5225215142444793e-05, 0.02102633917684432]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.648
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.131434398233821;  // std dev = 0.102, 96.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.2581489350995123;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6778067455442877;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12659189892256406;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.056086456328103974;  // std dev = 0.234, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.07340810107743616;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.04009467620848201;  // std dev = 1.222, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12332559394145372;  // std dev = 2.872, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5627988271031986;  // std dev = 0.025, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(E, A) )
%   | | then return 0.8650667310072039;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5656302139058326;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.2696521510319986;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11708442802911091;  // std dev = 0.037, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.033452957224848076;  // std dev = 1.934, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02710301827860478;  // std dev = 1.987, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | | | else return 0.1711436036513844;  // std dev = 2.059, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4236053578877584;  // std dev = 0.022, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.520362146789373;  // std dev = 0.256, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.08418025082497664;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5995432894039057;  // std dev = 0.196, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.1108096165055645;  // std dev = 0.081, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.11680159793486243;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.15525258250247229;  // std dev = 0.167, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.32485112854455034;  // std dev = 0.020, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.4034499243212046;  // std dev = 0.260, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.06386103995257346;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.32802457246957345;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.49375516425157984;  // std dev = 0.274, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09923379353335456;  // std dev = 0.887, 110.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=2 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.0373283384726715;  // std dev = 0.733, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.09929576451282841;  // std dev = 1.710, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2563249388425478;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2778486943005381;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08696312769529461;  // std dev = 0.038, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.0442361197098589;  // std dev = 0.188, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2659852370765143;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.16582668546666957;  // std dev = 0.912, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5219317188186103;  // std dev = 0.394, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11438026335388675;  // std dev = 0.018, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.1302439014901818;  // std dev = 0.244, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(C, E) )
%   | | then if ( follows(C, D), follows(D, E) )
%   | | | then return 0.2142069815206885;  // std dev = 0.094, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.05426854109426286;  // std dev = 0.442, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(C, F), recursion_accounttype(F, B) )
%   | | | then return 0.30189134695651915;  // std dev = 0.211, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4301945741638383;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09235690223091941;  // std dev = 0.012, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.22429196329690293;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4233899992510038;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.103086904186854;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.06464340378336629;  // std dev = 0.332, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1789401068330221;  // std dev = 0.008, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.20164989620828416;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2237348272379962;  // std dev = 0.181, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24138767026049726;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07790829548167531;  // std dev = 0.007, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2656410546497815;  // std dev = 0.131, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09346629202285665;  // std dev = 0.021, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.03702816262995609;  // std dev = 0.534, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.07555433113874405;  // std dev = 1.234, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.15652528118039086;  // std dev = 0.012, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.25951314261708425;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.17662302596929944;  // std dev = 0.225, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3238598364642564;  // std dev = 0.234, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07319638880797551;  // std dev = 0.009, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.22005120018863503;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3994090945330391;  // std dev = 0.250, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.08943580849941303;  // std dev = 0.036, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.1648383676773108;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.13317522143015842;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14445687141287508;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3369145847567164;  // std dev = 0.109, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.06758882294516164;  // std dev = 0.007, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.051729485852758925;  // std dev = 0.086, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( tweets(A, J), tweets(H, J) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.17304709343549396;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08050183310309135;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.03420857630839838;  // std dev = 0.096, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | else return 0.07323365338220109;  // std dev = 0.232, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '41.927', 'seconds']
Refined model CLL: -0.09944


******************************************
Best model found
******************************************
Results 

CLL : -0.100951 

AUC ROC : 0.992843 

AUC PR : 0.354496 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 10.648 

Total Inference Time : 21.69855523109436 

Total revision time: 38.14438629722595
Best scored revision CLL: -0.09944


Results 

CLL : -0.100951 

AUC ROC : 0.992843 

AUC PR : 0.354496 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 38.180175071716306 

Total Inference Time : 21.69855523109436 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.87
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8427643197148973;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.17522210583121967;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7057764882202273;  // std dev = 1.003, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.019443058582210532;  // std dev = 0.280, 104.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07482666787070132;  // std dev = 1.519, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7558755823887423;  // std dev = 0.089, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1538938757204372;  // std dev = 3.614, 69.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.510439010344074;  // std dev = 1.728, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7185867645559527;  // std dev = 0.221, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.42318888376553726;  // std dev = 0.946, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.628922425604726;  // std dev = 0.163, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5625356251400722;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008692747554990589;  // std dev = 3.397, 134.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=19 */
%   | | | else return 0.05215076002783825;  // std dev = 3.182, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5227174957553795;  // std dev = 2.338, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12311770170417177;  // std dev = 0.030, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return -0.12939447901005494;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1650530744439204;  // std dev = 0.202, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2998633969687359;  // std dev = 1.490, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30007744137308245;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5025901221425644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5794595950055198;  // std dev = 0.913, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10246993093262814;  // std dev = 1.368, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | else return 0.05737926121316548;  // std dev = 0.338, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03883695523210763;  // std dev = 2.595, 142.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=52 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2522071660784876;  // std dev = 0.136, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5064581345113897;  // std dev = 1.300, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12851288508563333;  // std dev = 0.128, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.12301029826103688;  // std dev = 0.114, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27228388716183205;  // std dev = 1.457, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else return -0.09210771869546062;  // std dev = 1.320, 160.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07931481379094196;  // std dev = 1.886, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.194581980985618;  // std dev = 0.078, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.26566668107884817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05623293235076051;  // std dev = 0.180, 112.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0019892831303027275;  // std dev = 1.498, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.06875005502627989;  // std dev = 1.982, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1895641746855065;  // std dev = 0.068, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28819993097559843;  // std dev = 0.601, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09516358559586961;  // std dev = 0.086, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3869746233216581;  // std dev = 1.037, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11806091300823392;  // std dev = 0.198, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14998869410698842;  // std dev = 1.566, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | else return 0.10035778621015687;  // std dev = 0.861, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.08377491246984085;  // std dev = 0.015, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10171166441907158;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.029276573930332398;  // std dev = 0.560, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0617967019378377;  // std dev = 0.882, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19561592087763968;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027547776744858803;  // std dev = 1.612, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.007', 'seconds']
Parameter learned model CLL:-0.114321 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 64], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true,true': [0.957, 1, 11], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.465, 28, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.003, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.28, 91, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.519, 43, 3], 'false,false,false,true': [0.089, 0, 5], 'false,false,false,false': [3.614, 47, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.728, 3, 42], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 2], 'true,false,false': [0.946, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.163, 0, 3], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.397, 115, 19], 'false,false,false,false': [3.182, 50, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.338, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 104, 0], 'false,true,false,false': [0.003, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.202, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.49, 2, 49], 'true,false': [0.0, 0, 0], 'false,true,true': [0.017, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.913, 1, 19], 'false,false,true,false': [1.368, 151, 3], 'false,false,false': [0.338, 35, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.595, 90, 52], 'false,true': [0.136, 0, 11], 'false,false,true': [1.3, 1, 30], 'false,false,false,true': [0.128, 34, 0], 'false,false,false,false': [0.114, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.457, 2, 70], 'true,false': [1.32, 156, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.886, 28, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.078, 0, 49], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.18, 99, 13], 'false,false,false,true': [1.498, 47, 16], 'false,false,false,false': [1.982, 29, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.068, 0, 49], 'false,true,true,true': [0.601, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.086, 99, 0], 'false,false,true': [1.037, 1, 22], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 57, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.566, 2, 54], 'true,true,false': [0.861, 1, 10], 'true,false,true': [0.015, 96, 0], 'true,false,false,true': [0.026, 12, 0], 'true,false,false,false': [0.56, 11, 2], 'false,true': [0.882, 15, 14], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.612, 28, 12]}]
{'': [0.2205390955669416, 0.21811224489796044], 'true': [0.015147928994082021, 0.014489619377162562], 'false': [0.21957815035154085, 0.2165377751338484], 'false,true': [0.06222222222222188, 2.3790493384824782e-17], 'false,true,true': [0.07638888888888877, 1.4802973661668753e-16], 'true,false': [6.111319401606367e-17, 0.0685871056241427]}
{'': [0.019730405773454862, 0.12495594626064443], 'false': [0.07865434465760615, 0.1593899648438929], 'false,false': [0.05014679828894179, 0.19947797734270786], 'false,false,false': [0.0015831415953179828, 0.1893329142395343], 'false,true': [nan, 0.07865434465760615], 'false,false,true': [nan, 0.05014679828894179]}
{'': [0.07662501400505022, 0.12079251864595662], 'false': [nan, 0.12079251864595777], 'false,false': [0.0032780880564796566, 0.11024105577126077], 'false,false,false': [0.08613176384175077, 0.15821453754863268], 'true': [0.06634083152299695, 0.1343210689266987], 'true,false': [0.02435195811299451, 0.14916246220406626], 'true,true': [0.06634083152299695, nan], 'false,false,true': [0.008814414551867525, -5.551115123125783e-17]}
{'': [0.056344972295574725, 0.0005980527195405659], 'false': [1.2588344381712868e-05, 0.0006794162834392862], 'false,false': [nan, 0.0006794162834392862], 'false,false,false': [nan, 0.0006794162834392862], 'false,true': [nan, 1.2588344381712868e-05], 'false,true,false': [8.544920000647531e-06, 5.707231942764234e-07]}
{'': [0.04352940382068994, 0.07608221277475928], 'false': [0.0034171920791095504, 0.07466894242436241], 'false,false': [0.06285151309008104, 0.1141205568913264], 'false,false,true': [0.04171225960637774, 0.012145390415685724], 'true': [0.04352940382068994, nan], 'false,true': [3.0603480434887584e-05, 0.0]}
{'': [0.04742246641467049, 0.09793872895169393], 'false': [0.001684877103632803, 0.10602167546905326], 'false,false': [0.05452409482974156, 0.0004658537307147305], 'true': [nan, 0.04742246641467048], 'true,false': [nan, 0.04742246641467049], 'false,false,false': [0.00048365765994545784, 0.0004295905114420406]}
{'': [0.04507546357570333, 0.07566649013531936], 'false': [nan, 0.0756664901353193], 'false,false': [nan, 0.07566649013531936], 'false,false,false': [nan, 0.07566649013531936], 'true': [0.02946912593240378, 0.010890343729901194]}
{'': [0.0002221095905180004, 0.04730178237877629], 'false': [nan, 0.04730178237877609], 'false,false': [0.03241615101710697, 0.05929143495901252], 'false,false,false': [0.03561504249989228, 0.09133113088767258], 'true': [0.00012558174755719121, 0.0], 'true,false': [0.0, nan]}
{'': [0.004651201220624264, 0.0420001651138347], 'false': [0.024910519023678523, 0.06618282381515078], 'false,false': [0.04676099367860966, 0.0006896959173197999], 'false,true': [0.016428097553325395, 7.41223293653439e-05], 'false,true,true': [0.016428097553325395, nan], 'false,false,false': [nan, 0.0006896959173197999]}
{'': [0.03025909188191576, 0.0488499127594073], 'false': [0.026799935035434215, 0.0640696508711917], 'false,false': [0.0, 0.0649824433363315], 'false,false,false': [nan, 0.06498244333633156], 'true': [0.04801866366708735, 0.002934185585526985], 'true,true': [0.04380555201989067, 0.06740841544020156], 'true,false': [2.2562195100677787e-06, 0.01388396554275848], 'true,false,false': [5.594761599632172e-05, 0.02412980546247293]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8381489350995122;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.7405018762759829;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return -0.1228034458528686;  // std dev = 0.137, 105.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6984922660454186;  // std dev = 0.156, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.737033944431057;  // std dev = 0.142, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7425946244130863;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05991268690927908;  // std dev = 2.369, 101.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=8 */
%   | | | else return -0.07920794415001844;  // std dev = 0.846, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.060758418279495414;  // std dev = 1.278, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return 0.046479507512574035;  // std dev = 0.778, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14080879982021666;  // std dev = 3.487, 72.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5735648726689561;  // std dev = 0.310, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.3886997700796178;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.6291380374148278;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4448576328832768;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.12110086838540401;  // std dev = 0.022, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return 0.042905924226146426;  // std dev = 2.614, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.028055685576182363;  // std dev = 2.347, 49.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=10 */
%   | | | else return 0.24785061770740965;  // std dev = 2.424, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.4277528521153565;  // std dev = 0.078, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.22100483381673675;  // std dev = 0.998, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.481836234772506;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.44521075837974944;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7176799357159018;  // std dev = 0.256, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11579202418441754;  // std dev = 0.100, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.11185753751378266;  // std dev = 0.044, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.16539999073804418;  // std dev = 0.266, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.32345063160753523;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.3320041384109206;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.40859105870406737;  // std dev = 0.147, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33083245967202984;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5186900949134345;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5868366556053918;  // std dev = 0.026, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10570386952967828;  // std dev = 0.094, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.011880996727654636;  // std dev = 1.743, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.1164523411053347;  // std dev = 2.027, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25724886234326927;  // std dev = 0.007, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.07417266687557814;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.04710135822392653;  // std dev = 1.454, 91.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=8 */
%   | | | else return -0.0659384030757389;  // std dev = 0.528, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.18712158167098047;  // std dev = 0.290, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.33797573509751294;  // std dev = 0.381, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5153884681138637;  // std dev = 0.272, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12676831223157473;  // std dev = 0.078, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.1397686374935858;  // std dev = 0.349, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(C, D), tweets(E, D) )
%   | | | then return 0.11104158404336446;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.21104158404336437;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2103312516209045;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22675528207653786;  // std dev = 0.032, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.25149224607349885;  // std dev = 0.368, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return -0.08773565743544234;  // std dev = 0.075, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2074045406289009;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -9.028336899053386E-4;  // std dev = 1.360, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.04551114017974162;  // std dev = 1.629, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1837628657999716;  // std dev = 0.010, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.08512916065611426;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.2978051053748366;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1895015334850723;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.37077498289458255;  // std dev = 0.621, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.09883174125575095;  // std dev = 0.029, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return -0.03414809051178974;  // std dev = 0.108, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13746768807842288;  // std dev = 0.510, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0678351336666668;  // std dev = 1.352, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15880347752496332;  // std dev = 0.008, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(E, A) )
%   | | then return 0.2501620156710006;  // std dev = 0.324, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14962467266515012;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.180103772473952;  // std dev = 0.084, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.30056674884750484;  // std dev = 0.074, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.0753286894472293;  // std dev = 0.007, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2947385710271673;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3911199158785971;  // std dev = 0.205, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12477542696908468;  // std dev = 0.032, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09471861192838124;  // std dev = 0.206, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return 0.19783439825321839;  // std dev = 0.049, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06420657732108391;  // std dev = 0.055, 125.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13156719430006658;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.02099474406570574;  // std dev = 0.729, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return -0.010825005366409707;  // std dev = 0.565, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.13156719430006658;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.05273508155732157;  // std dev = 1.033, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.07595699045488723;  // std dev = 0.937, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.932', 'seconds']
Refined model CLL: -0.107569


******************************************
Best model found
******************************************
Results 

CLL : -0.107086 

AUC ROC : 0.992238 

AUC PR : 0.357904 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 6.405 

Total Inference Time : 8.832350492477417 

Total revision time: 23.92215147018433
Best scored revision CLL: -0.107569


Results 

CLL : -0.107086 

AUC ROC : 0.992238 

AUC PR : 0.357904 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 23.957940244674685 

Total Inference Time : 8.832350492477417 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.162
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8121719236052591;  // std dev = 1.953, 87.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.10263537862597792;  // std dev = 0.194, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.20297652130640864;  // std dev = 0.475, 58.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7307400485938391;  // std dev = 0.140, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03816400402665946;  // std dev = 0.259, 137.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.052183680427613253;  // std dev = 1.504, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.631835383035999;  // std dev = 0.969, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.12192101530318715;  // std dev = 4.469, 111.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5764452618685147;  // std dev = 0.332, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return -0.26386186044475307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.719945745698946;  // std dev = 0.221, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5000898730217428;  // std dev = 0.983, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6304426984090737;  // std dev = 0.163, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5639203302852412;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03305757270902276;  // std dev = 3.903, 216.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=24 */
%   | | | else return 0.07463756887685123;  // std dev = 3.765, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5241582532797505;  // std dev = 2.665, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11878511191972672;  // std dev = 0.033, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return -0.13007445146773736;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1639658586108795;  // std dev = 0.259, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3264296685762119;  // std dev = 0.550, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30158582274042633;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.50432348682507;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6451999978116528;  // std dev = 0.249, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.10640500237310514;  // std dev = 1.394, 201.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=3 */
%   | | else return 0.03196646027778608;  // std dev = 0.314, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02074846167956569;  // std dev = 2.902, 196.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24950359301498143;  // std dev = 0.139, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5053285446292212;  // std dev = 1.212, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12816855503224728;  // std dev = 0.192, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.12154525140956601;  // std dev = 0.146, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27415861614984666;  // std dev = 1.503, 97.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=95 */
%   | else return -0.09042869907611033;  // std dev = 1.319, 197.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04102762968089133;  // std dev = 2.283, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1729157689139245;  // std dev = 0.995, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, E) )
%   | | then return 0.26684458058083915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041678856312676336;  // std dev = 0.163, 119.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.011202382586037287;  // std dev = 1.715, 102.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=21 */
%   | | | else return 0.040392598173516536;  // std dev = 2.397, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16529752544217682;  // std dev = 0.128, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2758873661840496;  // std dev = 0.665, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09076606152247314;  // std dev = 0.095, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4024682142941336;  // std dev = 0.687, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11552567338920247;  // std dev = 0.255, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1378468975691909;  // std dev = 1.793, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.12348304024324949;  // std dev = 0.805, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08110704017340793;  // std dev = 0.028, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09434920262587075;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.04261248839948516;  // std dev = 0.573, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.009862031700750621;  // std dev = 1.172, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20251210656781748;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06262216952318375;  // std dev = 1.845, 42.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.774', 'seconds']
Parameter learned model CLL:-0.111337 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.953, 4, 83], 'true,false,true': [0.0, 129, 0], 'true,false,false': [0.194, 49, 2], 'false,true,true,true': [0.968, 1, 15], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.475, 38, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.14, 0, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 123, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.504, 32, 3], 'false,false,false,true': [0.969, 1, 7], 'false,false,false,false': [4.469, 79, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.332, 0, 55], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.221, 0, 2], 'true,false,false': [0.983, 1, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.163, 0, 3], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [3.903, 192, 24], 'false,false,false,false': [3.765, 63, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.665, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.033, 142, 0], 'false,true,false,false': [0.004, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.55, 0, 64], 'true,false': [0.0, 0, 0], 'false,true,true': [0.018, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.249, 0, 29], 'false,false,true,false': [1.394, 198, 3], 'false,false,false': [0.314, 47, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.902, 130, 66], 'false,true': [0.139, 0, 16], 'false,false,true': [1.212, 1, 42], 'false,false,false,true': [0.192, 54, 0], 'false,false,false,false': [0.146, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.503, 2, 95], 'true,false': [1.319, 193, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.283, 43, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 67], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 105, 14], 'false,false,false,true': [1.715, 81, 21], 'false,false,false,false': [2.397, 43, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.128, 1, 64], 'false,true,true,true': [0.665, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.095, 172, 0], 'false,false,true': [0.687, 0, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.255, 67, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.793, 3, 68], 'true,true,false': [0.805, 1, 15], 'true,false,true': [0.028, 123, 0], 'true,false,false,true': [0.025, 19, 0], 'true,false,false,false': [0.573, 16, 2], 'false,true': [1.172, 43, 19], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.845, 24, 18]}]
{'': [0.21700402586654396, 0.2269610969387769], 'false': [0.22805212620027385, 0.22592152199762144], 'false,true': [0.047499999999999785, 3.2653618371328135e-17], 'true': [0.043863125908310034, 0.01098765432098749], 'false,true,true': [0.05859374999999978, 0.0], 'true,false': [-3.0982968129074136e-17, 0.03767781622452899]}
{'': [0.00029024106985238684, 0.12724508168822946], 'false': [0.0669287733257182, 0.17072911867580529], 'false,false': [0.0646580424916524, 0.19205736591047487], 'false,false,false': [0.1174688956239558, 0.17995326866492112], 'false,true': [nan, 0.0669287733257182], 'false,false,true': [nan, 0.0646580424916524]}
{'': [0.02877761678105343, 0.11189478650217129], 'false': [nan, 0.11189478650217001], 'false,false': [0.0023336149890951785, 0.10069678536197105], 'false,false,false': [0.07053953870572596, 0.17079963051645702], 'true': [0.014348476333242401, 0.10932454367775586], 'true,false': [0.02434393025501913, 0.12090237608330906], 'true,true': [0.0020001423673622685, 0.0], 'false,false,true': [0.008850450921605413, -1.3664283380001927e-16]}
{'': [0.055491830865793235, 0.0007236706104933064], 'false': [1.820160939331719e-05, 0.0009607169474280118], 'false,false': [nan, 0.0009607169474280118], 'false,false,false': [nan, 0.0009607169474280118], 'false,true': [nan, 1.820160939332002e-05], 'false,true,false': [7.808719102035736e-06, 1.3151240123576713e-06]}
{'': [0.004729891310049819, 0.0780570414399711], 'false': [0.0024292054111815092, 0.07697274457696975], 'false,false': [0.07096783580554197, 0.09886856725809626], 'false,false,true': [0.002131110087261994, 0.009671710470744624], 'true': [0.004729891310049819, nan], 'false,true': [2.2242411187430498e-05, 0.0]}
{'': [0.04296620589662311, 0.08771443514097962], 'false': [0.001209817319845645, 0.09385375869443612], 'false,false': [0.03417644670695304, 0.0005859978917137236], 'true': [nan, 0.04296620589662293], 'true,false': [nan, 0.04296620589662311], 'false,false,false': [0.0006811670578550243, 0.00045320033555969815]}
{'': [0.0429919885191348, 0.07662637321023688], 'false': [nan, 0.07662637321023695], 'false,false': [nan, 0.07662637321023688], 'false,false,false': [nan, 0.07662637321023688], 'true': [0.023295222079746575, 0.008834548362923612]}
{'': [0.014466425729257213, 0.04251380759673984], 'false': [nan, 0.04251380759673985], 'false,false': [0.02646310485785987, 0.05296073080941791], 'false,false,false': [0.028824996145798414, 0.08979134535102504], 'true': [0.014551303202053464, 0.0], 'true,false': [0.0, nan]}
{'': [0.016447064855729273, 0.03541279018099617], 'false': [0.01844274742452528, 0.06411494985755552], 'false,false': [0.014733157593758178, 0.0009713403884746277], 'false,true': [0.015800489051343347, 5.201946167968161e-05], 'false,true,true': [0.015800489051343347, nan], 'false,false,false': [nan, 0.0009713403884746277]}
{'': [0.0275124983283785, 0.04627402739961072], 'false': [0.02214900215651943, 0.07822411883406344], 'false,false': [0.0, 0.0810595680334921], 'false,false,false': [nan, 0.08105956803349203], 'true': [0.04444537210188889, 0.0022418122487467967], 'true,true': [0.045286217134170685, 0.04054574585496718], 'true,false': [6.198302200572774e-06, 0.00956435990980292], 'true,false,false': [3.206289418152936e-05, 0.018251713728336588]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.716
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8406050754503896;  // std dev = 0.131, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.13154178654997278;  // std dev = 0.101, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.23314893509951234;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7244346260545375;  // std dev = 0.151, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7334780358296048;  // std dev = 0.146, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5766162693538114;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.12658002586023082;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.12306067051259231;  // std dev = 2.245, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0.1763386679980248;  // std dev = 3.424, 62.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4749520646095406;  // std dev = 1.914, 48.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=44 */
%   | | | else return 0.5584713228199566;  // std dev = 3.65e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5766656187985351;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5676188629276444;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5903070371782125;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11323428622176156;  // std dev = 1.23e-07, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.020720650156805746;  // std dev = 2.369, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | | | else return 0.14166105840147386;  // std dev = 3.408, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.4354208785385962;  // std dev = 0.242, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.40895365642020776;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15692794142053743;  // std dev = 0.617, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.620129728138725;  // std dev = 0.997, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7354944315259876;  // std dev = 0.224, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10235237282768864;  // std dev = 7.88e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.10235237282768893;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.165313225959712;  // std dev = 0.229, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.31382858281313286;  // std dev = 0.138, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.06005256439439788;  // std dev = 0.957, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.35348819941095605;  // std dev = 0.211, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.03829897809689956;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3250923459272055;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.45913463714176733;  // std dev = 0.473, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.09670365550220011;  // std dev = 1.279, 221.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.08214400761372138;  // std dev = 0.833, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | | else return 0.10672296239141646;  // std dev = 1.862, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2689041748422741;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2204581330460928;  // std dev = 0.972, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.12201902076502509;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.06091781164946291;  // std dev = 0.117, 108.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=10 */
%   | | else return -0.06888006145402598;  // std dev = 0.072, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2589949909936494;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.10105739503918336;  // std dev = 1.283, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4327642551117045;  // std dev = 1.195, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return -0.12504387389578872;  // std dev = 0.039, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.18826933917196434;  // std dev = 0.976, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.10639939465727925;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.10357908336382333;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.22763901649941806;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21506939786975365;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(G, A) )
%   | then return -0.04872996696667928;  // std dev = 0.119, 175.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.2714056690244625;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10746536773598532;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.005942788414530475;  // std dev = 0.226, 120.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.1767264150121576;  // std dev = 0.958, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return -0.06279970707958232;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.17401525779002094;  // std dev = 0.005, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.31436338767754435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2292939714242925;  // std dev = 0.245, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07627251205440753;  // std dev = 0.002, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.22852739241352124;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.004260634458508495;  // std dev = 1.578, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
%   | | | else return 0.06404584140893953;  // std dev = 1.807, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17084212969844567;  // std dev = 0.019, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(E, A) )
%   | | then return 0.28574059645613586;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19108673616843921;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15618578718563217;  // std dev = 0.107, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.22607763259878655;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.0712602619994455;  // std dev = 0.001, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3087668720671472;  // std dev = 0.081, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4391384219451251;  // std dev = 0.301, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12535758867571245;  // std dev = 0.031, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15381045663198098;  // std dev = 0.025, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.06730395978741542;  // std dev = 0.000183, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else return -0.043009588195934235;  // std dev = 0.083, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.16812658619435827;  // std dev = 0.963, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.0910206936330929;  // std dev = 0.011, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.05212491655410417;  // std dev = 0.186, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20495688566027126;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0030906824319227263;  // std dev = 0.878, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0.011213819193661689;  // std dev = 1.310, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.825', 'seconds']
Refined model CLL: -0.103016


******************************************
Best model found
******************************************
Results 

CLL : -0.099673 

AUC ROC : 0.993535 

AUC PR : 0.371637 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 6.716 

Total Inference Time : 10.942549467086792 

Total revision time: 27.84446237373352
Best scored revision CLL: -0.103016


Results 

CLL : -0.099673 

AUC ROC : 0.993535 

AUC PR : 0.371637 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 27.880251148223877 

Total Inference Time : 10.942549467086792 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.503
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.2119950889456654;  // std dev = 0.478, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7301761123838186;  // std dev = 0.195, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03407121519499999;  // std dev = 0.267, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04682537654841198;  // std dev = 1.777, 43.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7471888648717928;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1293675113508271;  // std dev = 4.897, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5597814699593806;  // std dev = 1.071, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7305951600699214;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4874428778356806;  // std dev = 0.857, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.44701593697012065;  // std dev = 0.973, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5618594522693588;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011751621173727612;  // std dev = 4.567, 248.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=34 */
%   | | | else return 0.050966823597521374;  // std dev = 4.112, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5164531944934881;  // std dev = 3.240, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12209079620645329;  // std dev = 0.049, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | | else return -0.12890310698919463;  // std dev = 0.019, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16627761848890393;  // std dev = 0.284, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3136110939180212;  // std dev = 1.002, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.47363725993175154;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30993427157390735;  // std dev = 0.048, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5443904120029822;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6340747873673703;  // std dev = 0.336, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10182618131411461;  // std dev = 1.791, 240.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=5 */
%   | | else return 0.026423888626373238;  // std dev = 0.317, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035032164157128426;  // std dev = 2.974, 238.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2578748451474145;  // std dev = 0.198, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5184127317498393;  // std dev = 1.051, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.125250602088859;  // std dev = 0.226, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.12878818742481743;  // std dev = 0.185, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28047503214562947;  // std dev = 1.461, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.09046332491283589;  // std dev = 1.683, 256.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044518422058883636;  // std dev = 2.205, 80.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16540421232460414;  // std dev = 1.400, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2672760964455814;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05329033433557306;  // std dev = 0.154, 189.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019266785059326108;  // std dev = 2.203, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0.009242829606691405;  // std dev = 2.630, 91.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14597953369036532;  // std dev = 0.180, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25883015458506403;  // std dev = 1.412, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09254370862383215;  // std dev = 0.100, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3676524412192676;  // std dev = 1.243, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11696816486817435;  // std dev = 0.280, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15373389937480678;  // std dev = 1.823, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.16427356162548615;  // std dev = 0.373, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08274409367843533;  // std dev = 0.018, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09832359797293834;  // std dev = 0.011, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.022140612317361058;  // std dev = 0.969, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.022806380705450224;  // std dev = 1.273, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1929738713288477;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024780427354458196;  // std dev = 1.989, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.420', 'seconds']
Parameter learned model CLL:-0.11174 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 134, 0], 'true,false,false': [0.255, 53, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 47, 0], 'false,false': [0.478, 42, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.195, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 155, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.777, 39, 4], 'false,false,false,true': [0.136, 0, 8], 'false,false,false,false': [4.897, 96, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.071, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.857, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.973, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.567, 214, 34], 'false,false,false,false': [4.112, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.24, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.049, 179, 0], 'false,true,false,false': [0.019, 45, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 97, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.002, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.048, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.336, 0, 39], 'false,false,true,false': [1.791, 235, 5], 'false,false,false': [0.317, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.974, 156, 82], 'false,true': [0.198, 0, 22], 'false,false,true': [1.051, 0, 52], 'false,false,false,true': [0.226, 98, 0], 'false,false,false,false': [0.185, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.461, 2, 121], 'true,false': [1.683, 249, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.205, 52, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.4, 2, 83], 'true,false,true': [0.029, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 170, 19], 'false,false,false,true': [2.203, 102, 28], 'false,false,false,false': [2.63, 67, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.18, 3, 78], 'false,true,true,true': [1.412, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 193, 0], 'false,false,true': [1.243, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.28, 86, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.823, 3, 85], 'true,true,false': [0.373, 0, 19], 'true,false,true': [0.018, 158, 0], 'true,false,false,true': [0.011, 29, 0], 'true,false,false,false': [0.969, 25, 4], 'false,true': [1.273, 45, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.989, 48, 21]}]
{'': [0.23073567409760773, 0.22760935585273656], 'true': [0.035665294924556515, 0.020503823908335744], 'false': [0.2266589506172851, 0.2286390532544389], 'false,true': [7.105427357601002e-16, 5.196788625904988e-17], 'true,false': [-5.633967587650048e-17, 0.06525084641428117], 'false,true,true': [0.0, 0.0]}
{'': [0.000448811553344128, 0.12718182401886532], 'false': [0.0712287374201021, 0.16849336509918633], 'false,false': [0.07344431291977623, 0.18668550253530258], 'false,false,false': [0.002304438948585452, 0.17632571273736386], 'false,false,true': [nan, 0.07344431291977623], 'false,true': [nan, 0.0712287374201021]}
{'': [0.025807140252017823, 0.11965416434050846], 'false': [nan, 0.11965416434050695], 'false,false': [0.04586717407294075, 0.10841222460453034], 'false,false,false': [0.08409355539891512, 0.16418661549724434], 'false,false,true': [0.1351614531535274, -2.3684757858670006e-16], 'true': [0.016870272831593126, 0.0763359866015955], 'true,false': [0.016402490416423426, 0.08153306057438955], 'true,true': [0.016870272831593126, nan]}
{'': [0.06481074449062202, 0.000651138714571742], 'false': [1.99258858353971e-05, 0.0008293994798041877], 'false,false': [nan, 0.0008293994798041877], 'false,false,false': [nan, 0.0008293994798041877], 'false,true': [nan, 1.992588583539512e-05], 'false,true,false': [1.364007298705562e-05, 7.844825276320182e-06]}
{'': [0.013039311358562674, 0.08235426711024516], 'false': [0.0026029532188301054, 0.08150450310777134], 'false,false': [0.07702611271319117, 0.10020461130863242], 'false,false,true': [0.0028913990026901014, 0.013372433108539111], 'true': [0.012882325386511465, 0.0], 'false,true': [0.00011549698525268327, 0.0]}
{'': [0.037156610999204205, 0.07841135786351176], 'false': [0.0017750737638890185, 0.08131250396550174], 'false,false': [0.02123834570556582, 0.0005214837926343488], 'true': [nan, 0.03715661099920368], 'true,false': [nan, 0.037156610999204205], 'false,false,false': [0.0005227850849028654, 0.0005121475494229301]}
{'': [0.043268779815728804, 0.0607671043930658], 'false': [nan, 0.06076710439306561], 'false,false': [nan, 0.0607671043930658], 'false,false,false': [nan, 0.0607671043930658], 'true': [0.017358929082692647, 0.01106272580410257]}
{'': [0.022756440681252522, 0.040264102042478496], 'false': [nan, 0.040264102042478316], 'false,false': [0.023696168563304438, 0.05346766789577016], 'false,false,false': [0.03734906425462718, 0.07601612797985403], 'true': [0.023043127288708644, 0.0004329510618348992], 'true,false': [0.0004329510618348992, nan]}
{'': [0.0323908811930363, 0.04063909814556005], 'false': [0.025897368371416624, 0.06412876793674403], 'false,false': [0.037688186112948635, 0.0009141426549811393], 'false,true': [0.05109129626858687, 5.171188829315181e-05], 'false,true,true': [0.05109129626858687, nan], 'false,false,false': [nan, 0.0009141426549811393]}
{'': [0.025917737176478065, 0.03996863575820676], 'false': [0.023167659096035784, 0.05651061396152002], 'false,false': [0.0, 0.057351728558027996], 'false,false,false': [nan, 0.05735172855802801], 'true': [0.032383328103188835, 0.004837777478890615], 'true,true': [0.03777337218507834, 0.007327554209322249], 'true,false': [2.0607617643526533e-06, 0.017640229584065744], 'true,false,false': [3.8118515494756854e-06, 0.032374723664883136]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.97
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7057665923008608;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.734583916265585;  // std dev = 0.196, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.72139159230086;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04624412773141085;  // std dev = 2.907, 139.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=13 */
%   | | | else return -0.09408033368286353;  // std dev = 0.831, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.008492844087163647;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.09120491681245901;  // std dev = 1.190, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14474098310508027;  // std dev = 4.613, 124.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5486138825627943;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.27152944420096065;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.4693814434294239;  // std dev = 1.019, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5639882323337246;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11477058894888421;  // std dev = 0.862, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   | | | else return 0.03641036101860712;  // std dev = 3.130, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.05006157738179785;  // std dev = 2.835, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.1648115398188056;  // std dev = 3.570, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4273763352275396;  // std dev = 0.308, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.54196119703711;  // std dev = 0.287, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.34112222344210563;  // std dev = 0.960, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7035314506666175;  // std dev = 0.364, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.11701566818338396;  // std dev = 0.146, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.11373460636346892;  // std dev = 0.048, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.17018031860357;  // std dev = 0.308, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3250110662258853;  // std dev = 0.006, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.3906072134414681;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.051528917564439336;  // std dev = 0.836, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3158033798094899;  // std dev = 0.006, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5360558089256099;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5258489808929512;  // std dev = 0.959, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.10527371711867733;  // std dev = 0.149, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07094468577628077;  // std dev = 2.289, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
%   | | | else return 0.05162093238364701;  // std dev = 2.799, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2414517781745536;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.03596861969689212;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.25819084191911434;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05057012331109646;  // std dev = 0.153, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | else return -0.06162549877613114;  // std dev = 0.123, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27218607737238976;  // std dev = 0.069, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3228524582235727;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.488150972784768;  // std dev = 1.097, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13460870209938255;  // std dev = 0.035, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then return 0.21948168328447829;  // std dev = 0.013, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.20387681851482134;  // std dev = 0.000976, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.29158265650532134;  // std dev = 0.243, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.35540639438792704;  // std dev = 1.166, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.10986157926303068;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.08946508675746152;  // std dev = 0.008, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.22502676334823674;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.002553901244204165;  // std dev = 1.661, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.04051852930523257;  // std dev = 2.286, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1577107950763538;  // std dev = 0.150, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return 0.3453063400133682;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.2719217721293735;  // std dev = 1.123, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3328356467293796;  // std dev = 0.375, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08208061100972479;  // std dev = 0.007, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31729707671352503;  // std dev = 0.429, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13410815488136035;  // std dev = 0.442, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.016145505169784496;  // std dev = 1.151, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.10148874788814212;  // std dev = 1.539, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.13864134381258425;  // std dev = 0.992, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.16226549212002414;  // std dev = 0.094, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.28466941577433735;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.13658957558830698;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1392135716970171;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.2216315961862165;  // std dev = 0.079, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07595591385905791;  // std dev = 0.007, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3371861568694658;  // std dev = 0.072, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12746094686364579;  // std dev = 0.033, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14800014220586155;  // std dev = 0.113, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else return 0.08216807247707648;  // std dev = 0.235, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.06399671716878068;  // std dev = 0.049, 197.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.15184744479891515;  // std dev = 0.968, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09484924660129519;  // std dev = 0.876, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else return 0.015905986213843273;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18887333595727396;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.020122468286891872;  // std dev = 1.055, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | | else return -0.012376459528049054;  // std dev = 1.253, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.373', 'seconds']
Refined model CLL: -0.106858


******************************************
Best model found
******************************************
Results 

CLL : -0.106352 

AUC ROC : 0.992977 

AUC PR : 0.349987 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 8.97 

Total Inference Time : 13.035701751708984 

Total revision time: 34.25198025512695
Best scored revision CLL: -0.106858


Results 

CLL : -0.106352 

AUC ROC : 0.992977 

AUC PR : 0.349987 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 34.28776902961731 

Total Inference Time : 13.035701751708984 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.03
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.4295775065280837;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04497625274369179;  // std dev = 0.248, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7974484051691343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2728652047687718;  // std dev = 1.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.45200323251554014;  // std dev = 1.094, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.7284608029003288;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6394491469015917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0553664367462845;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013093946016193266;  // std dev = 1.726, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | | else return 0.03620543079580498;  // std dev = 1.392, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5104048343364166;  // std dev = 1.016, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12084464391766979;  // std dev = 0.054, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.12354017802621059;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.22060358565487237;  // std dev = 0.160, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3229974930573544;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.021614562072324078;  // std dev = 0.925, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.41498536283232146;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6257376172187042;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.06103142575057612;  // std dev = 1.152, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | else return -0.09963970391433977;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.004430990330248754;  // std dev = 1.758, 63.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3189983103476719;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5135888801182471;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12827172200460177;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.12511196856116122;  // std dev = 0.137, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3077249652035395;  // std dev = 0.363, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07803921032081951;  // std dev = 1.052, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08639509063306014;  // std dev = 0.237, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20553260160348424;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.040084136464749676;  // std dev = 0.152, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.024503696462185334;  // std dev = 0.682, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.12285388130585427;  // std dev = 0.721, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1884674762967909;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.35176982719405486;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09090356308260451;  // std dev = 0.014, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3861329700575439;  // std dev = 0.228, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1528340095297507;  // std dev = 0.160, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18568887260879666;  // std dev = 0.309, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1517327730090895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08444467542242395;  // std dev = 0.009, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08271701173710491;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0839367025559367;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, G) )
%   | then return 0.08575079281517563;  // std dev = 0.485, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20662909159927634;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018036205638404836;  // std dev = 0.606, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.700', 'seconds']
Parameter learned model CLL:-0.118262 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [4.94e-08, 46, 0], 'true,false,false': [0.0, 4, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.495, 3, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.16e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 38, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.498, 6, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.094, 2, 14], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.707, 1, 1], 'false,false,false,true': [1.726, 31, 5], 'false,false,false,false': [1.392, 12, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.016, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 31, 0], 'false,true,false,false': [0.008, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [0.925, 1, 2], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.016, 0, 5], 'false,false,true,false': [1.152, 36, 3], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.758, 45, 18], 'false,true': [0.0, 0, 1], 'false,false,true': [0.222, 0, 6], 'false,false,false,true': [0.092, 8, 0], 'false,false,false,false': [0.137, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.363, 0, 20], 'true,false': [1.052, 54, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.237, 1, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.034, 0, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 31, 4], 'false,false,false,true': [0.682, 7, 2], 'false,false,false,false': [0.721, 3, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.049, 0, 16], 'false,true,true,true': [0.172, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.014, 40, 0], 'false,false,true': [0.228, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.309, 0, 18], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.009, 32, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.485, 3, 2], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.606, 4, 3]}]
{'': [0.1995379122033181, 0.23437500000000006], 'false': [0.17283950617283952, 0.24489795918367332], 'true': [-2.8047739569477637e-16, 5.773159728050814e-17], 'false,true': [0.0, -7.93016446160826e-18], 'true,false': [5.3097622916855314e-17, 0.0], 'false,true,true': [0.0, nan]}
{'': [1.7763568394002506e-16, 0.10878019629146317], 'false': [0.06151403055255496, 0.18738875053305448], 'false,false': [0.0, 0.20800086780377888], 'false,false,false': [0.0, 0.20397774309226513], 'false,true': [nan, 0.06151403055255496], 'false,false,true': [nan, 0.0]}
{'': [0.0720117482379866, 0.10280194019020006], 'false': [nan, 0.10280194019020003], 'false,false': [0.25, 0.09691959017388742], 'false,false,true': [nan, 0.25], 'false,false,false': [0.08276648475622018, 0.12917144654989957], 'true': [0.07461974117070183, 0.0], 'true,true': [0.07478766392192601, 0.0], 'true,false': [nan, 0.0]}
{'': [0.03967276515169175, 0.002224570986234206], 'false': [7.656527577764582e-05, 0.002324749737039646], 'false,false': [nan, 0.002324749737039646], 'false,false,false': [nan, 0.002324749737039646], 'false,true': [nan, 7.656527577764028e-05], 'false,true,false': [9.508326037697565e-05, 7.15003090115407e-06]}
{'': [0.06350694932008906, 0.0728586090238157], 'false': [0.0, 0.07098552097954616], 'false,false': [0.07766356024755496, 1.3877787807814458e-18], 'false,false,true': [4.950940550991767e-05, 0.034017293406626306], 'true': [-3.172065784643304e-17, 0.2850701601522035], 'false,true': [0.0, nan]}
{'': [0.049033609832952275, 0.08637043642691239], 'false': [0.0, 0.0873433790146092], 'false,false': [0.008239117938535342, 0.00181528524636283], 'true': [nan, 0.04903360983295229], 'true,false': [nan, 0.049033609832952275], 'false,false,false': [0.0010493363360299345, 0.002685330607294641]}
{'': [0.044255733684038935, 0.0280922975336913], 'true': [0.006599179378495168, 0.019083316738809534], 'false': [nan, 0.0280922975336913], 'false,false': [nan, 0.0280922975336913], 'false,false,false': [nan, 0.0280922975336913]}
{'': [7.521399121338165e-05, 0.03847705614856348], 'false': [nan, 0.03847705614856346], 'false,false': [0.02320857408061411, 0.06392897021700118], 'false,false,false': [0.05171530643580647, 0.07419132536332847], 'true': [7.521399121338165e-05, nan]}
{'': [0.0024348641259461304, 0.030611935918800934], 'false': [0.016872615452700666, 0.06259306306785938], 'false,false': [0.010397990636437315, 0.001977700624584394], 'false,true': [0.007404075418033604, 4.948505346294429e-06], 'false,true,true': [0.007404075418033604, nan], 'false,false,false': [nan, 0.001977700624584394]}
{'': [0.018377276777249568, 0.049177041644997116], 'false': [0.046998807777156315, 0.04978906025100758], 'false,false': [0.0, 0.05245587356462737], 'false,false,false': [nan, 0.05245587356462737], 'true': [0.005086269216699074, 2.4263961403262412e-06], 'true,true': [0.0053081546392628985, 0.0], 'true,false': [2.481300394080628e-06, 3.719114233871612e-07], 'true,false,false': [0.0, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.214
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.4295775065280837;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7401919213324014;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7401919213324014;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.0518226407658709;  // std dev = 1.465, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0512481561016578;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7974484051691343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15446725707546216;  // std dev = 1.711, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5592802299419966;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.7484952362626419;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6394491469015917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.7689788609566511;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.12232653073562856;  // std dev = 0.041, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.19211106796353808;  // std dev = 0.112, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, I) )
%   | | then return 0.35611052639289376;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.10468429631512373;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.4165620737379565;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4333903862768389;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4558909097201396;  // std dev = 0.109, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.5996302057167949;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6113248135233883;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.11117298438796847;  // std dev = 0.013, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.11785208347031348;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, I) )
%   | | then return -0.13567822973219895;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.237415063599697;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32161968002054003;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3863626733750639;  // std dev = 0.070, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.43118722158019085;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.27385124608365236;  // std dev = 1.005, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.06331935412081818;  // std dev = 1.053, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | else return -0.1391511528159943;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.0723301969642396;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.27333867492649616;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.060741361070359365;  // std dev = 0.119, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32999754073868603;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43662712075478405;  // std dev = 0.281, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.1034665701591338;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.16100500272957077;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.14065520158916414;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(E, A), follows(C, E) )
%   | | then return 0.1982636823458196;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.24218360185158508;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.36851563399474263;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.08931160724147373;  // std dev = 0.027, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.10941449487513787;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.043029010918859925;  // std dev = 0.460, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.18941681363576302;  // std dev = 0.648, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20193665097054267;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.063485769690745;  // std dev = 0.391, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return -0.08987860631921693;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2925205894860464;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07993440768251157;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.014483093616934737;  // std dev = 0.334, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.025546950204058026;  // std dev = 0.361, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1590242730577011;  // std dev = 0.400, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.058095311528740624;  // std dev = 0.569, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17689750793237713;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.15325594322129005;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2547322693879511;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.07612690742329824;  // std dev = 0.019, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.09021552189073782;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.32405272870372537;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10378381279164042;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.19580630889195152;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.024731363499431253;  // std dev = 1.310, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.2184080135708441;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1343097721098797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.07085195475108486;  // std dev = 0.003, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.08226046981463621;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06139636298586858;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H) )
%   | then return 0.07064142045886185;  // std dev = 0.313, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.12408257810275769;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.10624015011423964;  // std dev = 0.497, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.503', 'seconds']
Refined model CLL: -0.111694


******************************************
Best model found
******************************************
Results 

CLL : -0.113883 

AUC ROC : 0.994798 

AUC PR : 0.376566 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 4.214 

Total Inference Time : 2.8998823165893555 

Total revision time: 10.407536548614502
Best scored revision CLL: -0.111694


Results 

CLL : -0.113883 

AUC ROC : 0.994798 

AUC PR : 0.376566 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 10.443325323104858 

Total Inference Time : 2.8998823165893555 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.454
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.694841951956541;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036814169238827105;  // std dev = 0.264, 75.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7675734635969045;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.15769515610639434;  // std dev = 2.005, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5775595554967481;  // std dev = 0.225, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.7315448672597714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.29618517335726474;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5672938680458799;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5672938680458799;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042373407814242425;  // std dev = 2.256, 82.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=8 */
%   | | | else return -0.03731414511294793;  // std dev = 1.785, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46057607093143466;  // std dev = 1.947, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11620699441994231;  // std dev = 0.019, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.11676269406065574;  // std dev = 0.012, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16344645292194493;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2710413071440056;  // std dev = 1.410, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else return 0.4717369139859715;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3192868024800106;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5527967801040311;  // std dev = 1.022, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.08722194188917684;  // std dev = 1.280, 89.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=3 */
%   | | else return -0.09745075277176139;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03078067454241832;  // std dev = 2.116, 119.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2541996216479232;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5380686118415423;  // std dev = 0.382, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11371306166638243;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.1299374868419732;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26310425815872174;  // std dev = 1.479, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return -0.07743323937898278;  // std dev = 1.130, 85.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09851276385771149;  // std dev = 0.819, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17920504708029547;  // std dev = 0.986, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04817174087391524;  // std dev = 0.143, 86.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.012227075957627757;  // std dev = 0.830, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.08370822064569745;  // std dev = 0.983, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14603843315934534;  // std dev = 0.215, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24634839774979678;  // std dev = 0.925, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08808885540325463;  // std dev = 0.044, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.425732331730717;  // std dev = 0.279, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11641694961331091;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17343648609725032;  // std dev = 1.149, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else return 0.1600873348392553;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08269709531015734;  // std dev = 0.001, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06738067257939302;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07299977008227937;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then return 0.047307580584132355;  // std dev = 0.623, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23162681051426737;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035248665478538846;  // std dev = 0.776, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.015', 'seconds']
Parameter learned model CLL:-0.110071 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [6.32e-08, 63, 0], 'true,false,false': [0.0, 11, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.498, 6, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.985, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 67, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.068, 0, 2], 'false,false,false,false': [2.005, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.225, 0, 32], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.769, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.256, 74, 8], 'false,false,false,false': [1.785, 28, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.947, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 55, 0], 'false,true,false,false': [0.012, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.113, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.41, 2, 33], 'true,false': [0.027, 0, 2], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.022, 1, 9], 'false,false,true,false': [1.28, 86, 3], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.116, 81, 38], 'false,true': [0.0, 0, 3], 'false,false,true': [0.382, 0, 9], 'false,false,false,true': [0.003, 2, 0], 'false,false,false,false': [0.111, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.479, 2, 44], 'true,false': [1.13, 81, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.819, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.986, 1, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 78, 8], 'false,false,false,true': [0.83, 15, 4], 'false,false,false,false': [0.983, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.215, 2, 35], 'false,true,true,true': [0.925, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 79, 0], 'false,false,true': [0.279, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.085, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.149, 1, 39], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.001, 60, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.005, 4, 0], 'false,true': [0.623, 7, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.776, 7, 4]}]
{'': [0.22852259215220097, 0.21811224489795927], 'true': [0.023242630385488926, 6.901386369291513e-17], 'false': [0.1799307958477507, 0.24793388429752045], 'false,true': [0.0, -1.2810265668751807e-17], 'true,false': [6.344131569286608e-17, -1.0092936587501423e-17], 'false,true,true': [0.0, nan]}
{'': [0.02854671280276749, 0.10603983392308228], 'false': [0.06945782581943367, 0.177069524362389], 'false,false': [-1.982541115402065e-18, 0.20459076427070272], 'false,false,false': [0.002313614943331155, 0.19151164164392132], 'false,true': [nan, 0.06945782581943367], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [0.02473047669288686, 0.07999565073145717], 'false': [nan, 0.07999565073145724], 'false,false': [0.0, 0.07261452831906841], 'false,false,false': [0.06207967600863767, 0.09959167610661278], 'true': [0.002229619069649876, 0.19723895249296305], 'true,false': [nan, 0.19723895249296305], 'true,true': [0.0015807650825837571, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.07149285163052378, 0.00041742811796012996], 'false': [6.4780441376671e-06, 0.0009836040236188943], 'false,false': [nan, 0.0009836040236188943], 'false,false,false': [nan, 0.0009836040236188943], 'false,true': [nan, 6.4780441376671e-06], 'false,true,false': [6.47447725934997e-06, 6.268828565303419e-06]}
{'': [0.05581302425849529, 0.062449674805137405], 'false': [0.0, 0.06090583274570466], 'false,false': [0.0642767187601276, -2.3129646346357427e-18], 'false,false,true': [0.10435809596392973, 0.018397035201123547], 'true': [0.056804467975030117, 0.00036126107864170587], 'false,true': [0.0, nan]}
{'': [0.03760803846133476, 0.10182293233221755], 'false': [0.0, 0.11427201737099751], 'false,false': [0.016192700023337378, 0.0009852450693461762], 'true': [nan, 0.037608038461334585], 'true,false': [nan, 0.03760803846133476], 'false,false,false': [5.665086578307207e-06, 0.0011228532942541608]}
{'': [0.05287151978650912, 0.09573539738911273], 'false': [nan, 0.09573539738911273], 'false,false': [nan, 0.09573539738911273], 'false,false,false': [nan, 0.09573539738911273], 'true': [0.04754396590478234, 0.015033855810303547]}
{'': [0.028600520825135606, 0.030834038341685084], 'false': [nan, 0.030834038341684963], 'false,false': [0.020435206245372525, 0.0529510022046467], 'false,false,false': [0.03628959974404551, 0.07426848500922387], 'true': [0.028600520825135606, nan]}
{'': [0.04612172643100222, 0.03260939805072737], 'false': [0.020011416455720944, 0.07617747146213012], 'false,false': [0.011083996664501645, 0.000714615418533604], 'false,true': [0.09504601003586229, 2.4143359874441457e-05], 'false,true,true': [0.09504601003586229, nan], 'false,false,false': [nan, 0.000714615418533604]}
{'': [0.027067702134859026, 0.04459705466895734], 'false': [0.03527179942681227, 0.05313633785565273], 'false,false': [0.0, 0.05475321603704231], 'false,false,false': [nan, 0.05475321603704231], 'true': [0.03145355067760821, 2.0057168272518357e-05], 'true,true': [0.03301774250485486, 0.0], 'true,false': [2.192477643788345e-08, 1.0731595671970018e-05], 'true,false,false': [0.0, 6.604836513629531e-06]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.255
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(A, E) )
%   | | then return 0.6794734122109545;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5766162693538117;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05838765037447505;  // std dev = 1.813, 63.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.781970425023355;  // std dev = 0.088, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.06203052912940154;  // std dev = 2.139, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5699094777436287;  // std dev = 0.057, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.28261302695099116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6159463602843245;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6264304859531168;  // std dev = 0.122, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5586511849684404;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1036640225881015;  // std dev = 0.842, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | | else return -0.02593065704052092;  // std dev = 1.603, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01568366185206361;  // std dev = 1.319, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.20400934273059118;  // std dev = 1.480, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.3833278571495967;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.47253591426707686;  // std dev = 0.121, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.11375273924665412;  // std dev = 0.902, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41996620941380014;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.7391361893940329;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7236420884836466;  // std dev = 0.091, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then return -0.10952980996591358;  // std dev = 0.004, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( tweets(A, J) )
%   | | then return -0.13422159388366262;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.2237598936249532;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3343286267842415;  // std dev = 0.006, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.16671666492854756;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.40613731666116953;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4464953746850255;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.07384238469286619;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.060414055076996806;  // std dev = 1.465, 86.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=5 */
%   | | | else return 0.048147534665028836;  // std dev = 1.613, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.09275175100712008;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.2725348415741657;  // std dev = 0.019, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.03622899657082168;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5897431745244401;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09489608162409517;  // std dev = 0.022, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.0979099063934021;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3064688153631108;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.044697927637198785;  // std dev = 0.760, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5489165364917058;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1338240423908368;  // std dev = 0.045, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21699466800837588;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.26010578545436785;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.27737890988737446;  // std dev = 0.914, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.36600292374092763;  // std dev = 0.226, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08581825788319825;  // std dev = 0.004, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1362764564007744;  // std dev = 0.991, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1106582483931987;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1514179791994791;  // std dev = 0.688, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09936211450202573;  // std dev = 0.687, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E), follows(C, A) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.08024066486190326;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.18024066486190327;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.18796849360181186;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07101739696992107;  // std dev = 1.127, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.24926151384142367;  // std dev = 0.168, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.05297792629630496;  // std dev = 0.137, 96.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=8 */
%   | else if ( tweets(A, G) )
%   | | then return 0.013824504461634496;  // std dev = 0.198, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.05696913707472534;  // std dev = 0.759, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.07996802513742687;  // std dev = 0.622, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1727686289874447;  // std dev = 0.016, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.08418985127712808;  // std dev = 0.333, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.39997541253234437;  // std dev = 0.158, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2138951721229608;  // std dev = 0.000427, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07541636639780525;  // std dev = 0.004, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3533996566381171;  // std dev = 0.000670, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4090176314369824;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10148168788857895;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.20010053920273316;  // std dev = 0.146, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17380492540094783;  // std dev = 0.060, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return -0.15305499360724048;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.0702461920778756;  // std dev = 0.004, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return -0.09226984171062842;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.09259527942126396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0029794095053449383;  // std dev = 0.155, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3198830372004742;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.025414648103532538;  // std dev = 0.618, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.018676719152198994;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.801', 'seconds']
Refined model CLL: -0.104627


******************************************
Best model found
******************************************
Results 

CLL : -0.110584 

AUC ROC : 0.994534 

AUC PR : 0.380059 

Precision : 0.349887 

Recall : 0.99359 

F1 : 0.517529 

Total Learning Time : 5.255 

Total Inference Time : 5.490585803985596 

Total revision time: 16.43503702545166
Best scored revision CLL: -0.104627


Results 

CLL : -0.110584 

AUC ROC : 0.994534 

AUC PR : 0.380059 

Precision : 0.349887 

Recall : 0.99359 

F1 : 0.517529 

Total Learning Time : 16.470825799942016 

Total Inference Time : 5.490585803985596 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.653
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7823913593419369;  // std dev = 2.150, 66.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.324815601766179;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7148986868545492;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04790805776017728;  // std dev = 0.246, 122.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7672797796943206;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0948984268277249;  // std dev = 2.661, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5504919309418025;  // std dev = 1.200, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.7437433812776361;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.38901408508624036;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5751048535208705;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5751048535208705;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03711580429058843;  // std dev = 2.828, 120.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=12 */
%   | | | else return -1.3932255138674675E-4;  // std dev = 2.134, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4896983038835981;  // std dev = 2.079, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11553418052305052;  // std dev = 0.037, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return -0.1199490021421929;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15952963917425683;  // std dev = 0.151, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.319435659856986;  // std dev = 0.877, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return 0.4577593515934055;  // std dev = 0.000506, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20708087055980556;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6575685255168684;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08443148878411617;  // std dev = 1.749, 141.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=5 */
%   | | else return -0.09797360398220357;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025754546220900152;  // std dev = 2.596, 168.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2750451573545427;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47965037098929825;  // std dev = 0.956, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11469974190173896;  // std dev = 0.131, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.10310461462110017;  // std dev = 0.120, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2540480770928223;  // std dev = 1.815, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else return -0.07628016850262266;  // std dev = 1.587, 161.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005641046350968277;  // std dev = 0.516, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20880820222288263;  // std dev = 0.055, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.22287732765494983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05734607677179852;  // std dev = 0.159, 118.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.00442505307721095;  // std dev = 1.063, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
%   | | | else return 0.08900073542127455;  // std dev = 1.377, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15934047176571176;  // std dev = 0.166, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22962406125380025;  // std dev = 1.181, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0875532874591453;  // std dev = 0.037, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4468047153252922;  // std dev = 0.450, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12244565812946297;  // std dev = 0.144, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1606527391315961;  // std dev = 1.442, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.15821901900989838;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08189519727327071;  // std dev = 0.010, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07534374097182563;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.0720497044954576;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, G) )
%   | then return 0.0226057917531934;  // std dev = 0.808, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21750281504980296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -6.991995115887357E-4;  // std dev = 1.141, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.986', 'seconds']
Parameter learned model CLL:-0.108233 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.15, 5, 61], 'true,false,true': [8.69e-08, 103, 0], 'true,false,false': [0.0, 16, 0], 'false,true,true,true': [0.935, 1, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.499, 8, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 111, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 20, 0], 'false,false,false,true': [0.057, 0, 3], 'false,false,false,false': [2.661, 31, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.2, 2, 45], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.756, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.828, 108, 12], 'false,false,false,false': [2.134, 34, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.079, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.037, 106, 0], 'false,true,false,false': [0.008, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.151, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.877, 1, 47], 'true,false': [0.000506, 0, 2], 'false,true,true': [0.943, 1, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.106, 0, 13], 'false,false,true,false': [1.749, 136, 5], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.596, 114, 54], 'false,true': [0.0, 0, 7], 'false,false,true': [0.956, 1, 14], 'false,false,false,true': [0.131, 22, 0], 'false,false,false,false': [0.12, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.815, 3, 64], 'true,false': [1.587, 154, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.516, 10, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.055, 0, 49], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 107, 11], 'false,false,false,true': [1.063, 29, 7], 'false,false,false,false': [1.377, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.166, 2, 49], 'false,true,true,true': [1.181, 1, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 117, 0], 'false,false,true': [0.45, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.442, 2, 56], 'true,true,false': [0.01, 0, 5], 'true,false,true': [0.01, 116, 0], 'true,false,false,true': [3.73e-09, 12, 0], 'true,false,false,false': [0.011, 9, 0], 'false,true': [0.808, 16, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.141, 17, 6]}]
{'': [0.22100803506208935, 0.24999999999999956], 'false': [0.24852071005917156, 0.24888888888888888], 'false,true': [0.10937499999999978, -2.7755575615628915e-18], 'true': [0.07001836547291022, 1.8659210497901792e-17], 'false,true,true': [0.10937499999999978, nan], 'true,false': [7.329627735389383e-17, -6.938893903907228e-18]}
{'': [0.019223375624758107, 0.0919737708863716], 'false': [0.06066575187746064, 0.14340032039105335], 'false,false': [0.0, 0.18549861842958054], 'false,false,false': [0.001084118446722811, 0.1685313038018898], 'false,true': [nan, 0.06066575187746064], 'false,false,true': [nan, 0.0]}
{'': [0.041327447102018, 0.09142349617037232], 'false': [nan, 0.09142349617037233], 'false,false': [0.0, 0.07868130409190353], 'false,false,false': [0.06663138191842143, 0.1138056254609926], 'true': [0.030744506729143233, 0.14303822685053244], 'true,false': [nan, 0.14303822685053244], 'true,true': [0.0306206009398366, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.0554224369215977, 0.0003774144036124405], 'false': [1.3846997905253057e-05, 0.0011432508800345242], 'false,false': [nan, 0.0011432508800345242], 'false,false,false': [nan, 0.0011432508800345242], 'false,true': [nan, 1.3846997905253057e-05], 'false,true,false': [1.2818630468879804e-05, 2.436215587708901e-06]}
{'': [0.016130585398463654, 0.0634408389821253], 'false': [0.0987654320987654, 0.0586829359559315], 'false,true': [0.0987654320987654, nan], 'false,false': [0.06248769685040047, -5.046468293750712e-18], 'false,false,true': [0.0008702319958380564, 0.021692556099626847], 'true': [0.01603735004208806, 1.2800371052001935e-07]}
{'': [0.04010762933356128, 0.07392410868718804], 'false': [0.0, 0.07592525229372087], 'false,false': [0.06097210713422365, 0.0006629651725902619], 'true': [nan, 0.04010762933356106], 'true,false': [nan, 0.04010762933356128], 'false,false,false': [0.00078094472675036, 0.000511110281736651]}
{'': [0.04813483882005952, 0.019020305314725615], 'true': [0.04914368803791701, 0.015649997337105735], 'false': [nan, 0.019020305314725615], 'false,false': [nan, 0.019020305314725615], 'false,false,false': [nan, 0.019020305314725615]}
{'': [6.330707438912065e-05, 0.03708858074852166], 'false': [nan, 0.03708858074852148], 'false,false': [0.02531832278188582, 0.057960771456476566], 'false,false,false': [0.031384870168113733, 0.10529365539549317], 'true': [6.064024969063734e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.02756171504803584, 0.03493254387914781], 'false': [0.021151819320052664, 0.08008689414906249], 'false,false': [0.018438977869704297, 0.0009878515547599258], 'false,true': [0.08723798249353228, 1.1962750575772689e-05], 'false,true,true': [0.08723798249353228, nan], 'false,false,false': [nan, 0.0009878515547599258]}
{'': [0.022955396688993258, 0.04262515044501843], 'false': [0.028412221660736318, 0.056147014866903905], 'false,false': [0.0, 0.05660435112805742], 'false,false,false': [nan, 0.05660435112805742], 'true': [0.03302239200559212, 1.0159870580726582e-05], 'true,true': [0.03586698270657135, 1.968695946210075e-05], 'true,false': [8.360726755468426e-07, 7.970558381467388e-06], 'true,false,false': [1.1564823173178713e-18, 1.2397583095244567e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.999
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.821785298735876;  // std dev = 0.187, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | else return 0.5854216623722396;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return -0.14185106490048774;  // std dev = 3.73e-09, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14386322081379804;  // std dev = 0.452, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7329634184572688;  // std dev = 0.109, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.055796632141041476;  // std dev = 2.456, 108.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=9 */
%   | | | else return 0.08760497871745299;  // std dev = 0.738, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.08469224448295125;  // std dev = 0.187, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.8009922029618295;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1046043189247936;  // std dev = 2.531, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5233421283319717;  // std dev = 1.399, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.7376928370767534;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7857121976117585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.3876929387028417;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5681475623648554;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10958075649167268;  // std dev = 0.853, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | | else return -0.029013701449786784;  // std dev = 1.974, 57.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12638979293497982;  // std dev = 1.692, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.08279029140871581;  // std dev = 1.808, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.451371403771604;  // std dev = 0.280, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.13376731254688434;  // std dev = 0.974, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.42727134783190446;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6397468634162083;  // std dev = 0.940, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7597792607455822;  // std dev = 0.145, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10972453296580176;  // std dev = 0.047, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.10997141846176502;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.16986129372254122;  // std dev = 0.085, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.298285717171912;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.4065473395487258;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.07644733691779008;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5882391349674619;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3386239196601644;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32078477675262485;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.563141217066603;  // std dev = 0.156, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08129698424305294;  // std dev = 1.595, 127.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=5 */
%   | | else return -0.09223875722989326;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.20102094072649448;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return -0.0033748368549582444;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3019124764215843;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.03368372619801581;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=7 */
%   | | | else return -0.11162178780390303;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07899536865821213;  // std dev = 0.071, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.25425740567176564;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.47126266994847577;  // std dev = 0.122, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.11570999573876739;  // std dev = 0.022, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2102808438311555;  // std dev = 1.010, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.3657095166623255;  // std dev = 0.916, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.33856291411265643;  // std dev = 0.127, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08795526762930096;  // std dev = 0.005, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.29968556722035333;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.27621920666119526;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11128073687332099;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06278736337081654;  // std dev = 0.588, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1013124391359923;  // std dev = 1.013, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1912982846933288;  // std dev = 0.008, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.15857790223987248;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.24749906104837727;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2753889888471641;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3979960166726896;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08207038446989509;  // std dev = 0.005, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2408523200590794;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01890086590040797;  // std dev = 1.072, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.04903816104004917;  // std dev = 1.115, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1327999134257378;  // std dev = 0.984, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.1693139786396404;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.02468641178382463;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.23412924596705195;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.16168485777589534;  // std dev = 0.231, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07534457827496162;  // std dev = 0.005, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2219634428439037;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4820122340804587;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12733066129525206;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1254669996311916;  // std dev = 0.993, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.2489980499816059;  // std dev = 0.144, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.12088930994418423;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07088741103988666;  // std dev = 0.004, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.018406978192215494;  // std dev = 0.117, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.010402401954551306;  // std dev = 0.173, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18235325659216806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.043497398546520655;  // std dev = 0.336, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.14098405659384425;  // std dev = 0.689, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.581', 'seconds']
Refined model CLL: -0.103549


******************************************
Best model found
******************************************
Results 

CLL : -0.101217 

AUC ROC : 0.995011 

AUC PR : 0.383433 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 6.999 

Total Inference Time : 7.587535619735718 

Total revision time: 21.65696244430542
Best scored revision CLL: -0.103549


Results 

CLL : -0.101217 

AUC ROC : 0.995011 

AUC PR : 0.383433 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 21.692751218795777 

Total Inference Time : 7.587535619735718 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.092
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.24945328292559932;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7116160179058009;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05255943581128383;  // std dev = 0.240, 185.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7546465017206909;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11277793988968167;  // std dev = 3.043, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5302336299036751;  // std dev = 1.752, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | else return 0.7368586259337544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3805770837383006;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.565994993900941;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.565994993900941;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.033428323952927;  // std dev = 3.189, 152.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=16 */
%   | | | else return 0.012398931907247763;  // std dev = 2.595, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5037329491271434;  // std dev = 2.077, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11592582394727248;  // std dev = 0.036, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | | else return -0.12110456678737702;  // std dev = 2.79e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14629363149433047;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30509710036962784;  // std dev = 1.237, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | else return 0.1344322167444407;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24246140996825957;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.638444860868823;  // std dev = 0.167, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08061113620536198;  // std dev = 2.185, 195.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=8 */
%   | | else return -0.09826525901697414;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027602240724518046;  // std dev = 3.008, 216.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25986695186794856;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46797451984433236;  // std dev = 1.268, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1261030925202717;  // std dev = 0.147, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11666188926574447;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27386157680898815;  // std dev = 1.569, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return -0.07403775842407875;  // std dev = 1.974, 213.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017158673968392577;  // std dev = 0.635, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20178559097327636;  // std dev = 0.063, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.20617724311660823;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04928287144046437;  // std dev = 0.164, 147.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006927463701230786;  // std dev = 1.175, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | | else return 0.10324098859435787;  // std dev = 1.653, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1624942612251081;  // std dev = 0.173, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23899842130492174;  // std dev = 1.037, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08939588563196377;  // std dev = 0.048, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4021773641467419;  // std dev = 0.983, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12132951338579201;  // std dev = 0.165, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17662037591005492;  // std dev = 1.260, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | else return 0.1477010126349651;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.0831374477344638;  // std dev = 0.016, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07510857110457146;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.0740800410400039;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then return 0.04376398388554275;  // std dev = 0.868, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.29265707793062656;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04684177256222606;  // std dev = 1.365, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.011', 'seconds']
Parameter learned model CLL:-0.10856 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [0.0, 137, 0], 'true,false,false': [2.63e-09, 21, 0], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.488, 14, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.993, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.24, 169, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 16, 0], 'false,false,false,true': [0.086, 0, 3], 'false,false,false,false': [3.043, 38, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.752, 3, 57], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.749, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.189, 136, 16], 'false,false,false,false': [2.595, 46, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.077, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.036, 133, 0], 'false,true,false,false': [2.79e-08, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.141, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.237, 2, 59], 'true,false': [0.804, 1, 2], 'false,true,true': [0.966, 1, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.167, 0, 17], 'false,false,true,false': [2.185, 187, 8], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.008, 145, 71], 'false,true': [0.0, 0, 11], 'false,false,true': [1.268, 2, 18], 'false,false,false,true': [0.147, 31, 0], 'false,false,false,false': [0.174, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.569, 2, 83], 'true,false': [1.974, 203, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.635, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.063, 0, 65], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 131, 16], 'false,false,false,true': [1.175, 38, 9], 'false,false,false,false': [1.653, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.173, 2, 61], 'false,true,true,true': [1.037, 1, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.048, 167, 0], 'false,false,true': [0.983, 1, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.165, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.26, 1, 74], 'true,true,false': [0.011, 0, 8], 'true,false,true': [0.016, 146, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.026, 14, 0], 'false,true': [0.868, 15, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.365, 17, 8]}]
{'': [0.2235770292468972, 0.23437499999999947], 'false': [0.23040000000000005, 0.23818525519848777], 'false,true': [-2.9605947323337506e-16, -6.938893903907228e-18], 'true': [0.03404844290657402, -1.321024864743857e-16], 'true,false': [-6.807206866314829e-17, 5.28677630773884e-18], 'false,true,true': [-2.9605947323337506e-16, nan]}
{'': [0.014702606371129795, 0.08956812050245821], 'false': [0.0575849972179764, 0.15781012484125853], 'false,false': [3.469446951953614e-18, 0.1863842126932269], 'false,false,false': [0.002474292451319915, 0.1747230340357425], 'false,true': [nan, 0.0575849972179764], 'false,false,true': [nan, 3.469446951953614e-18]}
{'': [0.0578461992924614, 0.09733803057663472], 'false': [nan, 0.09733803057663466], 'false,false': [0.0, 0.08207500551589551], 'false,false,false': [0.06691563504787534, 0.12242786312781778], 'true': [0.051003825961074695, 0.14021135479990898], 'true,false': [nan, 0.14021135479990898], 'true,true': [0.05115398990767594, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.0422934193109138, 0.000231972380965468], 'false': [1.1936223685762223e-05, 0.0005647160468064001], 'false,false': [nan, 0.0005647160468064001], 'false,false,false': [nan, 0.0005647160468064001], 'false,true': [nan, 1.1936223685759548e-05], 'false,true,false': [9.566280118573817e-06, 2.3550185370836655e-17]}
{'': [0.03532676473538554, 0.06213130174049183], 'false': [0.062222222222222213, 0.05757695571040038], 'false,true': [0.062222222222222213, nan], 'false,false': [0.06077988867843836, 0.0], 'false,false,true': [0.0016377122316249776, 0.02447499613240125], 'true': [0.02509242214510907, 0.21566386637302623]}
{'': [0.0418834199550078, 0.07966427383320208], 'false': [-4.0371746350005693e-17, 0.08352781046546089], 'false,false': [0.08040462957091928, 0.0008437855093632384], 'true': [nan, 0.04188341995500778], 'true,false': [nan, 0.0418834199550078], 'false,false,false': [0.0006944936763543958, 0.0009445512442462639]}
{'': [0.04601404886711098, 0.019190341621252858], 'true': [0.028964583883826427, 0.01829472015524134], 'false': [nan, 0.019190341621252858], 'false,false': [nan, 0.019190341621252858], 'false,false,false': [nan, 0.019190341621252858]}
{'': [6.090008362646275e-05, 0.039102966662643554], 'false': [nan, 0.03910296666264344], 'false,false': [0.026789917854255035, 0.05988063483380354], 'false,false,false': [0.029376607768843155, 0.10930538446014218], 'true': [6.154478664831286e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.030021847960536995, 0.03208379540626933], 'false': [0.01782947967320209, 0.08055729275284457], 'false,false': [0.06043279584854422, 0.0008258243162159089], 'false,true': [0.04303561440506696, 1.4072248296399114e-05], 'false,true,true': [0.04303561440506696, nan], 'false,false,false': [nan, 0.0008258243162159089]}
{'': [0.020491731460566168, 0.0535404531972436], 'false': [0.03141933837458619, 0.07388455662238105], 'false,false': [0.0, 0.07451589410445476], 'false,false,false': [nan, 0.07451589410445476], 'true': [0.019187582565829368, 1.5309530343538947e-05], 'true,true': [0.0211520353581921, 1.511814444376397e-05], 'true,false': [1.6743434696730094e-06, 2.5166777016533532e-05], 'true,false,false': [-1.982541115402065e-18, 4.980461698619578e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.933
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6480448407823828;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return 0.0012930690825104785;  // std dev = 0.302, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.755427021213339;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09869784691048289;  // std dev = 2.983, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5411244387147769;  // std dev = 0.970, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.430641812038915;  // std dev = 0.949, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7192123561903182;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.595118625378443;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5875561685068027;  // std dev = 0.139, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11535788495929049;  // std dev = 0.074, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1558539006119254;  // std dev = 1.783, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0.03753700963279963;  // std dev = 2.350, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3984882369235538;  // std dev = 0.988, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.32587537831209423;  // std dev = 0.994, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4735350091107144;  // std dev = 0.187, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4372046680046933;  // std dev = 0.157, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.45077228234893263;  // std dev = 0.126, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6653658774158563;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7635637783775887;  // std dev = 0.159, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10429157034976226;  // std dev = 0.005, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return -0.16270397608637216;  // std dev = 0.021, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3063778012897897;  // std dev = 0.991, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.13448226064954066;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3360000681556836;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3923796070450871;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.08350064687780526;  // std dev = 0.915, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3242152484953583;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3481775829203319;  // std dev = 1.114, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07494594029849155;  // std dev = 1.987, 216.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=8 */
%   | | else return -0.09220994400237394;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.20700452852216172;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.28748991609457253;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2740011151749999;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.05408554984586361;  // std dev = 0.146, 137.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=16 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.25983431130044077;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13313352784641963;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.10338741861821862;  // std dev = 0.784, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5272597062197744;  // std dev = 0.441, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1125428672112669;  // std dev = 0.027, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(C, B), follows(A, E) )
%   | | | then return 0.22474190633976598;  // std dev = 0.020, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.0663639768826695;  // std dev = 1.829, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else return -0.0935076535082055;  // std dev = 0.114, 111.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=2 */
%   | else return 0.027280321899812277;  // std dev = 0.166, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.3053479699456662;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2986983621216103;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1153223489546824;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08470002156932;  // std dev = 0.688, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.043214114653394496;  // std dev = 1.389, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18744438213450024;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else return 0.1985009123143331;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.37880754647381404;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.22546340429687173;  // std dev = 1.004, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.08138780019457896;  // std dev = 0.031, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23242152295147067;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12706670425340463;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07206159153200045;  // std dev = 0.672, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13163219536433118;  // std dev = 1.231, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16115367128388192;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.11151169938426866;  // std dev = 0.962, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.20553552997944013;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.24762788387099485;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.17398931311426666;  // std dev = 0.175, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return -0.07248457951261239;  // std dev = 0.006, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2002674342716917;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.45445387153071626;  // std dev = 0.203, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11864037576817285;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15164353074634682;  // std dev = 0.120, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | else return 0.16541311628859579;  // std dev = 0.000682, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06816073453184662;  // std dev = 0.006, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15941247748836307;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08328550672678656;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.05209449196772874;  // std dev = 0.184, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.248624279933216;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.08192974872960121;  // std dev = 0.866, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.031753480021309885;  // std dev = 1.003, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.656', 'seconds']
Refined model CLL: -0.098431


******************************************
Best model found
******************************************
Results 

CLL : -0.096878 

AUC ROC : 0.995271 

AUC PR : 0.3901 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 9.933 

Total Inference Time : 14.202258825302124 

Total revision time: 32.70667734146118
Best scored revision CLL: -0.098431


Results 

CLL : -0.096878 

AUC ROC : 0.995271 

AUC PR : 0.3901 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 32.74246611595154 

Total Inference Time : 14.202258825302124 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.4
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048080434237672;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029044533012477204;  // std dev = 0.271, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08349284408716359;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7683919882780506;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16874397635223629;  // std dev = 3.129, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.545111147023233;  // std dev = 1.587, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7326831677563017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8191121673328743;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6077658773219916;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681792060099329;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45706809489882183;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030865541551540098;  // std dev = 3.676, 188.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=21 */
%   | | | else return -0.008304562957164772;  // std dev = 2.878, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5200935293593403;  // std dev = 1.913, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12000521158146243;  // std dev = 0.062, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12148169627234566;  // std dev = 0.003, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16200841505900984;  // std dev = 0.152, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3059285937320051;  // std dev = 1.405, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4072182032831283;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.26358317269786274;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6328543097981073;  // std dev = 0.156, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08627740181329398;  // std dev = 2.314, 260.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=9 */
%   | | else return -0.10863250809245512;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02940667382047437;  // std dev = 3.305, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2753566466657029;  // std dev = 0.094, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5336433183706335;  // std dev = 0.756, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11931658283739768;  // std dev = 0.099, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.1180979281960169;  // std dev = 0.155, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2739657107732774;  // std dev = 1.730, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07560383615225559;  // std dev = 2.015, 230.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011514834146885932;  // std dev = 0.729, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18702214053058894;  // std dev = 1.000, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22250849401867656;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04465737141252469;  // std dev = 0.146, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010996075036388686;  // std dev = 1.647, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.04868308306004204;  // std dev = 1.667, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13948575504766367;  // std dev = 0.218, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2578396485470869;  // std dev = 1.084, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09112244283762092;  // std dev = 0.040, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38130100635663494;  // std dev = 1.290, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11527200929129526;  // std dev = 0.159, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1536084367344229;  // std dev = 2.012, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.15437411337625723;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08433161480607027;  // std dev = 0.009, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08150139788214177;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.03433171340855739;  // std dev = 0.471, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.010323629086316054;  // std dev = 1.138, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20522033804163464;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04061883122235908;  // std dev = 1.371, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.878', 'seconds']
Parameter learned model CLL:-0.11115 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.258, 26, 2], 'false,true,true,true': [1.309, 2, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 171, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.073, 0, 4], 'false,false,false,false': [3.129, 34, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.587, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.102, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.676, 167, 21], 'false,false,false,false': [2.878, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.913, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 172, 0], 'false,true,false,false': [0.003, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.152, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.405, 2, 73], 'true,false': [0.117, 0, 4], 'false,true,true': [0.961, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.156, 0, 23], 'false,false,true,false': [2.314, 251, 9], 'false,false,false': [2.28e-09, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.305, 185, 91], 'false,true': [0.094, 0, 13], 'false,false,true': [0.756, 0, 22], 'false,false,false,true': [0.099, 31, 0], 'false,false,false,false': [0.155, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.73, 2, 107], 'true,false': [2.015, 219, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.729, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.0, 1, 80], 'true,false,true': [0.031, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 182, 22], 'false,false,false,true': [1.647, 43, 13], 'false,false,false,false': [1.667, 23, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.218, 4, 77], 'false,true,true,true': [1.084, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 219, 0], 'false,false,true': [1.29, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.159, 53, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.012, 4, 94], 'true,true,false': [0.003, 0, 9], 'true,false,true': [0.009, 174, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.471, 13, 2], 'false,true': [1.138, 27, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.371, 19, 8]}]
{'': [0.2236329235636543, 0.22574576726686382], 'false': [0.2253061224489791, 0.22633136094674564], 'false,true': [0.1224489795918365, 5.28677630773884e-18], 'true': [0.03598567560485849, 0.009707804690503488], 'false,true,true': [0.1224489795918365, nan], 'true,false': [-1.8924256101565169e-16, 0.06632653061224494]}
{'': [0.023550819657244947, 0.10820965355701578], 'false': [0.07364331720422491, 0.1781423767381396], 'false,false': [0.04750000000000001, 0.2023084839475653], 'false,false,false': [0.0013240150998773403, 0.19192086346711917], 'false,true': [nan, 0.07364331720422491], 'false,false,true': [nan, 0.04750000000000001]}
{'': [0.03406607110350164, 0.09937303488796477], 'false': [nan, 0.09937303488796474], 'false,false': [0.05246913580246875, 0.08393205368679883], 'false,false,false': [0.07186817034880243, 0.11506414898315276], 'false,false,true': [-9.868649107779169e-17, 0.09876543209876533], 'true': [0.03451808802302361, 0.012721615408999668], 'true,true': [0.034515489044401965, 0.0], 'true,false': [0.0032217855754907987, 0.00258244555863274]}
{'': [0.028814240392652825, 0.00032041760908564296], 'false': [1.782813346452233e-05, 0.0006248291011029078], 'false,false': [nan, 0.0006248291011029078], 'false,false,false': [nan, 0.0006248291011029078], 'false,true': [nan, 1.7828133464518276e-05], 'false,true,false': [2.2194925218395365e-05, 1.3538220500917463e-07]}
{'': [0.025663008594919146, 0.05935461297078773], 'false': [0.051273944432438774, 0.05487480294685782], 'false,false': [0.05762790283948315, 5.204170427930421e-18], 'false,false,true': [0.001062332329998962, 0.02060188754929981], 'false,true': [0.051273944432438774, nan], 'true': [0.026329113053951497, 0.003433437643423909]}
{'': [0.03957384438103991, 0.08068982272317661], 'false': [0.0006753881465076597, 0.08530340562053856], 'false,false': [0.02594623298059886, 0.0004982543784259004], 'true': [nan, 0.03957384438104033], 'true,false': [nan, 0.03957384438103991], 'false,false,false': [0.0003132273478833692, 0.0006525999860315431]}
{'': [0.04746487214939581, 0.021275945042101646], 'true': [0.027464830861041577, 0.01765207109044127], 'false': [nan, 0.021275945042101646], 'false,false': [nan, 0.021275945042101646], 'false,false,false': [nan, 0.021275945042101646]}
{'': [0.012078781722902344, 0.03467878278843719], 'false': [nan, 0.03467878278843737], 'false,false': [0.02143162168898476, 0.06324678108878244], 'false,false,false': [0.04844686789506686, 0.08688015523435798], 'true': [0.012335128931184833, 0.00046778263090344746], 'true,false': [0.00046778263090344746, nan]}
{'': [0.047668936850632275, 0.03048061522806628], 'false': [0.018524955934763405, 0.0704642103391343], 'false,false': [0.09247148261325076, 0.0004755962328374407], 'false,true': [0.03558633713214409, 7.396765010856237e-06], 'false,true,true': [0.03558633713214409, nan], 'false,false,false': [nan, 0.0004755962328374407]}
{'': [0.02653141956002378, 0.04810050320129036], 'false': [0.033202972413073746, 0.06808894453918546], 'false,false': [0.0, 0.0696431267267826], 'false,false,false': [nan, 0.0696431267267826], 'true': [0.037840037024921426, 0.0012889138197789073], 'true,true': [0.04131500532155895, 9.564013536195798e-07], 'true,false': [4.898103652468779e-07, 0.009408900971125577], 'true,false,false': [1.3877787807814458e-18, 0.014791509965207613]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.114
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8155957436101503;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13254873931909303;  // std dev = 0.096, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7104139364872276;  // std dev = 0.118, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7313240157708414;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.05104182997168588;  // std dev = 3.335, 191.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=17 */
%   | | | else return -0.1264687415105159;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.04353323624370515;  // std dev = 0.252, 51.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return -0.04954566458743898;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.12646874151051593;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08396370088471737;  // std dev = 3.187, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5342792750056539;  // std dev = 1.388, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.7335673785285072;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.728175271984735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6646775748358211;  // std dev = 0.313, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5539571001203312;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10406924753847478;  // std dev = 1.458, 158.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=3 */
%   | | | else return 0.02728356313964694;  // std dev = 2.684, 68.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06332727776929556;  // std dev = 2.194, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.20309414052847394;  // std dev = 2.087, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.38878105005250113;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.4254117828830435;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.42486284426768595;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2448142425099899;  // std dev = 1.838, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5961214342129033;  // std dev = 0.206, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.42330644904672776;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5732753717198232;  // std dev = 1.482, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.6593357499129255;  // std dev = 0.923, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.1254424904067409;  // std dev = 0.029, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.3563017315794679;  // std dev = 0.056, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.2144668963526768;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.32557800746378784;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.35601326414028805;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.3597124473586574;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.24592668511150656;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5741784262425141;  // std dev = 0.200, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08979328418757625;  // std dev = 2.145, 268.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=9 */
%   | | else return -0.09207743228630381;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2512014862049162;  // std dev = 0.122, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.33713846493393007;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return -0.06791645398658791;  // std dev = 1.295, 122.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=7 */
%   | | | else return -0.0058203640178571955;  // std dev = 1.785, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
%   | | else return -0.09561117372488344;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3094736912932485;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.30367632418791446;  // std dev = 1.230, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.5309922522208997;  // std dev = 0.468, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12371686137435257;  // std dev = 0.033, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( tweets(C, D), follows(E, C) )
%   | | | then return 0.14048327572785496;  // std dev = 1.660, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.21349879206263736;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.016258282632062748;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2471659887425174;  // std dev = 0.216, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.04264247201504341;  // std dev = 0.164, 222.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3381506389142405;  // std dev = 0.403, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10588197811307169;  // std dev = 1.05e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0027340319123126894;  // std dev = 0.520, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.02297431047481287;  // std dev = 1.393, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1712735358200682;  // std dev = 0.155, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else return 0.2933261773364717;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.13191626917529614;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.41180183288254024;  // std dev = 0.996, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.08620993598255075;  // std dev = 0.142, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.12781883918992631;  // std dev = 1.056, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10386690247353277;  // std dev = 0.052, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08320405998003041;  // std dev = 0.787, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.017313130986767067;  // std dev = 1.549, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.15031952585400774;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.18281411123876246;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22529909994988837;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.12504244220330385;  // std dev = 0.983, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.3758299444960047;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07966584222685341;  // std dev = 0.109, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.22786417655944063;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.46484276314373374;  // std dev = 0.234, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11838577306259482;  // std dev = 0.223, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09727555049510708;  // std dev = 1.956, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | | else return 0.22335528634846832;  // std dev = 0.943, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.15455252768492964;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07097324879517745;  // std dev = 0.039, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.09590903897390046;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.011287927246114146;  // std dev = 0.133, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19463593195526985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.008606589621082678;  // std dev = 0.391, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03649655905886747;  // std dev = 1.048, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.112', 'seconds']
Refined model CLL: -0.105886


******************************************
Best model found
******************************************
Results 

CLL : -0.103922 

AUC ROC : 0.994178 

AUC PR : 0.338205 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 10.114 

Total Inference Time : 13.608824014663696 

Total revision time: 35.08168083572388
Best scored revision CLL: -0.105886


Results 

CLL : -0.103922 

AUC ROC : 0.994178 

AUC PR : 0.338205 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 35.117469610214236 

Total Inference Time : 13.608824014663696 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.126
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.050941973991396876;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.736684656333645;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.002283310690957634;  // std dev = 0.302, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.058839259481394304;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16514483655294826;  // std dev = 2.263, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.45780400383521036;  // std dev = 1.348, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5725157817997065;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.00259585996903153;  // std dev = 2.237, 52.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
%   | | | else return 0.05927280838104292;  // std dev = 1.865, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.581920724864717;  // std dev = 0.828, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12598136064653714;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.13183146120523656;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18473992825743987;  // std dev = 0.164, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27821041123702256;  // std dev = 0.825, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2968561999972331;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6128991664416452;  // std dev = 0.152, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08028030520289312;  // std dev = 1.105, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else return -0.07203394454710173;  // std dev = 0.262, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037774697867051905;  // std dev = 1.417, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2388181738493521;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45790223376304806;  // std dev = 0.858, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12238533107724116;  // std dev = 0.107, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.12045924497585923;  // std dev = 0.091, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31660625729277697;  // std dev = 0.377, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.08622287896514177;  // std dev = 0.990, 61.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.009585305995343695;  // std dev = 0.823, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20066854539944934;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05362012160005971;  // std dev = 0.140, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.008019651736413651;  // std dev = 1.066, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return 0.03558169507861512;  // std dev = 0.970, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14086494277746586;  // std dev = 0.168, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.32164885260798254;  // std dev = 0.528, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09593959390403366;  // std dev = 0.021, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33729117203399134;  // std dev = 0.325, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12861400006283977;  // std dev = 0.145, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19025220793825148;  // std dev = 0.287, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.12889998076141518;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08810924675710699;  // std dev = 0.009, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08792769214560642;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.17007945670037392;  // std dev = 0.616, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.055786614408220934;  // std dev = 0.510, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006927308851141223;  // std dev = 0.827, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.979', 'seconds']
Parameter learned model CLL:-0.113287 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.351, 2, 21], 'true,false,true': [4.08e-08, 39, 0], 'true,false,false': [0.287, 10, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.498, 6, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.302, 24, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.263, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.348, 2, 14], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.237, 44, 8], 'false,false,false,false': [1.865, 17, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.828, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.008, 38, 0], 'false,true,false,false': [0.0, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.825, 1, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.152, 0, 10], 'false,false,true,false': [1.105, 39, 2], 'false,false,false': [0.262, 8, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.417, 32, 17], 'false,true': [0.0, 0, 4], 'false,false,true': [0.858, 1, 10], 'false,false,false,true': [0.107, 22, 0], 'false,false,false,false': [0.091, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.377, 0, 24], 'true,false': [0.99, 59, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.823, 13, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.002, 0, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 36, 4], 'false,false,false,true': [1.066, 22, 5], 'false,false,false,false': [0.97, 10, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.168, 1, 14], 'false,true,true,true': [0.528, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 42, 0], 'false,false,true': [0.325, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.287, 0, 17], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.009, 35, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.616, 2, 1], 'false,true': [0.51, 5, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.827, 10, 5]}]
{'': [0.21054606868080405, 0.21811224489795927], 'false': [0.1799307958477507, 0.24793388429752045], 'true': [0.07939508506616269, 0.019600000000000072], 'false,true': [0.0, -1.2810265668751807e-17], 'true,false': [4.2700885562506023e-17, 0.0826446280991736], 'false,true,true': [0.0, nan]}
{'': [-2.0898315757650005e-16, 0.1368096345553592], 'false': [0.09101227604807913, 0.1660933875442367], 'false,false': [0.07100591715976334, 0.19691416431103284], 'false,false,false': [nan, 0.19691416431103292], 'false,true': [nan, 0.09101227604807913], 'false,false,true': [nan, 0.07100591715976334]}
{'': [0.1135347681986531, 0.12425673029055254], 'false': [nan, 0.12425673029055297], 'false,false': [0.0, 0.11528682594289158], 'false,false,false': [0.09620856659394478, 0.1581236181297116], 'true': [0.1135347681986531, nan], 'true,true': [0.1135347681986531, nan], 'false,false,true': [nan, 0.0]}
{'': [0.02210040729181869, 0.0011715264535220697], 'false': [4.456375064314828e-06, 0.0014190541218616712], 'false,false': [nan, 0.0014190541218616712], 'false,false,false': [nan, 0.0014190541218616712], 'false,true': [nan, 4.456375064314828e-06], 'false,true,false': [1.6660694099773485e-06, 0.0]}
{'': [0.045426671061091786, 0.09538627426698881], 'false': [0.0, 0.09750833740581973], 'false,false': [0.10013996554404446, 0.06874083667510868], 'false,false,true': [0.0023129617895367716, 0.02978495939958962], 'true': [0.045426671061091786, nan], 'false,true': [0.0, nan]}
{'': [0.04097916743958467, 0.07397113535417041], 'false': [0.0, 0.07630239109369025], 'false,false': [0.06697481771077135, 0.000545802054431573], 'true': [nan, 0.040979167439584664], 'true,false': [nan, 0.04097916743958467], 'false,false,false': [0.0005183219216346508, 0.0005867180155681578]}
{'': [0.04607730479279894, 0.037628667117931704], 'true': [0.005919220511281058, 0.016059424305914418], 'false': [nan, 0.0376286671179317], 'false,false': [nan, 0.037628667117931704], 'false,false,false': [nan, 0.037628667117931704]}
{'': [3.1118360218041585e-07, 0.03601917739759438], 'false': [nan, 0.036019177397594505], 'false,false': [0.019556919083020277, 0.04987212352449392], 'false,false,false': [0.042076506946292114, 0.06268211215120285], 'true': [3.1118360218041585e-07, nan]}
{'': [0.028197109883289297, 0.03719717391764961], 'false': [0.02902713034013813, 0.04979971345857347], 'false,false': [0.011701209679081491, 0.001007354833810933], 'false,true': [0.03488705258604188, 1.013696860063542e-05], 'false,true,true': [0.03488705258604188, nan], 'false,false,false': [nan, 0.001007354833810933]}
{'': [0.023286952766210366, 0.03991387530494709], 'false': [0.028926338960336553, 0.04561118520939336], 'false,false': [nan, 0.04561118520939336], 'false,false,false': [nan, 0.04561118520939336], 'true': [0.004507211496986148, 0.012301253996981516], 'true,false': [2.4344300943446306e-06, 0.047647090689422654], 'true,false,false': [0.0, 0.12629313457227204], 'true,true': [0.004850761224540456, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.518
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7479487003254712;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12721750020579659;  // std dev = 0.029, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7675734635969045;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.15161434807894877;  // std dev = 0.124, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.027449884280605373;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5548634253651425;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5979986677128979;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11345207523464702;  // std dev = 0.024, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.053564684878599916;  // std dev = 1.131, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.1381917695936689;  // std dev = 1.573, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.41763591958304636;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.07811615697723433;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), tweets(G, F) )
%   | | | then return 0.41014857299679125;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.547889096318222;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6710290984839619;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10238873145877533;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.10221246949249241;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.14844396988366246;  // std dev = 0.168, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.334352885241683;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.32079478526886196;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3223184714708094;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4015933486439624;  // std dev = 0.224, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08708829072408754;  // std dev = 0.785, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09238049569836555;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11733177700496757;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), follows(D, A) )
%   | | | then return 0.2530271295761633;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2967731220346946;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2539445066535255;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.052850045320905044;  // std dev = 0.096, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | else return -0.08534684844724774;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25626822003667893;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3471815286172758;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5173463194540731;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09991288883901843;  // std dev = 0.023, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(C, D), follows(A, C) )
%   | | | then return 0.20709735788068448;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2205886247743764;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.26976846112078423;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then return -0.08219086083614191;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.07747188498075108;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.21006143557469958;  // std dev = 0.000124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.07950369790112823;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.020193357638204384;  // std dev = 0.899, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return -0.03922786539172993;  // std dev = 0.600, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.08843051693064388;  // std dev = 0.289, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1766792883757225;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2206983842608373;  // std dev = 0.110, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.07535930371174908;  // std dev = 0.010, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.07209238889811223;  // std dev = 0.000113, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.24753877189913556;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09056643788385303;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.11012807159691304;  // std dev = 0.573, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.009277474586791984;  // std dev = 0.604, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1676270021640754;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1529957134880496;  // std dev = 9.71e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1885154537107288;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15200105092229554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07006329694029832;  // std dev = 0.002, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2044952851310294;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.32335209024228523;  // std dev = 0.216, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08315937221779794;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.16667748819947475;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14036941425604374;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.06568754038124776;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06450609629635011;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.010110770534836808;  // std dev = 0.261, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(F, G) )
%   | | | then return 0.1613552863073614;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21426315961478806;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07385833584635502;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1332493213870701;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.03985426492575367;  // std dev = 0.525, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.715', 'seconds']
Refined model CLL: -0.097782


******************************************
Best model found
******************************************
Results 

CLL : -0.098035 

AUC ROC : 0.993335 

AUC PR : 0.382731 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 6.518 

Total Inference Time : 9.769141912460327 

Total revision time: 19.981944030761717
Best scored revision CLL: -0.097782


Results 

CLL : -0.098035 

AUC ROC : 0.993335 

AUC PR : 0.382731 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 20.00327128791809 

Total Inference Time : 9.769141912460327 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.005487428536851416;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7272146451029157;  // std dev = 0.192, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04865672672877545;  // std dev = 0.248, 64.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05258164297447793;  // std dev = 1.255, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.42405077188448576;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17383682930102873;  // std dev = 2.995, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5259785207289339;  // std dev = 1.004, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.64981051660905;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6961916408936712;  // std dev = 0.098, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7461669844997372;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5534540487183628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01328871644182905;  // std dev = 3.040, 109.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=15 */
%   | | | else return 0.022796229646324752;  // std dev = 2.482, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5237325017222894;  // std dev = 1.858, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12346274722349283;  // std dev = 0.094, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return -0.12563018507501225;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17073956994580267;  // std dev = 0.157, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.20870054478530495;  // std dev = 1.816, 36.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   | else return 0.4762004397821762;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29680682578006956;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.45223938557219756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6350038712600955;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10019650873512499;  // std dev = 1.137, 105.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=2 */
%   | | else return 0.05461161555820462;  // std dev = 0.336, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.039877136000752086;  // std dev = 1.897, 97.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2670598993256422;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4798104451655888;  // std dev = 1.196, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1262963074952674;  // std dev = 0.105, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.14461259764553394;  // std dev = 0.123, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28708388944563784;  // std dev = 1.048, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return -0.09195760144738348;  // std dev = 1.011, 90.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02819618253995508;  // std dev = 1.341, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19906279513607295;  // std dev = 0.055, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E) )
%   | | then return 0.23840039070022456;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.052979549905790714;  // std dev = 0.132, 70.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.023637256469405298;  // std dev = 1.683, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | | else return 0.04553759348945094;  // std dev = 1.367, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15735982712212226;  // std dev = 0.135, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3231166645294973;  // std dev = 0.617, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09196898098939817;  // std dev = 0.084, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3693368753643603;  // std dev = 0.425, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11144162841407547;  // std dev = 0.151, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17919260354326175;  // std dev = 0.387, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.16914816740897223;  // std dev = 0.260, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08164584772751633;  // std dev = 0.007, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0958068401909005;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.027722564612641273;  // std dev = 0.969, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.014756738114075811;  // std dev = 1.217, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2290029815774296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01620028828012779;  // std dev = 1.099, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.086', 'seconds']
Parameter learned model CLL:-0.112099 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.46e-07, 0, 41], 'true,false,true': [6.66e-08, 65, 0], 'true,false,false': [0.343, 19, 3], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 16, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.192, 0, 36], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 58, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.255, 19, 2], 'false,false,false,true': [0.867, 1, 2], 'false,false,false,false': [2.995, 30, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.004, 1, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.136, 0, 2], 'true,false,false': [0.098, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.04, 94, 15], 'false,false,false,false': [2.482, 33, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.858, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.094, 87, 0], 'false,true,false,false': [0.023, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.157, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.816, 4, 32], 'true,false': [0.0, 0, 1], 'false,true,true': [7.45e-09, 0, 5], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.243, 0, 16], 'false,false,true,false': [1.137, 103, 2], 'false,false,false': [0.336, 15, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.897, 63, 34], 'false,true': [0.14, 0, 8], 'false,false,true': [1.196, 1, 20], 'false,false,false,true': [0.105, 27, 0], 'false,false,false,false': [0.123, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.048, 1, 50], 'true,false': [1.011, 88, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.341, 21, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.055, 0, 34], 'true,false,true': [0.009, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.132, 64, 6], 'false,false,false,true': [1.683, 44, 11], 'false,false,false,false': [1.367, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.135, 1, 33], 'false,true,true,true': [0.617, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.084, 85, 0], 'false,false,true': [0.425, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.151, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.387, 0, 35], 'true,true,false': [0.26, 0, 6], 'true,false,true': [0.007, 72, 0], 'true,false,false,true': [0.027, 7, 0], 'true,false,false,false': [0.969, 10, 3], 'false,true': [1.217, 20, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.099, 18, 8]}]
{'': [0.22558593750000103, 0.22633136094674502], 'false': [0.23040000000000005, 0.2222222222222223], 'false,true': [-2.9605947323337506e-16, -6.938893903907228e-18], 'true': [1.4730764034050857e-15, 0.03329369797859694], 'true,false': [6.832141690000964e-17, 0.11776859504132217], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.0010187536736881873, 0.12817982880889073], 'false': [0.06140626481672859, 0.17618097980985784], 'false,false': [0.0750415456499643, 0.2019953178913192], 'false,false,false': [0.25037045884865344, 0.19500733471676607], 'false,false,true': [nan, 0.0750415456499643], 'false,true': [nan, 0.06140626481672859]}
{'': [0.032791850227130465, 0.11198353305576088], 'false': [nan, 0.11198353305576078], 'false,false': [0.005158093835760417, 0.10291350912794535], 'false,false,false': [0.08476718974954466, 0.15020995346231547], 'true': [0.033607845198447645, 0.007599270970962857], 'true,true': [0.033607845198447645, nan], 'true,false': [0.009284568904369017, 0.0048383686926039005], 'false,false,true': [0.0, -4.4408920985006264e-17]}
{'': [0.05394947272081607, 0.0006774878596340628], 'false': [9.31794451278952e-05, 0.0006701813810219461], 'false,false': [nan, 0.0006701813810219461], 'false,false,false': [nan, 0.0006701813810219461], 'false,true': [nan, 9.317944512789956e-05], 'false,true,false': [0.00010236661419099306, 3.588692872765013e-05]}
{'': [0.09102123177582429, 0.08007427875261518], 'true': [0.09161564814073819, 0.0], 'false': [0.003355455644935205, 0.07922376819569056], 'false,false': [0.07319236100222248, 0.11286746175594513], 'false,false,true': [0.003692755631676592, 0.012309111108919057], 'false,true': [1.1102230246251566e-17, 0.0]}
{'': [0.03711231561295004, 0.09506285452830934], 'false': [0.0024583510521400537, 0.10102095145912364], 'false,false': [0.06812895529376617, 0.0006283852130682666], 'true': [nan, 0.037112315612950135], 'true,false': [nan, 0.03711231561295004], 'false,false,false': [0.00040837078888637546, 0.0007225497535635273]}
{'': [0.04820676467868776, 0.058023678961259775], 'false': [nan, 0.05802367896125976], 'false,false': [nan, 0.058023678961259775], 'false,false,false': [nan, 0.058023678961259775], 'true': [0.02153123633068272, 0.011356265900439415]}
{'': [0.00016849850632976663, 0.040169546404746445], 'false': [nan, 0.04016954640474639], 'false,false': [0.017376137559076563, 0.05837634713634404], 'false,false,false': [0.0515062847642462, 0.06916136018779773], 'true': [8.990108874571673e-05, 4.3177426310353484e-05], 'true,false': [4.3177426310353484e-05, nan]}
{'': [0.018310004552227702, 0.03518370485451496], 'false': [0.02378311214783385, 0.05314986987388234], 'false,false': [0.011287564361630947, 0.0006328867764596133], 'false,true': [0.02931061600819418, 8.212501564896795e-05], 'false,true,true': [0.02931061600819418, nan], 'false,false,false': [nan, 0.0006328867764596133]}
{'': [0.022601598717708244, 0.04917312365450855], 'false': [0.05104212321398851, 0.046384524579095386], 'false,false': [0.0, 0.04649132304134089], 'false,false,false': [nan, 0.04649132304134091], 'true': [0.005320164104820781, 0.010598078601439851], 'true,false': [7.225567115580941e-07, 0.04803980175714144], 'true,false,false': [0.00010449461308692311, 0.07222870698519969], 'true,true': [0.004284558216120273, 0.011275072250599242]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.312
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else return -0.11214809460345795;  // std dev = 0.170, 101.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08037115732173442;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7292661135406698;  // std dev = 0.208, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.6149622729086287;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11566072086564878;  // std dev = 0.111, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.537887775387122;  // std dev = 1.204, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.12873971717846225;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18584095911242038;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.08696900994952098;  // std dev = 1.615, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5613086372557723;  // std dev = 0.213, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.26373991065301156;  // std dev = 0.872, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.7654655958973273;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6593102840592158;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6593206878316759;  // std dev = 0.202, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11580864064764564;  // std dev = 0.006, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.12239543309233367;  // std dev = 2.048, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | | else return 0.33399051889439946;  // std dev = 1.337, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4153144636406435;  // std dev = 0.046, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.4904211935196829;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07490136942564701;  // std dev = 1.023, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(I, A) )
%   | | | then return 0.5846562051720632;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5241331154854605;  // std dev = 0.168, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6790794147148671;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10451765417548141;  // std dev = 0.000578, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.14724092924141896;  // std dev = 0.082, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.2009549226984401;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.316544987438601;  // std dev = 0.035, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.04335111012880884;  // std dev = 0.958, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.509228236604701;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3720993010726664;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4582872223116523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08528778262348938;  // std dev = 0.567, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | | else return 0.003762448200577419;  // std dev = 1.131, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.012376827164319537;  // std dev = 1.062, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.06903979400965041;  // std dev = 1.796, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.25339567926651824;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.39982444560709723;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09079260684928872;  // std dev = 0.022, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.25339567926651835;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09344540040537583;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3006716662208261;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3430061044787193;  // std dev = 0.826, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.5044077357930828;  // std dev = 0.210, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1265094394863116;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2159314211598603;  // std dev = 0.023, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), follows(A, D) )
%   | | | then return -0.07064627620924971;  // std dev = 0.476, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | | else return -0.0795369442445741;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3172407163578634;  // std dev = 0.185, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08664060122694625;  // std dev = 0.006, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.32884466172238347;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11362543190158664;  // std dev = 0.099, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.014086458736775683;  // std dev = 0.314, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.037946632949030265;  // std dev = 1.109, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.12509923305000809;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.16539103599082786;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18377906159166288;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.25652804051652783;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05084802768175853;  // std dev = 0.117, 89.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2821946886408669;  // std dev = 0.203, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10758944934692516;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.035329197709937046;  // std dev = 0.833, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.10719840092831698;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.10161520102495514;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.15164451456785885;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1656467531288476;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.0027678709051371744;  // std dev = 0.514, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.28544305700556505;  // std dev = 0.233, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.08862270190886459;  // std dev = 0.620, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07313875142955235;  // std dev = 0.022, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.28229285723427167;  // std dev = 0.092, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.11446413964110598;  // std dev = 0.037, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.13992405208574685;  // std dev = 0.030, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.046080018135474646;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1981206786302872;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.05795606308586134;  // std dev = 0.056, 82.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.4696359650115764;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.025369967188178272;  // std dev = 0.134, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24945711104141133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.009863815796316528;  // std dev = 0.681, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return -0.06574629218667374;  // std dev = 0.759, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.080', 'seconds']
Refined model CLL: -0.099408


******************************************
Best model found
******************************************
Results 

CLL : -0.099771 

AUC ROC : 0.99403 

AUC PR : 0.412009 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 7.312 

Total Inference Time : 8.689565420150757 

Total revision time: 22.003665409088136
Best scored revision CLL: -0.099408


Results 

CLL : -0.099771 

AUC ROC : 0.99403 

AUC PR : 0.412009 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 22.024992666244508 

Total Inference Time : 8.689565420150757 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.801
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return -0.030739953789376637;  // std dev = 0.314, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.16926004621062346;  // std dev = 0.463, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7280184778626431;  // std dev = 0.193, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06401932885611336;  // std dev = 0.223, 108.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0487463867206336;  // std dev = 1.577, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7584059347452284;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10155253349608248;  // std dev = 4.045, 97.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5659918991648668;  // std dev = 0.246, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7252084722292421;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5988991109425703;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6217923072931656;  // std dev = 0.158, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5573036205211047;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01899827271754912;  // std dev = 3.620, 168.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=21 */
%   | | | else return 0.042586350734225044;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4934485374627533;  // std dev = 2.902, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11994907961703558;  // std dev = 0.065, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | | else return -0.12788083136362272;  // std dev = 0.033, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16438252481472432;  // std dev = 0.176, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3036402737136529;  // std dev = 0.938, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.4710485374629766;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30319520268950484;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4968701986716091;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6476668431221274;  // std dev = 0.296, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.09150693661209379;  // std dev = 1.651, 145.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=4 */
%   | | else return 0.004585295440605468;  // std dev = 0.293, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017221488827079127;  // std dev = 2.286, 151.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=47 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2588014055311996;  // std dev = 0.168, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5412946099814977;  // std dev = 0.806, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11648547141269107;  // std dev = 0.122, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.12824139879281657;  // std dev = 0.108, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2947326765677987;  // std dev = 0.772, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else return -0.07850455726546458;  // std dev = 1.558, 151.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029020982500330295;  // std dev = 1.584, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17085249286257354;  // std dev = 0.992, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.24948818906570308;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051879047214716895;  // std dev = 0.133, 95.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.029647133442606728;  // std dev = 1.620, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
%   | | | else return 0.04858952780816787;  // std dev = 1.886, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15599946039781065;  // std dev = 0.163, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28656206336384876;  // std dev = 0.702, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09239946639267582;  // std dev = 0.107, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3762386949672448;  // std dev = 0.695, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11437330038748934;  // std dev = 0.192, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15781655271264908;  // std dev = 0.988, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.0738878181244695;  // std dev = 1.017, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.0805539774341803;  // std dev = 0.014, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1005631376186925;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.024749122313947533;  // std dev = 0.889, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.022205128054143503;  // std dev = 0.951, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17303475795386436;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019416901335041474;  // std dev = 1.641, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.045', 'seconds']
Parameter learned model CLL:-0.110861 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.16e-08, 87, 0], 'true,false,false': [0.314, 32, 4], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.79e-08, 30, 0], 'false,false': [0.463, 31, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.193, 0, 53], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.223, 100, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.577, 29, 3], 'false,false,false,true': [0.095, 0, 3], 'false,false,false,false': [4.045, 71, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.246, 0, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.13, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.158, 0, 3], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.62, 147, 21], 'false,false,false,false': [3.148, 52, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.902, 6, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.065, 123, 0], 'false,true,false,false': [0.033, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.176, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.938, 1, 46], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 11], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.296, 0, 24], 'false,false,true,false': [1.651, 141, 4], 'false,false,false': [0.293, 31, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.286, 104, 47], 'false,true': [0.168, 0, 14], 'false,false,true': [0.806, 0, 32], 'false,false,false,true': [0.122, 54, 0], 'false,false,false,false': [0.108, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.772, 0, 72], 'true,false': [1.558, 145, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.584, 33, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 51], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.133, 87, 8], 'false,false,false,true': [1.62, 42, 18], 'false,false,false,false': [1.886, 32, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.163, 1, 47], 'false,true,true,true': [0.702, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.107, 131, 0], 'false,false,true': [0.695, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.192, 57, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.988, 1, 49], 'true,true,false': [1.017, 1, 11], 'true,false,true': [0.014, 101, 0], 'true,false,false,true': [0.026, 15, 0], 'true,false,false,false': [0.889, 11, 4], 'false,true': [0.951, 26, 15], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.641, 29, 13]}]
{'': [0.22684310018903603, 0.2183950617283964], 'true': [0.016124697661918288, 0.031462753651926675], 'false': [0.2222222222222217, 0.21432098765432045], 'false,true': [-2.3684757858670006e-16, 2.590520390792032e-17], 'true,false': [7.656710514656253e-17, 0.09876543209876527], 'false,true,true': [-2.7328566760003855e-16, 0.0]}
{'': [0.0007023857613017337, 0.11423603732932658], 'false': [0.04973420802658523, 0.15767073305204357], 'false,false': [0.07766896213134566, 0.17626486639227296], 'false,false,false': [0.003031482621763374, 0.16867890818897077], 'false,false,true': [nan, 0.07766896213134566], 'false,true': [nan, 0.04973420802658523]}
{'': [0.0042265599041488855, 0.11020778928411672], 'false': [nan, 0.1102077892841166], 'false,false': [0.0028591686210896286, 0.09952886044829766], 'false,false,false': [0.07798932619855338, 0.15246564603013882], 'true': [0.001471980622937833, 0.014999659300312329], 'true,false': [0.01636904244788077, 0.005653248778420365], 'false,false,true': [0.008317581443170038, -4.9343245538895844e-17], 'true,true': [0.001471980622937833, nan]}
{'': [0.08507622324142089, 0.0005473867674626413], 'false': [4.4827984089012586e-05, 0.0005934270310838546], 'false,false': [nan, 0.0005934270310838546], 'false,false,false': [nan, 0.0005934270310838546], 'false,true': [nan, 4.4827984089012586e-05], 'false,true,false': [3.4428909121831645e-05, 4.548201642755323e-05]}
{'': [0.018885905457337464, 0.0841535431612733], 'false': [0.0028902452010951727, 0.0836835775788844], 'false,false': [0.08322871580385738, 0.0856965100070598], 'false,false,true': [0.0036567852952055593, 0.018807117738687262], 'true': [0.018703868091951285, 0.0], 'false,true': [2.716109244215271e-05, 0.0]}
{'': [0.03462156083208497, 0.0853031765973497], 'false': [0.0020050163763889383, 0.09048409192925343], 'false,false': [0.020279480881962075, 0.0003288790411446819], 'true': [nan, 0.03462156083208474], 'true,false': [nan, 0.03462156083208497], 'false,false,false': [0.0002754640958757939, 0.00032608036190795133]}
{'': [0.044013176345843084, 0.052250073863557754], 'false': [nan, 0.05225007386355784], 'false,false': [nan, 0.052250073863557754], 'false,false,false': [nan, 0.052250073863557754], 'true': [0.008270036174660711, 0.0160785305127437]}
{'': [0.01845200244171555, 0.04111095941284126], 'false': [nan, 0.04111095941284117], 'false,false': [0.017558649437789987, 0.05841234255405253], 'false,false,false': [0.043727575704194714, 0.07736328383486187], 'true': [0.018930644768976726, 5.2750427327205585e-05], 'true,false': [5.2750427327205585e-05, nan]}
{'': [0.0266473426292211, 0.034912705777494064], 'false': [0.019844189079990464, 0.05803835296683144], 'false,false': [0.018558757527383445, 0.0006465487645793454], 'false,true': [0.02466241791976591, 8.714572480699739e-05], 'false,true,true': [0.02466241791976591, nan], 'false,false,false': [nan, 0.0006465487645793454]}
{'': [0.025525297116242317, 0.04312931841203862], 'false': [0.02208114261285512, 0.06319820906412625], 'false,false': [0.0, 0.06415412726076339], 'false,false,false': [nan, 0.06415412726076337], 'true': [0.0335107576132779, 0.007258904093182643], 'true,true': [0.01950526377462953, 0.08618631057842042], 'true,false': [1.83080941966685e-06, 0.030288797630538447], 'true,false,false': [4.3729829584996754e-05, 0.05268228418677916]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.342
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.838918165868743;  // std dev = 0.137, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7331489350995122;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10933073969723563;  // std dev = 0.177, 123.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7289083762084231;  // std dev = 0.205, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7722079092176801;  // std dev = 0.158, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1290560587273114;  // std dev = 8.82e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.19139963049886347;  // std dev = 3.061, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
%   | | | else return 0.10048585321380409;  // std dev = 1.809, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.537093323364656;  // std dev = 0.171, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.5577840290439711;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6243430120464986;  // std dev = 0.237, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6268639318108672;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5577840290439711;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10766666568626575;  // std dev = 0.685, 91.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=1 */
%   | | | else return -0.020843109346541315;  // std dev = 1.770, 53.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06538677696516769;  // std dev = 2.577, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
%   | | | else return 0.10265676415796378;  // std dev = 2.634, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), follows(A, D) )
%   | | | then return 0.33997059822747616;  // std dev = 1.356, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.419716422975391;  // std dev = 0.033, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.5298040302337037;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4953117866900964;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.5817269389747796;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6794582960518672;  // std dev = 0.279, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10841638793534498;  // std dev = 0.042, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.11042787415524737;  // std dev = 0.020, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.16105292305762495;  // std dev = 0.076, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3336820087412704;  // std dev = 0.012, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.11546766791380163;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3432994986739625;  // std dev = 0.186, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5065684524056419;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.334700510817143;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.08189601894620079;  // std dev = 0.921, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | | else return -0.020278925984629662;  // std dev = 1.184, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.03476917036566021;  // std dev = 1.809, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.08122388962792577;  // std dev = 2.176, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.26657259194651367;  // std dev = 0.009, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.12355860212046027;  // std dev = 1.239, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.25369359948145465;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return -0.060186846033916774;  // std dev = 0.126, 104.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=6 */
%   | | else return -0.09139238774969437;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2720841347972086;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.27306553018922586;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5068109995979085;  // std dev = 0.340, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.13059244436841688;  // std dev = 0.027, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.22435663188789975;  // std dev = 0.028, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.10552535896508095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.15482891171262167;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.42138270743611117;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08524486655487853;  // std dev = 0.003, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.19652001977647018;  // std dev = 1.447, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.1254347881973916;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.043120686103887945;  // std dev = 1.237, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | | else return 0.09958539358979711;  // std dev = 1.106, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18400793040789645;  // std dev = 0.011, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return 0.29099397306464064;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.38497023665816976;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.29272508790824975;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07918007511935507;  // std dev = 0.004, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19429059286549483;  // std dev = 1.283, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.11230840838318375;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.03637090012554796;  // std dev = 1.225, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | | else return 0.24632462497020163;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15951466183383053;  // std dev = 0.013, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.22796886177208786;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.04605121357846069;  // std dev = 0.924, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16556649761757278;  // std dev = 0.093, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.29366563318168865;  // std dev = 0.156, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07356606541918954;  // std dev = 0.004, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.3066319581905536;  // std dev = 0.111, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.40319034765813716;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1380514418086587;  // std dev = 0.037, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15495854268543494;  // std dev = 0.047, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.06928226609442796;  // std dev = 0.003, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.03124102486132427;  // std dev = 0.097, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.19844386300713776;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.008831710838886977;  // std dev = 0.860, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0.008362865184311286;  // std dev = 0.472, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17550803843776874;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0037850817931352216;  // std dev = 1.023, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return -0.04894241995428213;  // std dev = 0.829, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.106', 'seconds']
Refined model CLL: -0.104895


******************************************
Best model found
******************************************
Results 

CLL : -0.101326 

AUC ROC : 0.993255 

AUC PR : 0.374802 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 9.342 

Total Inference Time : 9.440668106079102 

Total revision time: 26.66815172958374
Best scored revision CLL: -0.104895


Results 

CLL : -0.101326 

AUC ROC : 0.993255 

AUC PR : 0.374802 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 26.689478986740113 

Total Inference Time : 9.440668106079102 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.306
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8224346493852265;  // std dev = 1.701, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else return -0.05674468192176434;  // std dev = 0.279, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.3105298874804647;  // std dev = 0.498, 42.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7161405776399019;  // std dev = 1.015, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04954899267631802;  // std dev = 0.245, 144.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06207478820523471;  // std dev = 1.793, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7580835377463446;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18661277094191941;  // std dev = 4.283, 92.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5068369962831494;  // std dev = 1.893, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7315945892280307;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.44379458331811206;  // std dev = 0.854, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6292545121689345;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5649865002480096;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013606404659910112;  // std dev = 4.114, 205.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=28 */
%   | | | else return 0.049782507526420786;  // std dev = 3.668, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5441124472413452;  // std dev = 2.216, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12147001908048183;  // std dev = 0.073, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | | else return -0.12716328011624697;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18351599752785203;  // std dev = 0.369, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30037796542634965;  // std dev = 1.382, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.4662755485000746;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29814519202375384;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4918100188017994;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6117885649876666;  // std dev = 0.281, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10368059465734532;  // std dev = 1.621, 193.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=4 */
%   | | else return 0.003134840489370232;  // std dev = 0.303, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020421235290143867;  // std dev = 2.778, 203.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2518437204373432;  // std dev = 0.170, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4793747442497773;  // std dev = 1.182, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13341956897962626;  // std dev = 0.230, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.13067417444984009;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2979072323028159;  // std dev = 0.807, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | else return -0.08926367553942097;  // std dev = 1.550, 211.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.045354850720244234;  // std dev = 1.795, 60.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19383135791351785;  // std dev = 0.079, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.24743226489078574;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04421247289136139;  // std dev = 0.143, 128.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.022619767566796723;  // std dev = 1.761, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return 0.012564920728745977;  // std dev = 2.215, 65.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15061779233614092;  // std dev = 0.178, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2588325351843532;  // std dev = 1.193, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09099313797823093;  // std dev = 0.089, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.347480063889143;  // std dev = 0.695, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12445076533600488;  // std dev = 0.284, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.131551360915928;  // std dev = 1.872, 69.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=65 */
%   | | else return 0.16716324635826485;  // std dev = 0.381, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08124455782527867;  // std dev = 0.019, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09909831730812012;  // std dev = 0.021, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.03070535397317293;  // std dev = 0.966, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.019806704654400892;  // std dev = 1.454, 73.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.182819135856633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0019088702132745161;  // std dev = 1.711, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.894', 'seconds']
Parameter learned model CLL:-0.112917 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 81], 'true,false,true': [0.0, 136, 0], 'true,false,false': [0.279, 43, 4], 'false,true,true,true': [0.0, 0, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.498, 23, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 131, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.793, 47, 4], 'false,false,false,true': [0.106, 0, 5], 'false,false,false,false': [4.283, 58, 34]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.893, 4, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.854, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.157, 0, 3], 'false,false,true,false': [5.16e-08, 0, 13], 'false,false,false,true': [4.114, 177, 28], 'false,false,false,false': [3.668, 61, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.216, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.073, 133, 0], 'false,true,false,false': [0.018, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.369, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.382, 2, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.018, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.281, 0, 34], 'false,false,true,false': [1.621, 189, 4], 'false,false,false': [0.303, 38, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.778, 140, 63], 'false,true': [0.17, 0, 18], 'false,false,true': [1.182, 1, 43], 'false,false,false,true': [0.23, 61, 0], 'false,false,false,false': [0.245, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.807, 0, 96], 'true,false': [1.55, 205, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.795, 38, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.079, 0, 66], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 115, 13], 'false,false,false,true': [1.761, 53, 23], 'false,false,false,false': [2.215, 45, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.178, 2, 61], 'false,true,true,true': [1.193, 1, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.089, 146, 0], 'false,false,true': [0.695, 0, 34], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.872, 4, 65], 'true,true,false': [0.381, 0, 16], 'true,false,true': [0.019, 143, 0], 'true,false,false,true': [0.021, 26, 0], 'true,false,false,false': [0.966, 27, 4], 'false,true': [1.454, 53, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.711, 39, 17]}]
{'': [0.21700402586654396, 0.24555555555555691], 'false': [0.24305555555555525, 0.24773242630385445], 'false,true': [-8.881784197001253e-17, 2.3790493384824782e-17], 'true': [0.0344387755102037, 0.02138015467765525], 'true,false': [-6.204187490552346e-17, 0.07786328655500212], 'false,true,true': [-2.0898315757650005e-16, 1.4802973661668753e-16]}
{'': [0.014937173495757163, 0.12477449809755363], 'false': [0.05993551110622893, 0.17364725881654605], 'false,false': [0.06300472510838385, 0.20516073568544174], 'false,false,false': [0.002236112690787895, 0.19935528711852846], 'false,false,true': [nan, 0.06300472510838385], 'false,true': [nan, 0.05993551110622893]}
{'': [0.0686868606586279, 0.11832124267421155], 'false': [nan, 0.11832124267421146], 'false,false': [0.0021781286839696046, 0.10739800337490837], 'false,false,false': [0.08255220007869647, 0.1681751230632969], 'true': [0.0628419856979566, 0.10477010922744068], 'true,false': [0.01605335087261513, 0.12151887393760379], 'true,true': [0.0628419856979566, nan], 'false,false,true': [0.008260754712536325, 2.049642507000289e-16]}
{'': [0.03898166756906756, 0.001421187267350228], 'false': [3.9370332607681615e-05, 0.0014622150732134063], 'false,false': [nan, 0.0014622150732134063], 'false,false,false': [nan, 0.0014622150732134063], 'false,true': [nan, 3.9370332607681615e-05], 'false,true,false': [3.9756691080239635e-05, 1.0987558256435948e-05]}
{'': [0.030755510402730807, 0.08024816349144115], 'false': [0.0022168371743865323, 0.07961066359027211], 'false,false': [0.07710425625892563, 0.09171597776831025], 'false,false,true': [0.0023216180072595156, 0.013606734473642784], 'true': [0.030814709751181966, 0.0], 'false,true': [2.0497248660023003e-05, 0.0]}
{'': [0.03800779504726514, 0.07816111337004872], 'false': [0.001604338236231542, 0.08158338553140002], 'false,false': [0.0317458343667256, 0.0009192322457880847], 'true': [nan, 0.038007795047265334], 'true,false': [nan, 0.03800779504726514], 'false,false,false': [0.0008678812825948585, 0.0009660170110658543]}
{'': [0.04216913279814679, 0.053725716387820054], 'false': [nan, 0.05372571638782011], 'false,false': [nan, 0.053725716387820054], 'false,false,false': [nan, 0.053725716387820054], 'true': [0.0067867009188125604, 0.011392623526630246]}
{'': [0.00017610894449865736, 0.040478436007169424], 'false': [nan, 0.04047843600716909], 'false,false': [0.02047593194014288, 0.05679597851038336], 'false,false,false': [0.04078283918256618, 0.07546454013710475], 'true': [9.539498193785374e-05, 5.111416341918584e-05], 'true,false': [5.111416341918584e-05, nan]}
{'': [0.031592358945102275, 0.036000847362624995], 'false': [0.025433907951335766, 0.05073056843325717], 'false,false': [0.014203922684473928, 0.0009716150831665593], 'false,true': [0.047432845709887164, 5.3691637934306906e-05], 'false,true,true': [0.047432845709887164, nan], 'false,false,false': [nan, 0.0009716150831665593]}
{'': [0.026012869657252042, 0.039175226224511625], 'false': [0.02896808177641308, 0.05158670257987305], 'false,false': [0.0, 0.05230051501434618], 'false,false,false': [nan, 0.05230051501434608], 'true': [0.043132559258213264, 0.005080237423350113], 'true,true': [0.050792181193890895, 0.009070954477682129], 'true,false': [2.403888416597948e-06, 0.01755186145207818], 'true,false,false': [1.690707988062325e-05, 0.030124956442460733]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.076
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.14386322081379804;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08037115732173453;  // std dev = 0.416, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7253925986276333;  // std dev = 0.164, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.04070735763432602;  // std dev = 0.254, 120.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=12 */
%   | | else return -0.08887907969253328;  // std dev = 0.194, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.08084606963677814;  // std dev = 1.166, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15781888651144105;  // std dev = 4.130, 102.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.5289784787854922;  // std dev = 0.197, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | else return 0.28441510705790657;  // std dev = 0.667, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6345642781565328;  // std dev = 0.083, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6103525055446527;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4854870672872689;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11322190939308072;  // std dev = 0.861, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return -0.008305131448771264;  // std dev = 2.791, 89.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1128490547359594;  // std dev = 2.846, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | | | else return 0.15517093749272065;  // std dev = 2.907, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4329415872671029;  // std dev = 0.221, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.30047806291174384;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4432904062488312;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.6383263436834952;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43892649534390105;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7421763332867506;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.674764804374977;  // std dev = 0.275, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(J, A) )
%   | then return -0.11734557195183648;  // std dev = 0.018, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return -0.1674111455063725;  // std dev = 0.132, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3060544186651834;  // std dev = 0.996, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.15009430396590379;  // std dev = 1.293, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.40126149340326234;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.46586277007986876;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33915495817720526;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5161197118767081;  // std dev = 0.201, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10386100141132257;  // std dev = 1.345, 205.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.07502111521503464;  // std dev = 0.660, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | | else return 0.0437544266702916;  // std dev = 1.844, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.26430047878672625;  // std dev = 0.051, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.13937232644985847;  // std dev = 0.918, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.30014317813755015;  // std dev = 0.034, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.34172595269473993;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.0923154706968227;  // std dev = 0.043, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.08556030299367619;  // std dev = 0.131, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2730111384215737;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.42132300707585674;  // std dev = 0.121, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.12826117121822472;  // std dev = 0.025, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2236427214414478;  // std dev = 0.023, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return -0.0769259163504482;  // std dev = 0.461, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   | | | else return -0.04262022967501122;  // std dev = 0.355, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2743229195248844;  // std dev = 1.330, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.09749929795578985;  // std dev = 0.125, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27472294429630173;  // std dev = 0.319, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.11407441135160948;  // std dev = 0.016, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.017705485284013063;  // std dev = 0.787, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.03371409964225253;  // std dev = 1.244, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1827988615806516;  // std dev = 0.015, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.1958682781808611;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.26454507761125257;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return -0.010076035157259605;  // std dev = 0.941, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3448027962311319;  // std dev = 0.280, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08163466493150227;  // std dev = 0.153, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14408669818906017;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 8.830676211349784E-4;  // std dev = 1.497, 89.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=27 */
%   | | | else return 0.06886883867494462;  // std dev = 1.387, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.16550054826874028;  // std dev = 0.023, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then return -0.10105245895220438;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1399463324810698;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.0970061973389375;  // std dev = 0.976, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.276079650159213;  // std dev = 0.251, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07597474484414746;  // std dev = 0.011, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.22514946025988247;  // std dev = 0.018, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.43285957262214786;  // std dev = 0.281, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11768704147004456;  // std dev = 0.028, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12112782918792138;  // std dev = 1.002, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.08270639178875422;  // std dev = 1.204, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.16365655441874444;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.06244165067541981;  // std dev = 0.053, 185.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0018292037819878162;  // std dev = 0.127, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | else return 0.0771287809747833;  // std dev = 0.197, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1124668930834607;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0014778403920096828;  // std dev = 0.751, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | | else return 0.01427456015381795;  // std dev = 1.078, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.359', 'seconds']
Refined model CLL: -0.103242


******************************************
Best model found
******************************************
Results 

CLL : -0.100105 

AUC ROC : 0.993161 

AUC PR : 0.342343 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 8.076 

Total Inference Time : 13.783466577529907 

Total revision time: 32.659439355850225
Best scored revision CLL: -0.103242


Results 

CLL : -0.100105 

AUC ROC : 0.993161 

AUC PR : 0.342343 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 32.6807666130066 

Total Inference Time : 13.783466577529907 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.583
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7131482230616665;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029440273368240413;  // std dev = 0.270, 166.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06035094555886789;  // std dev = 1.795, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6339251723588014;  // std dev = 0.980, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15259531015990066;  // std dev = 4.837, 124.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5718134056477433;  // std dev = 0.361, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5170615979082785;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6142586015764737;  // std dev = 0.186, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5929800481478739;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5592765892052771;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020072789769630714;  // std dev = 4.566, 263.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=34 */
%   | | | else return 0.061305811421501086;  // std dev = 4.082, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5286656469095288;  // std dev = 2.718, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1216150373053733;  // std dev = 0.060, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | | else return -0.13024277914109175;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16868135477943427;  // std dev = 0.289, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31830839482697715;  // std dev = 0.581, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.5287629558166171;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2977368352380582;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5098138736016955;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6276870080041217;  // std dev = 0.346, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10295696596681247;  // std dev = 1.787, 258.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=5 */
%   | | else return 0.04492236174758163;  // std dev = 0.329, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0129512766251992;  // std dev = 3.169, 266.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.253689644670804;  // std dev = 0.205, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5143619745844838;  // std dev = 1.055, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12868026379272823;  // std dev = 0.186, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.1339220528995913;  // std dev = 0.222, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2822166161839339;  // std dev = 1.328, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09802298232187599;  // std dev = 2.046, 281.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034613689261219334;  // std dev = 2.325, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1740727013138382;  // std dev = 0.990, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.27333031847223044;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05277144683269996;  // std dev = 0.160, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008132354982333879;  // std dev = 2.059, 122.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=28 */
%   | | | else return 0.030690941138254404;  // std dev = 2.456, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1191924605200762;  // std dev = 0.235, 83.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24001487287105153;  // std dev = 1.520, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09119424100314262;  // std dev = 0.121, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36035581536600747;  // std dev = 1.240, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12040682089132551;  // std dev = 0.264, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17461716070837088;  // std dev = 1.273, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.163342136213687;  // std dev = 0.364, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08291191063760478;  // std dev = 0.332, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09764417589727667;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.010012819987924883;  // std dev = 0.979, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.019672207953557695;  // std dev = 1.268, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19408025520846517;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020492492584286207;  // std dev = 1.974, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.413', 'seconds']
Parameter learned model CLL:-0.111074 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 158, 0], 'true,false,false': [0.251, 55, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 147, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.795, 45, 4], 'false,false,false,true': [0.98, 1, 8], 'false,false,false,false': [4.837, 84, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.361, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.776, 1, 3], 'true,false,false': [0.186, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.566, 229, 34], 'false,false,false,false': [4.082, 76, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.718, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.06, 193, 0], 'false,true,false,false': [0.011, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 105, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.581, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.346, 0, 39], 'false,false,true,false': [1.787, 253, 5], 'false,false,false': [0.329, 45, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.169, 184, 82], 'false,true': [0.205, 0, 22], 'false,false,true': [1.055, 0, 52], 'false,false,false,true': [0.186, 65, 0], 'false,false,false,false': [0.222, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.328, 1, 121], 'true,false': [2.046, 274, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.325, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.99, 1, 83], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 164, 19], 'false,false,false,true': [2.059, 94, 28], 'false,false,false,false': [2.456, 59, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.235, 5, 78], 'false,true,true,true': [1.52, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.121, 208, 0], 'false,false,true': [1.24, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.264, 88, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.273, 1, 85], 'true,true,false': [0.364, 0, 19], 'true,false,true': [0.332, 164, 0], 'true,false,false,true': [0.01, 19, 0], 'true,false,false,false': [0.979, 16, 4], 'false,true': [1.268, 45, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.974, 49, 21]}]
{'': [0.22290806681841208, 0.22376512596707077], 'false': [0.22812933941678357, 0.2190041658401121], 'false,true': [7.105427357601002e-16, 5.3097622916855314e-17], 'true': [0.009433106575965852, 0.018093397608783264], 'true,false': [-1.4053456007913375e-16, 0.06320022981901739], 'false,true,true': [0.0, 0.0]}
{'': [0.012052522955295396, 0.13136836553151646], 'false': [0.0730058099138305, 0.1740801308154374], 'false,false': [0.06576045981728208, 0.19775846549743897], 'false,false,false': [0.10673318151081901, 0.1886876511682621], 'false,true': [nan, 0.0730058099138305], 'false,false,true': [nan, 0.06576045981728208]}
{'': [0.010048737900560028, 0.11595005560232954], 'false': [nan, 0.11595005560232802], 'false,false': [0.0018545683995023765, 0.10495871046299503], 'false,false,false': [0.07928654265364461, 0.16834715239029352], 'true': [0.0019489299047511725, 0.05518707038499563], 'true,false': [0.15065381529923505, 0.004304612087184079], 'true,true': [0.0019489299047511725, nan], 'false,false,true': [0.005679615723476639, -5.921189464667501e-17]}
{'': [0.046172503937494815, 0.0007310160774930896], 'false': [2.5386756658738345e-05, 0.0007969127774001019], 'false,false': [nan, 0.0007969127774001019], 'false,false,false': [nan, 0.0007969127774001019], 'false,true': [nan, 2.538675665874631e-05], 'false,true,false': [1.8742724828348957e-05, 3.7061701078015357e-06]}
{'': [0.004893931067560795, 0.07898467185247394], 'false': [0.00204856526101246, 0.07829369512090574], 'false,false': [0.07204712817357403, 0.10802375565518747], 'false,false,true': [0.0030717997612634317, 0.01237334830465139], 'true': [0.0043896537133627225, 0.0], 'false,true': [9.247324011119052e-06, 0.0]}
{'': [0.03776238429598964, 0.08543454257144993], 'false': [0.0019035535580648189, 0.09104050364918044], 'false,false': [0.021403822464697894, 0.0006444811400206817], 'true': [nan, 0.03776238429598911], 'true,false': [nan, 0.03776238429598964], 'false,false,false': [0.0005350152235431782, 0.0007371493948696436]}
{'': [0.0452803681802607, 0.06674887888211574], 'false': [nan, 0.06674887888211568], 'false,false': [nan, 0.06674887888211574], 'false,false,false': [nan, 0.06674887888211574], 'true': [0.014458828925158835, 0.014892674943879759]}
{'': [0.01162991164834457, 0.03965653100940348], 'false': [nan, 0.03965653100940337], 'false,false': [0.025623754055037532, 0.050465102587345434], 'false,false,false': [0.03474372228288645, 0.07267664093053217], 'true': [0.011676934340350855, 3.2002033234612703e-05], 'true,false': [3.2002033234612703e-05, nan]}
{'': [0.0551046740413915, 0.03844784174801053], 'false': [0.02421419939677862, 0.06257299149072297], 'false,false': [0.03750249604745756, 0.0007927786633884745], 'false,true': [0.05775369858824819, 7.083165557439589e-05], 'false,true,true': [0.05775369858824819, nan], 'false,false,false': [nan, 0.0007927786633884745]}
{'': [0.023490874673085034, 0.03919131861357636], 'false': [0.022960424695378408, 0.05495566152700426], 'false,false': [0.0, 0.055688803525672376], 'false,false,false': [nan, 0.05568880352567232], 'true': [0.01671322279631422, 0.0060778584454832104], 'true,true': [0.018841255445482607, 0.00697695262298619], 'true,false': [0.0006722095279290685, 0.02748571768585722], 'true,false,false': [5.219908220080303e-06, 0.04794576630544582]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 37.4
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.1239939220433455;  // std dev = 0.132, 224.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(C, E) )
%   | | | then return 0.6954879579128147;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.3899324023572592;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7232657356905924;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12741685370936326;  // std dev = 1.86e-07, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.736840045745142;  // std dev = 0.201, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.58299269993061;  // std dev = 0.973, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12741685370936381;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14543408138843342;  // std dev = 4.346, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return 0.16710033018860132;  // std dev = 2.553, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5369153157812208;  // std dev = 0.160, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else return 0.27337166285266706;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.7048744404006769;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.588735963877032;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5662456577083956;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5222128671157226;  // std dev = 0.982, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11390990783845376;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.11005632238944414;  // std dev = 2.726, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.07895851870924753;  // std dev = 3.850, 93.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.4275774453956453;  // std dev = 0.137, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.3342300084374331;  // std dev = 1.584, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.5876970533414108;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.5708535287493569;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.06685698682394897;  // std dev = 1.003, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6558757139587285;  // std dev = 0.909, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.7456231822994859;  // std dev = 0.196, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10290821714206899;  // std dev = 5.74e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.1662025029633913;  // std dev = 0.217, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3168225205264049;  // std dev = 0.978, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.2418384924743804;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.44301637387807224;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11741855568928222;  // std dev = 0.842, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32364361442651113;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.25909516021975715;  // std dev = 1.374, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09378863382525303;  // std dev = 8.82e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04551909545058314;  // std dev = 2.874, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | | | else return 0.11627654855605249;  // std dev = 2.309, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27256187530291925;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return -0.0481233219145498;  // std dev = 0.114, 139.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=14 */
%   | | else return -0.07612343829441977;  // std dev = 0.061, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.31282448870416313;  // std dev = 0.265, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.24913801403061384;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.27768335260915994;  // std dev = 0.752, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5190745505090953;  // std dev = 0.418, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12844895328769937;  // std dev = 0.190, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.11516917729908652;  // std dev = 0.375, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.1881140146162423;  // std dev = 0.972, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.13153557842262206;  // std dev = 0.763, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.2167727126093995;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.28262684118449827;  // std dev = 0.061, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.05675010715593956;  // std dev = 0.110, 204.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2717737806693764;  // std dev = 1.033, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.10669682151747714;  // std dev = 0.242, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08003110127126822;  // std dev = 1.402, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 0.05891198500735696;  // std dev = 1.639, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.14595393836606735;  // std dev = 1.384, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.18624379164951335;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17347890335559094;  // std dev = 0.046, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.32113632983644363;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04911230019670012;  // std dev = 0.122, 255.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=23 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2862785754522537;  // std dev = 0.220, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11588195729446912;  // std dev = 0.020, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.026145726807874057;  // std dev = 1.807, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | | else return 0.018079970097841676;  // std dev = 1.594, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.12151911094552666;  // std dev = 1.328, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.1800431674336611;  // std dev = 0.169, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.10612331941151291;  // std dev = 0.753, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2115584134367243;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22417357312496786;  // std dev = 0.086, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07285181312389663;  // std dev = 0.045, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2614015858087397;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.36687044145821857;  // std dev = 0.947, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.13061152659903644;  // std dev = 0.034, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.1501347993499902;  // std dev = 0.160, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return 0.10710039571017477;  // std dev = 0.161, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.06280576021780726;  // std dev = 0.043, 230.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.14299119433119792;  // std dev = 1.038, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09285471207254171;  // std dev = 0.015, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.10976703846974194;  // std dev = 0.320, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2623983755181373;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.010803609382204073;  // std dev = 1.388, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.018173762056202268;  // std dev = 1.181, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.280', 'seconds']
Refined model CLL: -0.10406


******************************************
Best model found
******************************************
Results 

CLL : -0.103881 

AUC ROC : 0.993624 

AUC PR : 0.400997 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 37.4 

Total Inference Time : 14.656859159469604 

Total revision time: 64.39850660133362
Best scored revision CLL: -0.10406


Results 

CLL : -0.103881 

AUC ROC : 0.993624 

AUC PR : 0.400997 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 64.41983385849 

Total Inference Time : 14.656859159469604 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.163
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08319873599142409;  // std dev = 0.184, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.808741135785635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.24536774760051053;  // std dev = 1.336, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7359550716093559;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6531942943559135;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.049220235251991186;  // std dev = 1.548, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | | else return -0.05341952272167052;  // std dev = 0.852, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41860504988220354;  // std dev = 1.386, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11081880523880108;  // std dev = 0.010, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.1112071689589652;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16094443091263874;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3204741116125927;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4298604496457081;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.19547411161259262;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6067974593847046;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08202178650230194;  // std dev = 1.059, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.09732253486041186;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01833555203223267;  // std dev = 1.325, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.029474863926308048;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.28204751858504;  // std dev = 1.207, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1112210954276963;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.13800725585937834;  // std dev = 0.127, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2875545117820095;  // std dev = 0.283, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.0733719909655194;  // std dev = 1.031, 62.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09753048450670954;  // std dev = 0.431, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15813883647121132;  // std dev = 0.988, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, E) )
%   | | then return 0.22218851328088562;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.07137784505403215;  // std dev = 0.089, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010640742598927833;  // std dev = 0.780, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.1538564010159847;  // std dev = 0.682, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1911896164329035;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2381812606012747;  // std dev = 0.234, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08390947485499034;  // std dev = 0.024, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44763216658298244;  // std dev = 0.297, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1337482781596288;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1743603076441433;  // std dev = 0.256, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.18688282782926402;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07742728794353716;  // std dev = 0.000542, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07873323555843459;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08673669255619988;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.037821733962603105;  // std dev = 0.568, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19430574513301302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012245747917920762;  // std dev = 0.593, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.751', 'seconds']
Parameter learned model CLL:-0.106686 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [2.11e-08, 26, 0], 'true,false,false': [0.0, 13, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.184, 38, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.336, 5, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [1.548, 38, 4], 'false,false,false,false': [0.852, 13, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.386, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.01, 41, 0], 'false,true,false,false': [0.0, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.068, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 11], 'true,false': [0.053, 0, 2], 'false,true,true': [0.935, 1, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.063, 0, 3], 'false,false,true,false': [1.059, 50, 2], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.325, 40, 17], 'false,true': [0.866, 1, 3], 'false,false,true': [1.207, 1, 5], 'false,false,false,true': [0.037, 6, 0], 'false,false,false,false': [0.127, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.283, 0, 19], 'true,false': [1.031, 59, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.431, 3, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.988, 1, 17], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.089, 49, 2], 'false,false,false,true': [0.78, 14, 3], 'false,false,false,false': [0.682, 2, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.037, 0, 13], 'false,true,true,true': [0.234, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.024, 48, 0], 'false,false,true': [0.297, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.111, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.256, 0, 17], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.000542, 35, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.014, 3, 0], 'false,true': [0.568, 6, 3], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.593, 3, 1]}]
{'': [0.22407354208560717, 0.2366863905325442], 'false': [0.2222222222222221, 0.25], 'true': [-8.881784197001253e-17, 2.846725704167068e-17], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [1.708035422500241e-17, -1.2810265668751807e-17]}
{'': [1.9737298215558337e-16, 0.08923246802367994], 'false': [0.03390960934209578, 0.1979378850977872], 'false,false': [0.0, 0.20711598086356933], 'false,false,false': [0.0, 0.19838991017466945], 'false,true': [nan, 0.03390960934209578], 'false,false,true': [nan, 0.0]}
{'': [0.0027861380986966386, 0.08577490577765214], 'false': [nan, 0.08577490577765212], 'false,false': [-6.344131569286608e-17, 0.05574170647742153], 'false,false,false': [0.05702136808883598, 0.05188949613173877], 'true': [0.0024912139267968905, 0.0], 'true,true': [-2.0185873175002846e-16, 0.0], 'true,false': [nan, 0.0], 'false,false,true': [0.0, 3.700743415417188e-17]}
{'': [0.07119916415360042, 0.00034021766714899964], 'false': [2.343441167449303e-06, 0.0007631690239073887], 'false,false': [nan, 0.0007631690239073887], 'false,false,false': [nan, 0.0007631690239073887], 'false,true': [nan, 2.343441167449303e-06], 'false,true,false': [2.667129345942728e-06, -2.3129646346357427e-18]}
{'': [0.0017775269597352693, 0.05560911222631487], 'false': [0.109375, 0.041417133306005126], 'false,true': [0.109375, nan], 'false,false': [0.04494936697880913, 0.0], 'false,false,true': [0.0013255306081609852, 0.021585838396459226], 'true': [-6.055761952500853e-17, 0.0014293805897221956]}
{'': [0.030798306550903133, 0.11804995474695604], 'false': [0.1875, 0.1045677591205389], 'false,false': [0.24296744215813826, 0.0013337460159651648], 'true': [nan, 0.030798306550903196], 'true,false': [nan, 0.030798306550903133], 'false,false,false': [0.00022539555154055027, 0.001785646969312854]}
{'': [0.037488907728249615, 0.030992834807545958], 'true': [0.004202668290122146, 0.01713285211715575], 'false': [nan, 0.030992834807545958], 'false,false': [nan, 0.030992834807545958], 'false,false,false': [nan, 0.030992834807545958]}
{'': [0.05158532735516651, 0.02354205107862609], 'true': [0.054235265132823035, 0.0], 'false': [nan, 0.02354205107862609], 'false,false': [0.008005935381345025, 0.0552681717583865], 'false,false,false': [0.03576105716912547, 0.11626825284003589], 'true,false': [0.0, nan]}
{'': [0.001371453319168479, 0.027192704175234134], 'false': [0.013694278428986337, 0.07974404410511292], 'false,false': [0.022097274493008245, 0.0013638393596535408], 'false,true': [0.0068682904967479474, 1.159424625114582e-05], 'false,true,true': [0.0068682904967479474, nan], 'false,false,false': [nan, 0.0013638393596535408]}
{'': [0.015218440676017483, 0.050103021035292294], 'false': [0.035881733971030984, 0.07562585398829691], 'false,false': [0.0, 0.08790314896817925], 'false,false,false': [nan, 0.08790314896817925], 'true': [0.003294097261955409, 1.0408061885462474e-05], 'true,true': [0.003851886516708941, 0.0], 'true,false': [8.388991041512789e-09, 4.371500817817909e-05], 'true,false,false': [0.0, 6.539864351189546e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.029
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.1037800731248184;  // std dev = 0.134, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | else return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.8444674378357556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.27314269829247306;  // std dev = 1.379, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7163598014530212;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.29385081624986004;  // std dev = 0.574, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.12005500634102738;  // std dev = 0.064, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.026378885071373245;  // std dev = 0.830, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03145719749512962;  // std dev = 1.096, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.09348528738269975;  // std dev = 1.118, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.7142420192439056;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6591136224747642;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10378048503558696;  // std dev = 0.002, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.11102556898861841;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.19081214329370674;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.20960073604903862;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4316142300272307;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5582631566508217;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0756994003345021;  // std dev = 0.986, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else return -0.09997925725457563;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.27685755215911234;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.07113971659852375;  // std dev = 0.094, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else return -0.11469131905472398;  // std dev = 0.224, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.48049745970341606;  // std dev = 0.259, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1154396904104957;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11487897068921274;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( tweets(A, D) )
%   | | then return 0.22496547052581728;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, G), tweets(A, G) )
%   | | | then return -0.08200714500889328;  // std dev = 0.000646, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.08405426113940476;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, H), follows(H, E) )
%   | | | then return -0.08308881321934079;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.03295808861340924;  // std dev = 0.597, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.04244673581391316;  // std dev = 0.464, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.2834178525507981;  // std dev = 0.516, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.18817290587704594;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18263470181116165;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17709649774527736;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.07692563303370274;  // std dev = 0.002, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, I), follows(I, G) )
%   | | | then return -0.07598794999735732;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1037550449984141;  // std dev = 0.524, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.004798312746419948;  // std dev = 0.185, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.13593975135874628;  // std dev = 0.634, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15895416515141725;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08283368242051665;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.24597651566605241;  // std dev = 0.230, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07269906042331577;  // std dev = 0.037, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.07786182311507825;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.13090503975923737;  // std dev = 0.953, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13089849230709732;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.18349837690909657;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15275275678562011;  // std dev = 0.160, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17772698885578656;  // std dev = 0.221, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07089320464169623;  // std dev = 0.010, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.07022016493082989;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.0021373164598973704;  // std dev = 0.167, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.06128396553400488;  // std dev = 0.405, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20518189311547375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.0182015588702573;  // std dev = 0.502, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.518', 'seconds']
Refined model CLL: -0.105138


******************************************
Best model found
******************************************
Results 

CLL : -0.110549 

AUC ROC : 0.995325 

AUC PR : 0.439387 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 4.029 

Total Inference Time : 2.6652002334594727 

Total revision time: 10.09174069595337
Best scored revision CLL: -0.105138


Results 

CLL : -0.110549 

AUC ROC : 0.995325 

AUC PR : 0.439387 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 10.113067953109741 

Total Inference Time : 2.6652002334594727 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.38
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7235576828693404;  // std dev = 0.145, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.041995942159073346;  // std dev = 0.252, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1334928440871636;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8397187297348978;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.08813927261730409;  // std dev = 1.712, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5723073055916398;  // std dev = 0.285, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.7278708793606161;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7589377959707345;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.693475462863528;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.55435766246445;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.55435766246445;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04419894822011849;  // std dev = 2.256, 85.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=8 */
%   | | | else return -0.10489155640280663;  // std dev = 0.959, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.45052689341053714;  // std dev = 1.748, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11625737640668303;  // std dev = 0.023, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.11019620119207121;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1441922459259235;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2620743300503095;  // std dev = 1.425, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return 0.45156626494942786;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31290107873529666;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6274337847133067;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08979941747100184;  // std dev = 1.127, 88.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=2 */
%   | | else return -0.10299586203251197;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.034391295247194996;  // std dev = 2.170, 112.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=39 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27471151308326414;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5164767884670861;  // std dev = 0.373, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10886212323311331;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.10760240102165583;  // std dev = 0.067, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2911245152889498;  // std dev = 0.502, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return -0.08393028126559672;  // std dev = 1.030, 113.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029715773592141104;  // std dev = 0.445, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1982368377465914;  // std dev = 0.010, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E) )
%   | | then return 0.22369164162813088;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.054031600423062834;  // std dev = 0.152, 83.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016357285084231853;  // std dev = 0.801, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.02652915911620315;  // std dev = 0.785, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1629591787839089;  // std dev = 0.185, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2440290271938976;  // std dev = 0.424, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08692357248350276;  // std dev = 0.018, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41105874791537544;  // std dev = 0.393, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09918493618563698;  // std dev = 0.052, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.0942295476216085;  // std dev = 1.909, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | else return 0.13632139666581;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08064335266408741;  // std dev = 0.014, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07954574715437088;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.011341053446029124;  // std dev = 0.230, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.023708043429364577;  // std dev = 0.595, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1976280710670032;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.039868544206458426;  // std dev = 0.636, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.927', 'seconds']
Parameter learned model CLL:-0.106185 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.31e-07, 0, 43], 'true,false,true': [7.3e-08, 74, 0], 'true,false,false': [0.258, 13, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.452, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.145, 0, 36], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 73, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.712, 14, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.285, 0, 29], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.256, 77, 8], 'false,false,false,false': [0.959, 26, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.748, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.023, 68, 0], 'false,true,false,false': [0.0, 19, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.052, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.425, 2, 29], 'true,false': [0.046, 0, 3], 'false,true,true': [2.11e-08, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.04, 0, 7], 'false,false,true,false': [1.127, 86, 2], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.17, 73, 39], 'false,true': [0.111, 0, 5], 'false,false,true': [0.373, 0, 6], 'false,false,false,true': [0.043, 13, 0], 'false,false,false,false': [0.067, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.502, 0, 43], 'true,false': [1.03, 110, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.445, 6, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.01, 0, 34], 'true,false,true': [0.042, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 75, 8], 'false,false,false,true': [0.801, 20, 4], 'false,false,false,false': [0.785, 7, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.185, 1, 32], 'false,true,true,true': [0.424, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.018, 69, 0], 'false,false,true': [0.393, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.052, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.909, 4, 39], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.014, 83, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.23, 3, 1], 'false,true': [0.595, 9, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.636, 4, 1]}]
{'': [0.22306392401375316, 0.2100000000000001], 'true': [1.2393187251629655e-15, 0.011234504132231475], 'false': [0.21301775147928975, 0.20408163265306126], 'false,true': [0.0, -9.25185853854297e-18], 'true,false': [7.201446646217232e-17, 0.06632653061224494], 'false,true,true': [0.0, nan]}
{'': [0.0005838443383826922, 0.08231438324674079], 'false': [0.06354362494736528, 0.12721223670957332], 'false,false': [-5.046468293750712e-18, 0.17333721598171975], 'false,false,false': [0.0, 0.15421664333111984], 'false,true': [nan, 0.06354362494736528], 'false,false,true': [nan, -5.046468293750712e-18]}
{'': [0.004624380593020394, 0.07616062532713958], 'false': [nan, 0.07616062532713955], 'false,false': [0.0, 0.05431378124688698], 'false,false,false': [0.05986465467897888, 0.034043225594600435], 'true': [0.0034790122105733327, 0.0010713292639598082], 'true,true': [0.00279231063274302, 0.0], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.05872807935746292, 0.00013964488417802216], 'false': [1.2598934961897493e-05, 0.00019174289396879453], 'false,false': [nan, 0.00019174289396879453], 'false,false,false': [nan, 0.00019174289396879453], 'false,true': [nan, 1.2598934961894942e-05], 'false,true,false': [8.096018088137118e-06, -1.460819769243627e-18]}
{'': [0.06266001469885595, 0.05150925874673252], 'true': [0.0654863513453631, 0.0007156243963358788], 'false': [4.9343245538895844e-17, 0.04585908266796729], 'false,false': [0.04849631889206156, -2.3129646346357427e-18], 'false,false,true': [0.000227507236424935, 0.014430996463905594], 'false,true': [4.9343245538895844e-17, nan]}
{'': [0.042027281291162254, 0.056875238744145636], 'false': [0.0024753550420069104, 0.05450761712782589], 'false,false': [0.02314997752867476, 0.00019447001283382705], 'true': [nan, 0.04202728129116225], 'true,false': [nan, 0.042027281291162254], 'false,false,false': [0.00014540467491242366, 0.00022573734003878825]}
{'': [0.036511141144720934, 0.019774470402500514], 'true': [0.005872128863055385, 0.009396886121551595], 'false': [nan, 0.019774470402500514], 'false,false': [nan, 0.019774470402500514], 'false,false,false': [nan, 0.019774470402500514]}
{'': [8.61096881602087e-05, 0.02788680736200894], 'false': [nan, 0.02788680736200893], 'false,false': [0.022972346257492903, 0.03850337846569329], 'false,false,false': [0.026738477665173593, 0.06853881301532855], 'true': [2.891291504397382e-06, 0.000888872448475235], 'true,false': [0.000888872448475235, nan]}
{'': [0.03415074900411094, 0.024506433872409257], 'false': [0.016806109295250494, 0.04947898708049017], 'false,false': [0.030846390131581324, 0.00014300682434219207], 'false,true': [0.01381797667098689, 4.638340364986241e-06], 'false,true,true': [0.01381797667098689, nan], 'false,false,false': [nan, 0.00014300682434219207]}
{'': [0.03388576540415481, 0.04142919720808693], 'false': [0.027268805662477198, 0.07087687832759214], 'false,false': [0.0, 0.08090424260723342], 'false,false,false': [nan, 0.08090424260723342], 'true': [0.07769695796142272, 0.0007847141018926642], 'true,true': [0.08477379695732692, 0.0], 'true,false': [2.2311944440256012e-06, 0.007772863918838717], 'true,false,false': [0.0, 0.013219787715753082]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.711
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7226326366281935;  // std dev = 0.112, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return 0.018276249827612674;  // std dev = 0.337, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.8480810227596002;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1350235107511939;  // std dev = 1.708, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.563305922638829;  // std dev = 0.247, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8058982229907417;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7080402712672875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7050676650285173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5545861792324126;  // std dev = 1.29e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11725582059484377;  // std dev = 0.112, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12772288573788515;  // std dev = 1.453, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.02728710035338138;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.41481691876282945;  // std dev = 4.21e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.4170508310124603;  // std dev = 0.000732, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.4165487954954995;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5784215755946092;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7002907908990222;  // std dev = 0.208, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10114637066191089;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.11366448248196062;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.16085885316614773;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.16632603999510637;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.26625259827747116;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.3188841772248394;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4027958686928339;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.42687160936816665;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3134806359870474;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3202945324570411;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.41674623997292287;  // std dev = 0.293, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0901778362045983;  // std dev = 1.052, 103.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=2 */
%   | | else return -0.09231440218762357;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.2606576413013248;  // std dev = 0.023, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.06942136902443774;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3378315619514151;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05100596149881015;  // std dev = 0.100, 68.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=7 */
%   | | else return -0.06369265941918119;  // std dev = 0.099, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26474694803993887;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.48289718769915185;  // std dev = 0.342, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10754746077293313;  // std dev = 0.080, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1019051190973514;  // std dev = 0.078, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(D, A), follows(C, A) )
%   | | | then return 0.18656063611142612;  // std dev = 0.992, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.016076317534932924;  // std dev = 1.178, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.26448777843605115;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3272103364944057;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08613065317889301;  // std dev = 0.011, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.25568776978088037;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.11532014907583348;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0772780906833616;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.05474199651161954;  // std dev = 0.687, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.19482196931005263;  // std dev = 0.023, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.16894147979462115;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1990901311396095;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(F, A), follows(G, A) )
%   | | | then return -0.07860546543358313;  // std dev = 0.871, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | | else return -0.03930784214741449;  // std dev = 0.566, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.241970506427116;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09324153545124914;  // std dev = 0.066, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, I) )
%   | | then return -0.017249815143245743;  // std dev = 0.441, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.0472069421906938;  // std dev = 0.680, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.10776246446509292;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.1661550025660696;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2372991453271565;  // std dev = 0.177, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.17398263370427047;  // std dev = 0.855, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.20077896774370474;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14652886128392284;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07109603723161434;  // std dev = 0.003, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3278212180026447;  // std dev = 0.342, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11410142408889744;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14762102207283231;  // std dev = 0.086, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.19411983460944393;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1291361727817828;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.06706007370953573;  // std dev = 0.003, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06626434777108407;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.03841913163838671;  // std dev = 0.257, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, H) )
%   | then return 0.026212648435441382;  // std dev = 0.150, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2023702239848547;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.06982814036599132;  // std dev = 0.159, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.628', 'seconds']
Refined model CLL: -0.099117


******************************************
Best model found
******************************************
Results 

CLL : -0.098048 

AUC ROC : 0.994424 

AUC PR : 0.362405 

Precision : 0.337995 

Recall : 0.929487 

F1 : 0.495726 

Total Learning Time : 10.711 

Total Inference Time : 7.727524518966675 

Total revision time: 23.607144752502442
Best scored revision CLL: -0.099117


Results 

CLL : -0.098048 

AUC ROC : 0.994424 

AUC PR : 0.362405 

Precision : 0.337995 

Recall : 0.929487 

F1 : 0.495726 

Total Learning Time : 23.628472009658815 

Total Inference Time : 7.727524518966675 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.745
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.0918510649004878;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6666862461286543;  // std dev = 1.695, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.027954094212313086;  // std dev = 0.270, 130.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1310335562332508;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7837772174852773;  // std dev = 0.091, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.020393559601307006;  // std dev = 2.100, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5254504486244217;  // std dev = 1.657, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | else return 0.7250806601647031;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7729711842057616;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.2657112336494969;  // std dev = 0.898, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5683604184043815;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3683604184043815;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015949379714140056;  // std dev = 3.054, 119.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=15 */
%   | | | else return -0.09993119884038264;  // std dev = 0.966, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49062420662161205;  // std dev = 1.716, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11983822952567416;  // std dev = 0.019, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return -0.1120732716462432;  // std dev = 1.05e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1319403433040547;  // std dev = 0.044, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3412084940214984;  // std dev = 0.349, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.4571817352631625;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33131998119862416;  // std dev = 0.069, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5480133923566705;  // std dev = 0.942, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.0902345996415012;  // std dev = 1.340, 126.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=3 */
%   | | else return -0.10352361222194807;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03397475938523612;  // std dev = 2.969, 162.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=60 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2948805303474214;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5169210378582351;  // std dev = 0.435, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1017258722636016;  // std dev = 0.043, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.10581630943837365;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.284566267413527;  // std dev = 1.056, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return -0.08270445058292991;  // std dev = 1.264, 161.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029025188273133253;  // std dev = 0.503, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17968574513165378;  // std dev = 0.993, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.22348399596006902;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04357925470932319;  // std dev = 0.175, 117.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.00851499525555353;  // std dev = 1.063, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return -0.028136638141311676;  // std dev = 0.878, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1732149074458876;  // std dev = 0.154, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2923337697829048;  // std dev = 0.525, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09063085632980224;  // std dev = 0.029, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.30464763927714744;  // std dev = 0.971, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09086845615657028;  // std dev = 0.026, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15712571540664663;  // std dev = 1.579, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else return 0.15080690046943385;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08572407362466941;  // std dev = 0.235, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08031071609276151;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.03950759241956829;  // std dev = 0.242, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.09915312200780528;  // std dev = 0.737, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2979747947128176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00540212286149315;  // std dev = 0.706, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.019', 'seconds']
Parameter learned model CLL:-0.108372 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 65], 'true,false,true': [8.69e-08, 103, 0], 'true,false,false': [0.218, 19, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.416, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.695, 3, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 115, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 20, 0], 'false,false,false,true': [0.091, 0, 2], 'false,false,false,false': [2.1, 32, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.657, 3, 45], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.898, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.894, 1, 4], 'false,false,false,true': [3.054, 104, 15], 'false,false,false,false': [0.966, 28, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.716, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 89, 0], 'false,true,false,false': [1.05e-08, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.044, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.349, 0, 45], 'true,false': [0.14, 0, 4], 'false,true,true': [0.069, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.942, 1, 13], 'false,false,true,false': [1.34, 123, 3], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.969, 102, 60], 'false,true': [0.098, 0, 6], 'false,false,true': [0.435, 0, 9], 'false,false,false,true': [0.043, 24, 0], 'false,false,false,false': [0.047, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.056, 1, 66], 'true,false': [1.264, 156, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.503, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 49], 'true,false,true': [0.044, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.175, 102, 15], 'false,false,false,true': [1.063, 31, 7], 'false,false,false,false': [0.878, 16, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.154, 1, 49], 'false,true,true,true': [0.525, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 103, 0], 'false,false,true': [0.971, 1, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.026, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.579, 2, 60], 'true,true,false': [0.01, 0, 5], 'true,false,true': [0.235, 98, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.242, 7, 1], 'false,true': [0.737, 7, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.706, 7, 1]}]
{'': [0.2278180172023541, 0.22633136094674564], 'true': [-8.745141363201234e-16, 0.008063983078855188], 'false': [0.24221453287197234, 0.17283950617283952], 'false,true': [-2.5376526277146434e-16, -1.1102230246251566e-17], 'true,false': [7.329627735389383e-17, 0.04750000000000004], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.05318292558743907, 0.08116373895736503], 'false': [0.07286711443801291, 0.09846185129692712], 'false,false': [0.0, 0.13482165818011], 'false,false,false': [0.004134979372758085, 0.11309648504096473], 'false,true': [nan, 0.07286711443801291], 'false,false,true': [nan, 0.0]}
{'': [0.07272037017208519, 0.08802105994384872], 'false': [nan, 0.08802105994384865], 'false,false': [0.08264462809917349, 0.07043643743619313], 'false,false,true': [-7.401486830834377e-17, 0.16], 'true': [0.056828267101033225, 0.2500465883714788], 'true,false': [0.0, 0.26906728680238573], 'false,false,false': [0.07838398648599226, 0.032153131211364136], 'true,true': [0.057198878692312584, 0.0]}
{'': [0.037758246015920024, 5.4521234044398e-05], 'false': [1.1511896531817027e-05, 6.0146675473431166e-05], 'false,false': [nan, 6.0146675473431166e-05], 'false,false,false': [nan, 6.0146675473431166e-05], 'false,true': [nan, 1.1511896531817027e-05], 'false,true,false': [4.040914109196987e-06, 6.530723674265627e-18]}
{'': [0.003896649920068868, 0.05785319782957187], 'false': [0.00047647650057354164, 0.05343718442306514], 'false,false': [0.05582587507434778, 1.982541115402065e-18], 'false,false,true': [0.06332755564937763, 0.014256305081485968], 'true': [0.002709444068651143, 0.004900865324348136], 'false,true': [0.00047647650057354164, nan]}
{'': [0.05442964906378784, 0.05935070606324208], 'false': [0.0016040314254790282, 0.057059233167895594], 'false,false': [0.02097735261935707, 9.402976285109135e-05], 'true': [nan, 0.0544296490637879], 'true,false': [nan, 0.05442964906378784], 'false,false,false': [7.767002311985054e-05, 0.00010380304757513583]}
{'': [0.0398883220833766, 0.02301106229920216], 'true': [0.016654339925222153, 0.00991904632270866], 'false': [nan, 0.02301106229920216], 'false,false': [nan, 0.02301106229920216], 'false,false,false': [nan, 0.02301106229920216]}
{'': [0.01908655493916339, 0.03190170402085954], 'false': [nan, 0.031901704020859525], 'false,false': [0.030613222624640068, 0.03403442107598866], 'false,false,false': [0.029745294622945243, 0.0428279875693553], 'true': [0.019737900526119578, 0.000958408750231371], 'true,false': [0.000958408750231371, nan]}
{'': [0.02367991638357729, 0.02890945608264414], 'false': [0.021547513804342965, 0.05325233831054893], 'false,false': [0.11788359312553759, 2.3380673570063244e-05], 'false,true': [0.01449317401205073, 8.011324631707494e-06], 'false,true,true': [0.01449317401205073, nan], 'false,false,false': [nan, 2.3380673570063244e-05]}
{'': [0.028003148845880912, 0.0494932451598735], 'false': [0.0388345413262335, 0.06379041889671354], 'false,false': [0.0, 0.06225324700166686], 'false,false,false': [nan, 0.06225324700166686], 'true': [0.03720499057612324, 0.001156071587196656], 'true,true': [0.04020082539813272, 1.9691019368775486e-05], 'true,false': [0.000562626986561461, 0.004587976252415571], 'true,false,false': [-2.3129646346357427e-18, 0.007315432055374439]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.859
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7748156017661789;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7264990878939792;  // std dev = 0.160, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7249760169521751;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.024570717686043214;  // std dev = 2.400, 76.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.13294298333209426;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03617440836720939;  // std dev = 1.700, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.21915332940378024;  // std dev = 1.452, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5590975335627958;  // std dev = 0.092, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.5744934565575748;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7592707015923194;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7600508727782291;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5577289290470523;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7312266042364061;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12046437629655918;  // std dev = 0.039, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16038859969147512;  // std dev = 1.641, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.06699468274612563;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.42052577980240685;  // std dev = 0.092, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.3280261336311879;  // std dev = 0.958, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.5107760626243446;  // std dev = 0.234, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5019719285445038;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.6408480853818336;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6887985276136558;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.1077609222269717;  // std dev = 0.004, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.13758406044004812;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.17804743858164998;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.2820053463442696;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.3177717416221116;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.3360519822033832;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.35701906538236905;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10489961643321358;  // std dev = 1.089, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3421867654920635;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.033575621936946874;  // std dev = 2.135, 114.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=15 */
%   | | | else return -0.0879736891216664;  // std dev = 0.809, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | else return -0.09653317319486118;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.19097520340793253;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.26647331868750146;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.26747669680244945;  // std dev = 0.017, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, F) )
%   | | then return -0.03531987713609199;  // std dev = 0.165, 101.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=13 */
%   | | else return -0.05579470651880313;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2807964780338756;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.49928758012212465;  // std dev = 0.123, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3154786012578981;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11487856304295997;  // std dev = 0.023, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.20370521430984595;  // std dev = 0.158, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.24730469996902285;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return -0.05850001576456593;  // std dev = 0.119, 103.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=8 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.39645652376479873;  // std dev = 0.299, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08972613639364344;  // std dev = 0.026, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3215987362868999;  // std dev = 0.282, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10575320024694222;  // std dev = 0.105, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09004319334728415;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.061835658131258325;  // std dev = 0.671, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1917973591926752;  // std dev = 0.016, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.16387742365000746;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20999899067452932;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(H, A), follows(H, G) )
%   | | then if ( follows(G, A) )
%   | | | then return -0.06949797605963028;  // std dev = 0.767, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.022017770055115366;  // std dev = 0.957, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | else if ( tweets(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.3254931399476646;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09922484603176017;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, J) )
%   | | then return -0.053503385367263026;  // std dev = 0.141, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else return -0.07219052388958738;  // std dev = 5.89e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.12499183872372727;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.18019172265060823;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15378714057629767;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.23114786722856845;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.24834081909116226;  // std dev = 1.031, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1426422574491508;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0802169642021204;  // std dev = 0.007, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.30846211725800454;  // std dev = 0.137, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11094293953010569;  // std dev = 0.017, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14447327889024195;  // std dev = 0.179, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else return 0.1260721615653771;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07258958144430636;  // std dev = 0.023, 139.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.027936178438960846;  // std dev = 0.951, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.08728482149138399;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.03827369559660529;  // std dev = 0.114, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3435770070768055;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07125315036689477;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05143513514363035;  // std dev = 0.596, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.104', 'seconds']
Refined model CLL: -0.105182


******************************************
Best model found
******************************************
Results 

CLL : -0.098182 

AUC ROC : 0.994753 

AUC PR : 0.41916 

Precision : 0.324519 

Recall : 0.865385 

F1 : 0.472028 

Total Learning Time : 10.859 

Total Inference Time : 7.041041135787964 

Total revision time: 24.79326215171814
Best scored revision CLL: -0.105182


Results 

CLL : -0.098182 

AUC ROC : 0.994753 

AUC PR : 0.41916 

Precision : 0.324519 

Recall : 0.865385 

F1 : 0.472028 

Total Learning Time : 24.81458940887451 

Total Inference Time : 7.041041135787964 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.019
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.994, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7239670690809314;  // std dev = 0.141, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021695283968649566;  // std dev = 0.278, 147.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10004805069018552;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7595551847189356;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.046070761744277565;  // std dev = 2.715, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5602647321701995;  // std dev = 0.928, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.7261768369949924;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.815417375171118;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6003809572260613;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5571611795976308;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5571611795976308;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.037059241121837644;  // std dev = 3.298, 165.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=17 */
%   | | | else return -0.022422186921303447;  // std dev = 2.036, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4995720163575171;  // std dev = 1.796, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1194764878741151;  // std dev = 0.018, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return -0.1207192575287285;  // std dev = 0.001, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1379358777572119;  // std dev = 0.092, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2964924812366812;  // std dev = 1.409, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.21498979183586617;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30426189121226693;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.569711935064956;  // std dev = 0.986, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.08438016962948636;  // std dev = 1.983, 181.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=6 */
%   | | else return -0.1083675067578401;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03302911600828991;  // std dev = 3.075, 211.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=75 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2595805186683666;  // std dev = 0.149, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47019334562790416;  // std dev = 1.452, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1054551774777132;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.11586539355358087;  // std dev = 0.105, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2927838892596195;  // std dev = 0.871, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else return -0.07894600996237254;  // std dev = 1.827, 207.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0165800356892394;  // std dev = 0.659, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16103695792021624;  // std dev = 1.387, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.23335429602789742;  // std dev = 0.063, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05049994810773091;  // std dev = 0.152, 174.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.014329537747363095;  // std dev = 1.180, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0.07915875961753496;  // std dev = 1.540, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16206689913889052;  // std dev = 0.173, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27902552019307714;  // std dev = 0.616, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09069173558505272;  // std dev = 0.029, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48940567029790266;  // std dev = 0.553, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10029198769501967;  // std dev = 0.107, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17431777844949112;  // std dev = 1.258, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | else return 0.14106650953709873;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08399525970437234;  // std dev = 0.005, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07919318852972199;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.030868278684456237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0014646559490514102;  // std dev = 0.820, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25906495034478616;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05274613461481213;  // std dev = 1.223, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.740', 'seconds']
Parameter learned model CLL:-0.110317 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 84], 'true,false,true': [0.0, 137, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,false': [0.452, 15, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.141, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.278, 129, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.098, 0, 3], 'false,false,false,false': [2.715, 43, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.928, 1, 58], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.135, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.298, 148, 17], 'false,false,false,false': [2.036, 39, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.796, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.018, 131, 0], 'false,true,false,false': [0.001, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.092, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.409, 2, 60], 'true,false': [0.867, 1, 4], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.986, 1, 16], 'false,false,true,false': [1.983, 175, 6], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.075, 136, 75], 'false,true': [0.149, 0, 10], 'false,false,true': [1.452, 1, 15], 'false,false,false,true': [0.033, 18, 0], 'false,false,false,false': [0.105, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.871, 0, 85], 'true,false': [1.827, 199, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.659, 21, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.387, 2, 65], 'true,false,true': [0.063, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 156, 18], 'false,false,false,true': [1.18, 41, 9], 'false,false,false,false': [1.54, 15, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.173, 2, 64], 'false,true,true,true': [0.616, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.029, 161, 0], 'false,false,true': [0.553, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.107, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.258, 1, 76], 'true,true,false': [0.007, 0, 8], 'true,false,true': [0.005, 134, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.49, 13, 2], 'false,true': [0.82, 23, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.223, 14, 5]}]
{'': [0.22823165815641042, 0.21957815035154085], 'true': [0.01162629757785438, 0.012420394762865253], 'false': [0.23140495867768604, 0.20408163265306134], 'false,true': [-2.220446049250313e-16, -1.1895246692412391e-17], 'true,false': [-6.807206866314829e-17, 0.0826446280991736], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.00029811878311413305, 0.09429156971868993], 'false': [0.07714148809620074, 0.12267859195764863], 'false,false': [0.03443877551020406, 0.1549117943611308], 'false,false,false': [0.003213096974763019, 0.1365468670437228], 'false,true': [nan, 0.07714148809620074], 'false,false,true': [nan, 0.03443877551020406]}
{'': [0.015992334752967706, 0.08796115606813018], 'false': [nan, 0.08796115606813021], 'false,false': [0.0, 0.07191502465997526], 'false,false,false': [0.06593329823183518, 0.09417735927418223], 'true': [0.014807208135551047, 0.01616548285474293], 'true,false': [0.003616480254038934, 0.006035220171489201], 'true,true': [0.014599397322843965, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.03194937073916757, 8.627666306116675e-05], 'false': [2.249274494453984e-06, 0.00029385103007206374], 'false,false': [nan, 0.00029385103007206374], 'false,false,false': [nan, 0.00029385103007206374], 'false,true': [nan, 2.249274494453984e-06], 'false,true,false': [2.5411342408094025e-06, 4.5928727785883365e-08]}
{'': [0.04130640581932051, 0.058788608264950366], 'false': [-1.586032892321652e-17, 0.05560935975460791], 'false,false': [0.058360689515128995, 2.523234146875356e-18], 'false,false,true': [0.05721164993795814, 0.021735175085649684], 'true': [0.03200586462162698, 0.15048615130455475], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.0448006196105306, 0.085406548991147], 'false': [0.0022093204113258326, 0.09016292817784799], 'false,false': [0.13179504610077106, 0.00024815895058200445], 'true': [nan, 0.04480061961053071], 'true,false': [nan, 0.0448006196105306], 'false,false,false': [6.071877502192908e-05, 0.0003057548387799335]}
{'': [0.04254771636074062, 0.01552894821575882], 'true': [0.008933480077911818, 0.016126125859769185], 'false': [nan, 0.01552894821575882], 'false,false': [nan, 0.01552894821575882], 'false,false,false': [nan, 0.01552894821575882]}
{'': [0.028080969159854495, 0.03303711735680816], 'false': [nan, 0.033037117356808095], 'false,false': [0.022970034931407698, 0.05481573266877466], 'false,false,false': [0.02782834500056032, 0.11291644453380753], 'true': [0.0287086339032393, 0.0019759911956563833], 'true,false': [0.0019759911956563833, nan]}
{'': [0.029781843340916093, 0.029164122327674086], 'false': [0.01794934200944737, 0.0680488505061562], 'false,false': [0.027848493801141648, 0.0003091286077420317], 'false,true': [0.015191335935800226, 5.1778516805612365e-06], 'false,true,true': [0.015191335935800226, nan], 'false,false,false': [nan, 0.0003091286077420317]}
{'': [0.021720732338569755, 0.04421990852405419], 'false': [0.02169123489025351, 0.07683304864510201], 'false,false': [0.0, 0.07874852062442277], 'false,false,false': [nan, 0.07874852062442277], 'true': [0.01872498678727466, 0.0017282485968698315], 'true,true': [0.020565708194725415, 6.457239503699502e-06], 'true,false': [1.5211014489605254e-07, 0.009471035552014485], 'true,false,false': [-3.469446951953614e-18, 0.016009954255158044]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.801
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.108, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.12130682983635446;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.6996195348206093;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.7218417570428319;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7336294543120385;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.7415822187344463;  // std dev = 0.118, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44873403478914303;  // std dev = 0.891, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7218417570428318;  // std dev = 5.96e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12772154256347046;  // std dev = 0.107, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.025063893623430138;  // std dev = 1.783, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.12276854221656512;  // std dev = 1.973, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5421249465900605;  // std dev = 0.989, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.4571980175099801;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5528106798959023;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5576279641916204;  // std dev = 0.818, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5568541725574805;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4297758552834319;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.06743106060989382;  // std dev = 0.170, 160.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18379881479742674;  // std dev = 1.623, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.0834491499000796;  // std dev = 1.929, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4323282076599215;  // std dev = 0.167, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.3297055486443255;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), recursion_accounttype(G, B) )
%   | | | then return 0.3425232250455621;  // std dev = 0.845, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.513748801722426;  // std dev = 1.195, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.7461616413926959;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10679862052513066;  // std dev = 0.066, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.10555194124530008;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.1655217474646528;  // std dev = 0.081, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.31372701550128856;  // std dev = 0.137, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(G, E) )
%   | | | then return 0.3655264894084287;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.15071914695316035;  // std dev = 0.924, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.44333286761938906;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.321709083885107;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.24330504560500904;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return -0.060044070136472553;  // std dev = 1.747, 154.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=11 */
%   | | | else return 0.1723100451379801;  // std dev = 1.896, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | else return -0.09588540912767808;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.26372223556067415;  // std dev = 0.023, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.18423379610982743;  // std dev = 1.360, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.0645831767557217;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04610347405083411;  // std dev = 0.156, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | | else return -0.06440165828964718;  // std dev = 0.092, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3124559598906298;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.13336488659756607;  // std dev = 1.004, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.560644483829165;  // std dev = 0.303, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13556168049400388;  // std dev = 0.036, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, C) )
%   | | | then return 0.2145176161254456;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.17312391158931076;  // std dev = 0.971, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.030934759008869512;  // std dev = 0.645, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2643380562758238;  // std dev = 0.046, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(G, F) )
%   | | then return -0.05416358922409564;  // std dev = 0.131, 175.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=14 */
%   | | else return 0.0625320094067907;  // std dev = 0.247, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.12562981455069488;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.025329501504059947;  // std dev = 1.720, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
%   | | | else return -0.07761160817625411;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20000362681957234;  // std dev = 0.026, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.2770262456694655;  // std dev = 0.000366, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06517704208257867;  // std dev = 0.970, 105.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=3 */
%   | | | else return -0.0820732928720324;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, H), follows(A, E) )
%   | | | then return 0.055939949010526915;  // std dev = 1.429, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | | else return -0.05405809446165895;  // std dev = 0.598, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.25617104306321115;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0395049977052463;  // std dev = 1.273, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.08245075962381138;  // std dev = 1.149, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.07980103788312494;  // std dev = 1.644, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.16813069624027713;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.20983541727680202;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.04509647647708004;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.2068988983226166;  // std dev = 0.078, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.47020426826170714;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08036140847691103;  // std dev = 0.008, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.42576955742731054;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.15027414219605614;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16931844777948402;  // std dev = 0.139, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | else return 0.16369679603098045;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07022095834654807;  // std dev = 0.035, 174.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2644477626929838;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11136530696508308;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.07235031572982044;  // std dev = 0.133, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.24491098087196017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.05183326704482849;  // std dev = 0.592, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.11240304704604752;  // std dev = 0.757, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.895', 'seconds']
Refined model CLL: -0.109985


******************************************
Best model found
******************************************
Results 

CLL : -0.107086 

AUC ROC : 0.994493 

AUC PR : 0.431235 

Precision : 0.327231 

Recall : 0.916667 

F1 : 0.482293 

Total Learning Time : 11.801 

Total Inference Time : 7.740260124206543 

Total revision time: 28.149811811447144
Best scored revision CLL: -0.109985


Results 

CLL : -0.107086 

AUC ROC : 0.994493 

AUC PR : 0.431235 

Precision : 0.327231 

Recall : 0.916667 

F1 : 0.482293 

Total Learning Time : 28.171139068603516 

Total Inference Time : 7.740260124206543 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.429
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.11529179224236952;  // std dev = 0.437, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7129622111833808;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033913170589758165;  // std dev = 0.263, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09911851528392392;  // std dev = 0.995, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5690948350744992;  // std dev = 0.818, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10629422418849371;  // std dev = 3.243, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5761001406947441;  // std dev = 0.394, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.1458529184265959;  // std dev = 0.826, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.4592229743261864;  // std dev = 0.881, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6323871433135727;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.561668531508845;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.561668531508845;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0442627564893836;  // std dev = 3.664, 221.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=21 */
%   | | | else return -7.317429339711468E-4;  // std dev = 2.892, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48902809204874076;  // std dev = 2.538, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11761796442664701;  // std dev = 0.026, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | | else return -0.12184293472585285;  // std dev = 0.003, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1525382061276044;  // std dev = 0.128, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29985949556222635;  // std dev = 1.538, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.3093754415333895;  // std dev = 0.831, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30943540565929256;  // std dev = 3.33e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6395348764350482;  // std dev = 0.214, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08393523053702136;  // std dev = 2.353, 267.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=9 */
%   | | else return -0.10721429726662515;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03366959324070217;  // std dev = 3.368, 263.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2647348529602462;  // std dev = 0.216, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5043083966350904;  // std dev = 1.353, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11581157463842613;  // std dev = 0.101, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.11410742841206166;  // std dev = 0.112, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25918088048739485;  // std dev = 2.240, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07495867459981795;  // std dev = 2.101, 251.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022412483345335153;  // std dev = 0.644, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15931286750220167;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return -0.06191770916818495;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04418389777065663;  // std dev = 0.157, 199.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019752041925363673;  // std dev = 1.479, 78.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=13 */
%   | | | else return 0.10769170467152288;  // std dev = 1.693, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11440023585101863;  // std dev = 0.282, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22638567579370752;  // std dev = 1.538, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09076792344915278;  // std dev = 0.035, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46333686596082646;  // std dev = 0.627, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10574637017297309;  // std dev = 0.132, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17044443421013977;  // std dev = 1.882, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.04492180775080208;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08397416648940241;  // std dev = 0.016, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08099187105316447;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.008722970623453865;  // std dev = 0.629, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01695633346286194;  // std dev = 1.022, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2755549265368582;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06291864183957446;  // std dev = 1.369, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.956', 'seconds']
Parameter learned model CLL:-0.109265 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 160, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.437, 26, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 182, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.995, 23, 1], 'false,false,false,true': [0.818, 1, 4], 'false,false,false,false': [3.243, 47, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.394, 0, 70], 'true,true,false': [0.826, 1, 1], 'true,false,true': [0.881, 1, 2], 'true,false,false': [0.139, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.664, 200, 21], 'false,false,false,false': [2.892, 64, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.538, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.026, 163, 0], 'false,true,false,false': [0.003, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.128, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.538, 2, 73], 'true,false': [0.831, 1, 4], 'false,true,true': [3.33e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.214, 0, 23], 'false,false,true,false': [2.353, 258, 9], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.368, 172, 91], 'false,true': [0.216, 0, 13], 'false,false,true': [1.353, 1, 22], 'false,false,false,true': [0.101, 41, 0], 'false,false,false,false': [0.112, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.24, 4, 107], 'true,false': [2.101, 240, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.644, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [0.824, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 177, 22], 'false,false,false,true': [1.479, 65, 13], 'false,false,false,false': [1.693, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.282, 7, 77], 'false,true,true,true': [1.538, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 219, 0], 'false,false,true': [0.627, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.132, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.882, 3, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.016, 173, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.629, 12, 2], 'false,true': [1.022, 28, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.369, 17, 8]}]
{'': [0.2313190694555885, 0.20829200555445368], 'true': [0.01868480725623786, 0.010751417769376017], 'false': [0.22222222222222174, 0.19102040816326543], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true,false': [-1.4432899320127036e-16, 0.07638888888888894], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012183620122017949, 0.09806537151945804], 'false': [0.06930898869937117, 0.15251558580313435], 'false,false': [0.04122614114848116, 0.17649034312983589], 'false,false,false': [0.1339205746923772, 0.1642954971994138], 'false,true': [nan, 0.06930898869937117], 'false,false,true': [nan, 0.04122614114848116]}
{'': [0.02590014513497814, 0.08813429577070671], 'false': [nan, 0.08813429577070668], 'false,false': [0.0, 0.07397423556676554], 'false,false,false': [0.06075810572216137, 0.11150295484153444], 'true': [0.01663879684703061, 0.12112719132577052], 'true,false': [0.25901113228253353, 0.004863165856301699], 'true,true': [0.002221560999409381, 0.3412713979184684], 'false,false,true': [0.0, 0.0]}
{'': [0.04917863632101408, 0.00024216179268883418], 'false': [6.293658923610294e-06, 0.00036992954610192243], 'false,false': [nan, 0.00036992954610192243], 'false,false,false': [nan, 0.00036992954610192243], 'false,true': [nan, 6.293658923612493e-06], 'false,true,false': [4.288482650970528e-06, 2.7025276054348507e-07]}
{'': [0.03820200751197487, 0.05843404594739867], 'false': [6.530723674265627e-17, 0.05559292132709293], 'false,false': [0.05746386962473805, -5.046468293750712e-18], 'false,false,true': [0.0019957535713107898, 0.020730274010533376], 'true': [0.03153602492061541, 0.13810685273137407], 'false,true': [6.530723674265627e-17, nan]}
{'': [0.04311904668433645, 0.08265474081504236], 'false': [0.0035803021293763057, 0.08645583619148717], 'false,false': [0.07955962428628097, 0.00029665379213560626], 'true': [nan, 0.0431190466843361], 'true,false': [nan, 0.04311904668433645], 'false,false,false': [0.0002482119634175025, 0.00035027730601244295]}
{'': [0.04978929623262267, 0.019737362010426935], 'true': [0.0451939754361198, 0.017586501238593743], 'false': [nan, 0.019737362010426935], 'false,false': [nan, 0.019737362010426935], 'false,false,false': [nan, 0.019737362010426935]}
{'': [0.04314636254755084, 0.03450366617729566], 'true': [0.03482425322253566, 0.22615573199148276], 'true,false': [0.22615573199148276, nan], 'false': [nan, 0.034503666177295354], 'false,false': [0.024547326824439403, 0.05123130359601196], 'false,false,false': [0.02806217367640409, 0.10609892780847788]}
{'': [0.07957056962375803, 0.03268916889242796], 'false': [0.021061109214297997, 0.07337634224127215], 'false,false': [0.02309721956275838, 0.00041305292630349925], 'false,true': [0.06961496153012436, 5.527553707980122e-06], 'false,true,true': [0.06961496153012436, nan], 'false,false,false': [nan, 0.00041305292630349925]}
{'': [0.028759131671846256, 0.04558598846387954], 'false': [0.026136014348712655, 0.07373253617383255], 'false,false': [0.0, 0.07494283032963725], 'false,false,false': [nan, 0.07494283032963725], 'true': [0.04288397763483508, 0.002267399875893724], 'true,true': [0.036527143613866025, 0.09026185468435369], 'true,false': [1.5352985116670587e-06, 0.012900802241406857], 'true,false,false': [0.0, 0.02825828798247245]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.153
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8346195233348062;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.13228168691005776;  // std dev = 0.097, 209.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7104991417593071;  // std dev = 0.116, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.7520211270755985;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.1264982469079464;  // std dev = 7.60e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then return 0.43748285917132074;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7829988294474867;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7299943122908651;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12649824690794673;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05724034541525108;  // std dev = 2.116, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.14085227356944963;  // std dev = 3.063, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5411943118379672;  // std dev = 0.164, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return 0.6589648492783656;  // std dev = 0.255, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.40305607822341855;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5658723024183294;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6951967056188649;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5160316010949628;  // std dev = 0.793, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11534353735274357;  // std dev = 0.099, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13682364609650116;  // std dev = 1.958, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.06405591769448449;  // std dev = 2.409, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.4148997189587128;  // std dev = 0.996, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.32122576019438;  // std dev = 0.940, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.45386669768520704;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.5930653517452114;  // std dev = 0.170, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18356936949637992;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4966729795635547;  // std dev = 0.176, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7100635930718786;  // std dev = 0.205, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.10327728524282911;  // std dev = 0.006, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.1568445955685762;  // std dev = 0.147, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.291842468605266;  // std dev = 1.387, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.16553013282091117;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.34351579617040645;  // std dev = 0.031, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.41648477119584665;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3416722544083803;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4091835690758124;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.401526496984283;  // std dev = 0.380, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07718629635370604;  // std dev = 2.079, 221.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=9 */
%   | | else return -0.11815174353077143;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.2585485176138357;  // std dev = 0.125, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.03965243901693453;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2811527844696809;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.05004484557428255;  // std dev = 0.122, 191.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=22 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.27662120092412856;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20726899831989729;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.15593903898807177;  // std dev = 0.882, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4504437071497203;  // std dev = 1.159, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12371656591752785;  // std dev = 0.027, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, E) )
%   | then return 0.2339721451636606;  // std dev = 0.024, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.22603709952511064;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05376895465705652;  // std dev = 1.181, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.22450579886735836;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2769036029730734;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.10593582251433231;  // std dev = 0.773, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.06200974863960816;  // std dev = 0.101, 213.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.014564784877063398;  // std dev = 0.986, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.043066823436448666;  // std dev = 1.620, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.19102339321284306;  // std dev = 0.017, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, D), follows(D, C) )
%   | | | then return -0.055513179443535045;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1794011384178019;  // std dev = 1.394, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return -0.0782300636052877;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then return 0.022665739414045868;  // std dev = 0.149, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30706259471279573;  // std dev = 0.290, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1114984918061819;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.059644044861307983;  // std dev = 0.580, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.018288215554402656;  // std dev = 1.418, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14114537188215467;  // std dev = 1.430, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return -0.05648883067512603;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18400536462292488;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22329917739146476;  // std dev = 0.211, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.22047876710448297;  // std dev = 0.033, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07429200461259577;  // std dev = 0.069, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2612099222352313;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4482790633730759;  // std dev = 0.310, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12238349079729832;  // std dev = 0.029, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.08099622725681323;  // std dev = 1.915, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.1626740367935311;  // std dev = 0.124, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2083883833463571;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.0424683765541482;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.0661108605963254;  // std dev = 0.033, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( tweets(A, H) )
%   | then return 0.006917703752887066;  // std dev = 0.137, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2626577259035594;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.010859982546884923;  // std dev = 0.487, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.00588202348522591;  // std dev = 1.124, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.827', 'seconds']
Refined model CLL: -0.101983


******************************************
Best model found
******************************************
Results 

CLL : -0.102276 

AUC ROC : 0.994416 

AUC PR : 0.363889 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 10.153 

Total Inference Time : 13.027024507522583 

Total revision time: 34.64579795074463
Best scored revision CLL: -0.101983


Results 

CLL : -0.102276 

AUC ROC : 0.994416 

AUC PR : 0.363889 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 34.667125207901 

Total Inference Time : 13.027024507522583 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.114
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6425503352878773;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.008904217736757482;  // std dev = 0.291, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11549868976984957;  // std dev = 1.415, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7763394517212514;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1370170417325095;  // std dev = 2.359, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5906043966426036;  // std dev = 0.139, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.28551361468834;  // std dev = 0.784, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.6190495103528424;  // std dev = 0.110, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5742715654613593;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5742715654613593;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.017731483740695674;  // std dev = 2.658, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | | | else return -0.05936008558240023;  // std dev = 1.612, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.594725746845416;  // std dev = 0.863, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.13536203324297272;  // std dev = 0.093, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.13168461936164674;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16495298490392923;  // std dev = 0.067, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3439936765245665;  // std dev = 0.399, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2953174407538245;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5598899595604373;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07883543163614988;  // std dev = 1.434, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | else return 0.040557342570336274;  // std dev = 0.329, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.01283344775570077;  // std dev = 1.437, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23775740511059307;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5067654398792145;  // std dev = 0.635, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.132667303812094;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.14917668112847396;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2787249475154781;  // std dev = 0.382, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.05726751831409718;  // std dev = 1.361, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01496782584045637;  // std dev = 1.022, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18385260521336497;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04066846320620967;  // std dev = 0.152, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.04731269342421989;  // std dev = 1.245, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | | | else return 0.01909285887799618;  // std dev = 1.192, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19386512719114368;  // std dev = 0.099, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3180419484956045;  // std dev = 0.486, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10206508669421095;  // std dev = 0.112, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3640054215309371;  // std dev = 0.549, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11496727531903181;  // std dev = 0.048, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.10868074210970247;  // std dev = 1.055, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.1781194887951631;  // std dev = 0.174, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08476360174008765;  // std dev = 0.016, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1272250504375436;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0975061546647623;  // std dev = 0.716, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.00663658674065141;  // std dev = 0.902, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.15135164264131173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0027822451780073355;  // std dev = 1.013, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.086', 'seconds']
Parameter learned model CLL:-0.119611 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [3.65e-08, 36, 0], 'true,false,false': [0.373, 10, 2], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 12, 0], 'false,false': [0.471, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.961, 1, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.291, 25, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.415, 8, 3], 'false,false,false,true': [0.08, 0, 2], 'false,false,false,false': [2.359, 22, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.139, 0, 9], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.784, 1, 1], 'true,false,false': [0.11, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.658, 55, 12], 'false,false,false,false': [1.612, 23, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.863, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.093, 36, 0], 'false,true,false,false': [0.037, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.067, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.399, 0, 12], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.051, 0, 9], 'false,false,true,false': [1.434, 57, 3], 'false,false,false': [0.329, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.437, 33, 12], 'false,true': [0.0, 0, 4], 'false,false,true': [0.635, 0, 15], 'false,false,false,true': [0.054, 17, 0], 'false,false,false,false': [0.044, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.382, 0, 21], 'true,false': [1.361, 53, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.022, 13, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.033, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 28, 4], 'false,false,false,true': [1.245, 19, 11], 'false,false,false,false': [1.192, 13, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.099, 0, 12], 'false,true,true,true': [0.486, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.112, 51, 0], 'false,false,true': [0.549, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.048, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.055, 1, 13], 'true,true,false': [0.174, 0, 4], 'true,false,true': [0.016, 41, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.716, 4, 2], 'false,true': [0.902, 8, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.013, 13, 3]}]
{'': [0.20686390532544327, 0.2343749999999995], 'false': [0.24000000000000005, 0.22222222222222207], 'false,true': [-2.220446049250313e-16, -1.1564823173178714e-17], 'true': [-2.0898315757650005e-16, 0.03993055555555552], 'true,false': [3.700743415417188e-17, 0.13888888888888892], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.07100591715976347, 0.15321104340812658], 'false': [0.08488543548931948, 0.18604026834092757], 'false,false': [0.18193309198932645, 0.18651452423201773], 'false,false,false': [0.0032337464495866275, 0.17392644673084254], 'false,false,true': [nan, 0.18193309198932645], 'false,true': [nan, 0.08488543548931948]}
{'': [0.06237515315951839, 0.11395932587621935], 'false': [nan, 0.1139593258762188], 'false,false': [0.0, 0.1050797296008483], 'false,false,false': [0.10542418928489801, 0.09991048807187863], 'true': [0.0021340909951604006, 0.1846714770327154], 'true,false': [0.3076723362932623, 0.00604752092380767], 'true,true': [0.0021340909951604006, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.024001976156163375, 0.00043701908590366577], 'false': [0.00024578470254711085, 0.0002779865098985722], 'false,false': [nan, 0.0002779865098985722], 'false,false,false': [nan, 0.0002779865098985722], 'false,true': [nan, 0.00024578470254711085], 'false,true,false': [0.00024008009896109295, 0.00027498366732335024]}
{'': [0.013235575558676438, 0.08089693776948231], 'false': [0.0, 0.08105619094718867], 'false,false': [0.076116599101691, 0.10834988481352942], 'false,false,true': [0.00028529631272666833, 0.03427779990796189], 'true': [0.013235575558676438, nan], 'false,true': [0.0, nan]}
{'': [0.04589482679220388, 0.09485612998049771], 'false': [0.0, 0.10087500875514169], 'false,false': [0.026875273606020045, 0.00022540292269619542], 'true': [nan, 0.04589482679220388], 'true,false': [nan, 0.04589482679220388], 'false,false,false': [0.00017311717277447813, 0.00013942462739109453]}
{'': [0.04784302316050081, 0.054942429448352564], 'false': [nan, 0.054942429448352564], 'false,false': [nan, 0.054942429448352564], 'false,false,false': [nan, 0.054942429448352564], 'true': [0.0069577078584867535, 0.03251232022817873]}
{'': [9.215012695031055e-05, 0.04853705802295304], 'false': [nan, 0.048537058022953], 'false,false': [0.023143272602036066, 0.06337630010738725], 'false,false,false': [0.05164648036275768, 0.08356766771489843], 'true': [9.215012695031055e-05, nan]}
{'': [0.009850241687540187, 0.04170304864149828], 'false': [0.026644405562343168, 0.06842805579099168], 'false,false': [0.030167991558028094, 0.00016715463036289156], 'false,true': [0.02622556732823294, 0.00024483003949553084], 'false,true,true': [0.02622556732823294, nan], 'false,false,false': [nan, 0.00016715463036289156]}
{'': [0.033368084442189944, 0.0564121604239166], 'false': [0.05085069187377771, 0.061634913552087264], 'false,false': [0.0, 0.06418869177482156], 'false,false,false': [nan, 0.06418869177482157], 'true': [0.06436528742044553, 0.013392643748187376], 'true,true': [0.0795223673214954, 0.007565265901356241], 'true,false': [6.187160307419417e-06, 0.05534951093100271], 'true,false,false': [-6.938893903907228e-18, 0.08544696458863808]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.749
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.001006077956655051;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7727504533606472;  // std dev = 0.135, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7639303268787764;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12881789153092485;  // std dev = 0.047, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.22246279412898648;  // std dev = 1.715, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.06266743594858509;  // std dev = 1.435, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5946330276256453;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6677672873984881;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11626977895219935;  // std dev = 0.031, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.033462362796721136;  // std dev = 1.443, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.3427033875303141;  // std dev = 1.277, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.022573425199784742;  // std dev = 1.638, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.4496214241802654;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.4608068340706443;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5861127645991561;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.6982327057779326;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.11006686802389891;  // std dev = 0.010, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.2015419497947746;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.160217561739433;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.2368006827384176;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.34861020029914785;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32387501448696365;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3935116179290347;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4405062168103641;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08274000314319936;  // std dev = 1.225, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.01328914415997956;  // std dev = 0.406, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.19176091746763027;  // std dev = 0.723, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26853053025404405;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, E) )
%   | | then return -0.055888548336235515;  // std dev = 0.114, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | else return -0.0872017258317685;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.33090017428075175;  // std dev = 0.135, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5339663106236902;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1432365279413024;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.14238132456322786;  // std dev = 0.214, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then return 0.22403683502670138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21470362949523844;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.23390379555310514;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return -0.02043853613373128;  // std dev = 1.070, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | | else return -0.10399309110206297;  // std dev = 0.068, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.12719958517220206;  // std dev = 0.813, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.033410905464020445;  // std dev = 0.745, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18233837474399764;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0789955976664228;  // std dev = 6.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.23812085690330012;  // std dev = 0.409, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.29811502608861273;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08819132998080399;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08975324442593013;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.14319686847282911;  // std dev = 0.474, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08057456287201795;  // std dev = 1.004, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 9.697954827886518E-4;  // std dev = 0.666, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15903658541003263;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.008598795438069096;  // std dev = 0.744, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15206672428405166;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29129410185902205;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07771837811265296;  // std dev = 0.013, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2712520532354647;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.434863707824842;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.1505974139645062;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11769311925677356;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return -0.03657657644530721;  // std dev = 0.371, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.17286077320658116;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.05484663369595698;  // std dev = 0.083, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.15056308345307304;  // std dev = 0.860, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08355443418638585;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return -0.017809109908248584;  // std dev = 0.339, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2302389505918493;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10120416956157678;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.07080257153135273;  // std dev = 0.641, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.623', 'seconds']
Refined model CLL: -0.116215


******************************************
Best model found
******************************************
Results 

CLL : -0.113433 

AUC ROC : 0.992366 

AUC PR : 0.318585 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 4.749 

Total Inference Time : 2.872687339782715 

Total revision time: 11.35804017829895
Best scored revision CLL: -0.116215


Results 

CLL : -0.113433 

AUC ROC : 0.992366 

AUC PR : 0.318585 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 36.64642008590698 

Total Inference Time : 2.872687339782715 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.511
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8093684472946338;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.25814893509951237;  // std dev = 0.490, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7292126477841453;  // std dev = 1.33e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.017636454769457636;  // std dev = 0.287, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014213448592525721;  // std dev = 1.550, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.754226826302005;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1414944607534195;  // std dev = 3.197, 56.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5907844427437121;  // std dev = 0.309, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8681427134168642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5936196203883313;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5649850580162765;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5649850580162764;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.01127925398669119;  // std dev = 3.175, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
%   | | | else return -0.008317270653704268;  // std dev = 2.496, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5481185020194531;  // std dev = 1.678, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12749471670117168;  // std dev = 0.053, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12499151035901558;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1738088997234855;  // std dev = 0.167, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2711101701519686;  // std dev = 1.380, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.299079582120167;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.605953290345314;  // std dev = 0.238, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08572121483297905;  // std dev = 1.599, 97.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=4 */
%   | | else return -0.06255664882187512;  // std dev = 0.227, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014196561735169751;  // std dev = 1.956, 104.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=31 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2403495196849454;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4256841876954971;  // std dev = 1.529, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12808597274141256;  // std dev = 0.119, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11755182492866442;  // std dev = 0.064, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.19134262356709608;  // std dev = 2.422, 54.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=48 */
%   | else return -0.08923802911847821;  // std dev = 1.792, 103.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04415900496920424;  // std dev = 1.131, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16812045310457727;  // std dev = 0.980, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05666627079939867;  // std dev = 0.174, 83.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.01616038436781124;  // std dev = 1.758, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.11064457418227489;  // std dev = 1.378, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2113385915619375;  // std dev = 0.080, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26753217222058845;  // std dev = 1.044, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0946680678128567;  // std dev = 0.063, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3742577016097209;  // std dev = 0.536, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1316276124390727;  // std dev = 0.163, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17120761599000167;  // std dev = 1.150, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.1770759526586856;  // std dev = 0.283, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08390346408147355;  // std dev = 0.004, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09729741312032357;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.0059966228363340784;  // std dev = 0.866, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04925412154231284;  // std dev = 0.858, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17303993040432886;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04015022540031907;  // std dev = 1.181, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.010', 'seconds']
Parameter learned model CLL:-0.115076 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.379, 2, 39], 'true,false,true': [5.58e-08, 53, 0], 'true,false,false': [0.258, 26, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 18, 0], 'false,false': [0.49, 12, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.33e-07, 0, 29], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.287, 61, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.55, 21, 3], 'false,false,false,true': [0.085, 0, 3], 'false,false,false,false': [3.197, 38, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.309, 0, 26], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.115, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.175, 85, 17], 'false,false,false,false': [2.496, 40, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.678, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 82, 0], 'false,true,false,false': [0.014, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.38, 2, 30], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.238, 0, 18], 'false,false,true,false': [1.599, 93, 4], 'false,false,false': [0.227, 28, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.956, 73, 31], 'false,true': [0.0, 0, 7], 'false,false,true': [1.529, 2, 24], 'false,false,false,true': [0.119, 31, 0], 'false,false,false,false': [0.064, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.422, 6, 48], 'true,false': [1.792, 98, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.131, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.98, 1, 29], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.174, 74, 9], 'false,false,false,true': [1.758, 39, 16], 'false,false,false,false': [1.378, 12, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.08, 0, 30], 'false,true,true,true': [1.044, 1, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.063, 93, 0], 'false,false,true': [0.536, 0, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 30, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.15, 1, 32], 'true,true,false': [0.283, 0, 7], 'true,false,true': [0.004, 64, 0], 'true,false,false,true': [0.012, 12, 0], 'true,false,false,false': [0.866, 13, 2], 'false,true': [0.858, 16, 13], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.181, 14, 7]}]
{'': [0.22312550389680313, 0.24221453287197225], 'false': [0.24349635796045738, 0.24000000000000005], 'false,true': [-2.7328566760003855e-16, -3.0839528461809902e-18], 'true': [0.04640095181439758, 0.0240816948635878], 'true,false': [5.86532918669894e-17, 0.06632653061224494], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [6.125368411725002e-16, 0.13581388914166617], 'false': [0.0825927697695433, 0.1722053230391113], 'false,false': [0.10011662438147206, 0.19143274612530375], 'false,false,false': [0.002415599581967983, 0.18246844680245924], 'false,false,true': [nan, 0.10011662438147206], 'false,true': [nan, 0.0825927697695433]}
{'': [0.006085989514349954, 0.11733045107989858], 'false': [nan, 0.11733045107989752], 'false,false': [6.344131569286608e-17, 0.10882487042065885], 'false,false,false': [0.09885729435211182, 0.12974483339729406], 'true': [0.003660845387728501, 0.017423028484203074], 'true,false': [0.0, 0.004389972494115879], 'true,true': [0.003660845387728501, nan], 'false,false,true': [0.0, 7.401486830834377e-17]}
{'': [0.04471211057503845, 0.0006791086145250683], 'false': [3.2396862400379624e-05, 0.0006931338441663881], 'false,false': [nan, 0.0006931338441663881], 'false,false,false': [nan, 0.0006931338441663881], 'false,true': [nan, 3.239686240038194e-05], 'false,true,false': [3.4623570178482225e-05, 1.4002472641900878e-05]}
{'': [0.05952943131584297, 0.07990353264117879], 'false': [-4.7580986769649563e-17, 0.07976357980076226], 'false,false': [0.08588213648081462, 0.05136171636744182], 'false,false,true': [0.003150340242337673, 0.026352296565909317], 'true': [0.05952943131584297, nan], 'false,true': [-4.7580986769649563e-17, nan]}
{'': [0.03677946372479964, 0.09180388577997425], 'false': [-7.93016446160826e-18, 0.09734445341715577], 'false,false': [0.08997050900692848, 0.000375486234027626], 'true': [nan, 0.03677946372479965], 'true,false': [nan, 0.03677946372479964], 'false,false,false': [0.00045318033000211095, 0.0001946407884483594]}
{'': [0.07558535192350903, 0.05332533929993092], 'true': [0.10863870276479162, 0.031178849280787267], 'false': [nan, 0.053325339299930934], 'false,false': [nan, 0.05332533929993092], 'false,false,false': [nan, 0.05332533929993092]}
{'': [0.03203239522090436, 0.050685556127085384], 'false': [nan, 0.05068555612708542], 'false,false': [0.03025532824787991, 0.06824755843138751], 'false,false,false': [0.056163481689471745, 0.09493211058006562], 'true': [0.03203239522090436, nan]}
{'': [0.006411169800702014, 0.04058064853960369], 'false': [0.025820817539055223, 0.06652495977263016], 'false,false': [0.015974367201949818, 0.0008853337011959969], 'false,true': [0.07267298997073696, 4.331916168341501e-05], 'false,true,true': [0.07267298997073696, nan], 'false,false,false': [nan, 0.0008853337011959969]}
{'': [0.029792934809176712, 0.04211698493890964], 'false': [0.025384688704358328, 0.06416785718152053], 'false,false': [0.0, 0.06642075698752992], 'false,false,false': [nan, 0.06642075698752992], 'true': [0.035067236436762926, 0.00913696579909897], 'true,true': [0.04007572870112816, 0.0114273620701683], 'true,false': [2.2535823960070922e-07, 0.02981442795778711], 'true,false,false': [1.2991543458359725e-05, 0.04995076184192519]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.798
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6718543645919066;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.7323220530145877;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06615214373966537;  // std dev = 1.629, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | | else return -0.0370982412133668;  // std dev = 0.838, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.15122684458851357;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.07755671756999036;  // std dev = 0.825, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10563093634345577;  // std dev = 3.093, 66.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5691977064647247;  // std dev = 0.062, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(E, A) )
%   | | then return 0.8469172309479838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.36594636028432437;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5670920948958424;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5521914483575437;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12500483904683926;  // std dev = 0.147, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.06889304412425856;  // std dev = 2.054, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.22910792045938674;  // std dev = 2.520, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return 0.028181031770826148;  // std dev = 1.173, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.4259732160918907;  // std dev = 0.011, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.42592444071813457;  // std dev = 0.000420, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.05691116580587974;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.47200992292567323;  // std dev = 0.259, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2765827345778117;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.740972594971195;  // std dev = 0.109, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6600743821668653;  // std dev = 0.183, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(J, A) )
%   | then return -0.11493824934737532;  // std dev = 0.012, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.1654829353464283;  // std dev = 0.006, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3322277069875428;  // std dev = 0.110, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.30601207979124767;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.39653468352951043;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.49234614502856044;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3181963195505822;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.061774342675810605;  // std dev = 1.516, 79.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=6 */
%   | | | else return 0.0796887007011234;  // std dev = 1.781, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.038782886431472444;  // std dev = 1.007, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.1742231142681741;  // std dev = 1.137, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2594344680317162;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3133833214158933;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04216143938388998;  // std dev = 0.201, 61.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=8 */
%   | | else return -0.05179132275331396;  // std dev = 0.181, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25345817887716704;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.4611853613893575;  // std dev = 0.339, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3370795668744492;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1471275109445536;  // std dev = 0.059, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12347418123643844;  // std dev = 0.181, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( tweets(A, E), follows(A, C) )
%   | | then if ( tweets(D, E), follows(C, D) )
%   | | | then return -0.021465091378950876;  // std dev = 1.521, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.21134511605835293;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21867979033822724;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22408486681393155;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then return -0.04155026905518045;  // std dev = 0.180, 112.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.3410777006864814;  // std dev = 0.156, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1282206495379832;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.018138909558791612;  // std dev = 1.135, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.03218352624495375;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.19495847067849487;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2833027185943566;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5785916931505094;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.09538375854894532;  // std dev = 0.014, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.29126464637476573;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12156826793308897;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.05605382427660459;  // std dev = 0.357, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1662405723240944;  // std dev = 0.394, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.011560393500436406;  // std dev = 0.812, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.17212625863596417;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.059944538796492065;  // std dev = 0.935, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.24250432323454413;  // std dev = 1.115, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14780367428162006;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.43587092252108356;  // std dev = 0.102, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08582408246707315;  // std dev = 0.013, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.23673905225945044;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.34546097971935685;  // std dev = 0.286, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11675223519293927;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.04323844505637933;  // std dev = 1.331, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.1396176305619313;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.27585737365520313;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07003500375392455;  // std dev = 0.062, 93.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return -1.0570938711297606E-4;  // std dev = 0.138, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | else return -0.031663751617308424;  // std dev = 0.393, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23970375217110196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.04580642483674088;  // std dev = 1.021, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.10809260589839312;  // std dev = 0.733, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.318', 'seconds']
Refined model CLL: -0.107276


******************************************
Best model found
******************************************
Results 

CLL : -0.11036 

AUC ROC : 0.992505 

AUC PR : 0.340795 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 5.798 

Total Inference Time : 5.997958421707153 

Total revision time: 17.709710821151734
Best scored revision CLL: -0.107276


Results 

CLL : -0.11036 

AUC ROC : 0.992505 

AUC PR : 0.340795 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 42.99809072875976 

Total Inference Time : 5.997958421707153 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.897
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8242506300147667;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.06290369647943514;  // std dev = 0.270, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.13721870254137283;  // std dev = 0.449, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.729361119256974;  // std dev = 0.138, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.046715269992342795;  // std dev = 0.247, 119.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.018075652216666557;  // std dev = 1.746, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7367787827425375;  // std dev = 0.112, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.10894934092066351;  // std dev = 3.966, 96.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5576991436591632;  // std dev = 0.896, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7145054517768039;  // std dev = 0.217, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5746854980865216;  // std dev = 0.153, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6263555772187165;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5612873275802738;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 3.505801944094464E-4;  // std dev = 3.726, 154.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=23 */
%   | | | else return 0.07192930763158038;  // std dev = 3.049, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5620260236670354;  // std dev = 1.549, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12388759606019144;  // std dev = 0.062, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.12937486238155754;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1573722264319971;  // std dev = 0.166, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2973677760877271;  // std dev = 1.131, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.291595794016391;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4862936788514721;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6125503901522449;  // std dev = 0.275, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09395943623652842;  // std dev = 1.621, 143.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=4 */
%   | | else return 0.034671206008625576;  // std dev = 0.318, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005580852375399988;  // std dev = 2.300, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24284483235233292;  // std dev = 0.133, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49480048598492543;  // std dev = 0.993, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12670070253938784;  // std dev = 0.139, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.13179744194051343;  // std dev = 0.132, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22730803128146546;  // std dev = 2.059, 74.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=69 */
%   | else return -0.0810442152658602;  // std dev = 1.523, 141.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048351579330099606;  // std dev = 1.781, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16993518175073863;  // std dev = 0.987, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, E) )
%   | | then return 0.266728338774323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03520615259751853;  // std dev = 0.156, 90.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.016711212266801077;  // std dev = 1.767, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
%   | | | else return 0.065817786953575;  // std dev = 1.879, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1699126255872421;  // std dev = 0.142, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2876287516720752;  // std dev = 0.745, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09424254451200897;  // std dev = 0.102, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3836697070100402;  // std dev = 0.678, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11548047753746173;  // std dev = 0.166, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17282338472707126;  // std dev = 1.002, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.1693129287972032;  // std dev = 0.319, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08311452691089437;  // std dev = 0.019, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10368028660103831;  // std dev = 0.029, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.00909050952697441;  // std dev = 0.874, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.036431190162874175;  // std dev = 1.035, 48.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18756419938437396;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0043353508151905895;  // std dev = 1.571, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.690', 'seconds']
Parameter learned model CLL:-0.114144 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.39, 2, 57], 'true,false,true': [8.69e-08, 96, 0], 'true,false,false': [0.27, 35, 3], 'false,true,true,true': [0.0, 0, 18], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.449, 31, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.138, 0, 45], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 108, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.746, 28, 4], 'false,false,false,true': [0.112, 0, 7], 'false,false,false,false': [3.966, 70, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.896, 1, 35], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.217, 0, 2], 'true,false,false': [0.153, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.159, 0, 3], 'false,false,true,false': [0.0, 0, 10], 'false,false,false,true': [3.726, 131, 23], 'false,false,false,false': [3.049, 43, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.549, 0, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 102, 0], 'false,true,false,false': [0.017, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.166, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.131, 1, 44], 'true,false': [0.0, 0, 0], 'false,true,true': [0.017, 0, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.275, 0, 23], 'false,false,true,false': [1.621, 139, 4], 'false,false,false': [0.318, 33, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.3, 108, 42], 'false,true': [0.133, 0, 14], 'false,false,true': [0.993, 0, 37], 'false,false,false,true': [0.139, 53, 0], 'false,false,false,false': [0.132, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.059, 5, 69], 'true,false': [1.523, 136, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.781, 34, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.987, 1, 44], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 79, 11], 'false,false,false,true': [1.767, 56, 24], 'false,false,false,false': [1.879, 28, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.142, 1, 44], 'false,true,true,true': [0.745, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 127, 0], 'false,false,true': [0.678, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.166, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.002, 1, 45], 'true,true,false': [0.319, 0, 12], 'true,false,true': [0.019, 106, 0], 'true,false,false,true': [0.029, 18, 0], 'true,false,false,false': [0.874, 12, 3], 'false,true': [1.035, 27, 21], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.571, 33, 11]}]
{'': [0.21423393916615244, 0.22670360110803467], 'false': [0.24075443786982242, 0.20118983234180587], 'false,true': [0.0, 2.5069552168955147e-17], 'true': [0.032749209997126966, 0.02188683448429485], 'true,false': [7.864079757761526e-17, 0.07271468144044306], 'false,true,true': [-2.9605947323337506e-16, 1.4802973661668753e-16]}
{'': [0.00042205866154161083, 0.12159632697690732], 'false': [0.06085616861537995, 0.163425761627104], 'false,false': [0.09526943300818592, 0.17777489146656322], 'false,false,false': [0.0017968550954122595, 0.16381838390540315], 'false,false,true': [nan, 0.09526943300818592], 'false,true': [nan, 0.06085616861537995]}
{'': [0.020449987465036852, 0.12204432515348368], 'false': [nan, 0.12204432515348354], 'false,false': [0.0027056729466812942, 0.11135446810348228], 'false,false,false': [0.09013170061393513, 0.16595983493728586], 'true': [0.022302047618102467, 0.01119413164888932], 'true,true': [0.022302047618102467, nan], 'true,false': [0.023475793582303228, 0.003340725504432334], 'false,false,true': [0.008467754222021432, -8.881784197001253e-17]}
{'': [0.025813445735797892, 0.00040194909353444736], 'false': [3.724457329506633e-05, 0.0005397425371832151], 'false,false': [nan, 0.0005397425371832151], 'false,false,false': [nan, 0.0005397425371832151], 'false,true': [nan, 3.7244573295069916e-05], 'false,true,false': [3.7143297279301226e-05, 1.294614709053525e-05]}
{'': [0.028447296656325536, 0.08136361801460107], 'false': [0.002714378164550002, 0.08111016031359324], 'false,false': [0.07586426913004575, 0.10108974418393321], 'false,false,true': [0.0032772315166282678, 0.018378919998012614], 'true': [0.028447296656325536, nan], 'false,true': [2.463277883265243e-05, 0.0]}
{'': [0.03528160599771621, 0.0814616924706005], 'false': [0.0012626689780567293, 0.0862478040885774], 'false,false': [0.026668597001332343, 0.00039493376898279637], 'true': [nan, 0.03528160599771642], 'true,false': [nan, 0.03528160599771621], 'false,false,false': [0.00036559469773849747, 0.000417464589182964]}
{'': [0.05198029819271336, 0.05986448023958327], 'false': [nan, 0.05986448023958323], 'false,false': [nan, 0.05986448023958327], 'false,false,false': [nan, 0.05986448023958327], 'true': [0.057312357443791484, 0.016456321842948658]}
{'': [0.021372701038427318, 0.04340210113934538], 'false': [nan, 0.04340210113934525], 'false,false': [0.024400052476776606, 0.05553110316144999], 'false,false,false': [0.039028216457365525, 0.08613750684486965], 'true': [0.02164397787981425, 0.0], 'true,false': [0.0, nan]}
{'': [0.02018428113488396, 0.03770095683429344], 'false': [0.022703913408980574, 0.06160843104483968], 'false,false': [0.017667671299353163, 0.0005285086729812393], 'false,true': [0.024150984576833744, 8.190675197599888e-05], 'false,true,true': [0.024150984576833744, nan], 'false,false,false': [nan, 0.0005285086729812393]}
{'': [0.02291841428743896, 0.03860985683782943], 'false': [0.022327985574745104, 0.055571844527830296], 'false,false': [0.0, 0.056088778528861044], 'false,false,false': [nan, 0.05608877852886103], 'true': [0.019080664404626035, 0.0064230072163755005], 'true,true': [0.021838534404675584, 0.008499055752049345], 'true,false': [3.377626703182436e-06, 0.026325197492028517], 'true,false,false': [4.828148868379437e-05, 0.05092081353639903]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8409075557891676;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.6896067272121328;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.472940060545466;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7309703819818231;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.722940060545466;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07424901013600357;  // std dev = 0.202, 116.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=7 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.04879388122068651;  // std dev = 1.540, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return 0.08665153624007296;  // std dev = 0.735, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7225976836756696;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.10604598453809885;  // std dev = 3.797, 92.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5753058376454483;  // std dev = 0.280, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.3178016472601731;  // std dev = 0.436, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.6037219605759426;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5567844750721374;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.10799617672890052;  // std dev = 0.851, 85.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=1 */
%   | | | else return 0.001878979161505089;  // std dev = 2.430, 59.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=9 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08506084164712435;  // std dev = 3.155, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.18661427633632816;  // std dev = 1.900, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.30648826768205994;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.4241353265055894;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.476813960068567;  // std dev = 0.130, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4185661142652961;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.21601512785869376;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.46419363000659275;  // std dev = 0.306, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.6396363835881416;  // std dev = 1.346, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.7020022248760794;  // std dev = 0.098, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1302611933105943;  // std dev = 0.036, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3503832373125457;  // std dev = 0.073, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.06952983588547963;  // std dev = 1.081, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3530086084379098;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.36017383501036687;  // std dev = 0.090, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32701906528373864;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08922714155946233;  // std dev = 0.718, 98.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=1 */
%   | | | else return 0.007812169028693171;  // std dev = 1.958, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04027888911191285;  // std dev = 2.304, 62.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=16 */
%   | | | else return 0.13924798329128407;  // std dev = 1.720, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.23838819447413206;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return 0.3136882427670432;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.08590785871439262;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0498329202415446;  // std dev = 1.687, 88.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=6 */
%   | | | else return -0.051685931931655237;  // std dev = 0.670, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2615919284820133;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1673474447632605;  // std dev = 1.032, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5272882166094114;  // std dev = 0.250, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.14542912636247013;  // std dev = 0.048, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22774040337117926;  // std dev = 0.023, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.06410562730983109;  // std dev = 1.012, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.08367663285243959;  // std dev = 0.051, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.49379390838722464;  // std dev = 0.502, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10647272383692116;  // std dev = 0.098, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.293972977091883;  // std dev = 1.183, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.12066416811824046;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.00698964866290727;  // std dev = 0.794, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.08646277255916272;  // std dev = 1.091, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1580603076587218;  // std dev = 0.948, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.17265672623454253;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.19947063832759104;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2571171324679046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19903230840930708;  // std dev = 0.064, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.06943403588303762;  // std dev = 0.769, 62.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=1 */
%   | | | else return -0.003261626889871246;  // std dev = 1.364, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04010879258754517;  // std dev = 1.367, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return -0.04390759664915387;  // std dev = 1.792, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.1711127951174369;  // std dev = 0.094, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.22676458234306007;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.025259511049156788;  // std dev = 0.315, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.5116777661938283;  // std dev = 0.156, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15267066974514046;  // std dev = 0.776, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.08172736200828891;  // std dev = 0.162, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3405457834885034;  // std dev = 0.032, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.11203477082712732;  // std dev = 0.064, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.2172375357278182;  // std dev = 0.206, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15995866559972605;  // std dev = 0.161, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return -0.06583018784506904;  // std dev = 0.064, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20515150079919436;  // std dev = 0.217, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10167542478875861;  // std dev = 1.18e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.04340162601101329;  // std dev = 0.362, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.02237328727642302;  // std dev = 0.550, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.2821042761957916;  // std dev = 0.657, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.007787858376539958;  // std dev = 1.099, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.02116698529405585;  // std dev = 0.793, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.694', 'seconds']
Refined model CLL: -0.109928


******************************************
Best model found
******************************************
Results 

CLL : -0.105724 

AUC ROC : 0.993224 

AUC PR : 0.398115 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 7.676 

Total Inference Time : 8.392997741699219 

Total revision time: 24.931763694763184
Best scored revision CLL: -0.109928


Results 

CLL : -0.105724 

AUC ROC : 0.993224 

AUC PR : 0.398115 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 50.220143602371216 

Total Inference Time : 8.392997741699219 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.222
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970732;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.07935106490048774;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.16323368086222423;  // std dev = 0.460, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266066600328939;  // std dev = 0.142, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05181195777776479;  // std dev = 0.245, 167.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04188620463160542;  // std dev = 1.770, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7488786715400948;  // std dev = 0.144, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.159110034584305;  // std dev = 4.349, 100.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5409925864023541;  // std dev = 1.211, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7159499770111654;  // std dev = 0.221, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5881839757087515;  // std dev = 0.196, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5997012571163282;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5596236122365683;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.017929968046330007;  // std dev = 4.110, 168.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=29 */
%   | | | else return 0.0549286952878152;  // std dev = 3.620, 81.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5393485413621091;  // std dev = 2.284, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12439853529841817;  // std dev = 0.064, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return -0.1272942649794642;  // std dev = 0.020, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1699289549056443;  // std dev = 0.221, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32202236458108446;  // std dev = 0.529, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24007620527578455;  // std dev = 0.970, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.503423598091684;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5911270673958606;  // std dev = 1.054, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.10518910756346415;  // std dev = 1.645, 184.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=4 */
%   | | else return 0.055766861036952255;  // std dev = 0.332, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0225354477623765;  // std dev = 2.741, 187.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=61 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2535075797919245;  // std dev = 0.136, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4351223459992957;  // std dev = 1.943, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12793881475147384;  // std dev = 0.159, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.13849848270396334;  // std dev = 0.189, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29648976511109465;  // std dev = 0.979, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else return -0.08938525727365772;  // std dev = 1.600, 209.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053543800926814836;  // std dev = 1.898, 60.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17064415940700786;  // std dev = 0.997, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.2612028009036953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0472237596557889;  // std dev = 0.140, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002496148416112046;  // std dev = 1.902, 97.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=26 */
%   | | | else return 0.035638225577887574;  // std dev = 2.211, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1422175031879218;  // std dev = 0.192, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.259050870704717;  // std dev = 1.198, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09484835487248078;  // std dev = 0.132, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38194577916514244;  // std dev = 0.720, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11719526933775903;  // std dev = 0.237, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15574399293905744;  // std dev = 1.499, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else return 0.110743786245425;  // std dev = 1.063, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08256343288015483;  // std dev = 0.012, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10468244931209482;  // std dev = 0.006, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.007772240321071437;  // std dev = 0.934, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.015355013903197283;  // std dev = 1.176, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.186770149625629;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02784161457356206;  // std dev = 1.733, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.260', 'seconds']
Parameter learned model CLL:-0.113301 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.0, 137, 0], 'true,false,false': [0.242, 45, 3], 'false,true,true,true': [0.0, 0, 19], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.34e-08, 41, 0], 'false,false': [0.46, 41, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.142, 0, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 152, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.77, 37, 4], 'false,false,false,true': [0.144, 0, 8], 'false,false,false,false': [4.349, 67, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.211, 2, 49], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 2], 'true,false,false': [0.196, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 5], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [4.11, 139, 29], 'false,false,false,false': [3.62, 63, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.284, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 125, 0], 'false,true,false,false': [0.02, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.221, 85, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.529, 0, 59], 'true,false': [0.0, 0, 0], 'false,true,true': [0.97, 1, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.054, 1, 33], 'false,false,true,false': [1.645, 180, 4], 'false,false,false': [0.332, 30, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.741, 126, 61], 'false,true': [0.136, 0, 18], 'false,false,true': [1.943, 3, 45], 'false,false,false,true': [0.159, 65, 0], 'false,false,false,false': [0.189, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.979, 0, 95], 'true,false': [1.6, 203, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.898, 37, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 63], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 135, 15], 'false,false,false,true': [1.902, 71, 26], 'false,false,false,false': [2.211, 44, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 2, 59], 'false,true,true,true': [1.198, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.132, 171, 0], 'false,false,true': [0.72, 0, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.237, 76, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.499, 2, 64], 'true,true,false': [1.063, 1, 16], 'true,false,true': [0.012, 133, 0], 'true,false,false,true': [0.006, 23, 0], 'true,false,false,false': [0.934, 17, 3], 'false,true': [1.176, 41, 23], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.733, 35, 16]}]
{'': [0.21422659877400502, 0.22222222222222346], 'false': [0.23022460937500103, 0.2120080436656128], 'false,true': [3.089316242435218e-16, 4.603363760640893e-17], 'true': [0.023795359904817976, 0.015953250547845035], 'true,false': [-6.807206866314829e-17, 0.058593749999999854], 'false,true,true': [-2.8047739569477637e-16, 0.0]}
{'': [0.0003152577731300177, 0.12397418230694889], 'false': [0.059850280963795924, 0.17730881166694543], 'false,false': [0.07638908210373276, 0.1991467253448882], 'false,false,false': [0.002594007828642164, 0.18910597643976604], 'false,false,true': [nan, 0.07638908210373276], 'false,true': [nan, 0.059850280963795924]}
{'': [0.026621559635258016, 0.1311430858489268], 'false': [nan, 0.13114308584892576], 'false,false': [0.0021069212596328177, 0.12075496999731598], 'false,false,false': [0.10053383984807603, 0.16177149268255467], 'true': [0.028747154276937744, 0.011356755800825935], 'true,true': [0.028747154276937744, nan], 'true,false': [0.024437932323640332, 0.004821631452360753], 'false,false,true': [0.00642487047643252, 0.0]}
{'': [0.0414004185895799, 0.000670166155543842], 'false': [2.9145443704910256e-05, 0.0005770133193796019], 'false,false': [nan, 0.0005770133193796019], 'false,false,false': [nan, 0.0005770133193796019], 'false,true': [nan, 2.914544370491843e-05], 'false,true,false': [3.299213625252584e-05, 1.0061443060766243e-05]}
{'': [0.004747122523969558, 0.0876578806913373], 'false': [0.052982571124163484, 0.08618088406506001], 'false,false': [0.08134183425912363, 0.11023752184589738], 'false,false,true': [0.03269321346644068, 0.014711476587725461], 'false,true': [0.052275949965994856, 0.0], 'true': [0.004747122523969558, nan]}
{'': [0.040169852832901864, 0.08404899282488638], 'false': [0.0010340890539492066, 0.08794833384229635], 'false,false': [0.07861556311450472, 0.0005280839145008382], 'true': [nan, 0.04016985283290186], 'true,false': [nan, 0.040169852832901864], 'false,false,false': [0.000389934021635703, 0.0006262140186995031]}
{'': [0.043562405391143935, 0.06005064772208967], 'false': [nan, 0.06005064772208964], 'false,false': [nan, 0.06005064772208967], 'false,false,false': [nan, 0.06005064772208967], 'true': [0.01009847089811693, 0.012242180674770774]}
{'': [0.015411682444796902, 0.03811058086808604], 'false': [nan, 0.03811058086808612], 'false,false': [0.01971935253548949, 0.053445894782814106], 'false,false,false': [0.03731025240024258, 0.0776237582756713], 'true': [0.015526322789924156, 0.0], 'true,false': [0.0, nan]}
{'': [0.036737216336640614, 0.03702058155373166], 'false': [0.02410196350320708, 0.0578646630465237], 'false,false': [0.015719075002425097, 0.0007364737844254434], 'false,true': [0.04347847303103274, 0.00010247121331318487], 'false,true,true': [0.04347847303103274, nan], 'false,false,false': [nan, 0.0007364737844254434]}
{'': [0.027841017086616286, 0.03796968015031244], 'false': [0.021591446076436382, 0.057560282310258615], 'false,false': [0.0, 0.05886440566985916], 'false,false,false': [nan, 0.05886440566985914], 'true': [0.04102009904769524, 0.005620586240955697], 'true,true': [0.03405229186409783, 0.06646133000430436], 'true,false': [1.0048757988652808e-06, 0.022603871815334572], 'true,false,false': [1.7338547671304034e-06, 0.043572922610598044]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.967
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8458032560871667;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.07243464938522651;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.08037115732173453;  // std dev = 0.416, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7006817976696064;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.7290218569423048;  // std dev = 0.124, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.11022337172487874;  // std dev = 0.114, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6805297649147664;  // std dev = 1.001, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1322325384091938;  // std dev = 0.097, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.733154954385529;  // std dev = 0.092, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1995238425252032;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.10534579861280088;  // std dev = 2.030, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5628896243375212;  // std dev = 0.007, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.4031012021457854;  // std dev = 0.946, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.582483935906295;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5923969528440883;  // std dev = 0.155, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.556057063146567;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10744215684399122;  // std dev = 0.867, 108.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=1 */
%   | | | else return -0.0071579862952892955;  // std dev = 2.314, 84.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.052377813727490306;  // std dev = 2.594, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
%   | | | else return 0.1259655021958648;  // std dev = 2.685, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3832673801855941;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.42326738018559407;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.41693909785668737;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.437135161464385;  // std dev = 0.170, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.5048236497185424;  // std dev = 0.404, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5539524341140724;  // std dev = 0.173, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6630151702867854;  // std dev = 0.122, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.749942366280818;  // std dev = 0.231, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11591539819578803;  // std dev = 0.018, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3285848513101141;  // std dev = 0.035, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.2658983537898313;  // std dev = 0.817, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.11845171311480038;  // std dev = 0.369, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.319288248003407;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.49225346474408105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.08606483814400136;  // std dev = 0.750, 106.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=1 */
%   | | | else return -0.02490989840044188;  // std dev = 1.908, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.024855003490095576;  // std dev = 2.124, 86.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=22 */
%   | | | else return 0.09737205723213851;  // std dev = 1.968, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2692194682185405;  // std dev = 0.034, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.15601920541540518;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4457187409026033;  // std dev = 0.303, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0899929827254071;  // std dev = 0.054, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.0756925496248023;  // std dev = 0.097, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26066706828682096;  // std dev = 0.027, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18557581687348992;  // std dev = 1.022, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4573020451664015;  // std dev = 0.496, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.11696254412945904;  // std dev = 0.028, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, C), follows(A, D) )
%   | | then return 0.21353833561542304;  // std dev = 0.021, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return -0.047794269077560486;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20928425621072283;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.22531566523919258;  // std dev = 0.025, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.2560916113955194;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.05428662508725446;  // std dev = 0.876, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.05343279705636488;  // std dev = 0.115, 209.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.00154699849073062;  // std dev = 1.721, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | | | else return 0.03264590301428916;  // std dev = 1.747, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16281717704918916;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.09546457668336916;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.26713158234940393;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.06506080557690107;  // std dev = 0.075, 107.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=2 */
%   | | else return -0.0010127480813712888;  // std dev = 0.192, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23370149124981446;  // std dev = 1.287, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.10503266581315002;  // std dev = 0.101, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.00994523554469299;  // std dev = 1.039, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.02783620380180645;  // std dev = 1.265, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.1600650085740908;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.10134738352883198;  // std dev = 0.974, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.05569282721587223;  // std dev = 1.020, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.18852983070710444;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1599349519349907;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.31230426818407153;  // std dev = 1.036, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.07773135330750972;  // std dev = 0.119, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.31105857755436755;  // std dev = 0.096, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.11044289896371265;  // std dev = 0.027, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14304518612643438;  // std dev = 0.057, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.23288793313299538;  // std dev = 1.372, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20586609135528539;  // std dev = 0.480, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.049089129436356065;  // std dev = 1.047, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.06429774211779046;  // std dev = 0.055, 162.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=3 */
%   else if ( tweets(A, H) )
%   | then return 0.01043462119872273;  // std dev = 0.143, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15650165562067775;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.006723321212005155;  // std dev = 0.890, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0.03939315285598125;  // std dev = 1.028, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.135', 'seconds']
Refined model CLL: -0.09984


******************************************
Best model found
******************************************
Results 

CLL : -0.099831 

AUC ROC : 0.993931 

AUC PR : 0.417221 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 11.967 

Total Inference Time : 12.470960140228271 

Total revision time: 35.38207065010071
Best scored revision CLL: -0.09984


Results 

CLL : -0.099831 

AUC ROC : 0.993931 

AUC PR : 0.417221 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 60.67045055770874 

Total Inference Time : 12.470960140228271 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.584
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.0740544547309962;  // std dev = 0.251, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.24148226843284482;  // std dev = 0.486, 60.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6887337145474206;  // std dev = 1.721, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029586780348236162;  // std dev = 0.275, 161.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04485677559424249;  // std dev = 1.768, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7461401977109465;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12591585906292055;  // std dev = 4.922, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5601835171784064;  // std dev = 1.064, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4823252293167555;  // std dev = 0.898, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4696263116978296;  // std dev = 0.992, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5967702211198246;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629436377432572;  // std dev = 7.30e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00715249001607652;  // std dev = 4.535, 237.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=34 */
%   | | | else return 0.05547647586550064;  // std dev = 4.077, 101.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5400839738171108;  // std dev = 2.517, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12348565859808767;  // std dev = 0.062, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12938783961768263;  // std dev = 0.014, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1717895572518784;  // std dev = 0.282, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27246647278052233;  // std dev = 2.000, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return -0.0042678380807099625;  // std dev = 0.771, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2976897649220808;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5121142650310491;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6226510592322283;  // std dev = 0.327, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.105061184339493;  // std dev = 1.789, 240.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=5 */
%   | | else return 0.04968611610151827;  // std dev = 0.334, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029186350083354805;  // std dev = 3.074, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26098765612620195;  // std dev = 0.321, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.436577209667508;  // std dev = 2.295, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12145384573776956;  // std dev = 0.213, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return -0.13937761813455826;  // std dev = 0.236, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2726295231381672;  // std dev = 2.039, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08867765081660076;  // std dev = 1.725, 255.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008128917383153612;  // std dev = 2.323, 102.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18091800059212929;  // std dev = 0.995, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3394407839309681;  // std dev = 0.099, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05176941764427355;  // std dev = 0.146, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 7.598857082376258E-4;  // std dev = 2.073, 120.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=28 */
%   | | | else return 0.025816162419622406;  // std dev = 2.551, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14230794298221894;  // std dev = 0.203, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2806693532374259;  // std dev = 0.876, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09257657758625924;  // std dev = 0.101, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39945833727495983;  // std dev = 0.798, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11722264557489798;  // std dev = 0.305, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16623485370772073;  // std dev = 1.390, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.10911798687091338;  // std dev = 1.069, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08319004092805422;  // std dev = 0.022, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09610998404538883;  // std dev = 0.046, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.016188624834461224;  // std dev = 1.005, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.010767848936569666;  // std dev = 1.336, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11066407818645947;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018078439260860675;  // std dev = 2.005, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.823', 'seconds']
Parameter learned model CLL:-0.111896 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 165, 0], 'true,false,false': [0.251, 55, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.486, 37, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.721, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 142, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.768, 38, 4], 'false,false,false,true': [0.131, 0, 8], 'false,false,false,false': [4.922, 94, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.064, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.898, 1, 3], 'true,false,false': [0.992, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [7.3e-08, 0, 15], 'false,false,false,true': [4.535, 203, 34], 'false,false,false,false': [4.077, 78, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.517, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.062, 172, 0], 'false,true,false,false': [0.014, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.0, 4, 77], 'true,false': [0.771, 1, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.327, 0, 39], 'false,false,true,false': [1.789, 235, 5], 'false,false,false': [0.334, 42, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.074, 161, 82], 'false,true': [0.321, 0, 22], 'false,false,true': [2.295, 4, 52], 'false,false,false,true': [0.213, 91, 0], 'false,false,false,false': [0.236, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.039, 3, 121], 'true,false': [1.725, 248, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.323, 74, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 83], 'true,false,true': [0.099, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 171, 19], 'false,false,false,true': [2.073, 92, 28], 'false,false,false,false': [2.551, 60, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.203, 4, 78], 'false,true,true,true': [0.876, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.101, 225, 0], 'false,false,true': [0.798, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.305, 114, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.39, 2, 85], 'true,true,false': [1.069, 1, 19], 'true,false,true': [0.022, 160, 0], 'true,false,false,true': [0.046, 44, 0], 'true,false,false,false': [1.005, 16, 4], 'false,true': [1.336, 54, 25], 'false,false,true': [0.776, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.005, 50, 21]}]
{'': [0.2208506841165995, 0.23363980530016282], 'false': [0.23104389834068595, 0.23638888888888995], 'false,true': [7.105427357601002e-16, 4.794144879063176e-17], 'true': [2.049642507000289e-15, 0.017538265306122344], 'true,false': [-1.6417843515668981e-16, 0.06320022981901739], 'false,true,true': [0.0, 0.0]}
{'': [0.033640127271827296, 0.1321569812654907], 'false': [0.0756562733902324, 0.1719869636791639], 'false,false': [0.07444812703761164, 0.19117679833279577], 'false,false,false': [0.002133352346707973, 0.18079096124065352], 'false,true': [nan, 0.0756562733902324], 'false,false,true': [nan, 0.07444812703761164]}
{'': [0.03711071657234466, 0.12182878995193801], 'false': [nan, 0.12182878995193874], 'false,false': [0.0018681432537663327, 0.11086906425979642], 'false,false,false': [0.08679334335648387, 0.16461326463086245], 'true': [0.016639000743298746, 0.13789036107003724], 'true,false': [0.2017806550711879, 0.10944505561385981], 'true,true': [0.016639000743298746, nan], 'false,false,true': [0.005721188714659542, 3.552713678800501e-16]}
{'': [0.040091785511624026, 0.0007388851248128069], 'false': [2.470929600912433e-05, 0.0009713504039587386], 'false,false': [nan, 0.0009713504039587386], 'false,false,false': [nan, 0.0009713504039587386], 'false,true': [nan, 2.4709296009136958e-05], 'false,true,false': [2.2674767859644392e-05, 5.285179639682219e-06]}
{'': [0.05715737515588528, 0.08226570892152295], 'false': [0.002094033584960229, 0.08189314984581447], 'false,false': [0.07553062293071738, 0.11181994056722622], 'false,false,true': [0.0027489669365694295, 0.01333241167735404], 'true': [0.049391904063134574, 0.29692242208174463], 'false,true': [9.313061971050196e-06, 0.0]}
{'': [0.03887707130442981, 0.0848948460919125], 'false': [0.004692572067448956, 0.08782873148506468], 'false,false': [0.0940461928848627, 0.0007296398865227203], 'true': [nan, 0.03887707130442972], 'true,false': [nan, 0.03887707130442981], 'false,false,false': [0.0004994213901453225, 0.0008683701520864374]}
{'': [0.047559496603268435, 0.05289284446347072], 'false': [nan, 0.05289284446347064], 'false,false': [nan, 0.05289284446347072], 'false,false,false': [nan, 0.05289284446347072], 'true': [0.033531618212656614, 0.011670299009071853]}
{'': [0.012186807228438429, 0.03873686964040165], 'false': [nan, 0.03873686964040146], 'false,false': [0.021258443004787637, 0.05311112146965708], 'false,false,false': [0.03580301864137383, 0.07746767853372033], 'true': [0.011776025360022879, 0.004894579209456504], 'true,false': [0.004894579209456504, nan]}
{'': [0.041355569031164774, 0.034152834736679516], 'false': [0.020180445568146875, 0.056063121197239656], 'false,false': [0.01590358725586689, 0.0008141239098396256], 'false,true': [0.020216822259155397, 4.5496073537976875e-05], 'false,true,true': [0.020216822259155397, nan], 'false,false,false': [nan, 0.0008141239098396256]}
{'': [0.024923543122659462, 0.042191342672121636], 'false': [0.02258817143717772, 0.06311679427516925], 'false,false': [0.2009831299816542, 0.05661951145218536], 'false,false,false': [nan, 0.056619511452185384], 'true': [0.029246287404544668, 0.00539726958131139], 'true,true': [0.02221426337661727, 0.057183037967888074], 'true,false': [3.0092485436325476e-06, 0.018531735818345014], 'true,false,false': [4.814009400922924e-05, 0.05052559934189347]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 13.022
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8444503049625265;  // std dev = 0.116, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.7993254056877476;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.12468368292623949;  // std dev = 0.130, 233.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.16249676118646889;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6932529240961507;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.742422648813791;  // std dev = 0.194, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7222298957701212;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1273401845599511;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.0966783497097229;  // std dev = 0.159, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.027340184559950666;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return -0.08232320949083263;  // std dev = 1.193, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12748221193068973;  // std dev = 4.678, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.5366293763491377;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5652008049205665;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5703457903864296;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.6033667035021133;  // std dev = 0.105, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5722429711784464;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11129867664811356;  // std dev = 0.686, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return 0.008349260900732562;  // std dev = 2.691, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09973545665284231;  // std dev = 3.065, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return 0.1647732883180833;  // std dev = 3.341, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.42962207890397847;  // std dev = 0.042, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return 0.048746829185311535;  // std dev = 1.142, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.26761835208861173;  // std dev = 1.190, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4313736937554754;  // std dev = 0.223, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5843897483640773;  // std dev = 1.366, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.7522500514370237;  // std dev = 0.265, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.10920966636112905;  // std dev = 0.100, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.11216563312337686;  // std dev = 0.039, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.1622166470863426;  // std dev = 0.167, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2589918032227376;  // std dev = 1.927, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.5849996900972196;  // std dev = 0.279, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2004462816243744;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3347784349932459;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3310839626025266;  // std dev = 0.048, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08999129927671716;  // std dev = 0.533, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   | | | else return 0.001588233128347648;  // std dev = 2.112, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.010198445075567287;  // std dev = 2.916, 113.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=25 */
%   | | | else return 0.05294593693426482;  // std dev = 2.464, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2719324303806443;  // std dev = 0.005, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.044377543661331655;  // std dev = 0.169, 150.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=18 */
%   | | else return -0.06946547425767852;  // std dev = 0.142, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.31730437509684434;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2536499623713131;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.24504989795364313;  // std dev = 0.924, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5044784708059861;  // std dev = 1.398, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13658111280508117;  // std dev = 0.054, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.12372454468426827;  // std dev = 0.333, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22352869706622763;  // std dev = 0.027, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.3575679316666452;  // std dev = 0.181, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return -0.09453839132764963;  // std dev = 0.016, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.15407106224467768;  // std dev = 0.958, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.40869263414603363;  // std dev = 0.352, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.11643211294137107;  // std dev = 0.025, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2908325636461026;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09682950651859244;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.10892953325547872;  // std dev = 0.335, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.17149678108015975;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.23081870374319377;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return -0.07801179823025797;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.32762253600138136;  // std dev = 1.022, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.0819198297781511;  // std dev = 0.008, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24986674100281103;  // std dev = 1.117, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.11139345436894729;  // std dev = 0.019, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05406782105534774;  // std dev = 0.765, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05100978375817147;  // std dev = 1.542, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16328903993186997;  // std dev = 0.013, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.005509230874789057;  // std dev = 1.588, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return 0.1658369622671745;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.20022410760835693;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1534115885632597;  // std dev = 0.139, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.29995799520036626;  // std dev = 0.278, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07487393550076703;  // std dev = 0.008, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.30463156676784536;  // std dev = 0.082, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11799818886347233;  // std dev = 0.032, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13034633318733255;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.17480993575853512;  // std dev = 0.213, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.06279814748507172;  // std dev = 0.058, 194.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=4 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( recursion_accounttype(F, B), tweets(A, H) )
%   | | | then return -0.11427171699215331;  // std dev = 1.197, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.20967002624796172;  // std dev = 0.203, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.09518109775926036;  // std dev = 0.014, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.21277977198907327;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10821013970246511;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0582249916794847;  // std dev = 0.281, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.666', 'seconds']
Refined model CLL: -0.10204


******************************************
Best model found
******************************************
Results 

CLL : -0.101022 

AUC ROC : 0.993832 

AUC PR : 0.43515 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 13.022 

Total Inference Time : 21.64782428741455 

Total revision time: 47.026380353927614
Best scored revision CLL: -0.10204


Results 

CLL : -0.101022 

AUC ROC : 0.993832 

AUC PR : 0.43515 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 72.31476026153564 

Total Inference Time : 21.64782428741455 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.057
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5248156017661789;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028882575586751866;  // std dev = 0.269, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7505511758931249;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.3367066318848496;  // std dev = 1.599, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5766038451214041;  // std dev = 0.159, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5879550920336301;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.005389224844053418;  // std dev = 1.806, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | | else return 0.08122900544873793;  // std dev = 1.507, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5327044881885732;  // std dev = 0.661, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1231051896627901;  // std dev = 0.067, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1313009609518148;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19279452403923392;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31007463642018895;  // std dev = 0.165, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.35525332575350455;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2961512319762001;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5635979848568639;  // std dev = 0.104, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08316607893161022;  // std dev = 1.187, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | else return -0.10012917544266585;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0012574804965917786;  // std dev = 1.296, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23833229069832018;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.42528818200164603;  // std dev = 0.378, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11986037736095285;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.10186213609793893;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28592861630902616;  // std dev = 0.395, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.06842479628941611;  // std dev = 1.099, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01036799934500826;  // std dev = 0.230, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18626452673125762;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04000463607786141;  // std dev = 0.155, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.005209038744752332;  // std dev = 0.707, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.024159793795294926;  // std dev = 0.956, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17739755111288513;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25180435404265167;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09281491497465914;  // std dev = 0.044, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2306653340836471;  // std dev = 0.932, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14788219832272825;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1891323543221492;  // std dev = 0.340, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.14080017768203446;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08535107335918286;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07762808017188572;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then return 0.0759105389531423;  // std dev = 0.514, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.180983195987362;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1483736444093907;  // std dev = 0.649, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.871', 'seconds']
Parameter learned model CLL:-0.116088 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false': [0.0, 7, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.471, 2, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 31, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.044, 0, 2], 'false,false,false,false': [1.599, 6, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.159, 0, 8], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.057, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.806, 34, 6], 'false,false,false,false': [1.507, 11, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.661, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.067, 29, 0], 'false,true,false,false': [5.27e-09, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.118, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.165, 0, 9], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.104, 0, 7], 'false,false,true,false': [1.187, 45, 3], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.296, 37, 13], 'false,true': [0.0, 0, 3], 'false,false,true': [0.378, 0, 9], 'false,false,false,true': [0.041, 6, 0], 'false,false,false,false': [0.034, 4, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.395, 0, 19], 'true,false': [1.099, 42, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 2, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.039, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 29, 4], 'false,false,false,true': [0.707, 12, 5], 'false,false,false,false': [0.956, 6, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.055, 0, 10], 'false,true,true,true': [0.332, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 35, 0], 'false,false,true': [0.932, 1, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.121, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.34, 0, 14], 'true,true,false': [0.007, 0, 2], 'true,false,true': [0.013, 38, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.514, 4, 5], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.649, 2, 3]}]
{'': [0.20628099173553668, 0.24609374999999992], 'false': [0.24999999999999983, 0.22222222222222213], 'false,true': [0.0, -2.7755575615628915e-18], 'true': [-2.220446049250313e-16, 4.2700885562506023e-17], 'true,false': [2.7755575615628914e-17, -7.93016446160826e-18], 'false,true,true': [0.0, nan]}
{'': [1.4802973661668753e-16, 0.13408618959485316], 'false': [0.07226279799647506, 0.19055828371512248], 'false,false': [-2.3129646346357427e-18, 0.19031562843930325], 'false,false,false': [0.0009658273954848973, 0.19661072618070682], 'false,true': [nan, 0.07226279799647506], 'false,false,true': [nan, -2.3129646346357427e-18]}
{'': [0.002870792372504738, 0.11561236350596707], 'false': [nan, 0.11561236350596706], 'false,false': [-4.4408920985006264e-17, 0.10207996745221751], 'false,false,false': [0.08156831305917862, 0.15132119045009937], 'true': [0.003157192601441039, 0.0016221108115896943], 'true,true': [0.003157192601441039, nan], 'true,false': [nan, 0.0016221108115896943], 'false,false,true': [0.0, 0.0]}
{'': [0.017463953711115573, 0.0009749422335229463], 'false': [0.00013672555014403452, 0.002762551215099285], 'false,false': [nan, 0.002762551215099285], 'false,false,false': [nan, 0.002762551215099285], 'false,true': [nan, 0.00013672555014402818], 'false,true,false': [0.00015349862351194036, 4.625929269271485e-18]}
{'': [0.0029048853269230566, 0.07020277903579944], 'false': [-1.1102230246251566e-17, 0.06900976218585242], 'false,false': [0.07226412628623546, 1.1564823173178713e-18], 'false,false,true': [0.0015536652686595684, 0.029337408891469397], 'true': [0.003023538966260212, 0.0], 'false,true': [-1.1102230246251566e-17, nan]}
{'': [0.03358054218206247, 0.07004484152728435], 'false': [-9.25185853854297e-18, 0.07984323222000485], 'false,false': [0.015842033278764125, 0.0003651173366312349], 'true': [nan, 0.03358054218206247], 'true,false': [nan, 0.03358054218206247], 'false,false,false': [0.00028161890060738004, 0.00029600297753002575]}
{'': [0.04642782553541168, 0.017563139241191194], 'true': [0.008231402975813203, 0.025721046476330982], 'false': [nan, 0.017563139241191194], 'false,false': [nan, 0.017563139241191194], 'false,false,false': [nan, 0.017563139241191194]}
{'': [0.0001293791387863008, 0.03743413373994817], 'false': [nan, 0.03743413373994816], 'false,false': [0.023936400646789438, 0.052430835897002745], 'false,false,false': [0.029370465228065128, 0.0914073464420205], 'true': [0.0001293791387863008, nan]}
{'': [0.003051158947613641, 0.041383645287434954], 'false': [0.020591068383671106, 0.09812944854562299], 'false,false': [0.10848657936950393, 0.002435235471330797], 'false,true': [0.013765558321536184, 5.584718734371132e-05], 'false,true,true': [0.013765558321536184, nan], 'false,false,false': [nan, 0.002435235471330797]}
{'': [0.016813108781383226, 0.04725682312292803], 'false': [0.029399389447140316, 0.07040211172264792], 'false,false': [0.0, 0.08430530359149141], 'false,false,false': [nan, 0.08430530359149141], 'true': [0.007503924887557044, 7.09996931036877e-06], 'true,true': [0.008280671419894272, 2.2699774771556963e-05], 'true,false': [4.4914207171012505e-06, 0.0], 'true,false,false': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.229
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7413433124639605;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7267633789619565;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.015375036594832914;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7683303882208612;  // std dev = 0.069, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.31385537675689584;  // std dev = 1.680, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5777245882347753;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6089370876432955;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6078303159128953;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11535735575084789;  // std dev = 0.037, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10568591931830011;  // std dev = 1.414, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.1980239316817022;  // std dev = 1.219, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.3305934229076604;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.08064353640906485;  // std dev = 1.002, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.4469184324062973;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5763527474613558;  // std dev = 0.206, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.683123918061994;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10250831268131774;  // std dev = 0.007, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.11488017689527111;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( tweets(A, I) )
%   | | then return -0.18844260529168713;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.26924124690271756;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3566346146153766;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.36285712240392964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3245780812785251;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.46415507851666904;  // std dev = 0.218, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07654746794712643;  // std dev = 1.133, 57.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=3 */
%   | | else return -0.09235936858590671;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.29369509574859665;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.26988346249073647;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08613958022086482;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.006684248618209342;  // std dev = 0.180, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.24890042840776516;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.1038265475591879;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.46746619834149505;  // std dev = 0.243, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12826556059495878;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1404059074288103;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then return 0.22258019878373592;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2424867482260005;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2053173982134362;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | then return 0.010667500421622678;  // std dev = 0.820, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.08071589673659985;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2931592469766556;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10623707299917465;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.17181594668250055;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.004565997607665967;  // std dev = 0.891, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1912550447522967;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.17383281899826875;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return -0.09157139810059393;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23937545071248742;  // std dev = 0.115, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.07528858043127305;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.11693273963698737;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06943099169358334;  // std dev = 0.000917, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05757708853694673;  // std dev = 0.431, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2695916411254309;  // std dev = 0.545, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16493663296788305;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.004450845162324496;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1534276236399573;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19921708323748266;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07077934268733184;  // std dev = 0.007, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19867377263504282;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4069441862129055;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.11307165025949187;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.19613589646347818;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15514450847930583;  // std dev = 0.181, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.04145402462249966;  // std dev = 0.571, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13170538636965246;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.06734584240669723;  // std dev = 0.005, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.06580233870743359;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.10813268831200447;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.24199587338009432;  // std dev = 0.698, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.036796835038904255;  // std dev = 0.296, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.02539773358676635;  // std dev = 0.596, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '33.411', 'seconds']
Refined model CLL: -0.096535


******************************************
Best model found
******************************************
Results 

CLL : -0.106005 

AUC ROC : 0.995498 

AUC PR : 0.435242 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 4.229 

Total Inference Time : 6.32139778137207 

Total revision time: 13.886035190582275
Best scored revision CLL: -0.096535


Results 

CLL : -0.106005 

AUC ROC : 0.995498 

AUC PR : 0.435242 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 39.17441509819031 

Total Inference Time : 6.32139778137207 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.426
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8093684472946338;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.41370449065506787;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7292126477841453;  // std dev = 1.33e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.013525231987464071;  // std dev = 0.288, 84.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7463156693792841;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20466684415843708;  // std dev = 2.001, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5008996740707234;  // std dev = 1.396, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.7318750667240883;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5840687608832322;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5649850580162765;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5649850580162765;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.032719474337058255;  // std dev = 2.493, 90.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=10 */
%   | | | else return 0.03940651921579083;  // std dev = 1.979, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5187811017339086;  // std dev = 1.453, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1187183644686824;  // std dev = 0.047, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.1283116628917071;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1840976258697322;  // std dev = 0.183, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3302253879956254;  // std dev = 0.248, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.41249525136072507;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30526563013323876;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.612994939753382;  // std dev = 0.108, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08868938599782765;  // std dev = 1.267, 86.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=3 */
%   | | else return -0.09808077933022671;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02748170410687284;  // std dev = 2.113, 113.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24460190352585776;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4460453320047353;  // std dev = 0.501, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12418789433358811;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.13287334125515432;  // std dev = 0.160, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27637705910517085;  // std dev = 1.290, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return -0.0837723371403635;  // std dev = 1.183, 115.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.023116664298198513;  // std dev = 0.356, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19835455091417156;  // std dev = 0.043, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.039883415432414096;  // std dev = 0.154, 92.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.03464016251821823;  // std dev = 1.155, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.12359350628207375;  // std dev = 0.968, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15364850787283513;  // std dev = 0.172, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30388700391691187;  // std dev = 0.447, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0909539374881391;  // std dev = 0.052, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37481351802658613;  // std dev = 0.364, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1261915997366912;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.2002394788375105;  // std dev = 0.507, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.13814008097592445;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08568600319358029;  // std dev = 0.019, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06924156600387323;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06836725812183524;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then return 0.08866257038431334;  // std dev = 0.504, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18021666134021885;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.006469946568030392;  // std dev = 0.879, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.613', 'seconds']
Parameter learned model CLL:-0.112227 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.379, 2, 39], 'true,false,true': [7.3e-08, 75, 0], 'true,false,false': [0.0, 7, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.497, 4, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.33e-07, 0, 28], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.288, 73, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 10, 0], 'false,false,false,true': [0.066, 0, 3], 'false,false,false,false': [2.001, 13, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.396, 2, 24], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.087, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.493, 80, 10], 'false,false,false,false': [1.979, 23, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.453, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 77, 0], 'false,true,false,false': [1.67e-08, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.183, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.248, 0, 26], 'true,false': [0.037, 0, 2], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.108, 0, 13], 'false,false,true,false': [1.267, 83, 3], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.113, 78, 35], 'false,true': [0.0, 0, 4], 'false,false,true': [0.501, 0, 11], 'false,false,false,true': [0.081, 6, 0], 'false,false,false,false': [0.16, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.29, 1, 43], 'true,false': [1.183, 110, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.356, 8, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.043, 0, 28], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 81, 11], 'false,false,false,true': [1.155, 17, 6], 'false,false,false,false': [0.968, 5, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.172, 1, 28], 'false,true,true,true': [0.447, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.052, 94, 0], 'false,false,true': [0.364, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.199, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.507, 0, 36], 'true,true,false': [0.006, 0, 3], 'true,false,true': [0.019, 80, 0], 'true,false,false,true': [3.73e-09, 7, 0], 'true,false,false,false': [0.014, 8, 0], 'false,true': [0.504, 4, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.879, 9, 4]}]
{'': [0.21653777513385022, 0.24408284023668594], 'false': [0.2283737024221454, 0.2469135802469134], 'false,true': [-1.4802973661668753e-16, -1.0092936587501423e-17], 'true': [0.04640095181439758, 7.311224796312007e-17], 'true,false': [7.105427357601002e-17, -7.93016446160826e-18], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [6.344131569286609e-16, 0.11498842020842209], 'false': [0.08312678271950542, 0.17339958308024023], 'false,false': [2.7755575615628915e-18, 0.1991026941862867], 'false,false,false': [0.0014410135397814698, 0.190667145902897], 'false,true': [nan, 0.08312678271950542], 'false,false,true': [nan, 2.7755575615628915e-18]}
{'': [0.06742743989530808, 0.09732528989310701], 'false': [nan, 0.09732528989310703], 'false,false': [7.401486830834377e-17, 0.08607814128505938], 'false,false,false': [0.0690433297825186, 0.13501039174671983], 'true': [0.07408510823725838, 0.0024978412723029773], 'true,true': [0.07495862318043524, 0.0], 'true,false': [nan, 0.0024978412723029773], 'false,false,true': [0.0, 0.0]}
{'': [0.041422211467167055, 0.0007974253671008581], 'false': [3.778816888368733e-05, 0.0022283812826970153], 'false,false': [nan, 0.0022283812826970153], 'false,false,false': [nan, 0.0022283812826970153], 'false,true': [nan, 3.778816888368733e-05], 'false,true,false': [2.8627736523117793e-05, 1.3877787807814457e-17]}
{'': [0.002692355168635165, 0.06899441668187131], 'false': [-3.700743415417188e-17, 0.0677801498182023], 'false,false': [0.07248658985462804, -1.734723475976807e-18], 'false,false,true': [0.0009001325720964323, 0.018654347917008297], 'true': [0.002363244239442666, 0.0006859190027481699], 'false,true': [-3.700743415417188e-17, nan]}
{'': [0.03951926497376976, 0.08047273243663756], 'false': [0.0, 0.08922410850026885], 'false,false': [0.022842838821606325, 0.0019025426689882412], 'true': [nan, 0.0395192649737698], 'true,false': [nan, 0.03951926497376976], 'false,false,false': [0.0010941419157015052, 0.002316863715043017]}
{'': [0.045223098997487, 0.01269891371904631], 'true': [0.03779874020310539, 0.01216979961484618], 'false': [nan, 0.01269891371904631], 'false,false': [nan, 0.01269891371904631], 'false,false,false': [nan, 0.01269891371904631]}
{'': [6.70122090406035e-05, 0.03757720238330713], 'false': [nan, 0.037577202383307126], 'false,false': [0.023719546632361223, 0.07412817018038649], 'false,false,false': [0.05801963152670563, 0.0937271557303371], 'true': [6.70122090406035e-05, nan]}
{'': [0.02968454820495808, 0.027665673228262966], 'false': [0.01946604617833218, 0.056087976218388305], 'false,false': [0.01660504233995519, 0.0018860240863641136], 'false,true': [0.014280754484894267, 2.9146200377945903e-05], 'false,true,true': [0.014280754484894267, nan], 'false,false,false': [nan, 0.0018860240863641136]}
{'': [0.018031524213892775, 0.045790879097396264], 'false': [0.02542092173707248, 0.05755298471655157], 'false,false': [0.0, 0.05949071670332065], 'false,false,false': [nan, 0.05949071670332065], 'true': [0.006867773108545429, 4.393715163481614e-05], 'true,true': [0.007142466743927606, 1.175543955454772e-05], 'true,false': [4.464638844617342e-06, 1.3637894375562177e-05], 'true,false,false': [1.982541115402065e-18, 2.5214325293635743e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.561
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7275524396186783;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.7473839334745775;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21947341221095437;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7354302359875428;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04497625274369181;  // std dev = 1.969, 63.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=6 */
%   | | | else return -0.03650589634530236;  // std dev = 1.130, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7601352631207009;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13874251021224887;  // std dev = 2.186, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5692495980075372;  // std dev = 0.007, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.5864424780091808;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.20978678411807436;  // std dev = 1.086, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5533705637749737;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6731303773666394;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09340206177227912;  // std dev = 1.181, 63.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=2 */
%   | | | else return 0.05648353073748308;  // std dev = 1.847, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0804234821145899;  // std dev = 1.425, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.18323330935176152;  // std dev = 1.590, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4227642549947224;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.442277176864282;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1789759977855733;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.48996837748087874;  // std dev = 0.208, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.7240627798626638;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6256446530768858;  // std dev = 0.908, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11392390359458264;  // std dev = 0.008, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.11976247422484429;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.15837705779770445;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.3256963050746364;  // std dev = 2.58e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3148504352023529;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3477719962014388;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.43897127642492423;  // std dev = 0.160, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3680362369878703;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5670775477521546;  // std dev = 0.158, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09193053139551928;  // std dev = 1.286, 95.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=3 */
%   | | else return -0.09324670672814234;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2580581715822129;  // std dev = 0.006, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3782962549818111;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09454061347775214;  // std dev = 0.040, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.05415168774468583;  // std dev = 0.143, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3111253496909657;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.38219637600797224;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.57507475902572;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12290700407057635;  // std dev = 0.064, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12337009147186066;  // std dev = 0.120, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.2088773487238671;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.2615099262628333;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06449504509203162;  // std dev = 0.610, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | | else return -0.08743906315731431;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.3037725079276008;  // std dev = 0.250, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09872831348751109;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3009850905092488;  // std dev = 0.159, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14302845435086525;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10534977644059898;  // std dev = 0.305, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return 0.11234268153381027;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.16642671460747152;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20332951880644196;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06532236268025066;  // std dev = 0.079, 64.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.2452933370794634;  // std dev = 0.218, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08789280639967648;  // std dev = 0.020, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.21247672140475052;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08206320714728468;  // std dev = 0.600, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.01521374397191306;  // std dev = 0.971, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16009602567517242;  // std dev = 0.004, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return -0.2060029180269571;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16519435388671908;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16349605269959974;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2789816054603387;  // std dev = 0.199, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07638886291926504;  // std dev = 0.005, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2537314097353044;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4936733154425205;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14077140331442584;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.06331261409294128;  // std dev = 1.354, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.2027433299749129;  // std dev = 0.224, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1684303385774093;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.0786580301665818;  // std dev = 0.065, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.013934823410466821;  // std dev = 0.126, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return -0.003514599670377115;  // std dev = 0.360, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21621973582058063;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1194076296690421;  // std dev = 0.311, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03625270365497742;  // std dev = 0.642, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.287', 'seconds']
Refined model CLL: -0.10335


******************************************
Best model found
******************************************
Results 

CLL : -0.108037 

AUC ROC : 0.994514 

AUC PR : 0.352842 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 5.561 

Total Inference Time : 6.717352628707886 

Total revision time: 17.805922996520998
Best scored revision CLL: -0.10335


Results 

CLL : -0.108037 

AUC ROC : 0.994514 

AUC PR : 0.352842 

Precision : 0.337719 

Recall : 0.987179 

F1 : 0.503268 

Total Learning Time : 43.09430290412903 

Total Inference Time : 6.717352628707886 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.781
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.29564893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.700042915922786;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -5.63597280988689E-5;  // std dev = 0.301, 115.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07044298333209421;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7523897833398173;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17118859232579237;  // std dev = 2.474, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5373101513324497;  // std dev = 1.344, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.7227814815010387;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8749690690262005;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3785924800553462;  // std dev = 0.745, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5641941519078576;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5641941519078576;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029938982985688416;  // std dev = 2.952, 117.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=14 */
%   | | | else return 0.08908856293444216;  // std dev = 2.244, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5272523065468229;  // std dev = 1.442, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12243922909008113;  // std dev = 0.028, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return -0.135542269944617;  // std dev = 2.47e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18427035117941828;  // std dev = 0.213, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31322626679992327;  // std dev = 1.114, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else return 0.44459226654194983;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3029593976177897;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5016073122778539;  // std dev = 1.334, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09231584302447217;  // std dev = 1.720, 134.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=5 */
%   | | else return -0.10929081811239205;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02199055983875808;  // std dev = 2.757, 164.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=52 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24301794406510918;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5117559631109028;  // std dev = 0.556, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11863456066386795;  // std dev = 0.092, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.12397125692575969;  // std dev = 0.172, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2902872035515482;  // std dev = 1.315, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return -0.08335986626928642;  // std dev = 1.697, 136.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022856883202251287;  // std dev = 0.508, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1693784646488688;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03935763972681935;  // std dev = 0.171, 127.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.011894591016740997;  // std dev = 0.919, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.07543826138492254;  // std dev = 1.375, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19488354657991547;  // std dev = 0.062, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2911755435590484;  // std dev = 0.593, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09353355208787315;  // std dev = 0.040, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4097884409265637;  // std dev = 0.462, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12015505176618967;  // std dev = 0.174, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1976971033865741;  // std dev = 0.652, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.13653698733931702;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08610171928319207;  // std dev = 0.032, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08393460682672296;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.013851070219860623;  // std dev = 0.347, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.005660976534359774;  // std dev = 0.665, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2146376954722914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08876142575805056;  // std dev = 1.043, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.530', 'seconds']
Parameter learned model CLL:-0.113975 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.496, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.989, 1, 43], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.301, 98, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.081, 0, 3], 'false,false,false,false': [2.474, 21, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.344, 2, 37], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.745, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [2.952, 103, 14], 'false,false,false,false': [2.244, 24, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.442, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 93, 0], 'false,true,false,false': [2.47e-08, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.213, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.114, 1, 40], 'true,false': [0.024, 0, 2], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.334, 2, 17], 'false,false,true,false': [1.72, 129, 5], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.757, 112, 52], 'false,true': [0.0, 0, 8], 'false,false,true': [0.556, 0, 15], 'false,false,false,true': [0.092, 19, 0], 'false,false,false,false': [0.172, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.315, 1, 63], 'true,false': [1.697, 129, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.508, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.989, 1, 43], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.171, 110, 17], 'false,false,false,true': [0.919, 20, 8], 'false,false,false,false': [1.375, 13, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.062, 0, 42], 'false,true,true,true': [0.593, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 128, 0], 'false,false,true': [0.462, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.174, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.652, 0, 54], 'true,true,false': [0.012, 0, 6], 'true,false,true': [0.032, 100, 0], 'true,false,false,true': [3.73e-09, 8, 0], 'true,false,false,false': [0.347, 3, 1], 'false,true': [0.665, 18, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.043, 8, 6]}]
{'': [0.22646565082644646, 0.2488888888888884], 'false': [0.25, 0.24609375000000003], 'false,true': [-2.5376526277146434e-16, -7.93016446160826e-18], 'true': [0.016124697661918288, 0.00862003780718335], 'true,false': [7.993605777301127e-17, 0.06222222222222227], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.02221074380165199, 0.1201131592392948], 'false': [0.09063397677229278, 0.17494503380470988], 'false,false': [0.058593749999999965, 0.2014855913216256], 'false,false,false': [0.0021669749765861703, 0.19121786950944858], 'false,true': [nan, 0.09063397677229278], 'false,false,true': [nan, 0.058593749999999965]}
{'': [0.05798484916505334, 0.10885209792000508], 'false': [nan, 0.10885209792000508], 'false,false': [8.074349270001139e-17, 0.09466320605582701], 'false,false,false': [0.07445920220181323, 0.15740923519760963], 'true': [0.04597693453561615, 0.15039826774279286], 'true,false': [0.0, 0.13871989106282295], 'true,true': [0.04629583993507712, 0.0], 'false,false,true': [7.401486830834377e-17, 4.4408920985006264e-17]}
{'': [0.02735411637810717, 0.0008939951144913742], 'false': [3.2592686676611184e-05, 0.0016766390705574346], 'false,false': [nan, 0.0016766390705574346], 'false,false,false': [nan, 0.0016766390705574346], 'false,true': [nan, 3.2592686676611184e-05], 'false,true,false': [8.325279354885886e-06, 2.9077269692563625e-17]}
{'': [0.02963062748353542, 0.06806801590358041], 'false': [-2.0185873175002847e-17, 0.0659092224186318], 'false,false': [0.06932890450367082, 1.5419764230904951e-18], 'false,false,true': [0.09368025941888393, 0.022071201274141947], 'true': [0.030259253122688307, 0.00028942835957304625], 'false,true': [-2.0185873175002847e-17, nan]}
{'': [0.04634194206711738, 0.07469287492304764], 'false': [-2.0816681711721685e-17, 0.07921604921029589], 'false,false': [0.02057897661810264, 0.0008145088087935851], 'true': [nan, 0.04634194206711735], 'true,false': [nan, 0.04634194206711738], 'false,false,false': [0.00044930863055742706, 0.001050809891776335]}
{'': [0.05342912106155846, 0.01986419434240755], 'true': [0.02701484290234832, 0.02118348711564655], 'false': [nan, 0.01986419434240755], 'false,false': [nan, 0.01986419434240755], 'false,false,false': [nan, 0.01986419434240755]}
{'': [0.022245843933335917, 0.03843150819033812], 'false': [nan, 0.038431508190338144], 'false,false': [0.02938650600051457, 0.05797848483904142], 'false,false,false': [0.030185689035482154, 0.09453301677177274], 'true': [0.022245843933335917, nan]}
{'': [0.0038363102450392865, 0.030321430911565764], 'false': [0.02088106334210573, 0.06312864878282161], 'false,false': [0.019439396195150147, 0.001080971935123427], 'false,true': [0.01600458956441682, 1.2380992536748306e-05], 'false,true,true': [0.01600458956441682, nan], 'false,false,false': [nan, 0.001080971935123427]}
{'': [0.020570408736617384, 0.041076685761814946], 'false': [0.01768070064225225, 0.0734632754307565], 'false,false': [0.0, 0.07765432989542763], 'false,false,false': [nan, 0.07765432989542763], 'true': [0.007426569522934338, 0.001430424538427903], 'true,true': [0.00787514240585168, 2.2909761255687316e-05], 'true,false': [1.0378200851161035e-05, 0.012185197453174411], 'true,false,false': [1.734723475976807e-18, 0.03018089993588408]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.249
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return -0.08921948595311938;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6750289677665106;  // std dev = 0.206, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.7350122940520397;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2505511758931249;  // std dev = 1.002, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04943259253458048;  // std dev = 2.425, 98.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=9 */
%   | | | else return -0.03905667870899265;  // std dev = 1.220, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.03533317790015371;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.16117210857101946;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.754967719201899;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12404622868253883;  // std dev = 2.593, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5695861906043135;  // std dev = 0.121, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7358741119406687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8645827546948796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5945433576595645;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.566312568722437;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.740046954515535;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12036294943324538;  // std dev = 0.031, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20114496691610836;  // std dev = 1.681, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.0876803710162749;  // std dev = 1.838, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.34808193690574996;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.25901537969897626;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.42499622119847885;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4709357013753525;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5765262377280976;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5199105590931541;  // std dev = 0.272, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7262904395476496;  // std dev = 0.220, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10893204763528454;  // std dev = 0.005, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.17606560137932;  // std dev = 0.025, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.3390818189074301;  // std dev = 0.101, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.330863610002213;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3940252606015177;  // std dev = 0.271, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4385813292393102;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3378264481640243;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3638932473347848;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05531154324697017;  // std dev = 1.697, 134.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=11 */
%   | | | else return 0.07330479632374691;  // std dev = 2.012, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else return -0.09281933996296714;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.26707452012960475;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.39263983530253665;  // std dev = 0.242, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09313950570219626;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.25757251228983385;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.0381714159070951;  // std dev = 0.211, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2759879666091964;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.09422917787674367;  // std dev = 1.020, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5489565326258726;  // std dev = 0.273, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14476172149281977;  // std dev = 0.038, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.2182043652058728;  // std dev = 0.008, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.04614648156109877;  // std dev = 0.883, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B), tweets(G, E) )
%   | | | then return 0.2560344385869128;  // std dev = 1.057, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.09760574306250236;  // std dev = 0.723, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.1579552176085419;  // std dev = 0.831, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.07465648436512622;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.44159115015990613;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11622101553367346;  // std dev = 0.220, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.11669945813823905;  // std dev = 0.317, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | then return 0.1830750019890336;  // std dev = 0.023, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(E, C), follows(A, C) )
%   | | | then return -0.15011476021446105;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17685195249333358;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20316597394637367;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then if ( follows(F, H), follows(H, A) )
%   | | then return -0.08600248417570144;  // std dev = 0.128, 76.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=2 */
%   | | else return 0.014788969873448455;  // std dev = 0.158, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2164955220726858;  // std dev = 0.113, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.03793188413492984;  // std dev = 0.674, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0.006935924096595497;  // std dev = 1.484, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.11721352145056815;  // std dev = 0.203, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.16116059224632726;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.20265497864746665;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1595625789201864;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3115240826194274;  // std dev = 0.175, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07489346398738003;  // std dev = 0.059, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2995805714254674;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4517441956674679;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14259479235714387;  // std dev = 0.034, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11650352593099667;  // std dev = 0.988, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.2162694687923643;  // std dev = 0.253, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.1470642798525502;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0660847650564772;  // std dev = 0.038, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.03988817990557754;  // std dev = 0.126, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | else return -0.051457693838976665;  // std dev = 0.119, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20087309512751506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.07039940536591247;  // std dev = 0.446, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0426398807186846;  // std dev = 0.919, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.189', 'seconds']
Refined model CLL: -0.104311


******************************************
Best model found
******************************************
Results 

CLL : -0.110291 

AUC ROC : 0.993847 

AUC PR : 0.330479 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 8.249 

Total Inference Time : 13.589186668395996 

Total revision time: 29.30054214477539
Best scored revision CLL: -0.104311


Results 

CLL : -0.110291 

AUC ROC : 0.993847 

AUC PR : 0.330479 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 54.588922052383424 

Total Inference Time : 13.589186668395996 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.153
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8215635692458537;  // std dev = 1.700, 82.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=79 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.07935106490048778;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.3025933795439568;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6972857759259543;  // std dev = 1.402, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.021645872696359383;  // std dev = 0.279, 156.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0915462250982968;  // std dev = 0.992, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7439019002159079;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12269879042652927;  // std dev = 2.972, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5661723054007421;  // std dev = 1.063, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.7310747601627892;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8215132016537283;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5819802174415947;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5698282996963627;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5698282996963627;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.024118803827110635;  // std dev = 3.440, 157.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=19 */
%   | | | else return 0.0040928085569743484;  // std dev = 2.580, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4893774511496417;  // std dev = 2.588, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1203899232700904;  // std dev = 0.003, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return -0.12353154893979135;  // std dev = 1.05e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1724150761785983;  // std dev = 0.194, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2788713813609942;  // std dev = 1.714, 59.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=55 */
%   | else return 0.4071780436488159;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3147392086968451;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6268335136398195;  // std dev = 0.144, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08415608134900035;  // std dev = 2.169, 213.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=8 */
%   | | else return -0.1321739537660997;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02038864967846881;  // std dev = 3.154, 225.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=70 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26289499013026213;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5174930858614353;  // std dev = 0.752, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12192385991700265;  // std dev = 0.134, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11594222785836064;  // std dev = 0.112, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2919465239797216;  // std dev = 1.337, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else return -0.07830651301272935;  // std dev = 2.033, 196.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0012846810739075968;  // std dev = 0.596, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13859569703024294;  // std dev = 1.933, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   | else if ( follows(A, E) )
%   | | then return 0.22423130487569787;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044290856193956334;  // std dev = 0.160, 164.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01803010873449339;  // std dev = 1.463, 56.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=12 */
%   | | | else return 0.07121276851755365;  // std dev = 1.610, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14083789398686816;  // std dev = 0.235, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29236417984075525;  // std dev = 0.602, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09101837996299166;  // std dev = 0.037, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4367279283682322;  // std dev = 0.587, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11421569374554515;  // std dev = 0.177, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1503446997560331;  // std dev = 2.094, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | else return 0.1447623086060585;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08469042196400443;  // std dev = 0.009, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0778958136375602;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.023166442070145305;  // std dev = 0.444, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.029424265574116593;  // std dev = 0.878, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20160900756166122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06469843670433875;  // std dev = 1.247, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.774', 'seconds']
Parameter learned model CLL:-0.111567 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.7, 3, 79], 'true,false,true': [0.0, 143, 0], 'true,false,false': [0.242, 30, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.497, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.402, 2, 61], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 137, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.992, 20, 1], 'false,false,false,true': [0.085, 0, 4], 'false,false,false,false': [2.972, 36, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.063, 1, 52], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.113, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 7], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.44, 138, 19], 'false,false,false,false': [2.58, 44, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.588, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.003, 131, 0], 'false,true,false,false': [1.05e-08, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.194, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.714, 4, 55], 'true,false': [0.134, 0, 4], 'false,true,true': [2.11e-08, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.144, 0, 20], 'false,false,true,false': [2.169, 205, 8], 'false,false,false': [0.074, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.154, 155, 70], 'false,true': [0.112, 0, 10], 'false,false,true': [0.752, 0, 20], 'false,false,false,true': [0.134, 25, 0], 'false,false,false,false': [0.112, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.337, 1, 84], 'true,false': [2.033, 186, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.596, 14, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.933, 4, 59], 'true,false,true': [0.039, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 145, 19], 'false,false,false,true': [1.463, 44, 12], 'false,false,false,false': [1.61, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.235, 4, 59], 'false,true,true,true': [0.602, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 139, 0], 'false,false,true': [0.587, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.094, 4, 72], 'true,true,false': [0.009, 0, 7], 'true,false,true': [0.009, 138, 0], 'true,false,false,true': [2.63e-09, 9, 0], 'true,false,false,false': [0.444, 5, 2], 'false,true': [0.878, 19, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.247, 13, 7]}]
{'': [0.21583975533316224, 0.23375624759707755], 'false': [0.22222222222222174, 0.2469135802469136], 'false,true': [-1.6148698540002277e-16, 5.046468293750712e-18], 'true': [0.035246876859011976, 0.0112979591836733], 'true,false': [-9.006004955001269e-17, 0.05859375000000002], 'false,true,true': [-1.6148698540002277e-16, nan]}
{'': [0.031189471578500275, 0.10821140081620223], 'false': [0.07768753573634972, 0.1615282888130035], 'false,false': [0.04688803881117801, 0.18670382634276034], 'false,false,false': [0.0017902530786243487, 0.17314188416139242], 'false,true': [nan, 0.07768753573634972], 'false,false,true': [nan, 0.04688803881117801]}
{'': [0.021631624021680076, 0.10196664169057226], 'false': [nan, 0.10196664169057217], 'false,false': [-6.832141690000964e-17, 0.08820371653881423], 'false,false,false': [0.07539498580501157, 0.1255515340939325], 'true': [0.02140709148742401, 0.01593538435650621], 'true,true': [0.021307428140895, 0.0], 'true,false': [0.0031577944809099145, 0.003198829119114288], 'false,false,true': [1.2688263138573217e-16, 7.401486830834377e-17]}
{'': [0.0644095264894929, 0.0005985408952803972], 'false': [1.3584834023830462e-06, 0.0010762745476295076], 'false,false': [nan, 0.0010762745476295076], 'false,false,false': [nan, 0.0010762745476295076], 'false,true': [nan, 1.3584834023830462e-06], 'false,true,false': [7.913692641311332e-08, 4.625929269271485e-18]}
{'': [0.04788132049991485, 0.06087082866094786], 'false': [3.416070845000482e-17, 0.05817542369153512], 'false,false': [0.059949772977451306, 0.005431184256059499], 'false,false,true': [0.0010381307855677146, 0.022090292085177224], 'true': [0.04977713819141201, 0.004500654381140612], 'false,true': [3.416070845000482e-17, nan]}
{'': [0.04422173989746584, 0.08750212576440812], 'false': [0.0012536979065316256, 0.09644175410687054], 'false,false': [0.028253204580798608, 0.0006998296025867964], 'true': [nan, 0.044221739897465855], 'true,false': [nan, 0.04422173989746584], 'false,false,false': [0.000718305672965689, 0.0006551894824825749]}
{'': [0.04998711128557867, 0.017775523419348672], 'true': [0.021020827780241003, 0.021081327887464123], 'false': [nan, 0.017775523419348672], 'false,false': [nan, 0.017775523419348672], 'false,false,false': [nan, 0.017775523419348672]}
{'': [0.05773454994603263, 0.03766103180738621], 'true': [0.059318212764202724, 0.000741358683569851], 'false': [nan, 0.0376610318073863], 'false,false': [0.025443852366266843, 0.0608158378889479], 'false,false,false': [0.03820691597972454, 0.10799498521231223], 'true,false': [0.000741358683569851, nan]}
{'': [0.055337431926446835, 0.034098254138115264], 'false': [0.021714466603066754, 0.06869311357731427], 'false,false': [0.023001921149131556, 0.0008218818862177141], 'false,true': [0.013929249516922333, 9.864767325195905e-06], 'false,true,true': [0.013929249516922333, nan], 'false,false,false': [nan, 0.0008218818862177141]}
{'': [0.031616891642804824, 0.046364811108377015], 'false': [0.025686791828069298, 0.07487735911700917], 'false,false': [0.0, 0.0777286316246464], 'false,false,false': [nan, 0.0777286316246464], 'true': [0.05282029096842104, 0.001781199251014689], 'true,true': [0.05768154984520262, 1.2373999188162812e-05], 'true,false': [6.183821234670629e-07, 0.014807088757753868], 'true,false,false': [7.709882115452476e-19, 0.02809963581852698]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.278
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.13055162987223956;  // std dev = 0.106, 177.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7089769187130813;  // std dev = 0.128, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7425946244130863;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.048311455609259715;  // std dev = 2.750, 122.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=11 */
%   | | | else return -0.080950997891343;  // std dev = 1.164, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0016895356114743007;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.12668953561147428;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7455384727792423;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12562125898144608;  // std dev = 2.982, 51.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5656438529347274;  // std dev = 0.079, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6636310651787486;  // std dev = 0.310, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5579568545116635;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5579568545116635;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7492278352187636;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12047766010783738;  // std dev = 0.041, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21614355797969453;  // std dev = 1.780, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.09039900469396567;  // std dev = 2.259, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.28112338972379;  // std dev = 2.070, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | | else return 0.423980532580933;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.4555273966827033;  // std dev = 0.198, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41839828203198187;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.2553637376656474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5390787318338576;  // std dev = 0.264, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.49387597915518366;  // std dev = 0.345, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7184858515428114;  // std dev = 0.261, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11866992197501959;  // std dev = 0.026, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.36262288609316395;  // std dev = 0.030, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.32243319619762584;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.11019489542055241;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.026639109389663296;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.14021863794053152;  // std dev = 0.817, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3191453368201978;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4362248039949935;  // std dev = 0.990, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08040368273295935;  // std dev = 2.000, 190.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=8 */
%   | | else return -0.09142248531724083;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2745008640010108;  // std dev = 0.056, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.15792260847904077;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return -0.06121201966181922;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25638567239495225;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.044873489005742034;  // std dev = 0.147, 165.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=19 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.27325395140857717;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.2562847878944821;  // std dev = 1.432, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.5980249629266128;  // std dev = 0.280, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12357792741668695;  // std dev = 0.036, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.2250676652448459;  // std dev = 0.015, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E), follows(F, C) )
%   | | then return -0.052100000441231614;  // std dev = 0.888, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.23126289897122074;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then if ( tweets(A, I), follows(H, G) )
%   | | | then return -0.08870653389683769;  // std dev = 1.062, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3239047913412916;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3043348552449653;  // std dev = 0.332, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(J, A) )
%   | | then return -0.05219306415065354;  // std dev = 0.119, 175.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.005993685035762599;  // std dev = 1.060, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.08038752850230912;  // std dev = 1.469, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1690094182056401;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.044363710497333515;  // std dev = 0.948, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07737596419164905;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.24678230982062427;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.23230930768955887;  // std dev = 0.335, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return -0.08240665396958088;  // std dev = 0.003, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18078686190516022;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01115065668169027;  // std dev = 1.073, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.005786388124654143;  // std dev = 1.550, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.13532117918503703;  // std dev = 0.987, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.1609171542525284;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.27378489306037956;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0454220172291816;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.10948508967492483;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.3275344247508001;  // std dev = 0.091, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.0758881710010547;  // std dev = 0.003, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.41091233897358564;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.14162980342761136;  // std dev = 0.022, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1447186123389697;  // std dev = 0.170, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return 0.1706767599678325;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.06630416116454506;  // std dev = 0.043, 161.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.20287409364890907;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11090679336647771;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.04068282543724365;  // std dev = 0.211, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1766606550798121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.043350515175614376;  // std dev = 0.556, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.05893158267139604;  // std dev = 0.971, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.978', 'seconds']
Refined model CLL: -0.106192


******************************************
Best model found
******************************************
Results 

CLL : -0.108237 

AUC ROC : 0.994733 

AUC PR : 0.435453 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 8.278 

Total Inference Time : 10.641860246658325 

Total revision time: 28.60685277557373
Best scored revision CLL: -0.106192


Results 

CLL : -0.108237 

AUC ROC : 0.994733 

AUC PR : 0.435453 

Precision : 0.334047 

Recall : 1.0 

F1 : 0.500803 

Total Learning Time : 53.89523268318176 

Total Inference Time : 10.641860246658325 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.324
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else return -0.07733493586822972;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7250578348212275;  // std dev = 0.143, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.043378609354142936;  // std dev = 0.255, 222.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09565825127585227;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12158483044402384;  // std dev = 3.205, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5616810011152279;  // std dev = 0.929, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.731898713944136;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8189294203420482;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5884051924240863;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5586884387745653;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5586884387745653;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03707177325944586;  // std dev = 3.652, 202.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=21 */
%   | | | else return 0.00646046149393122;  // std dev = 2.861, 71.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5037337591348832;  // std dev = 2.078, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11756099817746113;  // std dev = 0.044, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.1215320824603587;  // std dev = 0.002, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15335139247008386;  // std dev = 0.153, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3230524744975736;  // std dev = 0.543, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.18572519442013088;  // std dev = 1.012, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3043684108509321;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.633689255568364;  // std dev = 0.202, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08373579863235654;  // std dev = 2.322, 252.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=9 */
%   | | else return -0.10644057820730546;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.032766337623507266;  // std dev = 3.504, 247.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18455125252675825;  // std dev = 0.989, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43444753680594234;  // std dev = 1.831, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12339263752310882;  // std dev = 0.099, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11275441143659767;  // std dev = 0.132, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26136607806766493;  // std dev = 2.036, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07025003077463862;  // std dev = 2.102, 213.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008324911340335311;  // std dev = 0.697, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17995955810672074;  // std dev = 0.998, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2517289216078998;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04077134762368694;  // std dev = 0.160, 183.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0010483624551342141;  // std dev = 1.430, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.13621972025255205;  // std dev = 1.631, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12437949934236905;  // std dev = 0.247, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23037747513300175;  // std dev = 1.449, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09099167849486495;  // std dev = 0.042, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4602541727708666;  // std dev = 0.610, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11232210499202203;  // std dev = 0.147, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16182277196059702;  // std dev = 1.879, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.15120023022784623;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08446737348520739;  // std dev = 0.018, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08102960297652542;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.016109401938183093;  // std dev = 0.511, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.003063526957723358;  // std dev = 1.358, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2670069505237983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1966600277087121;  // std dev = 1.106, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.616', 'seconds']
Parameter learned model CLL:-0.112657 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 193, 0], 'true,false,false': [0.246, 29, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.143, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 200, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [3.205, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.929, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.14, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [4.21e-08, 0, 9], 'false,false,true,false': [3.65e-08, 0, 8], 'false,false,false,true': [3.652, 181, 21], 'false,false,false,false': [2.861, 60, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.078, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 157, 0], 'false,true,false,false': [0.002, 48, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.543, 0, 73], 'true,false': [1.012, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.202, 0, 23], 'false,false,true,false': [2.322, 243, 9], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.504, 156, 91], 'false,true': [0.989, 1, 13], 'false,false,true': [1.831, 2, 22], 'false,false,false,true': [0.099, 28, 0], 'false,false,false,false': [0.132, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.036, 3, 107], 'true,false': [2.102, 202, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.697, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 80], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 161, 22], 'false,false,false,true': [1.43, 47, 13], 'false,false,false,false': [1.631, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.247, 5, 77], 'false,true,true,true': [1.449, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 203, 0], 'false,false,true': [0.61, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.879, 3, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.018, 194, 0], 'true,false,false,true': [1.05e-08, 20, 0], 'true,false,false,false': [0.511, 10, 2], 'false,true': [1.358, 27, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.106, 6, 8]}]
{'': [0.21729289271163618, 0.22222222222222235], 'false': [0.23140495867768548, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 5.28677630773884e-18], 'true': [0.01868480725623786, 0.00884885204081616], 'true,false': [-2.277970558298249e-16, 0.060353798126951116], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00024980461701370283, 0.09434993170609769], 'false': [0.06496237706998823, 0.1552399789752929], 'false,false': [0.035665294924554135, 0.18665888723874494], 'false,false,false': [0.002624629381482446, 0.17413802727839317], 'false,true': [nan, 0.06496237706998823], 'false,false,true': [nan, 0.035665294924554135]}
{'': [0.013405265000861014, 0.0933938411458174], 'false': [nan, 0.09339384114581736], 'false,false': [2.0898315757650005e-16, 0.07918659228161593], 'false,false,false': [0.06601764890195312, 0.11525096137669634], 'true': [0.012382331420436495, 0.016226557200338387], 'true,false': [0.003481333641566664, 0.00488536242733334], 'true,true': [0.012154312818961835, 0.0], 'false,false,true': [1.9737298215558337e-16, 1.6653345369377348e-16]}
{'': [0.033743935136822945, 0.00028693979681077627], 'false': [1.245394423908564e-05, 0.0004955609600256619], 'false,false': [nan, 0.0004955609600256619], 'false,false,false': [nan, 0.0004955609600256619], 'false,true': [nan, 1.245394423908564e-05], 'false,true,false': [1.2538324663803994e-05, 1.0081271415116981e-07]}
{'': [0.01803948545054705, 0.059622774138041956], 'false': [-6.530723674265627e-17, 0.05700693857717634], 'false,false': [0.059208498156361304, 0.0], 'false,false,true': [0.0017751471721953532, 0.021402902645798267], 'true': [0.004035242110449934, 0.2048515526351545], 'false,true': [-6.530723674265627e-17, nan]}
{'': [0.04970456937157029, 0.09362979314127261], 'false': [0.06991006729660276, 0.09381225884290813], 'false,false': [0.13975775659102851, 0.0004156649903265316], 'true': [nan, 0.04970456937157074], 'true,false': [nan, 0.04970456937157029], 'false,false,false': [0.00034817692075036447, 0.0004153882950035408]}
{'': [0.05121220283801746, 0.01943890086237583], 'true': [0.03769707364624755, 0.02074102101286634], 'false': [nan, 0.01943890086237583], 'false,false': [nan, 0.01943890086237583], 'false,false,false': [nan, 0.01943890086237583]}
{'': [0.012205983708500037, 0.0378289401575285], 'false': [nan, 0.03782894015752814], 'false,false': [0.02574097460991309, 0.05972852448926828], 'false,false,false': [0.03405928811244036, 0.11085068973933998], 'true': [0.01230058005735504, 0.003348106706059187], 'true,false': [0.003348106706059187, nan]}
{'': [0.06122214118101547, 0.03395571161183009], 'false': [0.02155504370726189, 0.07801420372208903], 'false,false': [0.021909652430871767, 0.0005819502433137873], 'false,true': [0.061738318754370525, 8.567773910095662e-06], 'false,true,true': [0.061738318754370525, nan], 'false,false,false': [nan, 0.0005819502433137873]}
{'': [0.024252157841384788, 0.06530757603184381], 'false': [0.04731136991553155, 0.08191978821148152], 'false,false': [0.0, 0.08744128901852201], 'false,false,false': [nan, 0.08744128901852201], 'true': [0.03330429741738987, 0.001392539580549432], 'true,true': [0.03638383419889145, 1.047655327116654e-05], 'true,false': [1.7473185324888692e-06, 0.009161624810257655], 'true,false,false': [5.551115123125783e-18, 0.021796854179733652]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.569
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8340525495573435;  // std dev = 0.153, 83.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1318510649004883;  // std dev = 0.099, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.7054430776828006;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.7243110022111023;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7357835530594249;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.7481084698928562;  // std dev = 0.136, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4969770815100632;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10955042102357737;  // std dev = 1.486, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | | else return 0.01705074060395932;  // std dev = 2.725, 72.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13677130825278513;  // std dev = 2.105, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.0751511562618849;  // std dev = 2.307, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5370620655457219;  // std dev = 0.161, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.5482847078126369;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5098480945880455;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5604075289310463;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44617718031009573;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09845962088709179;  // std dev = 1.508, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return -0.016249893821913153;  // std dev = 2.779, 92.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10286412431065609;  // std dev = 2.115, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.17772999256387548;  // std dev = 2.108, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.43021467117104367;  // std dev = 0.016, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.30898464423615807;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.5539537892792241;  // std dev = 0.233, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.43300382112966723;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.7187873669013571;  // std dev = 0.239, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10995320262112604;  // std dev = 0.112, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.11699158429322873;  // std dev = 0.059, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.18514003018112843;  // std dev = 0.214, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.33339944635978347;  // std dev = 0.078, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.4630399107759568;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3261521642469432;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.027816310262219313;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.038523435813843133;  // std dev = 1.150, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33129386988303106;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5541840836779344;  // std dev = 0.229, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08758118683017319;  // std dev = 2.028, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.11641737881204492;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26458000644262736;  // std dev = 0.015, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.41655526035132373;  // std dev = 0.320, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09260425261983773;  // std dev = 0.087, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.0452980269167792;  // std dev = 0.147, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.29258612208651025;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27037830607206437;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3553600674998198;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5711372685491357;  // std dev = 0.211, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12355723102382268;  // std dev = 0.033, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21480198384551222;  // std dev = 0.018, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E), follows(A, E) )
%   | | | then return -0.06697263161326626;  // std dev = 0.809, 102.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=3 */
%   | | | else return -0.07802257675251272;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.24563409640799558;  // std dev = 1.004, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09724096626339193;  // std dev = 0.008, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24266942063429067;  // std dev = 1.036, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.10295594891759904;  // std dev = 0.073, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.007364675223711706;  // std dev = 1.113, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.10345429305972849;  // std dev = 1.192, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.15223727009909185;  // std dev = 1.396, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.06425887756363945;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.288951688233684;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.08201915585833132;  // std dev = 0.056, 226.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.24601645692504173;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2361793385789579;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09950688013276045;  // std dev = 0.013, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.011473889154812622;  // std dev = 0.841, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.019838038665396324;  // std dev = 1.216, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.15855905874969342;  // std dev = 0.020, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.08841501309058677;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.16423114007554268;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.21926936930597787;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.21164073583553536;  // std dev = 0.064, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.0736937898053869;  // std dev = 0.006, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1962467853137936;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.424645434336485;  // std dev = 0.138, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1204831499407906;  // std dev = 0.041, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12721835862713665;  // std dev = 0.958, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.15827074606941555;  // std dev = 0.918, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.13796907516109153;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.06969359452836167;  // std dev = 0.006, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06159942108773143;  // std dev = 4.56e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.023766472628639308;  // std dev = 0.399, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, H) )
%   | then return 0.016532680012095378;  // std dev = 0.142, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2146149315740784;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 9.164796586749638E-4;  // std dev = 0.220, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.067', 'seconds']
Refined model CLL: -0.10405


******************************************
Best model found
******************************************
Results 

CLL : -0.101616 

AUC ROC : 0.99434 

AUC PR : 0.336357 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 13.569 

Total Inference Time : 16.70339608192444 

Total revision time: 40.69425427246094
Best scored revision CLL: -0.10405


Results 

CLL : -0.101616 

AUC ROC : 0.99434 

AUC PR : 0.336357 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 65.98263418006897 

Total Inference Time : 16.70339608192444 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.098
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.001006077956655051;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7357737662754532;  // std dev = 0.184, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.017121811510526528;  // std dev = 0.282, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14197357824080592;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14834921602528955;  // std dev = 2.303, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5513377693846714;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7433054401810986;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6153269929834804;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5513377693846713;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.032685945299061374;  // std dev = 2.253, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | | else return 0.057257916293593114;  // std dev = 1.904, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5334620556633471;  // std dev = 1.441, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12769590076294526;  // std dev = 0.006, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.13025597549609813;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17025461052082574;  // std dev = 0.129, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29344257274281044;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.44681512498946974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2882067065681757;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4786208201146662;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6306031250354293;  // std dev = 0.191, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1118495668888319;  // std dev = 0.691, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | else return -0.03286238179481181;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02433850834493197;  // std dev = 1.361, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2667870977428503;  // std dev = 0.143, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4317780205484497;  // std dev = 0.863, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12814202362018146;  // std dev = 0.105, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1231844689994513;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3172722730027181;  // std dev = 0.504, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.09948715207275188;  // std dev = 0.594, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.007678750149247996;  // std dev = 0.674, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17766829787836866;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, E) )
%   | | then return 0.23223813976657887;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.049705589725723205;  // std dev = 0.184, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.020963867998334326;  // std dev = 0.867, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | | else return 0.021909122696597127;  // std dev = 0.923, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1583447773245375;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25420288033416377;  // std dev = 0.359, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09261158462026753;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3610985126294655;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1234068891936559;  // std dev = 0.107, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13631571672332315;  // std dev = 0.930, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.12511564454219598;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08495617284430768;  // std dev = 0.004, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0881653406131858;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.025481129910162686;  // std dev = 0.309, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.08343966466490915;  // std dev = 0.595, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025622112837347107;  // std dev = 0.726, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.292', 'seconds']
Parameter learned model CLL:-0.111477 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [4.59e-08, 44, 0], 'true,false,false': [0.35, 12, 2], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 13, 0], 'false,false': [0.487, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.184, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.282, 34, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.303, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 10], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.157, 0, 3], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [2.253, 38, 9], 'false,false,false,false': [1.904, 17, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.441, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.006, 49, 0], 'false,true,false,false': [0.002, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.129, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.49e-08, 0, 10], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 5], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.191, 0, 12], 'false,false,true,false': [0.691, 55, 1], 'false,false,false': [0.223, 7, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.361, 33, 15], 'false,true': [0.143, 0, 7], 'false,false,true': [0.863, 1, 9], 'false,false,false,true': [0.105, 21, 0], 'false,false,false,false': [0.08, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.504, 0, 26], 'true,false': [0.594, 46, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 10, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.061, 0, 15], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.184, 32, 5], 'false,false,false,true': [0.867, 21, 4], 'false,false,false,false': [0.923, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.009, 0, 11], 'false,true,true,true': [0.359, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.015, 40, 0], 'false,false,true': [0.244, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.107, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.93, 1, 16], 'true,true,false': [0.034, 0, 4], 'true,false,true': [0.004, 24, 0], 'true,false,false,true': [0.012, 7, 0], 'true,false,false,false': [0.309, 6, 2], 'false,true': [0.595, 5, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.726, 8, 5]}]
{'': [0.2024983563445111, 0.21000000000000008], 'false': [0.1799307958477507, 0.2366863905325442], 'true': [-8.881784197001253e-17, 0.03329369797859696], 'false,true': [0.0, -1.2810265668751807e-17], 'true,false': [4.794144879063176e-17, 0.12244897959183677], 'false,true,true': [1.4802973661668753e-16, 0.0]}
{'': [0.0019927615697101645, 0.12298404614771928], 'false': [0.07979007700136759, 0.16503460632863792], 'false,false': [0.0, 0.18943579293670262], 'false,false,false': [nan, 0.18943579293670268], 'false,true': [nan, 0.07979007700136759], 'false,false,true': [nan, 0.0]}
{'': [0.003045585671983784, 0.1382593727454065], 'false': [nan, 0.1382593727454065], 'false,false': [0.005118275920973063, 0.12626527920888475], 'false,false,false': [0.1080158141891463, 0.16484150102750447], 'false,false,true': [0.008189241473556782, 3.700743415417188e-17], 'true': [-4.4408920985006264e-17, 0.0], 'true,false': [0.0, nan], 'true,true': [-4.4408920985006264e-17, nan]}
{'': [0.06485276050921246, 0.0005727451869733388], 'false': [1.403498291928752e-06, 0.0008330647529367019], 'false,false': [nan, 0.0008330647529367019], 'false,false,false': [nan, 0.0008330647529367019], 'false,true': [nan, 1.403498291928752e-06], 'false,true,false': [7.889832621609e-07, 5.830349867041081e-07]}
{'': [0.0019440611390623848, 0.08451571577969558], 'false': [0.0050700365679283155, 0.08392521184261509], 'false,false': [0.08767253328074849, 0.049650457716083236], 'false,false,true': [0.003050984874553908, 0.008528781093359654], 'false,true': [4.1121441898039904e-05, 0.0], 'true': [2.2204460492503132e-17, 0.0]}
{'': [0.03860043304959174, 0.07005073927267194], 'false': [0.0029351002131514092, 0.07075293580765761], 'false,false': [0.07449198912207367, 0.0005082524438622877], 'true': [nan, 0.03860043304959173], 'true,false': [nan, 0.03860043304959174], 'false,false,false': [0.0005290810440163515, 0.0004622631349406603]}
{'': [0.048149050807330875, 0.0324769648907121], 'true': [0.009769163124227358, 0.007518849568882619], 'false': [nan, 0.032476964890712105], 'false,false': [nan, 0.0324769648907121], 'false,false,false': [nan, 0.0324769648907121]}
{'': [0.0005341361673087833, 0.03736692728606162], 'false': [nan, 0.03736692728606163], 'false,false': [0.03386854053415369, 0.03954314681915007], 'false,false,false': [0.03005733059872346, 0.053243946047025474], 'true': [0.0002452222415099977, 7.346033694299176e-05], 'true,false': [7.346033694299176e-05, nan]}
{'': [7.610791536004736e-05, 0.03488094247134888], 'false': [0.02288439618239517, 0.05585715108246165], 'false,false': [0.006604727261083237, 0.0006739114029312481], 'false,true': [0.011742943533647597, 5.491658488744611e-06], 'false,true,true': [0.011742943533647597, nan], 'false,false,false': [nan, 0.0006739114029312481]}
{'': [0.026232937755826264, 0.04085415818055794], 'false': [0.03938627151498787, 0.04050284996993182], 'false,false': [nan, 0.04050284996993182], 'false,false,false': [nan, 0.04050284996993182], 'true': [0.04130385614443695, 0.0030460286140265138], 'true,true': [0.05093028959006292, 0.00028996602497124643], 'true,false': [6.095332091698991e-07, 0.007356610439864539], 'true,false,false': [2.084372024626992e-05, 0.011941728192848724]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.298
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7492293200691814;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7343513661400679;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.0271983535587;  // std dev = 0.271, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.1433939728063842;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08167148505107175;  // std dev = 1.474, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.4406735149828545;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5682252803598583;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3260295772429258;  // std dev = 0.900, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6665498929479196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5910758797042552;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5516895948376624;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7256448209228149;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.15570969990424235;  // std dev = 0.368, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.02095599635999853;  // std dev = 0.774, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.2300057278869375;  // std dev = 0.134, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4136403471663408;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.444156611544045;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.492614933023021;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.5504389490461872;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.6008136138810534;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11027761911340744;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.0977035347628027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, K) )
%   | | then return -0.1215575655171282;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.2236669991519149;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.32866122567608097;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.151856977766097;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.38543477561609163;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31108899099813325;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.40704588153674304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4203205729890017;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1134759157253378;  // std dev = 0.219, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.030948704583570772;  // std dev = 0.638, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.182380065026175;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.26067538314634126;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3257754391964688;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08718406731407709;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.013915357454940932;  // std dev = 0.228, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2651070399749031;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.30233048775965665;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.37268227791349223;  // std dev = 0.224, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12011234069265618;  // std dev = 0.124, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.10946629880088989;  // std dev = 0.121, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21727695758554805;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3116230888537732;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E), follows(A, F) )
%   | | | then return -0.06160035927793913;  // std dev = 0.330, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.08913056154521817;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.25862443828402915;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09285946658913884;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2502605332988871;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12275564017042062;  // std dev = 0.118, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.0235141382075382;  // std dev = 0.533, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.20188708083720744;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.08100727744894157;  // std dev = 0.886, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.21422328300018317;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), follows(A, F) )
%   | | then return -0.030021372592822428;  // std dev = 0.108, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | | else return -0.08459753297865397;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26939298666209655;  // std dev = 0.242, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07642022993315366;  // std dev = 0.000688, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.017040573785648477;  // std dev = 0.585, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.14561648511753364;  // std dev = 0.000331, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.042121592149301126;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.24576908803462758;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.22911948868197815;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16800620862549956;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07690098628771513;  // std dev = 0.014, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.16000259471309808;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2416297820328177;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return -0.07113469234168915;  // std dev = 0.000678, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.1231176327823782;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1616048440316977;  // std dev = 0.103, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20317016460695994;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14848341154444275;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.0669525343437212;  // std dev = 0.002, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07157492541144979;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.016971754540412644;  // std dev = 0.274, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.16171843543452954;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08422420147742317;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.04078673924768552;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.670', 'seconds']
Refined model CLL: -0.095187


******************************************
Best model found
******************************************
Results 

CLL : -0.096182 

AUC ROC : 0.994241 

AUC PR : 0.42317 

Precision : 0.350975 

Recall : 1.0 

F1 : 0.519588 

Total Learning Time : 4.298 

Total Inference Time : 4.990261554718018 

Total revision time: 13.073485704421998
Best scored revision CLL: -0.095187


Results 

CLL : -0.096182 

AUC ROC : 0.994241 

AUC PR : 0.42317 

Precision : 0.350975 

Recall : 1.0 

F1 : 0.519588 

Total Learning Time : 13.088229509353638 

Total Inference Time : 4.990261554718018 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.465
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.038402789038418816;  // std dev = 0.305, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.274815601766179;  // std dev = 0.493, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6718782058977146;  // std dev = 1.400, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0311512143841705;  // std dev = 0.270, 79.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.044404615745454894;  // std dev = 1.250, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13169823316479876;  // std dev = 3.141, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5739832535836044;  // std dev = 0.155, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7625162433889501;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6061722421802469;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5670862418780711;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0016692287061522233;  // std dev = 3.037, 98.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=15 */
%   | | | else return 0.09821575905482034;  // std dev = 2.732, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5361565739447699;  // std dev = 1.891, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12453432900604068;  // std dev = 0.035, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.13513849934230315;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1757111806236736;  // std dev = 0.216, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26782770648000304;  // std dev = 0.999, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return 0.4670109352495556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29967818472797886;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5060486466659414;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6333532657754289;  // std dev = 0.202, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.1059104863249464;  // std dev = 1.157, 106.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=2 */
%   | | else return -0.009481244766130442;  // std dev = 0.293, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005425176811237629;  // std dev = 2.165, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26431981192742593;  // std dev = 0.164, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4833443246345016;  // std dev = 1.058, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13043170763739134;  // std dev = 0.166, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.13877205002043072;  // std dev = 0.160, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27924811704266983;  // std dev = 1.398, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else return -0.08723181063589196;  // std dev = 1.050, 94.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013562250594502608;  // std dev = 1.240, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1954402825717599;  // std dev = 0.064, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return 0.2528964264537714;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05175050532583277;  // std dev = 0.158, 86.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006926968297958718;  // std dev = 1.414, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
%   | | | else return 0.0264497170599835;  // std dev = 1.343, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14435417162961206;  // std dev = 0.164, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2522307899970307;  // std dev = 1.148, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09068603169142232;  // std dev = 0.054, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3596536080101114;  // std dev = 0.342, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12877337118207938;  // std dev = 0.201, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19744019870485205;  // std dev = 0.472, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.06959970029376389;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08215954070150522;  // std dev = 0.019, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.093218835637076;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.018451224171175354;  // std dev = 0.784, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.016101732860948365;  // std dev = 0.811, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03988003398966422;  // std dev = 1.035, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.356', 'seconds']
Parameter learned model CLL:-0.112933 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 42], 'true,false,true': [5.37e-08, 52, 0], 'true,false,false': [0.305, 26, 3], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 10, 0], 'false,false': [0.493, 14, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.4, 2, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 70, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.25, 18, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [3.141, 36, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.155, 0, 23], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.175, 0, 5], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.037, 83, 15], 'false,false,false,false': [2.732, 28, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.891, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 70, 0], 'false,true,false,false': [0.014, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.216, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.999, 1, 24], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.202, 0, 20], 'false,false,true,false': [1.157, 104, 2], 'false,false,false': [0.293, 18, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.165, 80, 32], 'false,true': [0.164, 0, 11], 'false,false,true': [1.058, 1, 19], 'false,false,false,true': [0.166, 34, 0], 'false,false,false,false': [0.16, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.398, 2, 49], 'true,false': [1.05, 91, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.24, 23, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.064, 0, 32], 'true,false,true': [0.016, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 77, 9], 'false,false,false,true': [1.414, 40, 9], 'false,false,false,false': [1.343, 20, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.164, 1, 25], 'false,true,true,true': [1.148, 1, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.054, 75, 0], 'false,false,true': [0.342, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.201, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.472, 0, 33], 'true,true,false': [0.947, 1, 9], 'true,false,true': [0.019, 70, 0], 'true,false,false,true': [0.02, 10, 0], 'true,false,false,false': [0.784, 9, 3], 'false,true': [0.811, 17, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.035, 14, 10]}]
{'': [0.23200475907198184, 0.24271267102914884], 'false': [0.24221453287197234, 0.24305555555555558], 'false,true': [-2.5376526277146434e-16, -1.1102230246251566e-17], 'true': [1.3534147347811431e-15, 0.035665294924554225], 'true,false': [5.551115123125783e-17, 0.0927467300832341], 'false,true,true': [0.0, 0.0]}
{'': [0.054430860772628264, 0.12233617801359321], 'false': [0.07274202893750077, 0.16818766021151682], 'false,false': [0.07807945482076696, 0.19259042801899784], 'false,false,false': [0.0, 0.18977560592453632], 'false,false,true': [nan, 0.07807945482076696], 'false,true': [nan, 0.07274202893750077]}
{'': [0.002352248469463234, 0.13595721591017604], 'false': [nan, 0.13595721591017582], 'false,false': [0.0031564368174001474, 0.12366857126543256], 'false,false,false': [0.0940886084712909, 0.19132996557081663], 'false,false,true': [0.006110861678486712, -3.700743415417188e-17], 'true': [0.0010465129502577344, 0.01072776059802344], 'true,false': [0.0, 0.0], 'true,true': [0.0010465129502577344, nan]}
{'': [0.05585862078060405, 0.0009496701057460103], 'false': [3.0076452657462614e-05, 0.0013694513617668242], 'false,false': [nan, 0.0013694513617668242], 'false,false,false': [nan, 0.0013694513617668242], 'false,true': [nan, 3.0076452657462614e-05], 'false,true,false': [1.7676475748164477e-05, 1.8483916067268956e-05]}
{'': [0.03987786219208255, 0.0848419381544301], 'false': [0.0035343668781784095, 0.08423170550127516], 'false,false': [0.08392488860225743, 0.08561654487847142], 'false,false,true': [0.00203933957560416, 0.012627231054172287], 'true': [0.0399470551942634, 0.0], 'false,true': [1.6097424133665328e-05, 0.0]}
{'': [0.04184735052398421, 0.08286397250688457], 'false': [0.002439951264314551, 0.08690416367911345], 'false,false': [0.055960839679289845, 0.0009195704811476861], 'true': [nan, 0.041847350523984285], 'true,false': [nan, 0.04184735052398421], 'false,false,false': [0.000811792977570424, 0.001026061706754229]}
{'': [0.051718776301809107, 0.04656924191287822], 'true': [0.0383473656062239, 0.01173427504282438], 'false': [nan, 0.046569241912878215], 'false,false': [nan, 0.04656924191287822], 'false,false,false': [nan, 0.04656924191287822]}
{'': [0.00031147034460303886, 0.03700061396618116], 'false': [nan, 0.03700061396618126], 'false,false': [0.024953868487799163, 0.04839164124320078], 'false,false,false': [0.040777804517603, 0.060136610597769986], 'true': [0.00012908057606619144, 0.00012268690491921974], 'true,false': [0.00012268690491921974, nan]}
{'': [0.02675193326690613, 0.04169046638903455], 'false': [0.03424587883936679, 0.05505413076825731], 'false,false': [0.0073088191823706405, 0.0011830202101287596], 'false,true': [0.05993769174733334, 3.927531627351932e-05], 'false,true,true': [0.05993769174733334, nan], 'false,false,false': [nan, 0.0011830202101287596]}
{'': [0.026883082930894732, 0.036173590456169025], 'false': [0.027435220651248145, 0.04462925645880591], 'false,false': [nan, 0.044629256458805895], 'false,false,false': [nan, 0.04462925645880591], 'true': [0.028964197474268438, 0.007876055944929381], 'true,true': [0.006761212322503118, 0.08969159800714402], 'true,false': [5.411331485364165e-06, 0.03102811316498837], 'true,false,false': [4.026677509039317e-05, 0.05118304473645857]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.986
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7276329461814391;  // std dev = 0.161, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.048633906642996313;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.16221334521702108;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.0015437863374301705;  // std dev = 1.196, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13526778257574285;  // std dev = 2.853, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5035522434031912;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.5960526174841312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.7138625442175364;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5718246508170268;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6174529997323145;  // std dev = 0.314, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1169284876577245;  // std dev = 0.070, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.025434929626658342;  // std dev = 1.489, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.15389574055846664;  // std dev = 2.372, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.42262428820472664;  // std dev = 0.041, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.3258576101768238;  // std dev = 0.959, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.44843194547397947;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5942505000739171;  // std dev = 0.199, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.47084537539687504;  // std dev = 0.881, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6670530779842512;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6734022820668352;  // std dev = 0.047, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.10767487837316277;  // std dev = 0.013, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return -0.15275326481460552;  // std dev = 0.072, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33145686396665897;  // std dev = 0.023, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.009617201398108547;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4327868535826115;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31433914325762424;  // std dev = 0.000655, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4679311054479852;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4459751977971581;  // std dev = 0.414, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.0918778835138667;  // std dev = 0.963, 107.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.007482051714431962;  // std dev = 0.943, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return -0.0876134389322866;  // std dev = 0.816, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.19179779696262728;  // std dev = 0.243, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return -0.08441817983194881;  // std dev = 1.49e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.019920889182837714;  // std dev = 0.172, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.11121591444052023;  // std dev = 0.368, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3983281123051405;  // std dev = 0.151, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5629197302086805;  // std dev = 0.200, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12109050400046119;  // std dev = 0.050, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.12288046837286484;  // std dev = 0.103, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(E, D) )
%   | | | then return 0.14193698516468667;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.24667687396616103;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, D), follows(D, C) )
%   | | | then return -0.06543245036210973;  // std dev = 0.488, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | | else return 0.06614464148150681;  // std dev = 0.303, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, C), recursion_accounttype(F, B) )
%   | | then if ( follows(C, F), tweets(A, G) )
%   | | | then return 0.19927318335199062;  // std dev = 0.898, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3088154594365886;  // std dev = 0.244, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10099437077870056;  // std dev = 0.072, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.11177900996950736;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.0025472837531084263;  // std dev = 0.226, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20594718470114579;  // std dev = 0.017, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.2769419301504366;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E) )
%   | | | then return -0.09028551732769147;  // std dev = 0.763, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | | else return -0.07669490868842592;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.24122137792933254;  // std dev = 0.258, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08043274809451881;  // std dev = 0.069, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3184054708235334;  // std dev = 0.134, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10438323636306383;  // std dev = 0.061, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 7.368929766203107E-5;  // std dev = 0.188, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16950520461470286;  // std dev = 0.017, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.1862217271419096;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.19053534566494015;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20248363857671534;  // std dev = 0.231, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07281784028412469;  // std dev = 0.009, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2711030079447716;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2709483707140425;  // std dev = 0.330, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0868695476136748;  // std dev = 0.000188, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.11114079212646158;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.03197978239737373;  // std dev = 1.336, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.14482859543154564;  // std dev = 0.093, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.17185938543900695;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.057953567826461265;  // std dev = 0.058, 84.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.02859805956261894;  // std dev = 0.107, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | else if ( tweets(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.231624833630928;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09589729550791759;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.032999011915746355;  // std dev = 0.143, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | else return 0.050536259040656194;  // std dev = 0.539, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.342', 'seconds']
Refined model CLL: -0.098065


******************************************
Best model found
******************************************
Results 

CLL : -0.097544 

AUC ROC : 0.993479 

AUC PR : 0.36437 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 14.986 

Total Inference Time : 9.909664154052734 

Total revision time: 31.022382761001587
Best scored revision CLL: -0.098065


Results 

CLL : -0.097544 

AUC ROC : 0.993479 

AUC PR : 0.36437 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 31.037126565933228 

Total Inference Time : 9.909664154052734 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.806
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8264029033534809;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.0607699838194067;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.2110901115701006;  // std dev = 0.478, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.711417925603484;  // std dev = 1.014, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03085791262987362;  // std dev = 0.268, 117.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07647429106544251;  // std dev = 1.278, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3757092781073813;  // std dev = 1.083, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1448864342951037;  // std dev = 4.031, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5744364424257307;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.662282226247664;  // std dev = 0.137, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6973807254848218;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6040160332942538;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.565171904658647;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008559762184241926;  // std dev = 3.678, 150.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=21 */
%   | | | else return 0.05927588117012843;  // std dev = 3.610, 79.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5450301837516555;  // std dev = 2.386, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12235709223249096;  // std dev = 0.043, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | | else return -0.13004528255848555;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16438507662596488;  // std dev = 0.216, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26982631754215064;  // std dev = 1.325, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else return 0.4855139671948643;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2971507674199099;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5000764602919073;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6435575041478112;  // std dev = 0.241, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.09939505108047782;  // std dev = 1.591, 154.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=4 */
%   | | else return 0.05124983108618435;  // std dev = 0.335, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.036410451154450796;  // std dev = 2.333, 140.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18994241716985386;  // std dev = 0.998, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5223976446857984;  // std dev = 1.293, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1283410359856581;  // std dev = 0.186, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.14191626277234679;  // std dev = 0.169, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2776989359678651;  // std dev = 1.721, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else return -0.08598310716405512;  // std dev = 1.398, 146.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029124526988396463;  // std dev = 1.798, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19174343210088696;  // std dev = 0.070, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.27107911008294344;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03970598011512486;  // std dev = 0.168, 99.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010533577836126993;  // std dev = 1.643, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
%   | | | else return 0.07535564014677569;  // std dev = 1.956, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1744054494510724;  // std dev = 0.040, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26352614470127106;  // std dev = 1.153, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0948190181621517;  // std dev = 0.081, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39614293918775956;  // std dev = 0.578, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12188495062765907;  // std dev = 0.249, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17012063886212483;  // std dev = 1.026, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.16259558767000473;  // std dev = 0.267, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08506341935148681;  // std dev = 0.019, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09664635400914535;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.023114703658427597;  // std dev = 0.821, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.015474334571012683;  // std dev = 1.028, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20605120118378595;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02511717832479975;  // std dev = 1.587, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.989', 'seconds']
Parameter learned model CLL:-0.114955 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [8.43e-08, 106, 0], 'true,false,false': [0.273, 34, 3], 'false,true,true,true': [0.949, 1, 9], 'false,true,true,false': [0.816, 1, 2], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.478, 33, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.014, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 104, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.278, 30, 2], 'false,false,false,true': [1.083, 2, 3], 'false,false,false,false': [4.031, 59, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.229, 0, 36], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.137, 0, 2], 'true,false,false': [0.09, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.174, 0, 5], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.678, 129, 21], 'false,false,false,false': [3.61, 61, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.386, 3, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.043, 97, 0], 'false,true,false,false': [0.01, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.216, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.325, 2, 40], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.241, 0, 27], 'false,false,true,false': [1.591, 150, 4], 'false,false,false': [0.335, 28, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.333, 92, 48], 'false,true': [0.998, 1, 14], 'false,false,true': [1.293, 1, 31], 'false,false,false,true': [0.186, 57, 0], 'false,false,false,false': [0.169, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.721, 2, 72], 'true,false': [1.398, 141, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.798, 36, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.07, 0, 47], 'true,false,true': [0.006, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 86, 13], 'false,false,false,true': [1.643, 57, 13], 'false,false,false,false': [1.956, 28, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.04, 0, 41], 'false,true,true,true': [1.153, 1, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 124, 0], 'false,false,true': [0.578, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 56, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.026, 1, 50], 'true,true,false': [0.267, 0, 11], 'true,false,true': [0.019, 100, 0], 'true,false,false,true': [1.05e-08, 16, 0], 'true,false,false,false': [0.821, 18, 3], 'false,true': [1.028, 27, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.587, 31, 17]}]
{'': [0.21415779055518924, 0.22094524793388565], 'false': [0.2089116143170192, 0.2283737024221448], 'true': [0.030738221214411016, 0.020538901657782695], 'false,true': [0.13017751479289916, 9.25185853854297e-18], 'false,true,true': [0.08999999999999977, 0.22222222222222224], 'true,false': [6.70323335622736e-17, 0.07450693937180408]}
{'': [0.020571098935961346, 0.12527824293432516], 'false': [0.07157318972961069, 0.16886875766780818], 'false,false': [0.051006504321146964, 0.19639048487324387], 'false,false,false': [0.23469816995769915, 0.19117713689822655], 'false,true': [nan, 0.07157318972961069], 'false,false,true': [nan, 0.051006504321146964]}
{'': [0.003244815654163087, 0.12711498113254063], 'false': [nan, 0.12711498113254058], 'false,false': [0.0026784609398691037, 0.11701422510959934], 'false,false,false': [0.09017333216355171, 0.16496374861639915], 'true': [0.0014591382206407605, 0.005687794386726175], 'true,false': [0.009430414559122302, 0.002699952412315169], 'false,false,true': [0.006035465317838273, 5.551115123125783e-17], 'true,true': [0.0014591382206407605, nan]}
{'': [0.059278935794833156, 0.0006323900262047645], 'false': [2.5851066106772383e-05, 0.0008321957153450013], 'false,false': [nan, 0.0008321957153450013], 'false,false,false': [nan, 0.0008321957153450013], 'false,true': [nan, 2.5851066106768744e-05], 'false,true,false': [1.9438508441258655e-05, 3.7358698700784567e-06]}
{'': [0.041899550816659636, 0.08894287129115266], 'false': [0.00293736957425643, 0.08918571633787731], 'false,false': [0.08435969217202335, 0.11212746763661051], 'false,false,true': [0.002152066306035565, 0.016433383333447002], 'true': [0.04181527167611835, 0.0], 'false,true': [1.4547539220329439e-05, 0.0]}
{'': [0.03886911216736491, 0.09711820492462139], 'false': [0.06633774834437446, 0.09852342322840661], 'false,false': [0.052257629298813, 0.0007586545305465511], 'true': [nan, 0.038869112167364744], 'true,false': [nan, 0.03886911216736491], 'false,false,false': [0.0006056099663361555, 0.0009206914769313872]}
{'': [0.05186981708181563, 0.06219851003259218], 'false': [nan, 0.06219851003259217], 'false,false': [nan, 0.06219851003259218], 'false,false,false': [nan, 0.06219851003259218], 'true': [0.04003357605557462, 0.013379996335546753]}
{'': [0.0003477744619462083, 0.0453433415813255], 'false': [nan, 0.04534334158132556], 'false,false': [0.028330785378173483, 0.058021611866893155], 'false,false,false': [0.038552675055705206, 0.08319664239561227], 'true': [0.00010487606071230005, 1.8641163575486286e-05], 'true,false': [1.8641163575486286e-05, nan]}
{'': [0.0016376804839241654, 0.041318856051192766], 'false': [0.027700083914778274, 0.062933177600963], 'false,false': [0.012831020185679233, 0.001107390369480424], 'false,true': [0.04922242497211243, 5.2814702336521867e-05], 'false,true,true': [0.04922242497211243, nan], 'false,false,false': [nan, 0.001107390369480424]}
{'': [0.022361131359990707, 0.04151283870640023], 'false': [0.027785187614908363, 0.052081098361865634], 'false,false': [0.0, 0.05249801674179342], 'false,false,false': [nan, 0.052498016741793545], 'true': [0.01815046004433197, 0.005457509263454837], 'true,true': [0.020658289642888548, 0.006476670310490424], 'true,false': [3.477433995537904e-06, 0.01953456094532763], 'true,false,false': [6.938893903907228e-18, 0.032079915474188724]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.77
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else return -0.11642733608692833;  // std dev = 0.157, 118.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7269010265078942;  // std dev = 0.210, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.7194734122109543;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7296244850834378;  // std dev = 0.147, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12826049470179118;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7350797226597784;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.23655152976798596;  // std dev = 2.363, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | | else return 0.3213006413169547;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4794574818795731;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.5684208906897071;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.21952506466989688;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4509066086463247;  // std dev = 1.001, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.574726908472591;  // std dev = 0.058, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5692668880876975;  // std dev = 0.205, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11459024789912811;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03019145272443276;  // std dev = 1.817, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.11232854162315518;  // std dev = 3.014, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then return 0.43053512350087086;  // std dev = 0.258, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.4143422532667181;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1209683857756832;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5390655569127178;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5699300769147011;  // std dev = 0.095, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6373141149984182;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7537226758194678;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10346739908053093;  // std dev = 4.17e-09, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return -0.16311514419577172;  // std dev = 0.057, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.341148992709517;  // std dev = 0.030, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.549723638118164;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.3562016080525994;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31210168227153656;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5112154494799193;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.40941684297736153;  // std dev = 0.408, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.08689249589013691;  // std dev = 1.218, 155.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.07031776722054925;  // std dev = 0.395, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.05536154766769962;  // std dev = 1.547, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2678204843740961;  // std dev = 0.027, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.1494370193356351;  // std dev = 0.958, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.08709455252332425;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.0660536667282043;  // std dev = 0.087, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.33328685242913036;  // std dev = 0.150, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24928791748577867;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(L, A) )
%   | | | then return -0.24661512185896303;  // std dev = 1.012, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.40905444362107596;  // std dev = 0.519, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.1191355522261452;  // std dev = 0.048, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.16349057085776256;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.12954769800202293;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21349057085776257;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22604370090601775;  // std dev = 0.043, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.23124711952813914;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.17489884134085829;  // std dev = 1.084, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.08025640140867252;  // std dev = 0.011, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.03820002462078354;  // std dev = 1.458, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   | | | else return -0.021569720500872535;  // std dev = 1.392, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.18683924926897966;  // std dev = 0.056, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10709400738176347;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.18576583474089095;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.275512641083918;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04357393838701667;  // std dev = 0.124, 120.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1747887932179204;  // std dev = 0.928, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.08638455939204566;  // std dev = 0.013, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03159059450358257;  // std dev = 1.477, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | | else return 0.10216426200035814;  // std dev = 1.125, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.08431026084156969;  // std dev = 1.365, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.10584059900783427;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1776194758954123;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.18589203434739107;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.21803390111066423;  // std dev = 0.401, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.06135709982019959;  // std dev = 0.888, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.07156848413045896;  // std dev = 0.010, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.30953030966933387;  // std dev = 0.088, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.126581098551324;  // std dev = 0.053, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1551464453533569;  // std dev = 0.022, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.06731815272779396;  // std dev = 0.005, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return -0.029470128810857237;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.2141652864760469;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.02478377227431208;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return 0.02287613556901884;  // std dev = 0.478, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17053301785581687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.014185827110137175;  // std dev = 1.028, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | | | else return 0.0850505794715994;  // std dev = 0.913, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.701', 'seconds']
Refined model CLL: -0.103373


******************************************
Best model found
******************************************
Results 

CLL : -0.100483 

AUC ROC : 0.992667 

AUC PR : 0.32757 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 11.77 

Total Inference Time : 9.239226341247559 

Total revision time: 29.257583642959595
Best scored revision CLL: -0.103373


Results 

CLL : -0.100483 

AUC ROC : 0.992667 

AUC PR : 0.32757 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 29.272327447891236 

Total Inference Time : 9.239226341247559 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.193
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8456489350995124;  // std dev = 0.994, 80.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.05296217601159886;  // std dev = 0.285, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.24797944357408774;  // std dev = 0.488, 59.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7265856651048626;  // std dev = 0.198, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03540477513339457;  // std dev = 0.261, 160.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.040268306884606524;  // std dev = 1.765, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.60567272513567;  // std dev = 0.863, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.13958229100948819;  // std dev = 4.662, 115.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=36 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5539850102568119;  // std dev = 0.896, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7269964881893148;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6381091808329572;  // std dev = 0.150, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5963910816393071;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5566964577317927;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008739026156851893;  // std dev = 4.207, 204.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=29 */
%   | | | else return 0.058955130837829016;  // std dev = 4.068, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.556240409489073;  // std dev = 2.244, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12308889707682584;  // std dev = 0.054, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return -0.13020197144217682;  // std dev = 0.024, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16779432059993135;  // std dev = 0.279, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2650230778783415;  // std dev = 1.800, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | else return 0.4608651138325537;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.28960270559207646;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.49343663196417586;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.622977759986318;  // std dev = 0.303, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.10483246045298347;  // std dev = 1.777, 219.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=5 */
%   | | else return -0.0049703681175551385;  // std dev = 0.292, 72.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04536504747448639;  // std dev = 2.625, 172.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=64 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24964208256191464;  // std dev = 0.173, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5294550365257449;  // std dev = 0.888, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13319939463251898;  // std dev = 0.197, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.13449947340478768;  // std dev = 0.197, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2743493974538828;  // std dev = 1.632, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else return -0.08852990571660645;  // std dev = 1.660, 208.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03257713120620441;  // std dev = 2.079, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1088056061060436;  // std dev = 2.145, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | else if ( follows(A, E) )
%   | | then return 0.2512226124933208;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.049378965817202906;  // std dev = 0.152, 157.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.022069318496867146;  // std dev = 1.855, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | | | else return 0.060871249903201044;  // std dev = 2.424, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17028534906066006;  // std dev = 0.140, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3029326634837316;  // std dev = 0.763, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09377915098867723;  // std dev = 0.090, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38012029416020043;  // std dev = 0.732, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12372424269221112;  // std dev = 0.306, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1465934613644148;  // std dev = 1.796, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   | | else return 0.17094511946216018;  // std dev = 0.332, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08595604179848448;  // std dev = 0.279, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09528529993404858;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.017974346686101036;  // std dev = 0.897, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.001886546345473053;  // std dev = 1.160, 67.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1753773615283737;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.041749209193509204;  // std dev = 1.817, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.794', 'seconds']
Parameter learned model CLL:-0.113851 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 79], 'true,false,true': [0.0, 129, 0], 'true,false,false': [0.285, 41, 4], 'false,true,true,true': [0.0, 0, 15], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.94e-08, 38, 0], 'false,false': [0.488, 36, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.198, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 143, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.765, 35, 4], 'false,false,false,true': [0.863, 1, 5], 'false,false,false,false': [4.662, 79, 36]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.896, 1, 50], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.15, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 5], 'false,false,true,false': [2.11e-08, 0, 9], 'false,false,false,true': [4.207, 175, 29], 'false,false,false,false': [4.068, 74, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.244, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.054, 139, 0], 'false,true,false,false': [0.024, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.279, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.8, 3, 57], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 13], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.303, 0, 35], 'false,false,true,false': [1.777, 214, 5], 'false,false,false': [0.292, 60, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.625, 108, 64], 'false,true': [0.173, 0, 15], 'false,false,true': [0.888, 0, 45], 'false,false,false,true': [0.197, 55, 0], 'false,false,false,false': [0.197, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.632, 2, 96], 'true,false': [1.66, 201, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.079, 46, 21]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.145, 5, 60], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 140, 17], 'false,false,false,true': [1.855, 95, 21], 'false,false,false,false': [2.424, 40, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.14, 1, 58], 'false,true,true,true': [0.763, 0, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 177, 0], 'false,false,true': [0.732, 0, 36], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.306, 85, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.796, 3, 66], 'true,true,false': [0.332, 0, 13], 'true,false,true': [0.279, 132, 0], 'true,false,false,true': [0.022, 17, 0], 'true,false,false,false': [0.897, 13, 4], 'false,true': [1.16, 49, 18], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.817, 35, 21]}]
{'': [0.21999193998388059, 0.22941398865784618], 'false': [0.21811224489795866, 0.23786268313703063], 'true': [0.012343749999999164, 0.022460034350640676], 'false,true': [-2.9605947323337506e-16, 4.0902953538821554e-17], 'true,false': [-3.0982968129074136e-17, 0.08098765432098749], 'false,true,true': [-2.3684757858670006e-16, 1.4802973661668753e-16]}
{'': [0.0006337778896571242, 0.12726380579462043], 'false': [0.06819566535453583, 0.17528697236956525], 'false,false': [0.07991744125651368, 0.1959849271474126], 'false,false,false': [0.12406170748991789, 0.1889651970324591], 'false,false,true': [nan, 0.07991744125651368], 'false,true': [nan, 0.06819566535453583]}
{'': [0.01671567988566603, 0.123022213126145], 'false': [nan, 0.12302221312614513], 'false,false': [0.0026127067822791744, 0.11479431854517853], 'false,false,false': [0.0867780730516162, 0.1706093355067575], 'true': [0.01575391242597222, 0.010921482677735683], 'true,true': [0.01575391242597222, nan], 'true,false': [0.016665296929153566, 0.004512336598486133], 'false,false,true': [0.006302652668636144, 4.9343245538895844e-17]}
{'': [0.03998146113665592, 0.0007243592516762162], 'false': [2.8431869582346637e-05, 0.0010231192029737802], 'false,false': [nan, 0.0010231192029737802], 'false,false,false': [nan, 0.0010231192029737802], 'false,true': [nan, 2.8431869582349175e-05], 'false,true,false': [2.1193966289721386e-05, 1.619067587611051e-05]}
{'': [0.053727380621280955, 0.07848863035727881], 'false': [0.002768858344820562, 0.07781391264515065], 'false,false': [0.07572640935413305, 0.08517801849408368], 'false,false,true': [0.0026231973639667164, 0.014418350244585858], 'true': [0.05399408117731831, 0.0], 'false,true': [1.4113909677802529e-05, 0.0]}
{'': [0.04006111391110298, 0.09278053833569677], 'false': [0.0019873295669867804, 0.09894168476832428], 'false,false': [0.017529126379630278, 0.0007525773015479702], 'true': [nan, 0.04006111391110304], 'true,false': [nan, 0.04006111391110298], 'false,false,false': [0.000702718080004812, 0.000808805123015006]}
{'': [0.04637741924028474, 0.06450199669760809], 'false': [nan, 0.06450199669760813], 'false,false': [nan, 0.06450199669760809], 'false,false,false': [nan, 0.06450199669760809], 'true': [0.027184704833051215, 0.013247669570303263]}
{'': [0.06926860031825315, 0.0400273133818582], 'true': [0.07079187686884425, 8.495957269313847e-05], 'false': [nan, 0.04002731338185829], 'false,false': [0.023027945804222235, 0.053351533520130355], 'false,false,false': [0.02967896337937708, 0.09182484470670668], 'true,false': [8.495957269313847e-05, nan]}
{'': [0.019713032588004546, 0.03650647539098032], 'false': [0.02235291548568644, 0.05825715706861303], 'false,false': [0.014872741157753758, 0.0011033412903611072], 'false,true': [0.019393976590827828, 4.5696676960674554e-05], 'false,true,true': [0.019393976590827828, nan], 'false,false,false': [nan, 0.0011033412903611072]}
{'': [0.02909704819146866, 0.038019051048299606], 'false': [0.020083998101964585, 0.05748961778117087], 'false,false': [0.0, 0.058927077619784066], 'false,false,false': [nan, 0.058927077619784066], 'true': [0.040763099039341506, 0.0063381818562490986], 'true,true': [0.04674683143021331, 0.00850429811561269], 'true,false': [0.0005885088580633638, 0.026881349337044586], 'true,false,false': [2.8033223358409402e-05, 0.04732079167447017]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.272
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8434430527465715;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.12090865652352485;  // std dev = 0.143, 191.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7292485951889245;  // std dev = 0.209, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.6949030903689722;  // std dev = 0.867, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.39729980535659565;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1277602735754402;  // std dev = 4.71e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6668418332635857;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.19129566193511055;  // std dev = 2.747, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.2657720340164443;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.5584164092198617;  // std dev = 0.030, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.4216063854667266;  // std dev = 0.351, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else return 0.6450382930008721;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.42754207608930134;  // std dev = 0.972, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.556583662052696;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5887364191458984;  // std dev = 0.221, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11418694759666938;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05531443576975031;  // std dev = 2.322, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.1414499946311656;  // std dev = 3.349, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.434699885893457;  // std dev = 0.358, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4647383647187838;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.562675303399868;  // std dev = 0.123, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6303964384605678;  // std dev = 0.159, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7685225605855162;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10313598619321228;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.10313598619321196;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.1540509678328218;  // std dev = 0.397, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32548084331292404;  // std dev = 0.016, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.3579417833260967;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5204594206641846;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3276802186190885;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5501910592456163;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3430952611463979;  // std dev = 0.240, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.0939789376415629;  // std dev = 1.19e-07, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.052271825465915175;  // std dev = 2.286, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
%   | | | else return 0.16719489520887892;  // std dev = 1.941, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26000862051361767;  // std dev = 0.014, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.12130524949162871;  // std dev = 1.281, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.08627649626704839;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.07352100393961437;  // std dev = 0.071, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.32130370650617446;  // std dev = 0.155, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2538115299348904;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.32555030527508344;  // std dev = 0.995, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.49081351808774937;  // std dev = 0.401, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.1283052913157881;  // std dev = 0.049, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2084661987145597;  // std dev = 0.009, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(D, C), tweets(A, E) )
%   | | | then return 0.1057537542432411;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.21009413939241486;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2404559766111385;  // std dev = 0.038, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.22057426907471744;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07576847808762055;  // std dev = 0.305, 95.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=1 */
%   | | | else return -0.019686523116545396;  // std dev = 1.140, 81.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=15 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.023215506795772303;  // std dev = 1.230, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return -0.003224618064293537;  // std dev = 2.480, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.15250440054101802;  // std dev = 0.978, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.049096752412122635;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18393919023518313;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.08510331191644131;  // std dev = 0.889, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.039286468118301;  // std dev = 0.101, 183.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28316462310835805;  // std dev = 1.237, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.12433483363705096;  // std dev = 0.193, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.060666812415279554;  // std dev = 0.907, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return -0.009045398857831743;  // std dev = 1.426, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.15667932255713754;  // std dev = 0.033, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.09551270980114497;  // std dev = 0.962, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.23131737461507454;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.047121863370770144;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.17786950445821897;  // std dev = 0.992, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.24957416970248378;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07256162046890265;  // std dev = 0.002, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3209674330857078;  // std dev = 0.067, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.11709437358663771;  // std dev = 0.042, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12271547262989167;  // std dev = 0.140, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0.17781924618305428;  // std dev = 0.042, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.05936782540200799;  // std dev = 0.055, 164.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.12032432862936993;  // std dev = 1.039, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.080382757237963;  // std dev = 0.019, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.05592359873712164;  // std dev = 0.169, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13820829618750963;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.005451453706420866;  // std dev = 0.985, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return -0.02430597417216967;  // std dev = 1.362, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.996', 'seconds']
Refined model CLL: -0.103188


******************************************
Best model found
******************************************
Results 

CLL : -0.102116 

AUC ROC : 0.992977 

AUC PR : 0.361323 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 8.272 

Total Inference Time : 15.751147985458374 

Total revision time: 34.19988354682923
Best scored revision CLL: -0.103188


Results 

CLL : -0.102116 

AUC ROC : 0.992977 

AUC PR : 0.361323 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 34.21462735176087 

Total Inference Time : 15.751147985458374 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.914
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.06341969235146812;  // std dev = 0.269, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.1867203636709402;  // std dev = 0.470, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7301535947596687;  // std dev = 0.194, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03930468474414817;  // std dev = 0.257, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0497052979164939;  // std dev = 1.780, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7480716149172368;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13557495215396898;  // std dev = 4.896, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5624022394370999;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7298919849813242;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5871572791069872;  // std dev = 0.190, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5942943532631699;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.561864995501918;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016160859585543547;  // std dev = 4.583, 256.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=34 */
%   | | | else return 0.08160799451281212;  // std dev = 4.008, 95.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5234823724836392;  // std dev = 2.902, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12166670050511412;  // std dev = 0.057, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.13233842311151253;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1710695341836996;  // std dev = 0.282, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2720923534428676;  // std dev = 1.991, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.4700089805551648;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30054988425361906;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5038722655418548;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6057265124775812;  // std dev = 1.096, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10373170246048984;  // std dev = 1.821, 224.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=5 */
%   | | else return 0.033597633897543104;  // std dev = 0.335, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031596127381917034;  // std dev = 3.130, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25206042713878546;  // std dev = 0.175, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4596518807231481;  // std dev = 2.071, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12720673078847802;  // std dev = 0.209, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.13287044092233732;  // std dev = 0.229, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2910687010529081;  // std dev = 1.489, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09001447508340961;  // std dev = 1.708, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020909707400736815;  // std dev = 2.417, 91.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1914127257598461;  // std dev = 0.089, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2531767824928462;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.053003810800965924;  // std dev = 0.145, 204.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013932333205856821;  // std dev = 2.146, 132.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=28 */
%   | | | else return 0.05600792979437062;  // std dev = 2.567, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16645029187427252;  // std dev = 0.129, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.286878093457733;  // std dev = 0.911, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09274443826761374;  // std dev = 0.122, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37291997893346157;  // std dev = 1.288, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12031302943141549;  // std dev = 0.305, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.172004481382993;  // std dev = 1.277, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.11341287001628367;  // std dev = 0.985, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08231706814992948;  // std dev = 0.032, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0955440929704933;  // std dev = 0.039, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.04058396204750072;  // std dev = 1.129, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.011213698056017678;  // std dev = 1.343, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18381626635918713;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05354000295268886;  // std dev = 1.915, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.802', 'seconds']
Parameter learned model CLL:-0.112653 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 176, 0], 'true,false,false': [0.269, 47, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.47, 47, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.194, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.257, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.78, 40, 4], 'false,false,false,true': [0.14, 0, 8], 'false,false,false,false': [4.896, 92, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.19, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.583, 222, 34], 'false,false,false,false': [4.008, 72, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.902, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.057, 175, 0], 'false,true,false,false': [0.019, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 91, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.991, 4, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.096, 1, 39], 'false,false,true,false': [1.821, 219, 5], 'false,false,false': [0.335, 45, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.13, 161, 82], 'false,true': [0.175, 0, 22], 'false,false,true': [2.071, 3, 52], 'false,false,false,true': [0.209, 77, 0], 'false,false,false,false': [0.229, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.489, 1, 121], 'true,false': [1.708, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.417, 63, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.089, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 185, 19], 'false,false,false,true': [2.146, 104, 28], 'false,false,false,false': [2.567, 46, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.129, 1, 78], 'false,true,true,true': [0.911, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.122, 230, 0], 'false,false,true': [1.288, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.305, 112, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.277, 1, 85], 'true,true,false': [0.985, 1, 19], 'true,false,true': [0.032, 161, 0], 'true,false,false,true': [0.039, 29, 0], 'true,false,false,false': [1.129, 26, 4], 'false,true': [1.343, 56, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.915, 37, 21]}]
{'': [0.21845399866340154, 0.2229937894273566], 'false': [0.22518296115594033, 0.22061224489796016], 'false,true': [7.105427357601002e-16, 5.3198186596622086e-17], 'true': [0.035665294924556515, 0.01731064061014176], 'true,false': [-1.8924256101565169e-16, 0.07227989234909635], 'false,true,true': [0.0, 0.0]}
{'': [0.00044268636825159, 0.12450110900357407], 'false': [0.06599976246388387, 0.17178484400623142], 'false,false': [0.07200892087643705, 0.1915395923598898], 'false,false,false': [0.00245357159408921, 0.1815620848001155], 'false,false,true': [nan, 0.07200892087643705], 'false,true': [nan, 0.06599976246388387]}
{'': [0.012678332126557725, 0.11829330635129619], 'false': [nan, 0.1182933063512971], 'false,false': [0.0017170012160120322, 0.10751223205361099], 'false,false,false': [0.08206346628857752, 0.16911833566721962], 'true': [0.012257884481591668, 0.01178666616154816], 'true,true': [0.012257884481591668, nan], 'true,false': [0.016317967997914257, 0.004531101719901676], 'false,false,true': [0.005258316224036348, -1.7763568394002506e-16]}
{'': [0.0523157877812358, 0.0007805602237664391], 'false': [3.163930366436323e-05, 0.0008737592563513476], 'false,false': [nan, 0.0008737592563513476], 'false,false,false': [nan, 0.0008737592563513476], 'false,true': [nan, 3.1639303664365415e-05], 'false,true,false': [1.8627826256497774e-05, 1.2460804977298956e-05]}
{'': [0.04879545363481224, 0.08736268673075755], 'false': [0.0018830745122181362, 0.08738691222256888], 'false,false': [0.08181470045987863, 0.11202025660251354], 'false,false,true': [0.03002020952870619, 0.014801450221358035], 'true': [0.0489201716269481, 0.0], 'false,true': [8.657250556731721e-06, 0.0]}
{'': [0.04030481834626827, 0.08345023489202792], 'false': [0.0013960250357564713, 0.08692819983723196], 'false,false': [0.07801817714648317, 0.0006121830065100883], 'true': [nan, 0.04030481834626869], 'true,false': [nan, 0.04030481834626827], 'false,false,false': [0.0005656158355803105, 0.0006403762745337597]}
{'': [0.04492773468651765, 0.06422030298228605], 'false': [nan, 0.06422030298228608], 'false,false': [nan, 0.06422030298228605], 'false,false,false': [nan, 0.06422030298228605], 'true': [0.018164936265526285, 0.011178083154389628]}
{'': [0.00018396759530969493, 0.03965950613252155], 'false': [nan, 0.03965950613252154], 'false,false': [0.02096227610873874, 0.05652802125521724], 'false,false,false': [0.034885323976066585, 0.09414344721428064], 'true': [9.641324094594393e-05, 9.243456679615403e-05], 'true,false': [9.243456679615403e-05, nan]}
{'': [0.016572645799102444, 0.03527191478421358], 'false': [0.02068915115614672, 0.05917422649892733], 'false,false': [0.04046108755339329, 0.0008322136909554757], 'false,true': [0.02184096678755759, 6.488054586072812e-05], 'false,true,true': [0.02184096678755759, nan], 'false,false,false': [nan, 0.0008322136909554757]}
{'': [0.024804535240633592, 0.039556616317506954], 'false': [0.022259948099371065, 0.061655937675945356], 'false,false': [0.0, 0.06321627433211863], 'false,false,false': [nan, 0.06321627433211863], 'true': [0.025067011889055493, 0.006055337089964941], 'true,true': [0.01897037000441575, 0.04849732656527934], 'true,false': [6.51777741139911e-06, 0.022402893811710296], 'true,false,false': [5.336710150461845e-05, 0.04252272674330853]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 14.729
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8399671169176942;  // std dev = 0.991, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12383304688247034;  // std dev = 0.133, 222.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.26991364098186527;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6943709598074616;  // std dev = 0.172, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.7339934234731866;  // std dev = 0.206, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4401574110820219;  // std dev = 0.447, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04935101071762152;  // std dev = 2.909, 141.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=13 */
%   | | | else return -0.09355841503601471;  // std dev = 0.830, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.03923192549536162;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.09355841503601474;  // std dev = 1.174, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.44674613948368164;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.12108857907578696;  // std dev = 4.643, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.5660276050645662;  // std dev = 9.42e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.517769004207746;  // std dev = 1.375, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else return 0.3430138034120605;  // std dev = 0.449, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.6521382406104217;  // std dev = 0.082, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5624787085452917;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11460962514405405;  // std dev = 0.848, 138.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=1 */
%   | | | else return 0.0020491053041736514;  // std dev = 3.195, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09361451994493608;  // std dev = 3.085, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.2295620065959124;  // std dev = 3.078, 48.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.37912173937923366;  // std dev = 1.672, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.0853508300533407;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(D, G), follows(H, D) )
%   | | | then return 0.42314406837898166;  // std dev = 0.082, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.565143543581139;  // std dev = 0.188, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(I, B), follows(J, K) )
%   | | | then return 0.41913585208807547;  // std dev = 1.005, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.6403146080501305;  // std dev = 1.390, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(L, A), tweets(A, M) )
%   | | | then return 0.4549950812075481;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7139904329388749;  // std dev = 0.195, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.13247179606669393;  // std dev = 0.030, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.3268042383316485;  // std dev = 0.979, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.011270093469030037;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.40864315777083154;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.49313989031217853;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3307219521075477;  // std dev = 0.048, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09407382327003357;  // std dev = 0.767, 157.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=1 */
%   | | | else return 0.014868829235074007;  // std dev = 2.601, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.034166347527230016;  // std dev = 2.963, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.09875624808770848;  // std dev = 2.042, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3101635062455426;  // std dev = 0.210, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | else return -0.0968583066134841;  // std dev = 0.107, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.14988068801215915;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2953711766899858;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.06775985211263685;  // std dev = 0.133, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26400674814372505;  // std dev = 0.047, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.19248160688182608;  // std dev = 1.074, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4972240733488102;  // std dev = 1.108, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13917546250875107;  // std dev = 0.040, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21557397687182184;  // std dev = 0.108, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.030739976371591038;  // std dev = 0.402, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.23993157681859525;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4698621753996598;  // std dev = 0.113, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08989219865243024;  // std dev = 0.160, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3414737676504076;  // std dev = 0.353, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12923478235719132;  // std dev = 0.061, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.013241099925443376;  // std dev = 1.015, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.020113526197261835;  // std dev = 1.682, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16925361395966376;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.13211652215672526;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.16113267470870254;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.29004935779433944;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03850907527406328;  // std dev = 0.134, 240.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24217958629789377;  // std dev = 0.991, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.11579060661019934;  // std dev = 0.055, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -7.582931892966029E-4;  // std dev = 0.606, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.034872851761657796;  // std dev = 1.744, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.14032481087002263;  // std dev = 0.993, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return -0.13968496035732314;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19999435400330043;  // std dev = 0.049, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.14667173862796046;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14139727323218787;  // std dev = 0.706, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.27351372584243344;  // std dev = 0.138, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07869053664414728;  // std dev = 0.139, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.308327481418658;  // std dev = 0.082, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11824545324903334;  // std dev = 0.034, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.10861704164504506;  // std dev = 0.195, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.19629839316565326;  // std dev = 0.174, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return -0.0659727200198637;  // std dev = 0.057, 224.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.14605692844133997;  // std dev = 1.065, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09222919432221587;  // std dev = 0.052, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.038997249943192445;  // std dev = 0.198, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1652669382951708;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.007381246489320341;  // std dev = 0.817, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return -0.00272511386129283;  // std dev = 1.344, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.774', 'seconds']
Refined model CLL: -0.105675


******************************************
Best model found
******************************************
Results 

CLL : -0.103358 

AUC ROC : 0.993599 

AUC PR : 0.420699 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 14.729 

Total Inference Time : 16.089041233062744 

Total revision time: 43.45450221824646
Best scored revision CLL: -0.105675


Results 

CLL : -0.103358 

AUC ROC : 0.993599 

AUC PR : 0.420699 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 43.4692460231781 

Total Inference Time : 16.089041233062744 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.184
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.030739953789376676;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2581489350995122;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6083623010998431;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04405447243966989;  // std dev = 0.255, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.013150147216462349;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8237336544841058;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13085483915044335;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6034180649298682;  // std dev = 0.191, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8634081335610936;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6721923233751143;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.582608003894076;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.582608003894076;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040700637299039055;  // std dev = 1.606, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | | else return -0.07520868169166381;  // std dev = 0.923, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48223565255615897;  // std dev = 1.251, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12108021482807318;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.11293415942107735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15520108673904542;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3057184355529268;  // std dev = 0.922, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.39262043791217216;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.324897475999103;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6224535895520296;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09851032274336731;  // std dev = 0.849, 51.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=1 */
%   | | else return -0.11860879292360557;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06761434853186693;  // std dev = 1.408, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2580262830444934;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5099166300493562;  // std dev = 0.327, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11554050016622647;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.12025375737677271;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25334178737825197;  // std dev = 1.103, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.07983006221756728;  // std dev = 0.793, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05797485691256349;  // std dev = 0.308, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.08375096764149015;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else if ( follows(A, E) )
%   | | then return 0.201457700358594;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.044724954570097536;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021121691659041392;  // std dev = 0.528, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.01044216131501936;  // std dev = 0.824, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1621110317366141;  // std dev = 0.239, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2820676176182273;  // std dev = 0.299, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09101939032314398;  // std dev = 0.015, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4671356794056894;  // std dev = 0.279, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10086060552039004;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15312274250671515;  // std dev = 1.065, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.1495579800318394;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08310705152935906;  // std dev = 0.005, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09123070620488687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.051032970599879;  // std dev = 0.341, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.03646567306968962;  // std dev = 0.246, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19612580906837485;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10862505717487621;  // std dev = 0.545, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.591', 'seconds']
Parameter learned model CLL:-0.111478 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [5.05e-08, 48, 0], 'true,false,false': [0.314, 8, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.49, 3, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.333, 2, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 45, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.935, 7, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.075, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.191, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.606, 35, 4], 'false,false,false,false': [0.923, 12, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.251, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 27, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.053, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.922, 1, 15], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.036, 0, 4], 'false,false,true,false': [0.849, 50, 1], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.408, 28, 19], 'false,true': [0.0, 0, 2], 'false,false,true': [0.327, 0, 4], 'false,false,false,true': [0.039, 8, 0], 'false,false,false,false': [0.06, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.103, 1, 21], 'true,false': [0.793, 47, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.308, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.328, 2, 15], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 42, 5], 'false,false,false,true': [0.528, 9, 2], 'false,false,false,false': [0.824, 6, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.239, 1, 16], 'false,true,true,true': [0.299, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.015, 38, 0], 'false,false,true': [0.279, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.041, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.065, 1, 19], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.005, 39, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.341, 2, 1], 'false,true': [0.246, 5, 1], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.545, 2, 1]}]
{'': [0.2024983563445111, 0.1983471074380164], 'true': [0.0, 0.017236072637734762], 'false': [0.13888888888888892, 0.24000000000000005], 'false,true': [0.0, -2.7755575615628915e-18], 'true,false': [5.3198186596622086e-17, 0.09876543209876548], 'false,true,true': [0.0, nan]}
{'': [0.09876543209876572, 0.09369991649318214], 'false': [0.06524530033029773, 0.16642523276715035], 'false,false': [0.10937499999999996, 0.19688386371601205], 'false,false,false': [0.0, 0.16499999836888413], 'false,false,true': [nan, 0.10937499999999996], 'false,true': [nan, 0.06524530033029773]}
{'': [0.00637164289221942, 0.08793881624011589], 'false': [nan, 0.08793881624011578], 'false,false': [0.0, 0.06617886423507911], 'false,false,false': [0.06611369161719438, 0.06548127824288089], 'true': [0.0025983518418805245, 0.009140871516270188], 'true,false': [0.0, 0.0], 'true,true': [0.0025983518418805245, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.0602257973272675, 0.00029906423727850195], 'false': [7.091050000509033e-05, 0.0005719730398991207], 'false,false': [nan, 0.0005719730398991207], 'false,false,false': [nan, 0.0005719730398991207], 'false,true': [nan, 7.091050000509429e-05], 'false,true,false': [7.116687843817104e-05, 0.0]}
{'': [0.050415517888422974, 0.050786241846963225], 'false': [0.0, 0.0452583027315921], 'true': [0.053122254932093785, 0.0], 'false,false': [0.0481931430216214, 0.0], 'false,false,true': [0.00032291789250438185, 0.014144836822198716], 'false,true': [0.0, nan]}
{'': [0.042190060689319596, 0.06371980973866143], 'false': [0.0, 0.06379263637383902], 'false,false': [0.026799095119183047, 0.0002899746993951544], 'true': [nan, 0.04219006068931962], 'true,false': [nan, 0.042190060689319596], 'false,false,false': [0.00018668983717473955, 0.0003627293476013954]}
{'': [0.049743758482221956, 0.023653484829550948], 'true': [0.055313193704786955, 0.012847750799822704], 'false': [nan, 0.023653484829550948], 'false,false': [nan, 0.023653484829550948], 'false,false,false': [nan, 0.023653484829550948]}
{'': [0.09869350029975389, 0.029462447959071554], 'true': [0.10372928504366785, 0.0], 'false': [nan, 0.02946244795907156], 'false,false': [0.02075256144614535, 0.05044566238257382], 'false,false,false': [0.025302431202128852, 0.0849515749371563], 'true,false': [0.0, nan]}
{'': [0.05688491439066605, 0.028548893294244353], 'false': [0.020274719278349437, 0.07042633247646185], 'false,false': [0.03890184434359528, 0.0002795502649603499], 'false,true': [0.012761671463528135, 6.314915830877463e-06], 'false,true,true': [0.012761671463528135, nan], 'false,false,false': [nan, 0.0002795502649603499]}
{'': [0.03084237197653748, 0.043033571332084075], 'false': [0.01008786713733796, 0.07572555691638726], 'false,false': [0.0, 0.09905331382636777], 'false,false,false': [nan, 0.09905331382636777], 'true': [0.05156686981768077, 0.003715113427725229], 'true,true': [0.05672240156931228, 0.0], 'true,false': [7.611296282327692e-07, 0.024417709644339508], 'true,false,false': [0.0, 0.038715942419673584]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.225
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.004742059851341973;  // std dev = 0.296, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.05650260729009682;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.281970425023355;  // std dev = 0.795, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.09764813690506359;  // std dev = 1.121, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5107081801177739;  // std dev = 0.261, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(E, A) )
%   | | then return 0.8369010071097172;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.23149034603633414;  // std dev = 0.809, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7204295120324535;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12572344325240215;  // std dev = 0.062, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03062595040980276;  // std dev = 0.748, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.16453993751238513;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4381617512123044;  // std dev = 0.124, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1304427641290796;  // std dev = 0.703, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4247796151406849;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6033601291109745;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7547927545135019;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.11435213424468016;  // std dev = 0.009, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.10037912595535317;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, H) )
%   | | then return -0.14020637109558687;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.19315119965043384;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30254859390447886;  // std dev = 0.228, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.6043437881348976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3519263512652433;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.44387409539153466;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09624115500328526;  // std dev = 0.782, 55.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=1 */
%   | | else return -0.1066501868697042;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.057202837555327984;  // std dev = 0.187, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | else return -0.01579276026379948;  // std dev = 0.136, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3067499365128279;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.3401037904712146;  // std dev = 0.764, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.125952428851198;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14097569725553447;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( tweets(C, D), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(A, C) )
%   | | | then return 0.27213255462716407;  // std dev = 0.153, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.30818657071503025;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24870009828975245;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09666624096183488;  // std dev = 0.004, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H), tweets(G, I) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08275940184335089;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10097687955891634;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.28203410777258037;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1050010660047975;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.0903972552353919;  // std dev = 0.711, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.20606906962776658;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.19637690916546113;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2016624733402781;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07477360009636287;  // std dev = 0.347, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return 0.01112031152433935;  // std dev = 0.656, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( follows(A, G), follows(G, I) )
%   | | | then return -0.2579429391480263;  // std dev = 0.802, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.020958868011885585;  // std dev = 0.431, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( tweets(A, J) )
%   | | then return -0.08835184221177199;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0998699740425901;  // std dev = 0.692, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.17349432335496962;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.31091093873783926;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.003626505017560566;  // std dev = 0.629, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16820680878562863;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.24972224320302272;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08098333095147962;  // std dev = 0.007, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4157728814498086;  // std dev = 0.204, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08838571165680098;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.14037032732935678;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.17029808083841474;  // std dev = 0.148, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07791077734621558;  // std dev = 0.598, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.18343410653736478;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07450956922509423;  // std dev = 0.005, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.0666670397681003;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -1.3046673758837501E-4;  // std dev = 0.293, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, H) )
%   | then return -0.005432804616385706;  // std dev = 0.235, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3285514882263947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.03227574719356694;  // std dev = 0.537, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '44.565', 'seconds']
Refined model CLL: -0.103978


******************************************
Best model found
******************************************
Results 

CLL : -0.100807 

AUC ROC : 0.994946 

AUC PR : 0.412528 

Precision : 0.342105 

Recall : 1.0 

F1 : 0.509804 

Total Learning Time : 7.225 

Total Inference Time : 7.751331329345703 

Total revision time: 18.39150675201416
Best scored revision CLL: -0.103978


Results 

CLL : -0.100807 

AUC ROC : 0.994946 

AUC PR : 0.412528 

Precision : 0.342105 

Recall : 1.0 

F1 : 0.509804 

Total Learning Time : 18.4062505569458 

Total Inference Time : 7.751331329345703 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.414
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7236120721642044;  // std dev = 0.139, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04095283345445687;  // std dev = 0.253, 80.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06838357794998513;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8259563331837879;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.08530739204398459;  // std dev = 2.001, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5716762248916483;  // std dev = 0.285, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8086011931947246;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6750859536886815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5543442258080786;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5543442258080786;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05480836992217626;  // std dev = 2.142, 85.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=7 */
%   | | | else return -0.013158787813878615;  // std dev = 1.777, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47633233362525035;  // std dev = 1.693, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1163100614388774;  // std dev = 0.024, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.1196274661930494;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14433771181470081;  // std dev = 0.106, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30563362909941794;  // std dev = 0.942, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0.4243530429859405;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3073713083926947;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6570459565259023;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08736201570557191;  // std dev = 1.383, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | else return -0.11341201079448182;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0401926101817243;  // std dev = 1.952, 104.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2669735698186847;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5774100290952109;  // std dev = 0.395, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1170970834023869;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.11018524232316826;  // std dev = 0.079, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2904996458935537;  // std dev = 0.592, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return -0.0738553445251888;  // std dev = 1.200, 83.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004981418928632772;  // std dev = 0.424, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.12944972041372588;  // std dev = 1.364, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return 0.21307181378635104;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05148908315036938;  // std dev = 0.134, 88.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.044258835006571434;  // std dev = 0.782, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | | else return 0.1111510776934348;  // std dev = 1.059, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17738747160120513;  // std dev = 0.103, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27728033464658713;  // std dev = 0.395, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08946718746206289;  // std dev = 0.022, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45136779343093364;  // std dev = 0.343, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.108239326378279;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15541553307037761;  // std dev = 1.126, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.14325291167251697;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08280544817952483;  // std dev = 0.009, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08176096841492969;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05147145403007437;  // std dev = 0.382, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.015582986064673197;  // std dev = 0.480, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1629302483869317;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0740449815822493;  // std dev = 0.831, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.507', 'seconds']
Parameter learned model CLL:-0.109835 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.46e-07, 0, 41], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false': [0.331, 14, 2], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.487, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.139, 0, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.253, 72, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.001, 18, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.285, 0, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [2.142, 78, 7], 'false,false,false,false': [1.777, 27, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.693, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.024, 62, 0], 'false,true,false,false': [0.0, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.106, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.942, 1, 31], 'true,false': [0.039, 0, 2], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.127, 0, 8], 'false,false,true,false': [1.383, 96, 3], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.952, 67, 37], 'false,true': [0.094, 0, 5], 'false,false,true': [0.395, 0, 8], 'false,false,false,true': [0.07, 12, 0], 'false,false,false,false': [0.079, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.592, 0, 43], 'true,false': [1.2, 79, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.424, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.364, 2, 32], 'true,false,true': [0.033, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.134, 80, 8], 'false,false,false,true': [0.782, 27, 3], 'false,false,false,false': [1.059, 7, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.103, 1, 33], 'false,true,true,true': [0.395, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.022, 98, 0], 'false,false,true': [0.343, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.126, 1, 38], 'true,true,false': [2.63e-09, 0, 3], 'true,false,true': [0.009, 49, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.382, 3, 2], 'false,true': [0.48, 6, 2], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.831, 6, 4]}]
{'': [0.22480473670949966, 0.23268698060941836], 'false': [0.22222222222222224, 0.2366863905325442], 'true': [1.4730764034050857e-15, 0.022975778546712827], 'false,true': [0.0, 0.0], 'true,false': [6.75787928032704e-17, 0.10937500000000004], 'false,true,true': [0.0, nan]}
{'': [0.0005652407048843432, 0.0933882009019023], 'false': [0.06424978612186596, 0.14770423211137523], 'false,false': [0.06632653061224485, 0.1812123771706596], 'false,false,false': [0.0, 0.1668204587256433], 'false,false,true': [nan, 0.06632653061224485], 'false,true': [nan, 0.06424978612186596]}
{'': [0.006093237532547663, 0.0805232509305158], 'false': [nan, 0.0805232509305155], 'false,false': [1.1102230246251565e-16, 0.06709986452938345], 'false,false,false': [0.05396235599744105, 0.10185095798387175], 'true': [0.002703583730095597, 0.006330308758950205], 'true,false': [0.0035533567449733683, 0.0], 'true,true': [0.002703583730095597, nan], 'false,false,true': [3.700743415417188e-17, 3.700743415417188e-17]}
{'': [0.05515263690148918, 0.00023392449096216761], 'false': [9.151952052488533e-06, 0.0006253496790964183], 'false,false': [nan, 0.0006253496790964183], 'false,false,false': [nan, 0.0006253496790964183], 'false,true': [nan, 9.151952052488533e-06], 'false,true,false': [9.33280617215043e-06, -6.1679056923619804e-18]}
{'': [0.026898319894081077, 0.05664238835167612], 'false': [-3.700743415417188e-17, 0.05370370155215431], 'false,false': [0.05636064729454223, 0.0], 'false,false,true': [0.002003440810669721, 0.019321879361544166], 'true': [0.027701844009803966, 0.0007767112344592431], 'false,true': [-3.700743415417188e-17, nan]}
{'': [0.0366388421324489, 0.07521896848193721], 'false': [0.0017517293305749804, 0.07741348091164059], 'false,false': [0.01952760902173145, 0.00033883864334527066], 'true': [nan, 0.03663884213244888], 'true,false': [nan, 0.0366388421324489], 'false,false,false': [0.0004137064760554356, 0.0002811403917660014]}
{'': [0.044047871652384336, 0.017993733212651998], 'true': [0.008145131274637922, 0.01734295925441286], 'false': [nan, 0.017993733212651998], 'false,false': [nan, 0.017993733212651998], 'false,false,false': [nan, 0.017993733212651998]}
{'': [0.052077771370504705, 0.027646662142670857], 'true': [0.05472117121663847, 0.0005358002917676755], 'false': [nan, 0.02764666214267085], 'false,false': [0.017950486226126498, 0.04615779931076432], 'false,false,false': [0.020363773155554873, 0.09339126400919966], 'true,false': [0.0005358002917676755, nan]}
{'': [0.010568672219223758, 0.024228585063113067], 'false': [0.013642675854116292, 0.07008747970444863], 'false,false': [0.01960962725145765, 0.0008042982453129455], 'false,true': [0.014214096192455698, 4.764408096452961e-06], 'false,true,true': [0.014214096192455698, nan], 'false,false,false': [nan, 0.0008042982453129455]}
{'': [0.02705664970099893, 0.04995563770174347], 'false': [0.02880565029259185, 0.06347306740516546], 'false,false': [0.0, 0.0691021386315966], 'false,false,false': [nan, 0.0691021386315966], 'true': [0.030202466581354694, 0.0038124814612248196], 'true,true': [0.032515166858654077, 2.3129646346357427e-18], 'true,false': [1.753307825685606e-06, 0.017688182507099786], 'true,false,false': [-1.1564823173178713e-18, 0.029231704211675518]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.85
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7329544521076627;  // std dev = 0.151, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.33025976062908036;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.055280702245010784;  // std dev = 1.819, 58.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11184985278353765;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13815014721646235;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.808741135785635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.08260208145941934;  // std dev = 2.047, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.44677190815501366;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.5699230282337933;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.6551164459382787;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7503416862852778;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.58828719934379;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7304942762303395;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11843042823969102;  // std dev = 0.041, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.022041462508851375;  // std dev = 1.193, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.301555174916823;  // std dev = 1.420, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4417633808345474;  // std dev = 0.160, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.5401775971895006;  // std dev = 0.097, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.7544432382486731;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6815851990287608;  // std dev = 0.245, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10894132264577705;  // std dev = 0.049, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.1074506068099703;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, J) )
%   | | then return -0.13224072056402872;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.2563147380454879;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.33634195109535453;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.32523253922977846;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20136030933745408;  // std dev = 0.957, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.39335810714447283;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3381226555223373;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49652310604649275;  // std dev = 0.236, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08518325735054379;  // std dev = 1.250, 94.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=3 */
%   | | else return -0.10008667866244889;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2619314502213763;  // std dev = 0.007, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.19025203663006476;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09032387765013093;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06284057524156364;  // std dev = 0.093, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.12759267550227862;  // std dev = 0.936, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.07974750015020056;  // std dev = 0.732, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.553461348876288;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1271438793400079;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.16441553719976457;  // std dev = 0.143, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.21790584376872824;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.03761183512733432;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21087530458189707;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2387913274740463;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.13146755815786307;  // std dev = 1.050, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07628475268507383;  // std dev = 0.356, 64.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=1 */
%   | | | else return -0.029883853205863946;  // std dev = 0.668, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.010293401081360242;  // std dev = 0.683, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.21585674259303378;  // std dev = 0.687, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.13652320407687876;  // std dev = 0.977, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.18438501890342268;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20987805447742647;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.23546381851793624;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.29256171284980603;  // std dev = 0.196, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0826232076731516;  // std dev = 0.730, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   | | | else return -0.031172032114341303;  // std dev = 0.677, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -6.862724716662469E-4;  // std dev = 0.689, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.021343957395391275;  // std dev = 0.884, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1097538854430084;  // std dev = 0.973, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.165511662358726;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1354131604507963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.026030456342841592;  // std dev = 0.949, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.2621176225658027;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.04773403075911351;  // std dev = 0.344, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else return -0.07456230258013472;  // std dev = 0.007, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3816295411549002;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12669012022051293;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15774075656228306;  // std dev = 0.147, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.12922178210196922;  // std dev = 0.900, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.17033248556309766;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05895449903558263;  // std dev = 0.057, 68.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.027576168447996496;  // std dev = 0.329, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.01272372386198564;  // std dev = 0.176, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.12367612850767618;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.01997021456782782;  // std dev = 0.400, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07421356124600001;  // std dev = 0.647, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.057', 'seconds']
Refined model CLL: -0.104954


******************************************
Best model found
******************************************
Results 

CLL : -0.111298 

AUC ROC : 0.993978 

AUC PR : 0.330031 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 4.85 

Total Inference Time : 5.8965911865234375 

Total revision time: 15.986956657409667
Best scored revision CLL: -0.104954


Results 

CLL : -0.111298 

AUC ROC : 0.993978 

AUC PR : 0.330031 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 16.001700462341308 

Total Inference Time : 5.8965911865234375 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.72
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7966104735610511;  // std dev = 1.937, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6964888775516463;  // std dev = 1.397, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04469655682246891;  // std dev = 0.253, 115.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07326233640447123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5767811018804077;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07469391594945748;  // std dev = 2.303, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5904136641312833;  // std dev = 0.314, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.7404072053057107;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8164649443985876;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6468917866082327;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5761285649718138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5761285649718138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06407234567384569;  // std dev = 2.487, 130.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=9 */
%   | | | else return -0.020033738575461996;  // std dev = 1.969, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4403020143110493;  // std dev = 2.653, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11505481551823839;  // std dev = 0.025, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return -0.11851365132006506;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14793269253710298;  // std dev = 0.137, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3124400689450242;  // std dev = 1.380, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else return 0.44241976087218354;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21859160559772134;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5899587178404222;  // std dev = 0.895, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.08386568843188472;  // std dev = 1.593, 136.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=4 */
%   | | else return -0.10877344122934061;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03047760129007381;  // std dev = 2.744, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.29726949282976806;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5298496266699583;  // std dev = 0.616, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11186570506714426;  // std dev = 0.074, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11525080042541158;  // std dev = 0.083, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.277614115549697;  // std dev = 1.386, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else return -0.07750595712589717;  // std dev = 1.418, 142.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.001366483656329542;  // std dev = 0.534, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16937641330448677;  // std dev = 1.390, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.23558905084737924;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04899389686738537;  // std dev = 0.160, 110.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019868412888727694;  // std dev = 1.411, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.0697189902320183;  // std dev = 1.180, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14894137631981383;  // std dev = 0.226, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3040250481356777;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08796882957921488;  // std dev = 0.020, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48400400178210434;  // std dev = 0.372, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10367286452529502;  // std dev = 0.125, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1806427092058346;  // std dev = 1.042, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.15444450331653314;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08151615408830275;  // std dev = 0.013, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08062936190990132;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.010577456727751695;  // std dev = 0.461, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.013529717963934039;  // std dev = 0.808, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22790776344472774;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0172565554440687;  // std dev = 1.066, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.481', 'seconds']
Parameter learned model CLL:-0.106708 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.937, 4, 61], 'true,false,true': [8.69e-08, 104, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.935, 1, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.487, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.397, 2, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.253, 104, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.842, 1, 4], 'false,false,false,false': [2.303, 26, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.314, 0, 46], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.093, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.487, 121, 9], 'false,false,false,false': [1.969, 35, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.653, 6, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.025, 109, 0], 'false,true,false,false': [0.0, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.137, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.38, 2, 49], 'true,false': [0.101, 0, 4], 'false,true,true': [0.943, 1, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.895, 1, 10], 'false,false,true,false': [1.593, 132, 4], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.744, 111, 56], 'false,true': [0.076, 0, 6], 'false,false,true': [0.616, 0, 13], 'false,false,false,true': [0.074, 15, 0], 'false,false,false,false': [0.083, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.386, 2, 66], 'true,false': [1.418, 137, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.534, 10, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.39, 2, 49], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 99, 11], 'false,false,false,true': [1.411, 29, 8], 'false,false,false,false': [1.18, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.226, 3, 53], 'false,true,true,true': [0.487, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.02, 121, 0], 'false,false,true': [0.372, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.125, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.042, 1, 57], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.013, 92, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.461, 8, 2], 'false,true': [0.808, 18, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.066, 13, 4]}]
{'': [0.22104657218826257, 0.23140495867768548], 'false': [0.2275000000000001, 0.2366863905325442], 'false,true': [0.10937499999999978, -1.1564823173178714e-17], 'true': [0.057751479289940184, 0.015621063240110812], 'false,true,true': [0.10937499999999978, nan], 'true,false': [7.259150545626024e-17, 0.0826446280991736]}
{'': [0.03682561746248935, 0.09687136569007974], 'false': [0.06393651682743666, 0.15566771704746216], 'false,false': [0.05859375000000002, 0.1823780246238455], 'false,false,false': [0.14194204306114183, 0.15600506400378283], 'false,true': [nan, 0.06393651682743666], 'false,false,true': [nan, 0.05859375000000002]}
{'': [0.004490288489320998, 0.0738838458946446], 'false': [nan, 0.07388384589464453], 'false,false': [-1.1102230246251565e-16, 0.059531653136908266], 'false,false,false': [0.04758330111412348, 0.09688072745230254], 'true': [0.0025655812814349287, 0.00887378361815864], 'true,false': [0.003151878286504095, 0.0021497176696551046], 'true,true': [0.00214267260895633, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.08691550099781778, 0.0002526292249510382], 'false': [6.5362248094400996e-06, 0.0007271407052687942], 'false,false': [nan, 0.0007271407052687942], 'false,false,false': [nan, 0.0007271407052687942], 'false,true': [nan, 6.5362248094400996e-06], 'false,true,false': [5.7348213799134745e-06, -2.3550185370836655e-17]}
{'': [0.035974914212808996, 0.05641569263301454], 'false': [0.09876543209876543, 0.0504603353647756], 'false,true': [0.09876543209876543, nan], 'false,false': [0.05415127418977887, 2.3129646346357427e-18], 'false,false,true': [0.07280253403084921, 0.01866698419511126], 'true': [0.03736732946076151, 0.002555606419825912]}
{'': [0.04510154515217831, 0.09057967982078145], 'false': [0.0009748999215291043, 0.09778156461559792], 'false,false': [0.029169870339632024, 0.0004270597860873348], 'true': [nan, 0.04510154515217833], 'true,false': [nan, 0.04510154515217831], 'false,false,false': [0.00036539226557117386, 0.0004872051274710243]}
{'': [0.04633639590205889, 0.020362229861846187], 'true': [0.028252649634188477, 0.014160512872008224], 'false': [nan, 0.020362229861846187], 'false,false': [nan, 0.020362229861846187], 'false,false,false': [nan, 0.020362229861846187]}
{'': [0.036606109396154426, 0.03934555131717572], 'false': [nan, 0.03934555131717557], 'false,false': [0.02570948577466187, 0.06551757589211081], 'false,false,false': [0.053791638507933386, 0.08703081734730414], 'true': [0.037871886894062456, 0.0001101080695052048], 'true,false': [0.0001101080695052048, nan]}
{'': [0.05120049567230362, 0.027180169077189946], 'false': [0.016045828712274578, 0.06529910438919191], 'false,false': [0.017305897151712935, 0.0005789484112351579], 'false,true': [0.016975405820882323, 3.24617071348779e-06], 'false,true,true': [0.016975405820882323, nan], 'false,false,false': [nan, 0.0005789484112351579]}
{'': [0.022388847237005353, 0.04300606038892562], 'false': [0.026132840425888048, 0.06626976677520156], 'false,false': [0.0, 0.06682879150264631], 'false,false,false': [nan, 0.06682879150264631], 'true': [0.017541212204733637, 0.002270733311200301], 'true,true': [0.01870667059090498, 0.0], 'true,false': [1.8990228120900319e-06, 0.010894141591868094], 'true,false,false': [-2.3129646346357427e-18, 0.02129041909139225]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.825
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.7993254056877469;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1268134709155254;  // std dev = 0.122, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.6978706072213934;  // std dev = 0.191, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, D), follows(D, F) )
%   | | then if ( follows(D, A), follows(A, E) )
%   | | | then return -0.10220437353256381;  // std dev = 1.180, 68.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=2 */
%   | | | else return -0.0026070661697130486;  // std dev = 1.748, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12710370037327642;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7930236244501943;  // std dev = 0.135, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1436433573651053;  // std dev = 0.095, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12710370037327642;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5705213966359266;  // std dev = 0.007, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(E, A) )
%   | | then return 0.7736334971353664;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6004964994880393;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6837491954688264;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5093898506069678;  // std dev = 1.049, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.11907233457303878;  // std dev = 0.057, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08611754403270663;  // std dev = 1.166, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.05265701439520482;  // std dev = 1.473, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.438248092714954;  // std dev = 0.256, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2762253603904772;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.46057101969042535;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5414687610837872;  // std dev = 0.271, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6211332636851131;  // std dev = 0.200, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10611366587011134;  // std dev = 0.042, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.10798468367101464;  // std dev = 0.023, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.1280974717516165;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.33170700239906775;  // std dev = 0.053, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.0028424045380198346;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.00161610901828102;  // std dev = 1.430, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3182568033097161;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4021219936488947;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.35832482284513634;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06821817874095505;  // std dev = 1.251, 108.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=6 */
%   | | | else return 0.030972146661172217;  // std dev = 1.464, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | else return -0.09286847786813826;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.22789580915608731;  // std dev = 0.982, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.2864612383886559;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.29618360887466627;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.03680029570895856;  // std dev = 0.447, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06266470191766223;  // std dev = 1.143, 92.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=5 */
%   | | | else return -0.0695402998594069;  // std dev = 0.572, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.29045313075837514;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3990355012873494;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.11269215896818707;  // std dev = 0.019, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.2229803408159324;  // std dev = 0.017, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(D, A) )
%   | | then return 0.3152273886224441;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19774322487477114;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), tweets(A, G) )
%   | | then return 0.2891076452717139;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1903679144231845;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07404399354502941;  // std dev = 0.610, 65.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=1 */
%   | | | else return -0.017252523366940907;  // std dev = 1.109, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.04798460894530756;  // std dev = 0.999, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.017149929161999054;  // std dev = 0.875, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18990380239989138;  // std dev = 0.019, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.16943339338564722;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20345345265693443;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.25596846905644144;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14262398912549135;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0019097974598489276;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07075462953303528;  // std dev = 0.625, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   | | | else return -0.0185345107736939;  // std dev = 1.159, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else return 0.034351396843204166;  // std dev = 0.223, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.15967747514871636;  // std dev = 0.014, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.2202269146527541;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.04143024938766304;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16316038087849127;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.46573147914345264;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07713237331398999;  // std dev = 0.007, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3021380010235075;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.427868495787374;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11527439024131425;  // std dev = 0.015, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16570331175430136;  // std dev = 0.485, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.036366550887726744;  // std dev = 1.219, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return -0.205721571774493;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.06790321349821694;  // std dev = 0.035, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.017555052563301754;  // std dev = 0.116, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else return 0.08692021145802223;  // std dev = 0.361, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.25489988447083667;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06335150280610125;  // std dev = 0.489, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.04473423168558154;  // std dev = 0.572, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.628', 'seconds']
Refined model CLL: -0.10286


******************************************
Best model found
******************************************
Results 

CLL : -0.101622 

AUC ROC : 0.994241 

AUC PR : 0.366381 

Precision : 0.338824 

Recall : 0.923077 

F1 : 0.495697 

Total Learning Time : 7.825 

Total Inference Time : 7.47024393081665 

Total revision time: 22.408898515701296
Best scored revision CLL: -0.10286


Results 

CLL : -0.101622 

AUC ROC : 0.994241 

AUC PR : 0.366381 

Precision : 0.338824 

Recall : 0.923077 

F1 : 0.495697 

Total Learning Time : 22.423642320632936 

Total Inference Time : 7.47024393081665 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.167
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8224346493852265;  // std dev = 1.701, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.13814893509951237;  // std dev = 0.449, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287292207129961;  // std dev = 0.138, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.041289626163674875;  // std dev = 0.254, 162.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08185586217840372;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7497266416647228;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15185589444834344;  // std dev = 2.730, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5625306490599817;  // std dev = 0.913, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.7347495028239324;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.815586693783985;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5892716018681952;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5618900120872182;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5618900120872182;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04812320077433663;  // std dev = 3.096, 163.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=15 */
%   | | | else return 0.027069662821800077;  // std dev = 2.412, 45.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46654847131231775;  // std dev = 2.606, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11687533033460393;  // std dev = 0.035, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.12389288184929194;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15665696677667784;  // std dev = 0.133, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3346979976396127;  // std dev = 0.512, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.41950909209086285;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31440559431435394;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6466430478183041;  // std dev = 0.189, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08722878965021857;  // std dev = 1.887, 192.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=6 */
%   | | else return -0.1082535716531965;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03757599142590666;  // std dev = 2.879, 203.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2619356605672174;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4446272889959064;  // std dev = 1.439, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11767139051547551;  // std dev = 0.078, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11006940347136257;  // std dev = 0.131, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29064882395240965;  // std dev = 0.876, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else return -0.07661409223848768;  // std dev = 1.696, 174.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013924225807764642;  // std dev = 0.627, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1612358393596442;  // std dev = 1.394, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.22005890926564226;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04755829424704306;  // std dev = 0.142, 160.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.011502262253796282;  // std dev = 1.253, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.10131699146675693;  // std dev = 1.476, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17328664783867725;  // std dev = 0.125, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27623148596007585;  // std dev = 0.588, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09072817361454898;  // std dev = 0.037, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4411195085748163;  // std dev = 0.536, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1172928820260009;  // std dev = 0.107, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16971360214182454;  // std dev = 1.237, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | else return 0.14096050433929053;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08326094837675993;  // std dev = 0.025, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08375943621241747;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.030522563572214466;  // std dev = 0.476, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.016729289080759335;  // std dev = 0.907, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2618674466200047;  // std dev = 0.696, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02894662216284758;  // std dev = 1.171, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.684', 'seconds']
Parameter learned model CLL:-0.110024 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 81], 'true,false,true': [0.0, 147, 0], 'true,false,false': [0.271, 23, 2], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.449, 18, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.138, 0, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 146, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.973, 18, 1], 'false,false,false,true': [0.105, 0, 4], 'false,false,false,false': [2.73, 28, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 57], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.143, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 6], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.096, 148, 15], 'false,false,false,false': [2.412, 37, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.606, 5, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 128, 0], 'false,true,false,false': [7.45e-09, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.133, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.512, 0, 60], 'true,false': [0.142, 0, 4], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.189, 0, 17], 'false,false,true,false': [1.887, 186, 6], 'false,false,false': [2.95e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.879, 131, 72], 'false,true': [0.105, 0, 10], 'false,false,true': [1.439, 1, 18], 'false,false,false,true': [0.078, 20, 0], 'false,false,false,false': [0.131, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.876, 0, 86], 'true,false': [1.696, 167, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.627, 13, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.394, 2, 64], 'true,false,true': [0.036, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 144, 16], 'false,false,false,true': [1.253, 32, 11], 'false,false,false,false': [1.476, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.125, 1, 64], 'false,true,true,true': [0.588, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.037, 172, 0], 'false,false,true': [0.536, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.107, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.237, 1, 74], 'true,true,false': [0.0, 0, 7], 'true,false,true': [0.025, 141, 0], 'true,false,false,true': [9.13e-09, 14, 0], 'true,false,false,false': [0.476, 11, 2], 'false,true': [0.907, 21, 10], 'false,false,true': [0.696, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.171, 15, 6]}]
{'': [0.2191009521484381, 0.2222222222222217], 'false': [0.23668639053254442, 0.2016000000000001], 'false,true': [-8.881784197001253e-17, -6.938893903907228e-18], 'true': [0.0344387755102037, 0.011492698756084205], 'true,false': [-1.0573552615477681e-16, 0.07360000000000004], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.0002878412553607401, 0.09944560877778058], 'false': [0.06462385321821254, 0.16897778964566998], 'false,false': [0.049861495844875335, 0.1948426015250486], 'false,false,false': [0.002745773677147012, 0.18181047276124532], 'false,true': [nan, 0.06462385321821254], 'false,false,true': [nan, 0.049861495844875335]}
{'': [0.015572376609496093, 0.09012673294277483], 'false': [nan, 0.09012673294277526], 'false,false': [-2.7328566760003855e-16, 0.0750223743590085], 'false,false,false': [0.058805737572672774, 0.12933188371765494], 'true': [0.014621970655307208, 0.015974889854058445], 'true,false': [0.003501340927060337, 0.005138824041273471], 'true,true': [0.014371373028288071, 0.0], 'false,false,true': [-7.401486830834377e-17, -6.344131569286608e-17]}
{'': [0.06467018386666074, 0.0003172033852451926], 'false': [1.4899893978411129e-05, 0.000549100172398561], 'false,false': [nan, 0.000549100172398561], 'false,false,false': [nan, 0.000549100172398561], 'false,true': [nan, 1.4899893978408264e-05], 'false,true,false': [9.464499783482655e-06, 2.05596856412066e-18]}
{'': [0.004840543126762284, 0.057714471219235106], 'false': [-1.708035422500241e-17, 0.054445957340053704], 'false,false': [0.05745101859148734, 8.540177112501205e-18], 'false,false,true': [0.002101280418541146, 0.018544820414385214], 'true': [0.004376902396419376, 0.005051789948763402], 'false,true': [-1.708035422500241e-17, nan]}
{'': [0.040822522588233205, 0.0767933952789575], 'false': [0.0011031737735127112, 0.07924278431367855], 'false,false': [0.10896392642913919, 0.00037068448197518], 'true': [nan, 0.04082252258823308], 'true,false': [nan, 0.040822522588233205], 'false,false,false': [0.00030172656757485316, 0.0003835508417712309]}
{'': [0.04386776178904139, 0.019638707333516508], 'true': [0.008917137454966848, 0.01652737650522648], 'false': [nan, 0.019638707333516508], 'false,false': [nan, 0.019638707333516508], 'false,false,false': [nan, 0.019638707333516508]}
{'': [0.028706830180590504, 0.033401580707470443], 'false': [nan, 0.03340158070747041], 'false,false': [0.020058211422165982, 0.06310025844990712], 'false,false,false': [0.036488876672961267, 0.12098554056213337], 'true': [0.02945487660410447, 0.0006629138736159237], 'true,false': [0.0006629138736159237, nan]}
{'': [0.015569631118867826, 0.02820564787819394], 'false': [0.01578689690736858, 0.08135188439779306], 'false,false': [0.022131505875797767, 0.0005252537565246139], 'false,true': [0.015008061673172335, 8.140862111974982e-06], 'false,true,true': [0.015008061673172335, nan], 'false,false,false': [nan, 0.0005252537565246139]}
{'': [0.020571534937736974, 0.05250588439506159], 'false': [0.026514025811523435, 0.08744031058821845], 'false,false': [0.24236781283246925, 0.0653311518873466], 'false,false,false': [nan, 0.0653311518873466], 'true': [0.018711044999253742, 0.0015527482128546433], 'true,true': [0.020386833779273163, 0.0], 'true,false': [4.458007132368311e-06, 0.009108068480617286], 'true,false,false': [5.9476233462061954e-18, 0.017447190779547934]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 16.698
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7877263998882452;  // std dev = 0.256, 71.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=66 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1290305520799752;  // std dev = 0.112, 156.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.124815601766179;  // std dev = 0.442, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7332492740443416;  // std dev = 0.147, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.73838906202352;  // std dev = 0.141, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1268579221725549;  // std dev = 1.30e-07, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7858704248253165;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.06534330841275131;  // std dev = 1.967, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | | else return 0.08229835402366713;  // std dev = 1.982, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.529379162802526;  // std dev = 1.384, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.564575193325924;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5506907517316522;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6739581608702968;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5666385697182994;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5645751933259241;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11345873458449994;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0922788644091799;  // std dev = 1.895, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.1725610201363895;  // std dev = 1.822, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.43400912098045547;  // std dev = 0.042, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.3982712936193482;  // std dev = 0.999, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.24400127380464812;  // std dev = 0.424, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.49628336830278197;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6790785686635952;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7441601210154034;  // std dev = 0.150, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10253708981433551;  // std dev = 6.50e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else return -0.10253708981433575;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.16093930632253076;  // std dev = 0.135, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.33577429413729826;  // std dev = 0.014, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.3222759619579957;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return 0.34009472526008416;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3540314593833897;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.40322418936615084;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3264770593487354;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.37626896222985184;  // std dev = 0.659, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07729239182703795;  // std dev = 1.681, 167.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=6 */
%   | | else return -0.09347841403345566;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.18633119689357128;  // std dev = 1.663, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.26961374869170635;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.26315360164846163;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.05529917770048604;  // std dev = 0.099, 150.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=14 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3087275209010449;  // std dev = 0.120, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13459003835491595;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.11897486536356484;  // std dev = 0.981, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5065177673777027;  // std dev = 0.374, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1111091871071861;  // std dev = 0.025, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2290454578001472;  // std dev = 0.022, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.15366721850019635;  // std dev = 0.967, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.06197589019802274;  // std dev = 0.135, 128.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=12 */
%   | else return 0.03144036871242924;  // std dev = 0.149, 80.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=29 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.28506641986850256;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10632542055107573;  // std dev = 0.000724, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4002659254935515;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11372060668086147;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1120123030925888;  // std dev = 0.323, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, G) )
%   | | | then return 0.1718953823234218;  // std dev = 0.983, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.2074198621728124;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2271547463616407;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.08363762933687054;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.05298141249197381;  // std dev = 0.112, 190.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=17 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.24702822023440066;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.097312634668347;  // std dev = 0.010, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.029475917967828932;  // std dev = 0.464, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.03674427956974863;  // std dev = 1.306, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14730645919115873;  // std dev = 0.944, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return -0.09249327043552434;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.20544011056368264;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.05538286529582664;  // std dev = 0.375, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.23112470041631883;  // std dev = 0.045, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07685754654104243;  // std dev = 0.004, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.22262986763606804;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4008604521551138;  // std dev = 0.348, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10206094359567423;  // std dev = 0.024, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09595198756710342;  // std dev = 1.922, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | | | else return 0.20826159121475568;  // std dev = 0.152, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.0331030907487785;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.0665379285682603;  // std dev = 0.042, 172.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.17447263407333508;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08116580211963827;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.1896152976454375;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08577243707458808;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.004739376355621876;  // std dev = 0.330, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.603', 'seconds']
Refined model CLL: -0.100157


******************************************
Best model found
******************************************
Results 

CLL : -0.097679 

AUC ROC : 0.99486 

AUC PR : 0.375827 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 16.698 

Total Inference Time : 11.149974346160889 

Total revision time: 36.71545075416565
Best scored revision CLL: -0.100157


Results 

CLL : -0.097679 

AUC ROC : 0.99486 

AUC PR : 0.375827 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 36.73019455909729 

Total Inference Time : 11.149974346160889 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.309
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6933209791426751;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.026223371442913673;  // std dev = 0.273, 189.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09978344692783747;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7589043494606603;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1042376676982829;  // std dev = 3.262, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5566454710759553;  // std dev = 1.463, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.732130256575934;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8228345367930714;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.597900544604253;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5709953390608059;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5709953390608059;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05000780882133122;  // std dev = 3.721, 236.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=21 */
%   | | | else return 0.01650006170326471;  // std dev = 2.837, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4773859296378056;  // std dev = 2.959, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11715173854425555;  // std dev = 0.006, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | | else return -0.12433745378898925;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1620316737482702;  // std dev = 0.178, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31248282545039224;  // std dev = 1.513, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4172390747132569;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31811067552578176;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6038575855712631;  // std dev = 0.997, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08248564527410387;  // std dev = 2.351, 243.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=9 */
%   | | else return -0.10433397703154441;  // std dev = 3.48e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020700573259887;  // std dev = 3.501, 296.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26244610680906266;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4976829865152615;  // std dev = 1.393, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11558701876778692;  // std dev = 0.135, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.11968434916489684;  // std dev = 0.171, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.266751361799287;  // std dev = 2.285, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07331860089546867;  // std dev = 2.083, 239.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012219155879227653;  // std dev = 0.675, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16848813301331406;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23041543729588893;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03680227843752907;  // std dev = 0.170, 175.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.001595522169826702;  // std dev = 1.524, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.07566076053154103;  // std dev = 1.702, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1623086893146808;  // std dev = 0.186, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2268269875034005;  // std dev = 1.690, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09092575531005297;  // std dev = 0.042, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46956131964408626;  // std dev = 0.583, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10546348706239109;  // std dev = 0.124, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15877838391285898;  // std dev = 2.209, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.14921140865254331;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08452257743492307;  // std dev = 0.070, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07935815039308589;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.01761958500590235;  // std dev = 0.473, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04406192900243343;  // std dev = 1.010, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21114015483536774;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.003427510042268181;  // std dev = 1.501, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.761', 'seconds']
Parameter learned model CLL:-0.11017 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 184, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 167, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.084, 0, 4], 'false,false,false,false': [3.262, 47, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.463, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.115, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.721, 215, 21], 'false,false,false,false': [2.837, 54, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.959, 7, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.006, 174, 0], 'false,true,false,false': [0.002, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.513, 2, 73], 'true,false': [0.13, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.997, 1, 23], 'false,false,true,false': [2.351, 234, 9], 'false,false,false': [3.48e-09, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.501, 205, 91], 'false,true': [0.113, 0, 13], 'false,false,true': [1.393, 1, 22], 'false,false,false,true': [0.135, 41, 0], 'false,false,false,false': [0.171, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.285, 4, 107], 'true,false': [2.083, 228, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.675, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [0.039, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 153, 22], 'false,false,false,true': [1.524, 45, 13], 'false,false,false,false': [1.702, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.186, 3, 77], 'false,true,true,true': [1.69, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 196, 0], 'false,false,true': [0.583, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 30, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.209, 4, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.07, 202, 0], 'true,false,false,true': [5.27e-09, 16, 0], 'true,false,false,false': [0.473, 10, 2], 'false,true': [1.01, 20, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.501, 26, 8]}]
{'': [0.21869822485207302, 0.2204589843750001], 'false': [0.21606648199445933, 0.22633136094674564], 'true': [0.03598567560485849, 0.009090143927278685], 'false,true': [0.07100591715976314, 1.3322676295501878e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-2.0756343503861623e-16, 0.05536332179930797]}
{'': [0.03439668796554785, 0.1012659969118071], 'false': [0.07473143607372476, 0.14624370550824559], 'false,false': [0.031217481789802243, 0.1802633567506681], 'false,false,false': [0.0017526538691163829, 0.16620918955077912], 'false,true': [nan, 0.07473143607372476], 'false,false,true': [nan, 0.031217481789802243]}
{'': [0.029496715217640555, 0.08818831904130214], 'false': [nan, 0.08818831904130213], 'false,false': [-2.0898315757650005e-16, 0.07349538862591923], 'false,false,false': [0.058673583784765615, 0.12384184173832727], 'true': [0.029744297048096592, 0.014511471743742158], 'true,true': [0.029735564203478965, 0.0], 'true,false': [0.0031523686936761885, 0.0033259229881087427], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.0658453876959017, 0.0004003156323234764], 'false': [7.531586001695092e-06, 0.0007372081147009072], 'false,false': [nan, 0.0007372081147009072], 'false,false,false': [nan, 0.0007372081147009072], 'false,true': [nan, 7.531586001695092e-06], 'false,true,false': [2.239815427561027e-07, 6.879982646244996e-08]}
{'': [0.02971661801388501, 0.061491000053525174], 'false': [-5.224578939412501e-17, 0.05848448296678523], 'false,false': [0.06296894276622006, 1.4481169886415085e-17], 'false,false,true': [0.04144967586905265, 0.02275119859214894], 'true': [0.030521588234884642, 0.0042051936869544615], 'false,true': [-5.224578939412501e-17, nan]}
{'': [0.041416380960573894, 0.07869074533575494], 'false': [0.0009827397581938769, 0.08128182517857942], 'false,false': [0.08431105844128259, 0.0005552612937672903], 'true': [nan, 0.041416380960573984], 'true,false': [nan, 0.041416380960573894], 'false,false,false': [0.0004419777795955019, 0.0006504715253546333]}
{'': [0.05236354879033005, 0.01897233515148279], 'true': [0.04705774806688474, 0.0181509453334076], 'false': [nan, 0.01897233515148279], 'false,false': [nan, 0.01897233515148279], 'false,false,false': [nan, 0.01897233515148279]}
{'': [0.0340976554454053, 0.04058718712914996], 'false': [nan, 0.04058718712915031], 'false,false': [0.029014091603233542, 0.061208091938930516], 'false,false,false': [0.040034562804131375, 0.09989804385281033], 'true': [0.034810857899488803, 0.0007549976679567527], 'true,false': [0.0007549976679567527, nan]}
{'': [0.034551509844472576, 0.03814343239094841], 'false': [0.025151735742559276, 0.08390457518059392], 'false,false': [0.02000619662057132, 0.0005155716502879752], 'false,true': [0.08405027879944799, 9.113759569273061e-06], 'false,true,true': [0.08405027879944799, nan], 'false,false,false': [nan, 0.0005155716502879752]}
{'': [0.027647880811456083, 0.04996363390211958], 'false': [0.03188916580160287, 0.06567187730696514], 'false,false': [0.0, 0.06628799502979571], 'false,false,false': [nan, 0.06628799502979571], 'true': [0.04559794515391258, 0.0012144820418032419], 'true,true': [0.04977669296236395, 1.2196091391405059e-05], 'true,false': [2.4420094677519646e-05, 0.00892161055168658], 'true,false,false': [1.734723475976807e-18, 0.01863900531237297]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.563
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.13267675297388293;  // std dev = 0.095, 218.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7252211847802987;  // std dev = 0.153, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7218698774904808;  // std dev = 1.03e-07, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12645459995517552;  // std dev = 4.21e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.014450569168388442;  // std dev = 0.288, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.026454599955175424;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12645459995517544;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7432600073969047;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09513476865606632;  // std dev = 3.149, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5397161858514792;  // std dev = 0.991, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.44803397397443273;  // std dev = 1.343, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.009604626937665839;  // std dev = 0.898, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.661849009780222;  // std dev = 0.310, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5563675304355011;  // std dev = 0.001, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1035109118650463;  // std dev = 1.203, 153.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=3 */
%   | | | else return -0.010922343639696946;  // std dev = 2.308, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.047775287357438787;  // std dev = 2.228, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.11805525153050832;  // std dev = 2.217, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.4273185155619644;  // std dev = 0.096, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.30765689691614384;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.05011201084232958;  // std dev = 1.018, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.44419071941209376;  // std dev = 0.204, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3485883597123569;  // std dev = 1.039, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6307903047027256;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.5660721778124783;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7153105858235763;  // std dev = 0.179, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11898061437588216;  // std dev = 0.027, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), tweets(E, F) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3285246283361985;  // std dev = 0.981, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.24350406173615521;  // std dev = 0.566, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.4221497330142741;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3624786130109949;  // std dev = 0.189, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33067190982257944;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.052772661838901384;  // std dev = 2.060, 185.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=15 */
%   | | | else return 0.04488885551382774;  // std dev = 2.469, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.09265642547364973;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2497022165394912;  // std dev = 0.122, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.021912041751073752;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.36403910437755665;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.048872878403093165;  // std dev = 1.759, 154.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=12 */
%   | | | else return -0.05128288358919118;  // std dev = 1.129, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.279614769159947;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.15486399271377402;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.48297858458023424;  // std dev = 1.026, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.13270234375312254;  // std dev = 0.043, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(C, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21165638766097397;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.10117069184672257;  // std dev = 1.349, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return -0.1204485594085889;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.23583248944996263;  // std dev = 0.156, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3340278832465431;  // std dev = 0.323, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.08889707372852844;  // std dev = 0.092, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2206817712763928;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.001992037294343347;  // std dev = 1.243, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.033641708527908654;  // std dev = 1.538, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, G) )
%   | | | then return 0.09103142941732495;  // std dev = 2.085, 53.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=48 */
%   | | | else return 0.19783951146653067;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.19748820108431345;  // std dev = 0.135, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2563958062732665;  // std dev = 0.125, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.036991502116748204;  // std dev = 0.140, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.327055465803097;  // std dev = 0.309, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11956621090127964;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.022097893491663762;  // std dev = 0.853, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.022873436927090325;  // std dev = 1.428, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.170934939405553;  // std dev = 0.098, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.031532395940991574;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.13307751526806563;  // std dev = 0.939, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.2414562955363995;  // std dev = 0.359, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.05002068342106847;  // std dev = 1.335, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.405859107235471;  // std dev = 0.213, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07835194932529947;  // std dev = 0.081, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3828149229700595;  // std dev = 0.082, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14346092787814232;  // std dev = 0.234, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18088900295165516;  // std dev = 0.066, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.15066885897918725;  // std dev = 0.000268, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06894547301899052;  // std dev = 0.046, 193.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1073229409880474;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.006204936270486859;  // std dev = 0.640, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.02437691262825432;  // std dev = 0.657, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.180613876841761;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.04002611299465027;  // std dev = 0.428, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0022601754236831915;  // std dev = 1.082, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.105', 'seconds']
Refined model CLL: -0.106678


******************************************
Best model found
******************************************
Results 

CLL : -0.104813 

AUC ROC : 0.994409 

AUC PR : 0.35263 

Precision : 0.341463 

Recall : 0.987179 

F1 : 0.507414 

Total Learning Time : 13.563 

Total Inference Time : 13.747435092926025 

Total revision time: 37.52726342391968
Best scored revision CLL: -0.106678


Results 

CLL : -0.104813 

AUC ROC : 0.994409 

AUC PR : 0.35263 

Precision : 0.341463 

Recall : 0.987179 

F1 : 0.507414 

Total Learning Time : 37.54200722885132 

Total Inference Time : 13.747435092926025 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.142
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7299063203120915;  // std dev = 0.130, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.012788898429811946;  // std dev = 0.287, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01046556708284037;  // std dev = 1.207, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15121648107776642;  // std dev = 2.582, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.386640451302642;  // std dev = 1.051, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.739867130161806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5527887256091081;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.074183331705085;  // std dev = 2.551, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | | | else return 0.23628251231737205;  // std dev = 1.783, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.60380938252069;  // std dev = 0.755, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1397104308132847;  // std dev = 0.080, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.15208285533776922;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20986675972587546;  // std dev = 0.144, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23342800550162618;  // std dev = 0.689, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2799613438832358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4259490457229558;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5611324878361621;  // std dev = 0.149, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09579349691166851;  // std dev = 1.145, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | else return -0.06420928327031437;  // std dev = 0.299, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03401755712175868;  // std dev = 1.519, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24698756551746043;  // std dev = 0.089, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5002677096721133;  // std dev = 0.443, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15087811401798065;  // std dev = 0.131, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.14636243545228728;  // std dev = 0.104, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.22946597634538055;  // std dev = 1.442, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.0889014987599395;  // std dev = 1.005, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03374485848458547;  // std dev = 0.985, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21398625050915498;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, E) )
%   | | then return 0.23133274973011042;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05183654939080849;  // std dev = 0.194, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.050160131331752796;  // std dev = 1.135, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.04062505564246719;  // std dev = 1.047, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19444725081918268;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25712647010898937;  // std dev = 0.838, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10326452352174031;  // std dev = 0.107, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3116760646851353;  // std dev = 0.378, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13437754410746708;  // std dev = 0.180, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15263252948128977;  // std dev = 0.873, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.1717550076430952;  // std dev = 0.224, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08660368182045036;  // std dev = 0.032, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.11302806580741592;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.015127711090449405;  // std dev = 0.686, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04585119729798208;  // std dev = 0.569, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007230144678664494;  // std dev = 0.906, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.270', 'seconds']
Parameter learned model CLL:-0.121724 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [2.58e-08, 29, 0], 'true,false,false': [0.373, 10, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 12, 0], 'false,false': [0.493, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.13, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.287, 26, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.207, 10, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.582, 25, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.051, 2, 8], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.551, 37, 12], 'false,false,false,false': [1.783, 8, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.755, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.08, 47, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.689, 1, 8], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.149, 0, 13], 'false,false,true,false': [1.145, 49, 2], 'false,false,false': [0.299, 15, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.519, 47, 12], 'false,true': [0.089, 0, 5], 'false,false,true': [0.443, 0, 14], 'false,false,false,true': [0.131, 15, 0], 'false,false,false,false': [0.104, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.442, 2, 22], 'true,false': [1.005, 54, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.985, 12, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.079, 0, 12], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.194, 25, 4], 'false,false,false,true': [1.135, 16, 9], 'false,false,false,false': [1.047, 9, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.0, 0, 8], 'false,true,true,true': [0.838, 1, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.107, 48, 0], 'false,false,true': [0.378, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.18, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.873, 1, 12], 'true,true,false': [0.224, 0, 5], 'true,false,true': [0.032, 37, 0], 'true,false,false,true': [2.63e-09, 3, 0], 'true,false,false,false': [0.686, 6, 2], 'false,true': [0.569, 8, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.906, 10, 5]}]
{'': [0.22027348394768081, 0.23725286160249692], 'false': [0.23268698060941836, 0.24305555555555536], 'false,true': [-2.5376526277146434e-16, -1.1564823173178714e-17], 'true': [-2.0898315757650005e-16, 0.046400951814396255], 'true,false': [2.2970131543968756e-17, 0.13888888888888892], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.0013061468573615487, 0.14039801035566776], 'false': [0.08249355255153155, 0.1694777514293268], 'false,false': [0.12145685979877681, 0.18020046532443026], 'false,false,false': [nan, 0.1802004653244303], 'false,false,true': [nan, 0.12145685979877681], 'false,true': [nan, 0.08249355255153155]}
{'': [0.11042099622006676, 0.1628078466925358], 'false': [nan, 0.16280784669253587], 'false,false': [0.005599732711997252, 0.1583435728051205], 'false,false,false': [0.1328464106911834, 0.2271466390387645], 'true': [0.11042099622006676, nan], 'true,true': [0.11042099622006676, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.01839988437127148, 0.0011279435634384105], 'false': [0.00013588009426107606, 0.0018917790797391926], 'false,false': [nan, 0.0018917790797391926], 'false,false,false': [nan, 0.0018917790797391926], 'false,true': [nan, 0.00013588009426107606], 'false,true,false': [0.0001356164918402828, -2.7755575615628915e-18]}
{'': [0.05276591496570285, 0.0917835423329464], 'false': [0.0034099854541508766, 0.09220889672671038], 'false,false': [0.09068313457633938, 0.08953688266114801], 'false,false,true': [0.0017041545977342172, 0.02570510193710247], 'true': [0.05276591496570285, nan], 'false,true': [0.0, 0.0]}
{'': [0.039105203615614134, 0.09320920323351504], 'false': [0.0015780276350426225, 0.10150005648986087], 'false,false': [0.014000661437014252, 0.001087829064953399], 'true': [nan, 0.03910520361561417], 'true,false': [nan, 0.039105203615614134], 'false,false,false': [0.0011499684500006638, 0.0009913292978262767]}
{'': [0.0599149131908437, 0.051064441181010646], 'true': [0.08664480811080148, 0.018051889177952158], 'false': [nan, 0.05106444118101067], 'false,false': [nan, 0.051064441181010646], 'false,false,false': [nan, 0.051064441181010646]}
{'': [0.0005045815639674365, 0.05352453476726225], 'false': [nan, 0.05352453476726228], 'false,false': [0.037703767386922056, 0.06114476547639475], 'false,false,false': [0.05150326940610572, 0.07830344218810106], 'true': [0.0005234837941527071, 0.0], 'true,false': [0.0, nan]}
{'': [0.0, 0.03854958784654896], 'false': [0.03267504123360475, 0.04688443417166878], 'false,false': [0.011926345775153835, 0.0012017248350041098], 'false,true': [0.05852150765182196, 0.00023709097102149237], 'false,true,true': [0.05852150765182196, nan], 'false,false,false': [nan, 0.0012017248350041098]}
{'': [0.03102535347442437, 0.038509080303150034], 'false': [0.021589421203336394, 0.054682946550251646], 'false,false': [nan, 0.05468294655025164], 'false,false,false': [nan, 0.054682946550251646], 'true': [0.045241434488784385, 0.011361700287072429], 'true,true': [0.05868528595236398, 0.010023326282164503], 'true,false': [2.7458132391441377e-05, 0.04604840417760814], 'true,false,false': [2.3129646346357427e-18, 0.058837309429948796]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.018
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7444722173359146;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.740305749815088;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1391209674537791;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10874113578563507;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.7205877377042227;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5491851342604873;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5787513569232461;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11456939922396876;  // std dev = 0.050, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19504236739830966;  // std dev = 1.939, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | | else return 0.3998208091037549;  // std dev = 0.643, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.4346727468596005;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.08037265561262656;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.4438675385833221;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return 0.506651452493183;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7332419547355091;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.103177672246428;  // std dev = 0.007, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( tweets(A, H) )
%   | | then return -0.13328120801325627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.25554717420366857;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.3244733680711873;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3360122040200513;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then return 0.39360614047464504;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.43048801525744773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.40908607324240304;  // std dev = 0.395, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09351973846868963;  // std dev = 0.928, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03700281252697341;  // std dev = 0.493, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.07311387088803048;  // std dev = 0.657, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.24905218018291952;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2266912216739899;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08457370007365661;  // std dev = 0.000448, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.03924431643329972;  // std dev = 0.176, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.30953399739231174;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2755896751696584;  // std dev = 0.858, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4445648300033859;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14239281274252066;  // std dev = 0.170, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.15688207923875988;  // std dev = 0.199, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.20542507534133714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12840717829797807;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2648187985437914;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09801425097797904;  // std dev = 0.088, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -4.339794173628554E-5;  // std dev = 0.144, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3182637808673743;  // std dev = 0.312, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12308680416183918;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.005980504950967395;  // std dev = 0.298, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.112160073539093;  // std dev = 0.570, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.04627361319239699;  // std dev = 0.944, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07876677389038962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1977942330825716;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.21675104584017546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.24962926052214945;  // std dev = 0.086, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08565471803610947;  // std dev = 0.022, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.04100739541705163;  // std dev = 0.272, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.05395547637445266;  // std dev = 0.327, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.092265930999279;  // std dev = 0.578, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20592106745878047;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.003927196565297164;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.20008409424840798;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.06948815418743588;  // std dev = 0.029, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.07624967397734371;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.1503466318511082;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3225718347877711;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.07942475704851647;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.15463288415364868;  // std dev = 0.090, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.17229822679728132;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.022048772497154794;  // std dev = 0.921, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0640039785340085;  // std dev = 0.003, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.03846967717764838;  // std dev = 0.097, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.14088007869769528;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07380807213725867;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24304609986281145;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1234508041606503;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.05323171472652814;  // std dev = 0.484, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.481', 'seconds']
Refined model CLL: -0.101362


******************************************
Best model found
******************************************
Results 

CLL : -0.095958 

AUC ROC : 0.994077 

AUC PR : 0.384505 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 5.018 

Total Inference Time : 4.77651309967041 

Total revision time: 13.539525899887085
Best scored revision CLL: -0.101362


Results 

CLL : -0.095958 

AUC ROC : 0.994077 

AUC PR : 0.384505 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 13.577468786239624 

Total Inference Time : 4.77651309967041 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.482
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.1340110040650296;  // std dev = 0.447, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6975312461582573;  // std dev = 1.001, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.056227365920286876;  // std dev = 0.236, 71.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04790227927019307;  // std dev = 1.252, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8410403172382866;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10330708900849965;  // std dev = 3.057, 56.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5242005902004593;  // std dev = 1.080, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.11023358038138714;  // std dev = 0.827, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6600605372656714;  // std dev = 0.140, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5607779245019618;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.029284496574687197;  // std dev = 2.880, 114.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=13 */
%   | | | else return 0.020775250801523627;  // std dev = 2.483, 45.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5396073290525868;  // std dev = 1.510, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11881137578417827;  // std dev = 0.044, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.12416282577554684;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14794821558237153;  // std dev = 0.110, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2931596924025254;  // std dev = 1.056, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return -0.3855716409327091;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2959007679490466;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.48735616043585306;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6343173685145699;  // std dev = 0.237, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08892589602966951;  // std dev = 1.492, 103.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=3 */
%   | | else return 0.0068017305542030304;  // std dev = 0.308, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019445388120229497;  // std dev = 2.212, 95.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25121914732728057;  // std dev = 0.125, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5663937623497959;  // std dev = 0.539, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11913727190156413;  // std dev = 0.101, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.1274079438398343;  // std dev = 0.104, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2764081291996532;  // std dev = 1.042, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.08150972130525737;  // std dev = 1.305, 102.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02787608144009647;  // std dev = 1.293, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1942995706853881;  // std dev = 0.051, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E) )
%   | | then return 0.25624654023832827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.062403191288813935;  // std dev = 0.140, 77.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0069257677076679566;  // std dev = 1.358, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
%   | | | else return -0.006420709733782613;  // std dev = 1.608, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15157236389724016;  // std dev = 0.183, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.17496055068938857;  // std dev = 1.434, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08998777219859895;  // std dev = 0.062, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3838141361405982;  // std dev = 0.559, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10771287685786202;  // std dev = 0.108, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18298608770299282;  // std dev = 0.449, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.09956067144012531;  // std dev = 0.757, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.08005575544521087;  // std dev = 0.010, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09746674026766297;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.006657465123001904;  // std dev = 0.766, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.010455089028072172;  // std dev = 0.739, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2486163424252784;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.041724489763734586;  // std dev = 1.188, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.002', 'seconds']
Parameter learned model CLL:-0.109052 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false': [0.294, 19, 2], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.447, 21, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.001, 1, 38], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.236, 65, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.252, 19, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [3.057, 41, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.08, 2, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.827, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.14, 0, 2], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [2.88, 101, 13], 'false,false,false,false': [2.483, 37, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.51, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 66, 0], 'false,true,false,false': [0.014, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.056, 1, 31], 'true,false': [0.0, 1, 0], 'false,true,true': [0.019, 0, 9], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.237, 0, 14], 'false,false,true,false': [1.492, 100, 3], 'false,false,false': [0.308, 17, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.212, 61, 34], 'false,true': [0.125, 0, 10], 'false,false,true': [0.539, 0, 18], 'false,false,false,true': [0.101, 38, 0], 'false,false,false,false': [0.104, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.042, 1, 47], 'true,false': [1.305, 99, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.293, 21, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.051, 0, 37], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 71, 6], 'false,false,false,true': [1.358, 40, 10], 'false,false,false,false': [1.608, 28, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.183, 1, 31], 'false,true,true,true': [1.434, 2, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.062, 88, 0], 'false,false,true': [0.559, 0, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.449, 0, 34], 'true,true,false': [0.757, 1, 10], 'true,false,true': [0.01, 57, 0], 'true,false,false,true': [0.004, 7, 0], 'true,false,false,false': [0.766, 9, 2], 'false,true': [0.739, 18, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.188, 16, 7]}]
{'': [0.22543996435731875, 0.1914672216441202], 'true': [1.2918958832001822e-15, 0.02172839506172842], 'false': [0.1836547291092747, 0.19976218787158156], 'false,true': [-2.220446049250313e-16, 1.3322676295501878e-17], 'true,false': [6.75787928032704e-17, 0.08616780045351478], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.025693147917853147, 0.11032548808853664], 'false': [0.05587614502871716, 0.15204672874124214], 'false,false': [0.0746813678319037, 0.17329509169250015], 'false,false,false': [0.0, 0.16684139574279774], 'false,false,true': [nan, 0.0746813678319037], 'false,true': [nan, 0.05587614502871716]}
{'': [0.06393469597206902, 0.10602578515128293], 'false': [nan, 0.10602578515128314], 'false,false': [0.00354853339098784, 0.09146974964742063], 'false,false,false': [0.07277949731104331, 0.1370216497358025], 'true': [0.03645722261216694, 0.3422860954071679], 'true,false': [nan, 0.3422860954071679], 'true,true': [0.03645722261216694, nan], 'false,false,true': [0.009857037197188667, -5.551115123125783e-17]}
{'': [0.03620101201323097, 0.00030249976364477173], 'false': [3.12232220500371e-05, 0.0004007297040530341], 'false,false': [nan, 0.0004007297040530341], 'false,false,false': [nan, 0.0004007297040530341], 'false,true': [nan, 3.1223222050031176e-05], 'false,true,false': [2.8925768174079412e-05, 2.2869762171362495e-05]}
{'': [0.04731047792858447, 0.07894118820582888], 'false': [0.003335781318528408, 0.07767142805210225], 'false,false': [0.07460746907220349, 0.09467051960007061], 'false,false,true': [0.003999563961699616, 0.0216137927425372], 'true': [0.03482904482291259, 0.0], 'false,true': [4.090695602607417e-05, 0.0]}
{'': [0.051508724183088876, 0.07675595809350298], 'false': [0.0015603290283207616, 0.07952372865592784], 'false,false': [0.016126055775673425, 0.000308573702693157], 'true': [nan, 0.05150872418308877], 'true,false': [nan, 0.051508724183088876], 'false,false,false': [0.0002658222202999336, 0.0003202526525864012]}
{'': [0.046459345791675655, 0.050684958791648436], 'false': [nan, 0.05068495879164843], 'false,false': [nan, 0.050684958791648436], 'false,false,false': [nan, 0.050684958791648436], 'true': [0.022620000777286032, 0.016684201025347095]}
{'': [0.0001676084925360883, 0.037143901528574545], 'false': [nan, 0.03714390152857455], 'false,false': [0.019465556400036374, 0.05150718091037772], 'false,false,false': [0.03688754601267647, 0.07181208107501372], 'true': [7.115352977296522e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.03359527159876783, 0.039035310978211515], 'false': [0.02932915571343988, 0.05447801430785871], 'false,false': [0.02086117751764324, 0.00029678788970553637], 'false,true': [0.11422264915592528, 4.4227995891015076e-05], 'false,true,true': [0.11422264915592528, nan], 'false,false,false': [nan, 0.00029678788970553637]}
{'': [0.025034105274749675, 0.04037059028155387], 'false': [0.021032404297433634, 0.060492865845069944], 'false,false': [0.0, 0.06133948050129092], 'false,false,false': [nan, 0.06133948050129092], 'true': [0.01851112297506875, 0.008841068071135055], 'true,true': [0.0059424127693018525, 0.05210134799610868], 'true,false': [1.6067777601973765e-06, 0.03520908301347417], 'true,false,false': [1.987757071767301e-06, 0.05339732311899147]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.708
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8258908705833826;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.11987304292246569;  // std dev = 0.147, 91.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6914550177275526;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.7568102804752587;  // std dev = 0.122, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7367736791461894;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12787572435079933;  // std dev = 3.16e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.06975083510442466;  // std dev = 0.217, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.038790942315867334;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.08824511804645296;  // std dev = 0.852, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10269399355908329;  // std dev = 2.915, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5701967943134091;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.19960835659625292;  // std dev = 0.992, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.6693920026714544;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.576895216116394;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6884276181101147;  // std dev = 0.276, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11691941077793051;  // std dev = 0.044, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.02005966020943005;  // std dev = 1.916, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
%   | | | else return 0.081921383031062;  // std dev = 2.257, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4301089502759239;  // std dev = 0.012, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2154471155672837;  // std dev = 0.522, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.45102940706742484;  // std dev = 0.201, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5976423515928405;  // std dev = 0.253, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7088640856560805;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6557445292970859;  // std dev = 0.162, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.775891286419799;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.10568696464642871;  // std dev = 0.005, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return -0.14864556147298227;  // std dev = 0.069, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.27791031883955225;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.33521021075447976;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.38102577525547376;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.22698529936934034;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.44640832012905396;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.05721078402626138;  // std dev = 0.141, 80.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08868729835027571;  // std dev = 1.625, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.014666421672119637;  // std dev = 1.609, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2762083098998641;  // std dev = 0.014, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.004684460896058784;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2546844608960588;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.07483720206644892;  // std dev = 0.103, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   | | else return -0.055731210207274506;  // std dev = 0.147, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.284794951039757;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.45918101744912865;  // std dev = 0.948, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5710153161354333;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12025760967516395;  // std dev = 0.019, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.23040344243821492;  // std dev = 0.015, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return -0.1027649987718053;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21117765411439157;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.36761822746017087;  // std dev = 0.104, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08510101294815198;  // std dev = 0.036, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.39963827695846976;  // std dev = 0.224, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11870291183990729;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05424439990021227;  // std dev = 0.624, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.002212895437067419;  // std dev = 0.620, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18999073483107048;  // std dev = 0.016, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return 0.23562804537888893;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.23285013570600302;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3863160605665776;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07829913949047869;  // std dev = 0.028, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.35016053312168804;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11494661697383367;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.025844080391933654;  // std dev = 0.872, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return -0.05009505702872458;  // std dev = 0.648, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.16360422753673726;  // std dev = 0.016, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.1761476818048352;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.01645541306063128;  // std dev = 0.573, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.07317603069886901;  // std dev = 0.955, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.2599189422927547;  // std dev = 0.164, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07235541694620713;  // std dev = 0.021, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.285377967782437;  // std dev = 0.087, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4035572688580828;  // std dev = 0.202, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10928539936140984;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11365121995416347;  // std dev = 0.179, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.1669597416818352;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.06006682375728626;  // std dev = 0.050, 79.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.20916687081472674;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08768390133246874;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.12383731154158228;  // std dev = 0.284, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13213535264798548;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.00689528780562525;  // std dev = 0.720, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return -0.060259050739457545;  // std dev = 0.557, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.310', 'seconds']
Refined model CLL: -0.09986


******************************************
Best model found
******************************************
Results 

CLL : -0.098195 

AUC ROC : 0.99302 

AUC PR : 0.346934 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 9.708 

Total Inference Time : 7.739002466201782 

Total revision time: 23.27206868171692
Best scored revision CLL: -0.09986


Results 

CLL : -0.098195 

AUC ROC : 0.99302 

AUC PR : 0.346934 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 23.31001156806946 

Total Inference Time : 7.739002466201782 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.816
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8258908705833835;  // std dev = 1.391, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.05851773156715445;  // std dev = 0.276, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.20814893509951235;  // std dev = 0.477, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287215025018396;  // std dev = 0.138, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04030639704072818;  // std dev = 0.255, 100.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04259160331638655;  // std dev = 1.574, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6243603965063917;  // std dev = 0.867, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.13518761316257286;  // std dev = 3.781, 78.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5490041002858416;  // std dev = 1.041, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.40186777356112696;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4983867866439811;  // std dev = 0.853, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6097310092443414;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5610409150157252;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026817847558718546;  // std dev = 3.547, 166.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=20 */
%   | | | else return 0.042467469813770864;  // std dev = 3.109, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5460369818365112;  // std dev = 1.898, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12177166140519032;  // std dev = 0.067, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | | else return -0.12740307697413933;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1737567906899504;  // std dev = 0.188, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31290951175741827;  // std dev = 1.004, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.23285771844763054;  // std dev = 0.770, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.4935074244464056;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5823798531368171;  // std dev = 1.066, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.09546784935583025;  // std dev = 1.627, 149.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=4 */
%   | | else return -0.038389712403461236;  // std dev = 0.255, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005860090593486002;  // std dev = 2.589, 155.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=47 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18785530026926975;  // std dev = 0.980, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4253314325383444;  // std dev = 2.056, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12577229963995698;  // std dev = 0.164, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.12188615201474771;  // std dev = 0.142, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2823059380052497;  // std dev = 1.240, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else return -0.08238019218852585;  // std dev = 1.751, 157.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03618426599394622;  // std dev = 1.657, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17383786487431888;  // std dev = 0.996, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.2709831063480469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04896138860338528;  // std dev = 0.136, 112.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.016009830079855437;  // std dev = 1.753, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return -0.00795180521120226;  // std dev = 2.155, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1868924853018591;  // std dev = 0.074, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2983252902358093;  // std dev = 0.727, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09041024755781614;  // std dev = 0.071, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4059271601444608;  // std dev = 0.665, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11007046782071933;  // std dev = 0.177, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14309480284457307;  // std dev = 1.416, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | else return 0.09454033016369628;  // std dev = 0.935, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08081158376515972;  // std dev = 0.018, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09550563190082643;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.00217781312615496;  // std dev = 0.957, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.024150731428501694;  // std dev = 1.004, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2181601219574575;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036232974782814634;  // std dev = 1.559, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.993', 'seconds']
Parameter learned model CLL:-0.11145 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.391, 2, 60], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false': [0.276, 33, 3], 'false,true,true,true': [0.0, 0, 14], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.477, 26, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.138, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 90, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.574, 28, 3], 'false,false,false,true': [0.867, 1, 6], 'false,false,false,false': [3.781, 54, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.041, 1, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.799, 1, 2], 'true,false,false': [0.853, 1, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.169, 0, 4], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.547, 146, 20], 'false,false,false,false': [3.109, 48, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.898, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.067, 106, 0], 'false,true,false,false': [0.014, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.004, 1, 47], 'true,false': [0.0, 0, 0], 'false,true,true': [0.77, 1, 12], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.066, 1, 23], 'false,false,true,false': [1.627, 145, 4], 'false,false,false': [0.255, 44, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.589, 108, 47], 'false,true': [0.98, 1, 13], 'false,false,true': [2.056, 3, 33], 'false,false,false,true': [0.164, 53, 0], 'false,false,false,false': [0.142, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.24, 2, 72], 'true,false': [1.751, 151, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.657, 31, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 49], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.136, 102, 10], 'false,false,false,true': [1.753, 54, 19], 'false,false,false,false': [2.155, 45, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.074, 0, 47], 'false,true,true,true': [0.727, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.071, 128, 0], 'false,false,true': [0.665, 0, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 70, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.416, 2, 48], 'true,true,false': [0.935, 1, 12], 'true,false,true': [0.018, 97, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.957, 16, 3], 'false,true': [1.004, 27, 16], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.559, 27, 12]}]
{'': [0.21694214876033083, 0.23200475907198237], 'false': [0.23582766439909247, 0.2274999999999995], 'false,true': [-2.220446049250313e-16, 1.708035422500241e-17], 'true': [0.031217481789801747, 0.021572231833909942], 'true,false': [7.993605777301127e-17, 0.07638888888888874], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.0003797074336127082, 0.12962740997524352], 'false': [0.06523668147250523, 0.17365183240618226], 'false,false': [0.07990296734369765, 0.19513475349528453], 'false,false,false': [0.1073000762466504, 0.18331111645612932], 'false,false,true': [nan, 0.07990296734369765], 'false,true': [nan, 0.06523668147250523]}
{'': [0.05037934477224713, 0.11122340056301662], 'false': [nan, 0.11122340056301652], 'false,false': [0.002693368360889523, 0.09895087443283047], 'false,false,false': [0.07580755152043972, 0.15842059961481886], 'true': [0.027095704055790072, 0.13844841553833676], 'true,false': [0.2126777346105541, 0.10384107425572571], 'true,true': [0.027095704055790072, nan], 'false,false,true': [0.007112175827974632, -9.868649107779169e-17]}
{'': [0.038316747414552016, 0.0007586829985359641], 'false': [4.1712769329583406e-05, 0.0007839186742469639], 'false,false': [nan, 0.0007839186742469639], 'false,false,false': [nan, 0.0007839186742469639], 'false,true': [nan, 4.171276932958522e-05], 'false,true,false': [4.191231269021264e-05, 1.2837014410758962e-05]}
{'': [0.02101219261291465, 0.07651981505033918], 'false': [0.04682182388494788, 0.07435427194005968], 'false,false': [0.07678094843586554, 0.06489830082619044], 'false,false,true': [0.04737496020633617, 0.01777493902154968], 'false,true': [0.04557076912838218, 0.0], 'true': [0.02101219261291465, nan]}
{'': [0.04323006227735734, 0.09315147725372297], 'false': [0.06856611464309244, 0.09331681448891835], 'false,false': [0.1174012335918732, 0.0005037827455599033], 'true': [nan, 0.04323006227735729], 'true,false': [nan, 0.04323006227735734], 'false,false,false': [0.0005054474772921079, 0.0004931157369917853]}
{'': [0.04888540139136097, 0.05968560231186509], 'false': [nan, 0.059685602311865114], 'false,false': [nan, 0.05968560231186509], 'false,false,false': [nan, 0.05968560231186509], 'true': [0.020776608879834308, 0.019529360870275465]}
{'': [0.019648906140585138, 0.04092989315398685], 'false': [nan, 0.040929893153986895], 'false,false': [0.018486794336354185, 0.058621055954353414], 'false,false,false': [0.04209976729283591, 0.07874512254007354], 'true': [0.019856841166514712, 0.0], 'true,false': [0.0, nan]}
{'': [0.005470376110479929, 0.035978620950168544], 'false': [0.022473768313404148, 0.05566459670282401], 'false,false': [0.018442694165529887, 0.00044676154382284895], 'false,true': [0.024047562142555292, 3.969247527626889e-05], 'false,true,true': [0.024047562142555292, nan], 'false,false,false': [nan, 0.00044676154382284895]}
{'': [0.02972596891978163, 0.04179973886735992], 'false': [0.023463570011425437, 0.06080553415221677], 'false,false': [0.0, 0.06230925511776501], 'false,false,false': [nan, 0.062309255117765014], 'true': [0.04611759150689435, 0.007986248375741965], 'true,true': [0.04012078610108103, 0.06731116671697383], 'true,false': [3.190640475790954e-06, 0.03159625196246254], 'true,false,false': [0.0, 0.04818013496651314]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 19.823
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8258908705833835;  // std dev = 0.177, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return -0.12026833108753815;  // std dev = 0.145, 139.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7296872783160812;  // std dev = 0.144, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.6426044430149085;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.39260444301490866;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6669762058058604;  // std dev = 1.001, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.1278316469060474;  // std dev = 6.14e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7273068307990077;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.1254446385283913;  // std dev = 2.58e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.8096306707545945;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19267896791526495;  // std dev = 1.655, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.5250887698183323;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.6041525773881474;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.42229683828253367;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.617644131282761;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.46080305553261763;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5985946128259427;  // std dev = 0.190, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11424450876207051;  // std dev = 5.37e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.04457285032551177;  // std dev = 1.926, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0.11942083123952647;  // std dev = 2.456, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.4319269298432938;  // std dev = 0.096, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.35184774055061757;  // std dev = 0.969, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.5812780154279507;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B), follows(I, H) )
%   | | | then return 0.25817128614500123;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5402799891919243;  // std dev = 0.162, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6144560998650153;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7420548599199283;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(K, A) )
%   | then return -0.10318329892173675;  // std dev = 5.74e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return -0.15286628654726558;  // std dev = 0.057, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32950507362041576;  // std dev = 0.005, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.10684977425841927;  // std dev = 0.904, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3983707043094321;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.026875411356722306;  // std dev = 0.892, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.30454740744166675;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26164558690303796;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5081635075722057;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then return -0.06852437157020266;  // std dev = 0.124, 134.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=9 */
%   | | else return 0.02431320135191087;  // std dev = 0.269, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26746592420615284;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05140904372844589;  // std dev = 0.119, 79.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=7 */
%   | | else return -0.05965936800920345;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.28212160302694067;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.30367160040272806;  // std dev = 2.36e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3822637696131598;  // std dev = 0.239, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5143532121544657;  // std dev = 0.276, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10311714164098693;  // std dev = 0.054, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.13687950444325386;  // std dev = 0.369, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( follows(A, E), follows(C, E) )
%   | | | then return 0.21255967017829572;  // std dev = 2.36e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12077366315503753;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21255967017829577;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22812080098506993;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.26577047798549275;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08259345302300602;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.05374990700594426;  // std dev = 0.109, 133.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=9 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.020467211159763323;  // std dev = 1.370, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.02580056169107577;  // std dev = 1.590, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18726198242726066;  // std dev = 0.019, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, E), follows(A, D) )
%   | | | then return -0.0934781758210862;  // std dev = 0.662, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.06741393995350846;  // std dev = 0.275, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3326969883549277;  // std dev = 0.162, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07070459975676785;  // std dev = 0.822, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23873658367566866;  // std dev = 1.103, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.10440606321408251;  // std dev = 0.209, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.20985974667169466;  // std dev = 0.717, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.007759985036388902;  // std dev = 1.345, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return 0.16159931031219785;  // std dev = 0.019, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.04512027226022566;  // std dev = 0.942, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.01439946441593413;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15226720225073254;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -5.536116234430954E-4;  // std dev = 0.675, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.11277062602787857;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A) )
%   | then return -0.02690251563422602;  // std dev = 0.112, 142.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=22 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.24188553114732794;  // std dev = 0.260, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return -0.11407672551269252;  // std dev = 0.041, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12893446474637205;  // std dev = 0.135, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.25673138766947634;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06205225913126856;  // std dev = 0.064, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.15038390589716277;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.015436575394520969;  // std dev = 1.107, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.034821920372645025;  // std dev = 0.573, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2291620659792586;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.013827111449900207;  // std dev = 0.820, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.04926476936984672;  // std dev = 0.919, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.978', 'seconds']
Refined model CLL: -0.104215


******************************************
Best model found
******************************************
Results 

CLL : -0.11105 

AUC ROC : 0.992816 

AUC PR : 0.343817 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 19.823 

Total Inference Time : 8.625174760818481 

Total revision time: 37.225454629898074
Best scored revision CLL: -0.104215


Results 

CLL : -0.11105 

AUC ROC : 0.992816 

AUC PR : 0.343817 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 37.26339751625061 

Total Inference Time : 8.625174760818481 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.377
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8465210281227679;  // std dev = 0.994, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.07935106490048774;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7405018762759829;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.12799020494078223;  // std dev = 0.444, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6579422136323622;  // std dev = 2.171, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0463305580486124;  // std dev = 0.249, 148.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05091263739818461;  // std dev = 1.580, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7709514731782792;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11372549533741266;  // std dev = 4.290, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5846132257902227;  // std dev = 0.304, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7233148421519006;  // std dev = 0.212, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.39592695212299617;  // std dev = 1.225, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6131431407640427;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5733510794438983;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.028384346695520514;  // std dev = 4.022, 217.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=25 */
%   | | | else return 0.02705939317321592;  // std dev = 3.524, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5291322715364819;  // std dev = 2.395, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11874129917733119;  // std dev = 0.028, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return -0.12466990820586524;  // std dev = 0.014, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1556083698723939;  // std dev = 0.185, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30212376728019574;  // std dev = 1.418, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30655940008912763;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5197730424193268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6527713962647964;  // std dev = 0.288, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09990528824094527;  // std dev = 1.678, 215.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=4 */
%   | | else return 0.021125320034361343;  // std dev = 0.302, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02667209919399345;  // std dev = 2.832, 196.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=67 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2525679057439258;  // std dev = 0.145, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5368454852235514;  // std dev = 0.889, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12086691775882694;  // std dev = 0.132, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.12224571378459423;  // std dev = 0.122, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24586260675645155;  // std dev = 2.330, 101.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=96 */
%   | else return -0.08579976394594903;  // std dev = 1.588, 222.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02646036360989936;  // std dev = 1.907, 70.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1972268883616708;  // std dev = 0.074, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( follows(A, E) )
%   | | then return 0.2810882130908313;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05402204944425646;  // std dev = 0.143, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0018853306740793066;  // std dev = 1.872, 95.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=22 */
%   | | | else return 0.03837723098180735;  // std dev = 2.096, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12723349411099785;  // std dev = 0.241, 69.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24205315949272796;  // std dev = 1.358, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0914298120735088;  // std dev = 0.102, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.375493476747583;  // std dev = 1.166, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11235120031316692;  // std dev = 0.212, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16214045436276053;  // std dev = 1.481, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | else return 0.15441625642939724;  // std dev = 0.275, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08067214842970821;  // std dev = 0.014, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09704369136619999;  // std dev = 0.013, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.0700312533343736;  // std dev = 0.856, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.006625695167274334;  // std dev = 1.675, 57.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11483578383471867;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013460496114445384;  // std dev = 1.800, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.992', 'seconds']
Parameter learned model CLL:-0.108417 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 85], 'true,false,true': [0.0, 137, 0], 'true,false,false': [0.242, 45, 3], 'false,true,true,true': [1.328, 2, 15], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.8e-08, 37, 0], 'false,false': [0.444, 46, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.171, 5, 71], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.249, 134, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.58, 32, 3], 'false,false,false,true': [0.119, 0, 7], 'false,false,false,false': [4.29, 77, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.304, 0, 56], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.212, 0, 2], 'true,false,false': [1.225, 2, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 5], 'false,false,true,false': [0.0, 0, 13], 'false,false,false,true': [4.022, 192, 25], 'false,false,false,false': [3.524, 70, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.395, 4, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 126, 0], 'false,true,false,false': [0.014, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 75, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.418, 2, 65], 'true,false': [0.0, 0, 0], 'false,true,true': [0.015, 0, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.288, 0, 28], 'false,false,true,false': [1.678, 211, 4], 'false,false,false': [0.302, 40, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.832, 129, 67], 'false,true': [0.145, 0, 18], 'false,false,true': [0.889, 0, 39], 'false,false,false,true': [0.132, 57, 0], 'false,false,false,false': [0.122, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.33, 5, 96], 'true,false': [1.588, 216, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.907, 48, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 70], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 143, 14], 'false,false,false,true': [1.872, 73, 22], 'false,false,false,false': [2.096, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.241, 4, 65], 'false,true,true,true': [1.358, 1, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 177, 0], 'false,false,true': [1.166, 1, 29], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.212, 85, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.481, 2, 69], 'true,true,false': [0.275, 0, 16], 'true,false,true': [0.014, 131, 0], 'true,false,false,true': [0.013, 24, 0], 'true,false,false,false': [0.856, 7, 3], 'false,true': [1.675, 38, 19], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.8, 39, 15]}]
{'': [0.2192780599392719, 0.209002117341713], 'true': [0.011492698756084153, 0.01595325054784503], 'false': [0.22027348394768081, 0.19702695893172031], 'false,true': [0.0861678004535146, 3.900783600034334e-17], 'false,true,true': [0.10380622837370206, 0.0], 'true,false': [-6.807206866314829e-17, 0.058593749999999854]}
{'': [0.06198923936519401, 0.12073262003002552], 'false': [0.06180310751373268, 0.16807874266208733], 'false,false': [0.07134348032807455, 0.18806856162491556], 'false,false,false': [0.0020102771797301244, 0.17359771352189848], 'false,false,true': [nan, 0.07134348032807455], 'false,true': [nan, 0.06180310751373268]}
{'': [0.029366545441970048, 0.10864696024065515], 'false': [nan, 0.10864696024065552], 'false,false': [0.0020770014235956444, 0.09498879771547476], 'false,false,false': [0.07453108580814398, 0.14440732073716303], 'true': [0.0016488672242377536, 0.15653104616685729], 'true,false': [0.02248913012554199, 0.1668303512500142], 'false,false,true': [0.006333632576424409, 0.0], 'true,true': [0.0016488672242377536, nan]}
{'': [0.044802369223838234, 0.0004372431820198057], 'false': [1.1620590152559078e-05, 0.00045518206520437884], 'false,false': [nan, 0.00045518206520437884], 'false,false,false': [nan, 0.00045518206520437884], 'false,true': [nan, 1.1620590152559078e-05], 'false,true,false': [6.171801836554086e-06, 6.722384122105007e-06]}
{'': [0.03002663414809601, 0.07510031126472566], 'false': [0.0023973093894042886, 0.07341774374318737], 'false,false': [0.0696781577924909, 0.09098383326122182], 'false,false,true': [0.0029615282522043834, 0.0130885579297828], 'true': [0.03002663414809601, nan], 'false,true': [1.2768851241567034e-05, 0.0]}
{'': [0.0409263243597549, 0.08590460056835947], 'false': [0.0011760527474147242, 0.09254970942304606], 'false,false': [0.020262143206894852, 0.00031631142345702704], 'true': [nan, 0.04092632435975486], 'true,false': [nan, 0.0409263243597549], 'false,false,false': [0.0003042888008424436, 0.0003304777113825387]}
{'': [0.048259447035145696, 0.051925586123491914], 'false': [nan, 0.05192558612349193], 'false,false': [nan, 0.051925586123491914], 'false,false,false': [nan, 0.051925586123491914], 'true': [0.05375733046997823, 0.01136189536515751]}
{'': [0.00017578074091517212, 0.03670047346906519], 'false': [nan, 0.0367004734690653], 'false,false': [0.020313946568658654, 0.050614676147998715], 'false,false,false': [0.03686859713253129, 0.07087143577959593], 'true': [7.923947484512591e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.05785544215876067, 0.03624118186385135], 'false': [0.023014163072772206, 0.058098895198131405], 'false,false': [0.04530372302109035, 0.0005298568577424475], 'false,true': [0.05944784120099882, 5.84231022120538e-05], 'false,true,true': [0.05944784120099882, nan], 'false,false,false': [nan, 0.0005298568577424475]}
{'': [0.025257167517499023, 0.05932801784063818], 'false': [0.049219108404476415, 0.06934803275900076], 'false,false': [0.2222222222222222, 0.05998870984122447], 'false,false,false': [nan, 0.05998870984122441], 'true': [0.026090183428613405, 0.005810563172063733], 'true,true': [0.030890966346923333, 0.004738018543628354], 'true,false': [1.5702574758221897e-06, 0.02733977760142833], 'true,false,false': [6.54101432119696e-06, 0.07323551918928575]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 13.953
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8176083945589723;  // std dev = 0.197, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.12399392204334521;  // std dev = 0.132, 168.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8081489350995122;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.14386322081379804;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7326303511944792;  // std dev = 0.151, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.029054095593374147;  // std dev = 2.900, 113.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=13 */
%   | | | else return -0.12741685370936384;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09256027498719646;  // std dev = 0.171, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.09480536851285838;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.09321687934903515;  // std dev = 0.838, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7266019658060052;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11404569208803661;  // std dev = 4.037, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.537775741162008;  // std dev = 0.194, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.5827859857144151;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A) )
%   | | then return 0.37739152473103754;  // std dev = 0.846, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3409660331179756;  // std dev = 0.414, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5757957149284867;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.669352507521912;  // std dev = 0.982, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12317527047361182;  // std dev = 0.075, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.05798081094376968;  // std dev = 2.341, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.16584245578107434;  // std dev = 3.131, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.44851107809421153;  // std dev = 0.366, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.3855327177377827;  // std dev = 0.774, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.09717161802872984;  // std dev = 1.126, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, G) )
%   | | | then return 0.4192058116291888;  // std dev = 3.65e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.509668787571581;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.5882410345665916;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7004664661426517;  // std dev = 0.300, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(K, A) )
%   | then return -0.11006872980109987;  // std dev = 0.004, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.16216950589442078;  // std dev = 0.178, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, D), follows(E, A) )
%   | | | then return 0.2705330947316673;  // std dev = 1.363, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.3321057222480909;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.005642733040703803;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4595154387086355;  // std dev = 0.118, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3330800177148814;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09366899170676146;  // std dev = 0.536, 98.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=1 */
%   | | | else return -0.027011797197583304;  // std dev = 1.733, 82.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=11 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.02398846784905496;  // std dev = 2.645, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | | | else return 0.12341395462737326;  // std dev = 1.668, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27889991276752557;  // std dev = 0.035, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.42792513623180667;  // std dev = 0.184, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09465785374429907;  // std dev = 0.030, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.06047868643812617;  // std dev = 0.128, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3096136227869738;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2536618222091211;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.3368704745504935;  // std dev = 0.405, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5287838221579994;  // std dev = 0.355, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.1311900101325957;  // std dev = 0.033, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(E, A), follows(C, E) )
%   | | | then return 0.1795006128274991;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.015947938744851144;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.21603179927263771;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22212580238450433;  // std dev = 0.031, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(F, A) )
%   | then return -0.04755814962939843;  // std dev = 0.129, 205.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.28531902674183696;  // std dev = 1.084, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.11800646683858475;  // std dev = 0.043, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.015127688320301345;  // std dev = 1.529, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return -0.04582092034566453;  // std dev = 1.226, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18677312405896054;  // std dev = 0.014, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.3188807104639476;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), tweets(E, G) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.07166724589184825;  // std dev = 0.610, 104.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=2 */
%   | | | else return 0.014148599158567664;  // std dev = 1.669, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | | else return -0.2578423164597636;  // std dev = 0.460, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2611187825793616;  // std dev = 0.991, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.11392058227127574;  // std dev = 0.094, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.46052027836500464;  // std dev = 0.163, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.018528508656683554;  // std dev = 1.353, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.16273969684520428;  // std dev = 0.031, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.0693081817661569;  // std dev = 1.131, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2243441275513988;  // std dev = 0.120, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then return 0.14312533944133066;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14819580396640838;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.030653959745657697;  // std dev = 0.124, 200.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=30 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1843456347617493;  // std dev = 1.343, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.3846788717906833;  // std dev = 0.365, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12318055779355441;  // std dev = 0.034, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14519377739012004;  // std dev = 0.011, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.35562520650783624;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06554641971038629;  // std dev = 0.074, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.19915012412220645;  // std dev = 0.047, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.09352828415313641;  // std dev = 0.018, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.15887015311011266;  // std dev = 1.013, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10402256171852697;  // std dev = 2.69e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.06134520205452782;  // std dev = 0.644, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.034434346215704424;  // std dev = 1.017, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.126', 'seconds']
Refined model CLL: -0.10462


******************************************
Best model found
******************************************
Results 

CLL : -0.110004 

AUC ROC : 0.993528 

AUC PR : 0.363469 

Precision : 0.343407 

Recall : 0.992063 

F1 : 0.510204 

Total Learning Time : 13.953 

Total Inference Time : 14.119961023330688 

Total revision time: 39.36825306892395
Best scored revision CLL: -0.10462


Results 

CLL : -0.110004 

AUC ROC : 0.993528 

AUC PR : 0.363469 

Precision : 0.343407 

Recall : 0.992063 

F1 : 0.510204 

Total Learning Time : 39.40619595527649 

Total Inference Time : 14.119961023330688 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.467
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.05094197399139684;  // std dev = 0.287, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.1352573688344515;  // std dev = 0.448, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7035179639182907;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04973807932575875;  // std dev = 0.242, 213.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.059883639584264535;  // std dev = 1.787, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5437534533736648;  // std dev = 1.312, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09776755943130448;  // std dev = 5.056, 154.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5765721081963607;  // std dev = 0.364, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7313666926786704;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5390999432123659;  // std dev = 0.854, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5964634460841789;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5639481178248894;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013605538762350336;  // std dev = 4.590, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
%   | | | else return 0.08258854885398967;  // std dev = 4.053, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5460546556694015;  // std dev = 2.439, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12135445048628944;  // std dev = 0.079, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | | else return -0.13091224831319803;  // std dev = 0.022, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.161363001595901;  // std dev = 0.249, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2890745914049513;  // std dev = 1.554, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return -0.052084551619641206;  // std dev = 0.735, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24929261139167347;  // std dev = 0.981, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5012264746199896;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6091509641765962;  // std dev = 1.069, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10121164550810759;  // std dev = 1.791, 261.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=5 */
%   | | else return 0.04843632856217389;  // std dev = 0.334, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021431778194946058;  // std dev = 3.190, 251.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26295468450198667;  // std dev = 0.260, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5294749566099364;  // std dev = 1.002, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12208223551490074;  // std dev = 0.158, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.12577127217367462;  // std dev = 0.135, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28222056139533913;  // std dev = 1.601, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08945287730783884;  // std dev = 1.794, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06624732684938993;  // std dev = 2.134, 71.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1761433579277506;  // std dev = 0.997, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.30497046595512683;  // std dev = 0.062, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048282783784659514;  // std dev = 0.149, 187.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009384436770950907;  // std dev = 2.255, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
%   | | | else return 0.04314270426273635;  // std dev = 2.465, 79.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16976284047487378;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2825907572082299;  // std dev = 0.872, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09241116454000263;  // std dev = 0.132, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36595853328745015;  // std dev = 1.238, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11381495355360978;  // std dev = 0.246, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14812401578110113;  // std dev = 1.836, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11561898203885143;  // std dev = 0.863, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08131336539699968;  // std dev = 0.028, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10570732314614555;  // std dev = 0.025, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.01374986339999651;  // std dev = 0.959, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.0024994078105071765;  // std dev = 1.464, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11541538890942456;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05404974648299832;  // std dev = 1.902, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.616', 'seconds']
Parameter learned model CLL:-0.111336 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 156, 0], 'true,false,false': [0.287, 40, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 53, 0], 'false,false': [0.448, 60, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.242, 194, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.787, 45, 4], 'false,false,false,true': [1.312, 2, 8], 'false,false,false,false': [5.056, 114, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.364, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.854, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.59, 221, 34], 'false,false,false,false': [4.053, 74, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.439, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.079, 171, 0], 'false,true,false,false': [0.022, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 100, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.554, 3, 77], 'true,false': [0.735, 1, 1], 'false,true,true': [0.981, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.069, 1, 39], 'false,false,true,false': [1.791, 256, 5], 'false,false,false': [0.334, 44, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.19, 169, 82], 'false,true': [0.26, 0, 22], 'false,false,true': [1.002, 0, 52], 'false,false,false,true': [0.158, 66, 0], 'false,false,false,false': [0.135, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.601, 2, 121], 'true,false': [1.794, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.134, 43, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 83], 'true,false,true': [0.062, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 168, 19], 'false,false,false,true': [2.255, 82, 28], 'false,false,false,false': [2.465, 55, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [0.872, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.132, 187, 0], 'false,false,true': [1.238, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 84, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.836, 3, 85], 'true,true,false': [0.863, 1, 19], 'true,false,true': [0.028, 151, 0], 'true,false,false,true': [0.025, 25, 0], 'true,false,false,false': [0.959, 20, 4], 'false,true': [1.464, 55, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.902, 37, 21]}]
{'': [0.22837370242214783, 0.20925118629682585], 'true': [0.01851192595229848, 0.019599999999999902], 'false': [0.21778435239973812, 0.2003193496879092], 'false,true': [7.105427357601002e-16, 5.86532918669894e-17], 'true,false': [-1.3664283380001927e-16, 0.0826446280991734], 'false,true,true': [0.0, 0.0]}
{'': [0.023055383773414984, 0.11258766935748603], 'false': [0.05852145908539545, 0.15791853084177288], 'false,false': [0.06517831025243309, 0.17776729085390094], 'false,false,false': [0.17207009806053572, 0.16600898126742414], 'false,false,true': [nan, 0.06517831025243309], 'false,true': [nan, 0.05852145908539545]}
{'': [0.012590421681442728, 0.11903280562890256], 'false': [nan, 0.11903280562890381], 'false,false': [0.0017261168519336425, 0.10835427632254203], 'false,false,false': [0.08260916761617909, 0.16933132998746425], 'true': [0.001976127647946784, 0.07175836917096438], 'true,false': [0.0161078371186892, 0.08106692078413807], 'true,true': [0.001976127647946784, nan], 'false,false,true': [0.0052862328590468355, 0.0]}
{'': [0.037662311757739673, 0.0005551725393446055], 'false': [4.6039747701842875e-05, 0.0006176076491607407], 'false,false': [nan, 0.0006176076491607407], 'false,false,false': [nan, 0.0006176076491607407], 'false,true': [nan, 4.60397477018536e-05], 'false,true,false': [3.695902910336607e-05, 1.3708879014155838e-05]}
{'': [0.0387922103701435, 0.08091868148611779], 'false': [0.046492359685050055, 0.0791578515851767], 'false,false': [0.07259874810729523, 0.11122820128625788], 'false,false,true': [0.02855674650578104, 0.01229000344412688], 'false,true': [0.04582125105476233, 0.0], 'true': [0.030172838842010108, 0.2700162804035025]}
{'': [0.04054779616599607, 0.0887209103530853], 'false': [0.003069294542148397, 0.095433896034542], 'false,false': [0.01929197907179818, 0.000357456551286036], 'true': [nan, 0.04054779616599639], 'true,false': [nan, 0.04054779616599607], 'false,false,false': [0.0003779999645038548, 0.0003258824301352028]}
{'': [0.04570380017606978, 0.06412806830345286], 'false': [nan, 0.06412806830345281], 'false,false': [nan, 0.06412806830345286], 'false,false,false': [nan, 0.06412806830345286], 'true': [0.020833072997709257, 0.01267757611884135]}
{'': [0.011972794569517217, 0.041973387421278346], 'false': [nan, 0.04197338742127876], 'false,false': [0.022150689877878146, 0.059744557032879085], 'false,false,false': [0.0462470015347589, 0.07693279593639331], 'true': [0.01182557388919899, 0.0019456027235043027], 'true,false': [0.0019456027235043027, nan]}
{'': [0.012194050064662789, 0.038794965799603176], 'false': [0.023199443343907212, 0.06347592242417158], 'false,false': [0.03735946010161292, 0.0007233509541000036], 'false,true': [0.02003067179840935, 9.312141236993047e-05], 'false,true,true': [0.02003067179840935, nan], 'false,false,false': [nan, 0.0007233509541000036]}
{'': [0.02765678583004849, 0.0466324258179642], 'false': [0.026785943915896608, 0.0716009553447974], 'false,false': [0.22222222222222224, 0.062397818254257595], 'false,false,false': [nan, 0.06239781825425749], 'true': [0.03827517447544902, 0.00520358100580257], 'true,true': [0.03830801367672879, 0.037269767219119204], 'true,false': [5.074365979660907e-06, 0.02090163111330972], 'true,false,false': [2.5027860651689604e-05, 0.03833371813943841]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 17.489
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 0.165, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.12175056238792542;  // std dev = 0.140, 199.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.6796427171126673;  // std dev = 0.208, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | else return 0.738482376605026;  // std dev = 0.199, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, E) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.4539418712037986;  // std dev = 1.478, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.7213480289963741;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7764814400395168;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6777214989236544;  // std dev = 0.991, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12766648301685188;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08541471328021552;  // std dev = 3.691, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.20128666192092243;  // std dev = 2.887, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5408062908757783;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | else return 0.448802413431167;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6197886340589979;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.44857520721304295;  // std dev = 0.365, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5575947363458253;  // std dev = 7.30e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10930285130989041;  // std dev = 0.693, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   | | | else return 0.010221408470438797;  // std dev = 2.544, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0809664120789625;  // std dev = 3.154, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.16188054249521253;  // std dev = 3.344, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.41878435478778864;  // std dev = 0.991, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.1322970641789818;  // std dev = 1.201, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.43616373221862825;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5723989841194683;  // std dev = 0.238, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.45199162628555883;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4800750826425813;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.687873164849702;  // std dev = 0.172, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.5822914866687838;  // std dev = 1.261, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.12666599563833816;  // std dev = 0.031, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.33864354087079895;  // std dev = 4.71e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21871990106170333;  // std dev = 2.070, 41.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=36 */
%   | | else return 0.11183834952690894;  // std dev = 0.432, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.3608213555153485;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3397423062491495;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0875286485846418;  // std dev = 0.657, 137.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=1 */
%   | | | else return -0.0037253080804118964;  // std dev = 1.985, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0376687490713117;  // std dev = 2.800, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.057950161196576276;  // std dev = 2.553, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22092829821969637;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.2894231429645103;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.30413739076557617;  // std dev = 0.147, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04817991734088075;  // std dev = 0.145, 168.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=14 */
%   | | else return -0.08726076900763556;  // std dev = 0.118, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27367590161303235;  // std dev = 0.051, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17495460930428924;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5145482030658974;  // std dev = 0.977, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.13617101567805734;  // std dev = 0.044, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2311768363935789;  // std dev = 0.249, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.07406199552775691;  // std dev = 0.677, 129.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=1 */
%   | | | else return -0.061795936567159974;  // std dev = 0.392, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3945453514564443;  // std dev = 0.302, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08791019507304568;  // std dev = 0.942, 64.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11783930035036143;  // std dev = 0.306, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.00221710205601125;  // std dev = 2.425, 117.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=29 */
%   | | | else return 0.05066863208223052;  // std dev = 1.728, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.15352360222891767;  // std dev = 1.393, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.1923407024658516;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18060401178197694;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.3121662779784461;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.06741465805395346;  // std dev = 0.080, 115.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=2 */
%   | | else return -0.01361031580912133;  // std dev = 0.185, 106.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=21 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.0977911925225769;  // std dev = 0.307, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0018374202227665643;  // std dev = 2.192, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.030356068543365755;  // std dev = 2.076, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.16501492072710938;  // std dev = 0.020, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.07277991928560205;  // std dev = 1.554, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else return 0.19030781074191364;  // std dev = 0.051, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.08215402194116045;  // std dev = 0.307, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.28153117074453493;  // std dev = 1.096, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.12123154757757797;  // std dev = 0.658, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07627602460576151;  // std dev = 0.126, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.40441770123962095;  // std dev = 0.053, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.13612026737044236;  // std dev = 0.256, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1042105625869318;  // std dev = 0.215, 72.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=68 */
%   | | else return 0.1861029908437139;  // std dev = 0.153, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return -0.06588329478511158;  // std dev = 0.052, 239.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.1865946767615796;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.18054812173385146;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23371475846147546;  // std dev = 1.391, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return -0.1124971699935952;  // std dev = 0.104, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04355587645633787;  // std dev = 0.712, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.04665455759906982;  // std dev = 1.339, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.271', 'seconds']
Refined model CLL: -0.104702


******************************************
Best model found
******************************************
Results 

CLL : -0.102105 

AUC ROC : 0.994303 

AUC PR : 0.431653 

Precision : 0.345506 

Recall : 0.97619 

F1 : 0.510373 

Total Learning Time : 17.489 

Total Inference Time : 11.700815916061401 

Total revision time: 41.71782746887207
Best scored revision CLL: -0.104702


Results 

CLL : -0.102105 

AUC ROC : 0.994303 

AUC PR : 0.431653 

Precision : 0.345506 

Recall : 0.97619 

F1 : 0.510373 

Total Learning Time : 41.75577035522461 

Total Inference Time : 11.700815916061401 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.17
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7362984868061561;  // std dev = 0.128, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.023777967088380408;  // std dev = 0.277, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13981214937855654;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18080944854954667;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.507144891491769;  // std dev = 0.992, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7465985393680359;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5624243727741597;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5624243727741597;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06418836963374182;  // std dev = 1.403, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.15384424000058203;  // std dev = 1.481, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4693530716203598;  // std dev = 1.296, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1182542832145868;  // std dev = 0.053, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.14042255580269974;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13880749874412893;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33921790561720994;  // std dev = 0.176, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4662018608265799;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3141538880342406;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6147216127150146;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09422461767708244;  // std dev = 1.117, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.10535363560998631;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.004335934610756529;  // std dev = 1.653, 67.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2765134942612595;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3788840137295248;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10227144944455657;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.10162569967950508;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30790679249168673;  // std dev = 0.411, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07587569468646026;  // std dev = 1.024, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05518132171962881;  // std dev = 0.273, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20018904099046708;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E) )
%   | | then return 0.2339712995815123;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03168138358959918;  // std dev = 0.160, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05202376861630499;  // std dev = 0.350, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.13438219023297626;  // std dev = 0.860, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12182580548485747;  // std dev = 0.250, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30048788826767653;  // std dev = 0.317, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09048113025330008;  // std dev = 0.056, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47888241699686357;  // std dev = 0.231, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1385450848897612;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.198507444276974;  // std dev = 0.355, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.1410558859686759;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08315502160800786;  // std dev = 0.038, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07284604270282098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.023750588843927826;  // std dev = 0.232, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.02447697996120495;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03193602922834109;  // std dev = 0.731, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.679', 'seconds']
Parameter learned model CLL:-0.113971 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.977, 1, 21], 'true,false,true': [5.16e-08, 49, 0], 'true,false,false': [0.331, 7, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.128, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 37, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.314, 5, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.992, 1, 14], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.403, 39, 3], 'false,false,false,false': [1.481, 8, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.296, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 37, 0], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.176, 0, 14], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.059, 0, 5], 'false,false,true,false': [1.117, 50, 2], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.653, 49, 18], 'false,true': [0.089, 0, 4], 'false,false,true': [0.775, 1, 3], 'false,false,false,true': [0.013, 3, 0], 'false,false,false,false': [0.02, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.411, 0, 21], 'true,false': [1.024, 50, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.273, 8, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.047, 0, 16], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 34, 5], 'false,false,false,true': [0.35, 9, 1], 'false,false,false,false': [0.86, 3, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.25, 1, 15], 'false,true,true,true': [0.317, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 47, 0], 'false,false,true': [0.231, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.142, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.355, 0, 19], 'true,true,false': [0.002, 0, 2], 'true,false,true': [0.038, 41, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.232, 3, 1], 'false,true': [0.253, 4, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.731, 4, 2]}]
{'': [0.2009293382470767, 0.24489795918367335], 'false': [0.22222222222222224, 0.25], 'false,true': [0.0, 0.0], 'true': [0.04338842975206614, 0.01723607263773474], 'true,false': [5.437827059388522e-17, 0.10937500000000004], 'false,true,true': [0.0, nan]}
{'': [0.0009592859041602002, 0.09673858250814953], 'false': [0.07648722940451459, 0.15712217987988064], 'false,false': [-5.551115123125783e-18, 0.21578576959020207], 'false,false,false': [nan, 0.21578576959020207], 'false,true': [nan, 0.07648722940451459], 'false,false,true': [nan, -5.551115123125783e-18]}
{'': [0.06481827522471784, 0.09748809686294525], 'false': [nan, 0.09748809686294528], 'false,false': [-3.700743415417188e-17, 0.08531093375313716], 'false,false,false': [0.046892129484518985, 0.18280257846578138], 'true': [0.06555586548045422, 0.0], 'true,true': [0.06555586548045422, nan], 'true,false': [0.0, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.06224838002314859, 0.0001234419255309139], 'false': [0.00010334479238565674, 0.0], 'false,true': [nan, 0.00010334479238565674], 'false,true,false': [7.486667666082272e-05, 2.3129646346357427e-18], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.0030642524268152727, 0.06293327286406812], 'false': [0.0, 0.06025062523183201], 'false,false': [0.06218246449149448, 0.0], 'false,false,true': [0.0007029663988804558, 0.02400581806225429], 'true': [0.0022081326081181884, 0.0], 'false,true': [0.0, nan]}
{'': [0.0407653181284516, 0.0830436101690428], 'false': [0.002000225093671884, 0.09548540923391673], 'false,false': [0.15019171605680479, 6.488266908292862e-05], 'true': [nan, 0.040765318128451494], 'true,false': [nan, 0.0407653181284516], 'false,false,false': [5.993757097635943e-05, 6.721622054985342e-05]}
{'': [0.04639757630251174, 0.008292722747014262], 'true': [0.008057171466602316, 0.019790828453672835], 'false': [nan, 0.008292722747014262], 'false,false': [nan, 0.008292722747014262], 'false,false,false': [nan, 0.008292722747014262]}
{'': [0.0001934950371041835, 0.037079938231506224], 'false': [nan, 0.037079938231506265], 'false,false': [0.02575705264238825, 0.06525797176537575], 'false,false,false': [0.012273659117901532, 0.1480618093973109], 'true': [0.000138456653657755, 0.0], 'true,false': [0.0, nan]}
{'': [0.06227127698517258, 0.030811727919770795], 'false': [0.019164251251598513, 0.08739741620104653], 'false,false': [0.0177693979573027, 0.002872979422577895], 'false,true': [0.014356358628892714, 6.55534377890752e-05], 'false,true,true': [0.014356358628892714, nan], 'false,false,false': [nan, 0.002872979422577895]}
{'': [0.018403828098002936, 0.05523005875598128], 'false': [0.012847560590118198, 0.08910224922488848], 'false,false': [nan, 0.08910224922488848], 'false,false,false': [nan, 0.08910224922488848], 'true': [0.006283423259769848, 0.001421454966131017], 'true,true': [0.006630320180786546, 1.5715820643850964e-06], 'true,false': [3.5056086863884085e-05, 0.008284662950249596], 'true,false,false': [-1.1564823173178713e-18, 0.013465147195960774]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.276
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7268260019535896;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04338697635744713;  // std dev = 1.404, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.15619471171805724;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.14048860034631788;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3370961593492627;  // std dev = 1.137, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4847664490161438;  // std dev = 0.285, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.5535500970253258;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7241267775533573;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5535500970253258;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5535500970253258;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10098298226812412;  // std dev = 0.842, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | | else return 0.026094455532361477;  // std dev = 1.297, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10403573291885566;  // std dev = 0.665, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2890220463808826;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4751919214790068;  // std dev = 0.246, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return -0.1118247742773829;  // std dev = 0.022, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11453627937458;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14177285345959956;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, G) )
%   | | then return -0.1823182862565119;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.2630805033305574;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3386893333356295;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.05709900108765076;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.44169306993531643;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.30709900108765076;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5828944122867694;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09280615618710505;  // std dev = 1.080, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | else return -0.09130043906557277;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.011842709033891745;  // std dev = 0.224, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.11507607102925603;  // std dev = 0.237, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.26868437651088317;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.5590368376789132;  // std dev = 0.239, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.1479934793203867;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.13639963184728077;  // std dev = 0.149, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, C) )
%   | | then return 0.25059051510707286;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2737826247205161;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19948753779501194;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return -0.044758193535623235;  // std dev = 0.927, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return -0.07959330896683986;  // std dev = 0.342, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return -0.09594304417427939;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), follows(I, A) )
%   | | | then return -0.06890123477977833;  // std dev = 0.496, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.0293762677407881;  // std dev = 0.453, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10138038625931226;  // std dev = 0.768, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2065159376760039;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22102990408289946;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16952634405298606;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2282086838461015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(G, A), recursion_accounttype(H, B) )
%   | | then return 0.4469579845564661;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09409264132411989;  // std dev = 0.052, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.18035124624528628;  // std dev = 0.772, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0.17018627349387844;  // std dev = 0.655, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.187958947643642;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.34553324996127066;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14697652154920648;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.08230144453805298;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.10870689031596745;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03188227598457245;  // std dev = 0.326, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.13728799870902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.11590606960539418;  // std dev = 0.677, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14983935436522916;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.27529675346129456;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1294882925095142;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07666609695457607;  // std dev = 0.019, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.10052549879085756;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.0735348345904537;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.020582519894553307;  // std dev = 0.212, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, I) )
%   | then return -0.005252361181073632;  // std dev = 0.343, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07882392202288285;  // std dev = 0.271, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.467', 'seconds']
Refined model CLL: -0.119874


******************************************
Best model found
******************************************
Results 

CLL : -0.115249 

AUC ROC : 0.99559 

AUC PR : 0.454826 

Precision : 0.356459 

Recall : 0.955128 

F1 : 0.519164 

Total Learning Time : 3.276 

Total Inference Time : 2.6181540489196777 

Total revision time: 9.26312007522583
Best scored revision CLL: -0.113971


Results 

CLL : -0.115249 

AUC ROC : 0.99559 

AUC PR : 0.454826 

Precision : 0.356459 

Recall : 0.955128 

F1 : 0.519164 

Total Learning Time : 9.301062961578369 

Total Inference Time : 2.6181540489196777 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.398
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8093684472946338;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7332668939277852;  // std dev = 0.136, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05218829970160251;  // std dev = 0.239, 70.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13294298333209423;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08664278013924541;  // std dev = 2.096, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5416025203836455;  // std dev = 1.023, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7580315211288686;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5639883565648829;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5639883565648829;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06673219110213875;  // std dev = 1.981, 91.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=6 */
%   | | | else return 0.04710568789863288;  // std dev = 1.866, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5101563637367483;  // std dev = 0.974, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11319207563258263;  // std dev = 0.022, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.12463283208875928;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14738342739090277;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29635210879345325;  // std dev = 0.851, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0.3846735373680079;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30644759061762356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6220310133832544;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06243621515219914;  // std dev = 1.720, 85.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=5 */
%   | | else return -0.10082859807169997;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011185144421239312;  // std dev = 2.088, 114.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2670062776535234;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5067706074096742;  // std dev = 0.645, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11457275761559865;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10823747486136344;  // std dev = 0.089, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2527579357220323;  // std dev = 1.145, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else return -0.06564823772502486;  // std dev = 1.520, 99.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01086163871859913;  // std dev = 0.400, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17360558957242714;  // std dev = 0.984, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else if ( follows(A, E) )
%   | | then return 0.2629468411770619;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0630042042178274;  // std dev = 0.141, 81.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 3.2148063656208556E-4;  // std dev = 0.942, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.06805302689087801;  // std dev = 1.165, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15638870788982975;  // std dev = 0.180, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26416391653650934;  // std dev = 0.419, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0893463612779462;  // std dev = 0.088, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4956222729870022;  // std dev = 0.394, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11107442116080714;  // std dev = 0.110, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18874773381148957;  // std dev = 0.460, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.13951308341702298;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08146502336111076;  // std dev = 0.026, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07760934710256685;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.024287412688929377;  // std dev = 0.240, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.013438309732266774;  // std dev = 1.035, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08738521497331209;  // std dev = 0.905, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.810', 'seconds']
Parameter learned model CLL:-0.108544 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.379, 2, 39], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,false': [0.458, 7, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.136, 0, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.239, 64, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [2.096, 21, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.023, 1, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [1.981, 85, 6], 'false,false,false,false': [1.866, 20, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.974, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 62, 0], 'false,true,false,false': [0.002, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.113, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.851, 1, 30], 'true,false': [0.119, 0, 2], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.044, 0, 6], 'false,false,true,false': [1.72, 80, 5], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.088, 80, 34], 'false,true': [0.118, 0, 6], 'false,false,true': [0.645, 0, 10], 'false,false,false,true': [0.078, 11, 0], 'false,false,false,false': [0.089, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.145, 1, 41], 'true,false': [1.52, 93, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.4, 6, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.984, 1, 33], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 75, 6], 'false,false,false,true': [0.942, 22, 7], 'false,false,false,false': [1.165, 9, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.18, 1, 32], 'false,true,true,true': [0.419, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 87, 0], 'false,false,true': [0.394, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.46, 0, 35], 'true,true,false': [0.008, 0, 4], 'true,false,true': [0.026, 72, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.24, 4, 1], 'false,true': [1.035, 13, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.905, 6, 3]}]
{'': [0.21944609689999467, 0.24305555555555558], 'false': [0.25, 0.20999999999999988], 'false,true': [-2.5376526277146434e-16, -7.93016446160826e-18], 'true': [0.04640095181439758, 0.012046400951814466], 'true,false': [6.628197161941232e-17, 0.06222222222222227], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.0005424180891767725, 0.0955533317021632], 'false': [0.05724257256858998, 0.15067301915135795], 'false,false': [0.0, 0.1766723877276862], 'false,false,false': [1.4802973661668753e-16, 0.1568459648153123], 'false,true': [nan, 0.05724257256858998], 'false,false,true': [nan, 0.0]}
{'': [0.03310298693829917, 0.08199236456864453], 'false': [nan, 0.08199236456864437], 'false,false': [1.2688263138573217e-16, 0.06602770246579893], 'false,false,false': [0.04310483784929298, 0.1393007684174592], 'true': [0.03610349818049559, 0.007701213080212488], 'true,true': [0.03610349818049559, nan], 'true,false': [0.0, 3.700743415417188e-17], 'false,false,true': [0.0, 0.0]}
{'': [0.018959552547031924, 0.0003068170230314344], 'false': [2.921505072375208e-05, 0.0006678725482835523], 'false,false': [nan, 0.0006678725482835523], 'false,false,false': [nan, 0.0006678725482835523], 'false,true': [nan, 2.921505072375763e-05], 'false,true,false': [8.15179968774001e-06, 3.2579481228244154e-07]}
{'': [0.022829372053800867, 0.060887555463109214], 'false': [-4.7580986769649563e-17, 0.057999575189548035], 'false,false': [0.06139222158770786, -1.1564823173178713e-18], 'false,false,true': [0.0003271176316445394, 0.03481289378177626], 'true': [0.023376397909634975, 0.007022564709313117], 'false,true': [-4.7580986769649563e-17, nan]}
{'': [0.03824498021303256, 0.08440874066912499], 'false': [0.002331331325926398, 0.09372006576299798], 'false,false': [0.04163887659334988, 0.0006152823935455097], 'true': [nan, 0.038244980213032555], 'true,false': [nan, 0.03824498021303256], 'false,false,false': [0.0005488690374091034, 0.0006569659171051628]}
{'': [0.046903895891827606, 0.01776777916311994], 'true': [0.031237926496450883, 0.023351024767745223], 'false': [nan, 0.01776777916311994], 'false,false': [nan, 0.01776777916311994], 'false,false,false': [nan, 0.01776777916311994]}
{'': [0.02788910461008581, 0.03339188061256962], 'false': [nan, 0.03339188061256964], 'false,false': [0.01978683470636312, 0.055679800327962416], 'false,false,false': [0.03060336483156497, 0.11303632493087384], 'true': [0.028481319271641593, 0.0], 'true,false': [0.0, nan]}
{'': [0.032479918594511346, 0.02921618894981839], 'false': [0.014322412016583514, 0.07500705861972735], 'false,false': [0.022225391192586645, 0.0005807280896374575], 'false,true': [0.015959451146023273, 8.82394278420391e-05], 'false,true,true': [0.015959451146023273, nan], 'false,false,false': [nan, 0.0005807280896374575]}
{'': [0.01753295689218063, 0.06737030084017556], 'false': [0.053602698633328075, 0.09095436335297778], 'false,false': [nan, 0.09095436335297778], 'false,false,false': [nan, 0.09095436335297778], 'true': [0.00566170574168876, 0.000918652360671439], 'true,true': [0.006058279870802424, 1.6251907295806306e-05], 'true,false': [9.68245735685152e-06, 0.007855138157690709], 'true,false,false': [-1.1564823173178713e-18, 0.011502010293700533]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 15.767
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.08302753548872309;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.6237200890514686;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.7218508708947673;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7442209249351343;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.08012874689601968;  // std dev = 0.191, 75.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=4 */
%   | | else return -0.031564855112908526;  // std dev = 0.266, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.13204151144396656;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12660220927089536;  // std dev = 2.016, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5829153454095722;  // std dev = 0.066, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.4111872891623058;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.35536643674628426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.6058899435326955;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5509117804464586;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7305789513142252;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11844401472228008;  // std dev = 0.020, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.011815438425254177;  // std dev = 1.084, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.09438780445251356;  // std dev = 1.789, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), tweets(A, G) )
%   | | then if ( recursion_accounttype(F, B), follows(E, F) )
%   | | | then return 0.4364688681552246;  // std dev = 0.073, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.6185296368534976;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H), recursion_accounttype(D, B) )
%   | | | then return 0.0719467219711523;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4330718090299838;  // std dev = 0.968, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(I, A) )
%   | | then return 0.41258685866539313;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.745189921438248;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10527297487235086;  // std dev = 0.001, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.10922241896688221;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.15996888297847675;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2863077215285359;  // std dev = 0.970, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.33166943535065174;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3854390189514272;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.42051096248246467;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3155472636895767;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.31760455769477536;  // std dev = 0.000800, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4895890123191644;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07313173417700823;  // std dev = 1.531, 105.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=5 */
%   | | else return -0.09632115743909941;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.2736831942519607;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.32104728922560677;  // std dev = 0.147, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.15080914592038308;  // std dev = 0.479, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.08957554840908484;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.038458437275605696;  // std dev = 0.139, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2741503412834494;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2709897420088269;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5662424536229346;  // std dev = 0.223, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12766456057024528;  // std dev = 0.035, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22418036653449563;  // std dev = 0.010, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return -0.027134489642545223;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21216091154573036;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.24302646698783234;  // std dev = 0.094, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.06199132432071259;  // std dev = 0.123, 83.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.18303989457850162;  // std dev = 0.886, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.10531397838615734;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.10084874286848236;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1380264766664414;  // std dev = 0.891, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18839469124993796;  // std dev = 0.016, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.27126206531589725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.0687028802148289;  // std dev = 0.361, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | | else return -0.08321444365420297;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, H), follows(H, E) )
%   | | | then return 0.05830142498533164;  // std dev = 0.679, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.056658049698994586;  // std dev = 0.429, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19131561578401612;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.013411771547010582;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.058111860173473334;  // std dev = 0.924, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1135547226419082;  // std dev = 0.973, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.18591641164806;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23103246220605467;  // std dev = 0.189, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.002874681888298469;  // std dev = 0.676, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.08565085536527156;  // std dev = 0.852, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.30153401788981476;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07592826080945314;  // std dev = 0.005, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3870930340846744;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11324398744319465;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1487659879924263;  // std dev = 0.060, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.2826575757932995;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.13595398151908802;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.0666474298177554;  // std dev = 0.030, 79.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1344322930694396;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2414012847780343;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08167531440489559;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.2737002013221237;  // std dev = 0.456, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.017964400704858396;  // std dev = 0.258, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.716', 'seconds']
Refined model CLL: -0.101045


******************************************
Best model found
******************************************
Results 

CLL : -0.096475 

AUC ROC : 0.994984 

AUC PR : 0.392146 

Precision : 0.331776 

Recall : 0.910256 

F1 : 0.486301 

Total Learning Time : 15.767 

Total Inference Time : 8.30705451965332 

Total revision time: 29.15864399909973
Best scored revision CLL: -0.101045


Results 

CLL : -0.096475 

AUC ROC : 0.994984 

AUC PR : 0.392146 

Precision : 0.331776 

Recall : 0.910256 

F1 : 0.486301 

Total Learning Time : 29.19658688545227 

Total Inference Time : 8.30705451965332 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.812
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.665296197315646;  // std dev = 1.691, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06647800945112271;  // std dev = 0.218, 112.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1060562199008549;  // std dev = 0.988, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14313719098142208;  // std dev = 2.611, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5566055653575164;  // std dev = 0.864, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8014264549288519;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5851046539752132;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5687014022488026;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5687014022488026;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05514082404339033;  // std dev = 2.636, 134.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=11 */
%   | | | else return 0.08404160956522425;  // std dev = 2.137, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.489250183106816;  // std dev = 1.823, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1169690284868371;  // std dev = 0.106, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return -0.12832857219351124;  // std dev = 0.021, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1629039989984934;  // std dev = 0.161, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30808661551293526;  // std dev = 1.076, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return 0.39047929423826716;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31401893950111065;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6133715280938079;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.06372059815917484;  // std dev = 2.123, 133.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=8 */
%   | | else return -0.11943463626512128;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0068392564578776205;  // std dev = 2.474, 176.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2628037658859714;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4688714124716151;  // std dev = 1.061, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13360538986102646;  // std dev = 0.119, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.1332483083988327;  // std dev = 0.159, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25068692305957924;  // std dev = 1.517, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return -0.06300056146532478;  // std dev = 1.896, 151.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03218444340496905;  // std dev = 0.533, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20675119844904788;  // std dev = 0.058, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.22382627647547837;  // std dev = 0.026, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.07136886588116124;  // std dev = 0.160, 107.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -6.508714300422943E-4;  // std dev = 1.259, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | | else return 0.18122784445108614;  // std dev = 1.319, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09755687530287235;  // std dev = 0.281, 52.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2679005438946371;  // std dev = 0.514, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08950471494166753;  // std dev = 0.081, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4603254132194445;  // std dev = 0.465, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12460951341412864;  // std dev = 0.198, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17412653049590432;  // std dev = 0.994, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.14252567724986112;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08057833439050906;  // std dev = 0.039, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08526909189752309;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.004289465524666199;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.07344630721535238;  // std dev = 0.783, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20931203882876104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04078696185638849;  // std dev = 1.241, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.174', 'seconds']
Parameter learned model CLL:-0.11209 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 57], 'true,false,true': [7.6e-08, 113, 0], 'true,false,false': [0.416, 7, 2], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.484, 10, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.691, 3, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.218, 104, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.988, 18, 1], 'false,false,false,true': [0.093, 0, 4], 'false,false,false,false': [2.611, 26, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.864, 1, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.126, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 6], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.636, 123, 11], 'false,false,false,false': [2.137, 22, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.823, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.106, 100, 0], 'false,true,false,false': [0.021, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.076, 1, 44], 'true,false': [0.119, 0, 3], 'false,true,true': [1.49e-08, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 10], 'false,false,true,false': [2.123, 125, 8], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.474, 126, 50], 'false,true': [0.091, 0, 8], 'false,false,true': [1.061, 1, 17], 'false,false,false,true': [0.119, 18, 0], 'false,false,false,false': [0.159, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.517, 2, 61], 'true,false': [1.896, 141, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.533, 15, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.058, 0, 48], 'true,false,true': [0.026, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 99, 8], 'false,false,false,true': [1.259, 36, 11], 'false,false,false,false': [1.319, 7, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.281, 5, 47], 'false,true,true,true': [0.514, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 135, 0], 'false,false,true': [0.465, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 27, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.994, 1, 52], 'true,true,false': [0.003, 0, 5], 'true,false,true': [0.039, 100, 0], 'true,false,false,true': [7.45e-09, 12, 0], 'true,false,false,false': [0.469, 6, 2], 'false,true': [0.783, 10, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.241, 9, 5]}]
{'': [0.22096688617708587, 0.23582766439909247], 'false': [0.23668639053254442, 0.23437500000000006], 'false,true': [-8.881784197001253e-17, -6.938893903907228e-18], 'true': [-3.739698609263685e-16, 0.01612469766191881], 'true,false': [5.1089909097794814e-17, 0.17283950617283952], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.05398067688601792, 0.09744502963150656], 'false': [0.04772956621515576, 0.16967146900690255], 'false,false': [0.05139870840979467, 0.19388633333548344], 'false,false,false': [0.0021813671255001, 0.17940174508148857], 'false,false,true': [nan, 0.05139870840979467], 'false,true': [nan, 0.04772956621515576]}
{'': [0.01844053576820211, 0.08876639969144559], 'false': [nan, 0.08876639969144562], 'false,false': [8.881784197001253e-17, 0.07346672889549065], 'false,false,false': [0.05184193832541947, 0.15746293279028806], 'true': [0.017775036384324233, 0.014242597516229619], 'true,true': [0.017775036384324233, nan], 'true,false': [0.003578484710565877, 0.003976280063119564], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.043154366482724894, 0.000516635266659065], 'false': [0.00011537569907752734, 0.001227392057123247], 'false,false': [nan, 0.001227392057123247], 'false,false,false': [nan, 0.001227392057123247], 'false,true': [nan, 0.00011537569907752554], 'false,true,false': [0.00011327031534847931, 1.9619595667232634e-05]}
{'': [0.024795572402861527, 0.059569159326442966], 'false': [2.2204460492503132e-17, 0.05645132526847101], 'false,false': [0.0613643742468009, -1.1102230246251566e-17], 'false,false,true': [0.0005015774445319199, 0.03388082176456254], 'true': [0.025709951452814867, 0.0047156177402463695], 'false,true': [2.2204460492503132e-17, nan]}
{'': [0.03478964442125586, 0.08792089325941167], 'false': [0.0010425494107468708, 0.09353164188325004], 'false,false': [0.06254889052688796, 0.0008994089354001593], 'true': [nan, 0.03478964442125612], 'true,false': [nan, 0.03478964442125586], 'false,false,false': [0.0007865613937900257, 0.0009774819944904688]}
{'': [0.04799181766553252, 0.014942307832477323], 'true': [0.03652465519734239, 0.023807953891347707], 'false': [nan, 0.014942307832477323], 'false,false': [nan, 0.014942307832477323], 'false,false,false': [nan, 0.014942307832477323]}
{'': [9.299113600300224e-05, 0.0411571868197158], 'false': [nan, 0.041157186819715925], 'false,false': [0.02565573146841793, 0.06103111748673979], 'false,false,false': [0.03372903552281957, 0.13382608187612172], 'true': [7.104083406141622e-05, 0.0003399024245765783], 'true,false': [0.0003399024245765783, nan]}
{'': [0.07893494602039502, 0.029212413335165284], 'false': [0.013892794710712471, 0.07942713979794257], 'false,false': [0.017994114588289773, 0.0014541316667655302], 'false,true': [0.01650271366883692, 4.826366643801982e-05], 'false,true,true': [0.01650271366883692, nan], 'false,false,false': [nan, 0.0014541316667655302]}
{'': [0.020509949414917975, 0.06236171786484183], 'false': [0.030651838520465335, 0.10437926993114434], 'false,false': [0.0, 0.10994155196451362], 'false,false,false': [nan, 0.10994155196451362], 'true': [0.017119236535412953, 0.002210853497211426], 'true,true': [0.01864795451963754, 2.2993841577667596e-06], 'true,false': [1.5281318886913865e-05, 0.01254925559239337], 'true,false,false': [4.625929269271485e-18, 0.02743851904849091]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 19.322
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.7651256792855584;  // std dev = 1.905, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7374372214361439;  // std dev = 0.138, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(F, A), tweets(F, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6144910945925948;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06551255887422784;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.13448744112577213;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7821375314820682;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09780781812533422;  // std dev = 2.706, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5527234704513914;  // std dev = 0.157, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.10357494887213403;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.41312186243517096;  // std dev = 0.417, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.3009262546936311;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5509262546936311;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6419486100244409;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.0766697648445979;  // std dev = 0.159, 109.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09142739032022384;  // std dev = 1.440, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.20850111383636033;  // std dev = 2.059, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.4365227735566057;  // std dev = 6.66e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.31963721884198043;  // std dev = 1.572, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.44771990679025225;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6221744817051821;  // std dev = 0.193, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5456880820494746;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6686041192001555;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.779119418828806;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.10700824229579593;  // std dev = 0.007, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return -0.17194364605920825;  // std dev = 0.121, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.30532526744587624;  // std dev = 0.992, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.3424854601322904;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.35866168620295735;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4571479803338068;  // std dev = 0.279, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.12849620069594375;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3782203345386493;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3958662617416786;  // std dev = 1.003, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07008867506332113;  // std dev = 1.908, 135.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=8 */
%   | | else return -0.1015594211420958;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.20451256404579565;  // std dev = 1.363, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.2766459707156878;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2705053836515584;  // std dev = 0.017, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06229715195738794;  // std dev = 0.109, 102.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=6 */
%   | | else return -0.049344602976924994;  // std dev = 0.127, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.30205132278445335;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3836486452842451;  // std dev = 0.288, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5608251269247435;  // std dev = 0.284, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12121508454397929;  // std dev = 0.028, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2373126850619626;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.22100653639090995;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11655649956435403;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.0724304152838238;  // std dev = 0.078, 88.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.37769117322191714;  // std dev = 0.111, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08746733400511308;  // std dev = 0.041, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20779087721290437;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02952342102496702;  // std dev = 1.017, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.01125033499853109;  // std dev = 1.267, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.1642659187287399;  // std dev = 0.989, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.19790224099095965;  // std dev = 0.095, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.0058741813079626224;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.26448325833567504;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.051378687273940606;  // std dev = 0.106, 130.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2585807039072657;  // std dev = 0.207, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11043162312640595;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2432036084621102;  // std dev = 0.422, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2007188572592317;  // std dev = 0.986, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16924418800559515;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return 0.3221664358238272;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14332944463328642;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2515260583721793;  // std dev = 0.369, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.08790237194039925;  // std dev = 0.703, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07611156683177912;  // std dev = 0.042, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.28871630750272553;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4449039044731933;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.13937807454323511;  // std dev = 0.035, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12516585901831187;  // std dev = 0.999, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.2867244339942614;  // std dev = 0.203, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15260026661036985;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06575186290459667;  // std dev = 0.041, 134.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.004346335044803112;  // std dev = 0.129, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else return 0.15586896449984994;  // std dev = 0.335, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14881713756018;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12138039988053642;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05884331901857123;  // std dev = 0.849, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1', 'minutes', 'and', '18.389', 'seconds']
Refined model CLL: -0.107125


******************************************
Best model found
******************************************
Results 

CLL : -0.106917 

AUC ROC : 0.994869 

AUC PR : 0.401435 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 19.322 

Total Inference Time : 39.449915409088135 

Total revision time: 66.44073575401306
Best scored revision CLL: -0.107125


Results 

CLL : -0.106917 

AUC ROC : 0.994869 

AUC PR : 0.401435 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 66.4786786403656 

Total Inference Time : 39.449915409088135 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.051
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8220043567862592;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.17633075328133055;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287470011163352;  // std dev = 0.135, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.037516843862332123;  // std dev = 0.261, 134.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08127696188451944;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7484301947419538;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08677590622154881;  // std dev = 2.958, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.539378178685504;  // std dev = 1.321, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8125970976522571;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5876124353627687;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5619915574663704;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5619915574663704;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.034683138601788434;  // std dev = 3.296, 158.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=17 */
%   | | | else return -0.004650210949688106;  // std dev = 2.469, 56.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.506210221717786;  // std dev = 1.697, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11875707838667252;  // std dev = 0.034, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | | else return -0.1213608125912252;  // std dev = 0.008, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15015934033196573;  // std dev = 0.124, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.253850874330268;  // std dev = 2.029, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | else return 0.3944311116034403;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30598592500674293;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.626923992906486;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08153765420955952;  // std dev = 2.249, 195.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=8 */
%   | | else return -0.11139521087619304;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017495367718568806;  // std dev = 3.053, 236.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25723147297640847;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46399785969501683;  // std dev = 1.482, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11757103624560031;  // std dev = 0.087, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11458648771540969;  // std dev = 0.108, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2844729353091129;  // std dev = 1.180, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else return -0.07060505548790842;  // std dev = 2.001, 201.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04927667668759817;  // std dev = 0.946, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15860701457309415;  // std dev = 1.733, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.21778196478018336;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05619065689398559;  // std dev = 0.142, 166.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0025055839084351115;  // std dev = 1.302, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | | | else return 0.09985259042543512;  // std dev = 1.588, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11965610872726873;  // std dev = 0.261, 67.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28393345561232985;  // std dev = 0.603, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08928670245277738;  // std dev = 0.021, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4677936468224665;  // std dev = 0.614, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10621756556708038;  // std dev = 0.123, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1545534169301525;  // std dev = 1.883, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | else return 0.14531152602811495;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08263164109095165;  // std dev = 0.010, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08027564489655925;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.004716112613591452;  // std dev = 0.468, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.034527249709441106;  // std dev = 0.887, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22689698188284235;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1095637786519798;  // std dev = 1.222, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.504', 'seconds']
Parameter learned model CLL:-0.109696 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [0.0, 151, 0], 'true,false,false': [0.3, 18, 2], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.466, 15, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.135, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 120, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [2.958, 42, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.321, 2, 56], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.137, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [3.296, 141, 17], 'false,false,false,false': [2.469, 48, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.697, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 130, 0], 'false,true,false,false': [0.008, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.029, 5, 59], 'true,false': [0.129, 0, 3], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.133, 0, 17], 'false,false,true,false': [2.249, 187, 8], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.053, 164, 72], 'false,true': [0.103, 0, 9], 'false,false,true': [1.482, 1, 19], 'false,false,false,true': [0.087, 25, 0], 'false,false,false,false': [0.108, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.18, 1, 85], 'true,false': [2.001, 191, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.946, 13, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.733, 3, 65], 'true,false,true': [0.034, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 152, 14], 'false,false,false,true': [1.302, 40, 12], 'false,false,false,false': [1.588, 15, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.261, 5, 62], 'false,true,true,true': [0.603, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.021, 179, 0], 'false,false,true': [0.614, 0, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.123, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.883, 3, 74], 'true,true,false': [0.002, 0, 6], 'true,false,true': [0.01, 138, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.468, 6, 2], 'false,true': [0.887, 18, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.222, 10, 6]}]
{'': [0.218612437224875, 0.22633136094674502], 'false': [0.23222222222222175, 0.2169421487603307], 'false,true': [-1.6148698540002277e-16, 0.0], 'true': [0.034838147771809706, 0.011559112205464756], 'true,false': [-1.1763952578809607e-16, 0.09000000000000004], 'false,true,true': [-1.6148698540002277e-16, nan]}
{'': [0.0002737706944177048, 0.10292316595832382], 'false': [0.0683001309230569, 0.15338628203126525], 'false,false': [0.05246913580246912, 0.17327376345720102], 'false,false,false': [0.0025154857636427996, 0.156285023457959], 'false,true': [nan, 0.0683001309230569], 'false,false,true': [nan, 0.05246913580246912]}
{'': [0.030007518005182254, 0.09360041327484875], 'false': [nan, 0.09360041327484876], 'false,false': [-1.3664283380001927e-16, 0.0794311345470513], 'false,false,false': [0.0687509378424359, 0.10889860123190118], 'true': [0.030079495378729997, 0.015549948078688924], 'true,true': [0.030079495378729997, nan], 'true,false': [0.0035867816499175476, 0.00465883187123628], 'false,false,true': [0.0, 4.4408920985006264e-17]}
{'': [0.02824912966396212, 0.00022180918966638362], 'false': [8.748431829308797e-06, 0.0004939344910249614], 'false,false': [nan, 0.0004939344910249614], 'false,false,false': [nan, 0.0004939344910249614], 'false,true': [nan, 8.748431829303103e-06], 'false,true,false': [8.838825856161136e-06, 2.6469351881249685e-06]}
{'': [0.06252567950852642, 0.062255750637046775], 'true': [0.06431090674292338, 0.005562930361479794], 'false': [0.0, 0.05972863288748805], 'false,false': [0.060964254017083816, -1.3877787807814458e-18], 'false,false,true': [0.0010480208042275595, 0.025939586575965793], 'false,true': [0.0, nan]}
{'': [0.03950278893994029, 0.08775313564969149], 'false': [0.0011781017272550517, 0.09253247810329338], 'false,false': [0.1098701154049353, 0.00033599941633940226], 'true': [nan, 0.03950278893994049], 'true,false': [nan, 0.03950278893994029], 'false,false,false': [0.00030453987764691884, 0.0003559929476417246]}
{'': [0.045261698817062435, 0.04976329591837974], 'false': [nan, 0.04976329591837974], 'false,false': [nan, 0.04976329591837974], 'false,false,false': [nan, 0.04976329591837974], 'true': [0.016177165631626203, 0.0199256440249682]}
{'': [0.043018119328463444, 0.03380185881753226], 'true': [0.04416608421765275, 0.0005856862135016766], 'false': [nan, 0.03380185881753213], 'false,false': [0.020223134536455755, 0.058950042278341636], 'false,false,false': [0.03258482057991639, 0.11460871924647026], 'true,false': [0.0005856862135016766, nan]}
{'': [0.06831629148936749, 0.02952434988677776], 'false': [0.01631712857477532, 0.07622999921687726], 'false,false': [0.026895561559166867, 0.00044325844377475905], 'false,true': [0.015171654120688244, 2.539952308905885e-06], 'false,true,true': [0.015171654120688244, nan], 'false,false,false': [nan, 0.00044325844377475905]}
{'': [0.02809057115626139, 0.05139932158545864], 'false': [0.027100825773867195, 0.08861701134798874], 'false,false': [0.0, 0.09334574628780187], 'false,false,false': [nan, 0.09334574628780187], 'true': [0.0427146410116547, 0.0017611150409010323], 'true,true': [0.0460368034907313, 9.843837469418009e-07], 'true,false': [7.271262806452444e-07, 0.013268338370721932], 'true,false,false': [0.0, 0.027330220088816862]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 21.954
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995124;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.6986400788776215;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.7347188662503337;  // std dev = 0.129, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6361400788776208;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return 0.11947341221095428;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.73002795731514;  // std dev = 0.132, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1263645652956241;  // std dev = 0.046, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5636166809864105;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21966236427121225;  // std dev = 1.891, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.12561349447680267;  // std dev = 2.022, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.5327270161447563;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.5681714058295163;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.6474134294163582;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.661751154962498;  // std dev = 0.170, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5573830782348181;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5527586551249986;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11323431083225846;  // std dev = 0.047, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12986163586472257;  // std dev = 1.951, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.05570025612211793;  // std dev = 2.097, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.34566106689163417;  // std dev = 1.913, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.4423131615606449;  // std dev = 0.231, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.4172620337546872;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.08289642166380908;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4878675960917498;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6645449761608891;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7870038980751253;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then return -0.10222370663608785;  // std dev = 0.003, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else return -0.18489529371332825;  // std dev = 0.135, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.32084118163399666;  // std dev = 0.986, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.2324001216701824;  // std dev = 0.934, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.1485716359056107;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.39092034052964714;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3286053830710343;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.40422312744837113;  // std dev = 0.408, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08005043536997686;  // std dev = 1.998, 200.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=8 */
%   | | else return -0.09248415884648266;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.2420482135735784;  // std dev = 0.981, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.2727462188976064;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2798690070784954;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04927302846693178;  // std dev = 0.112, 120.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=12 */
%   | | else return -0.07882535418660633;  // std dev = 0.139, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2694806344475319;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.12232516995809374;  // std dev = 0.927, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.526707160429548;  // std dev = 0.412, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12916966238176542;  // std dev = 0.033, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.22725521964086048;  // std dev = 0.038, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.15246126533745538;  // std dev = 0.838, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.23777637841443075;  // std dev = 0.034, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.07895359213954138;  // std dev = 0.035, 165.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=1 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.21676314664682306;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30310030677485383;  // std dev = 0.177, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12136513598321833;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( tweets(A, H) )
%   | | then return 0.1562748244421652;  // std dev = 0.678, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.051174631769824695;  // std dev = 0.302, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1482469970848043;  // std dev = 1.369, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.17482931398791177;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.18587215294277643;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.21692107389024773;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(H, G) )
%   | | then return 0.37609462055072257;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2155788089829159;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.056942096348490914;  // std dev = 0.073, 178.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.024613970292388872;  // std dev = 0.766, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.06755483034424926;  // std dev = 1.388, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.13518755359239126;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.16385382755974967;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.17425832322681722;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.223363405471117;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.15269713988742367;  // std dev = 0.188, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return -0.07198035613971869;  // std dev = 0.025, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24651382396157126;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4403793539711787;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1338578374577091;  // std dev = 0.032, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1300829720210884;  // std dev = 0.994, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.03698557316199722;  // std dev = 1.559, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 1.448446129100413E-4;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.06385367310708946;  // std dev = 0.031, 173.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.0022261412833970377;  // std dev = 0.124, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.04204959750362995;  // std dev = 0.169, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21844577414620503;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.034921164590156775;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.06173404788976047;  // std dev = 0.902, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.385', 'seconds']
Refined model CLL: -0.103267


******************************************
Best model found
******************************************
Results 

CLL : -0.102141 

AUC ROC : 0.994468 

AUC PR : 0.366741 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 21.954 

Total Inference Time : 11.378338098526001 

Total revision time: 41.799159412384036
Best scored revision CLL: -0.103267


Results 

CLL : -0.102141 

AUC ROC : 0.994468 

AUC PR : 0.366741 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 41.837102298736575 

Total Inference Time : 11.378338098526001 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.554
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.0877970108464337;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7012207772353072;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03755032208046877;  // std dev = 0.261, 209.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08982919029894353;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490517228539605;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10943659102802894;  // std dev = 3.233, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5393978644181822;  // std dev = 1.678, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7307535254459393;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8222780267117208;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5884051924240863;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645571124909966;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4534460013798855;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03961455910128251;  // std dev = 3.653, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return -0.01448702860812109;  // std dev = 2.914, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46828524661351145;  // std dev = 3.130, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11738819447782713;  // std dev = 0.022, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | | else return -0.11984609401709702;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15491169255593498;  // std dev = 0.138, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3173372051744154;  // std dev = 1.289, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4199230970419851;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2724811831472306;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6016069739814894;  // std dev = 1.005, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.0842163627444363;  // std dev = 2.357, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.10577634976188778;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027724382382017954;  // std dev = 3.463, 281.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2821717091485546;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5467431781176019;  // std dev = 0.809, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11467129384318579;  // std dev = 0.097, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.11902243699149388;  // std dev = 0.141, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2571054633382809;  // std dev = 2.414, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07305032022599144;  // std dev = 2.068, 235.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018625992639233126;  // std dev = 0.727, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1944873539152547;  // std dev = 0.995, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23289077649049522;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04373943292048232;  // std dev = 0.150, 213.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.003988312123788501;  // std dev = 1.399, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.03609578973259246;  // std dev = 1.803, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18091607369567322;  // std dev = 0.128, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24210049293459146;  // std dev = 1.495, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0902205632192568;  // std dev = 0.026, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38148432220913064;  // std dev = 1.220, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10479293109819916;  // std dev = 0.110, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18611435916245592;  // std dev = 1.345, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1578827281629989;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08358329708662969;  // std dev = 0.010, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08054162634337489;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.034442142371939655;  // std dev = 0.474, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04452696973295047;  // std dev = 0.986, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21848466975203962;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08211776951550707;  // std dev = 1.403, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.806', 'seconds']
Parameter learned model CLL:-0.110116 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 179, 0], 'true,false,false': [0.226, 35, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 187, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [3.233, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.678, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.14, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.653, 189, 21], 'false,false,false,false': [2.914, 69, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.13, 8, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 155, 0], 'false,true,false,false': [0.0, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.138, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.289, 2, 73], 'true,false': [0.144, 0, 4], 'false,true,true': [0.961, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.005, 1, 23], 'false,false,true,false': [2.357, 252, 9], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.463, 190, 91], 'false,true': [0.1, 0, 13], 'false,false,true': [0.809, 0, 22], 'false,false,false,true': [0.097, 37, 0], 'false,false,false,false': [0.141, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.414, 5, 107], 'true,false': [2.068, 224, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.727, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 80], 'true,false,true': [0.034, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 191, 22], 'false,false,false,true': [1.399, 49, 13], 'false,false,false,false': [1.803, 28, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.128, 1, 77], 'false,true,true,true': [1.495, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.026, 206, 0], 'false,false,true': [1.22, 2, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.345, 1, 94], 'true,true,false': [0.002, 0, 9], 'true,false,true': [0.01, 186, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.474, 14, 2], 'false,true': [0.986, 19, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.403, 16, 8]}]
{'': [0.2201065595248514, 0.2239854318418315], 'false': [0.2343749999999995, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 2.7755575615628915e-18], 'true': [0.01868480725623786, 0.009173525377228917], 'true,false': [-1.9847562451399445e-16, 0.05113221329437545], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02357295365113863, 0.09758288355765102], 'false': [0.06832197190005199, 0.15508210867976613], 'false,false': [0.03993055555555556, 0.18184648331928585], 'false,false,false': [0.0026246293814826682, 0.16861478861208287], 'false,true': [nan, 0.06832197190005199], 'false,false,true': [nan, 0.03993055555555556]}
{'': [0.03794381280020982, 0.09021624605025591], 'false': [nan, 0.09021624605025605], 'false,false': [0.05246913580246905, 0.07541113285004193], 'false,false,false': [0.06353427623213018, 0.1061306660043915], 'false,false,true': [-4.9343245538895844e-17, 0.0987654320987654], 'true': [0.03852526980991089, 0.01646262221885893], 'true,true': [0.03855818905618917, 0.0], 'true,false': [0.003152806723422441, 0.00488536242733334]}
{'': [0.07309200834035079, 0.0002873846262474407], 'false': [3.5506492709416378e-06, 0.00044554126014797573], 'false,false': [nan, 0.00044554126014797573], 'false,false,false': [nan, 0.00044554126014797573], 'false,true': [nan, 3.5506492709416378e-06], 'false,true,false': [3.2295562997735634e-06, -3.131398274583775e-17]}
{'': [0.02180127221165004, 0.06173832916615825], 'false': [0.05125880014130465, 0.0571566652943608], 'false,false': [0.059309094607584927, 2.3129646346357427e-18], 'false,false,true': [0.042058095826241315, 0.021286664992593227], 'false,true': [0.05125880014130465, nan], 'true': [0.02215654074269711, 0.005148975978949921]}
{'': [0.042671555986709124, 0.0791329359943896], 'false': [0.0007702774495124303, 0.08182838248718878], 'false,false': [0.029750801841176108, 0.00037298777937736123], 'true': [nan, 0.042671555986709506], 'true,false': [nan, 0.042671555986709124], 'false,false,false': [0.0002524131230629271, 0.00047034121465157276]}
{'': [0.052945564635374504, 0.022027035973969104], 'true': [0.052050552309118515, 0.018189650389847774], 'false': [nan, 0.022027035973969104], 'false,false': [nan, 0.022027035973969104], 'false,false,false': [nan, 0.022027035973969104]}
{'': [0.011978881166241196, 0.03273534720720134], 'false': [nan, 0.03273534720720129], 'false,false': [0.022381275215356537, 0.052967218913700174], 'false,false,false': [0.03156074612644283, 0.0878312864457121], 'true': [0.012225120121615871, 0.0005669185084482969], 'true,false': [0.0005669185084482969, nan]}
{'': [0.016475345461903972, 0.034693452654365686], 'false': [0.022739010544747907, 0.07529577348604996], 'false,false': [0.07828487888950256, 0.00029034971722481716], 'false,true': [0.06569871203738786, 3.2924246049320597e-06], 'false,true,true': [0.06569871203738786, nan], 'false,false,false': [nan, 0.00029034971722481716]}
{'': [0.021623184989429427, 0.053320962045305245], 'false': [0.03139132126549173, 0.07948799692350626], 'false,false': [0.0, 0.08205615953611421], 'false,false,false': [nan, 0.08205615953611421], 'true': [0.017469162296403624, 0.0011924293185257547], 'true,true': [0.019055100420828607, 6.526438188831424e-07], 'true,false': [5.413533140318144e-07, 0.007539444638410676], 'true,false,false': [-6.071532165918825e-18, 0.014016308065605037]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.7
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.1315417865499728;  // std dev = 0.101, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.6285643213018632;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.729736516339542;  // std dev = 0.149, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7650803711501766;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12658002586023098;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10498755712779405;  // std dev = 2.162, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.178903370243522;  // std dev = 2.134, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5519460708392364;  // std dev = 0.112, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.5984456733231562;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.3765987510400812;  // std dev = 0.953, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3950692765199471;  // std dev = 0.816, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5745543488675533;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10322771064920344;  // std dev = 1.274, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | | else return -0.004736420723415601;  // std dev = 2.216, 77.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08948731062450423;  // std dev = 2.002, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.16548707281425504;  // std dev = 2.215, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), follows(F, E) )
%   | | | then return 0.400695818972776;  // std dev = 1.410, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | | else return 0.27856864977849793;  // std dev = 1.303, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.43217354662775836;  // std dev = 0.090, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5888534907344811;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5223255087824119;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6948095439432066;  // std dev = 0.168, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10519416566618044;  // std dev = 0.050, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.10788931956546044;  // std dev = 0.029, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.19925052967241472;  // std dev = 0.288, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.30456855704497937;  // std dev = 1.386, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.1479566763383213;  // std dev = 1.256, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.5071247217174245;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.010661538140844806;  // std dev = 1.196, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3189093246189952;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.33735968448976056;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return -0.058030068787369826;  // std dev = 2.015, 209.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=15 */
%   | | | else return 0.038950944454484535;  // std dev = 2.430, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return -0.0939319619952739;  // std dev = 1.18e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2749797566356226;  // std dev = 0.023, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.01863290372741107;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.41892969385350837;  // std dev = 0.309, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09055859732090799;  // std dev = 0.036, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.05317941801810345;  // std dev = 0.163, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27518755069267425;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.37583245483528527;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.523851690251207;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14083694410411157;  // std dev = 0.049, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22100682315782055;  // std dev = 0.026, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return -0.07052821013130718;  // std dev = 0.781, 129.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=3 */
%   | | | else return -0.08393387334189756;  // std dev = 0.006, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.34904671446456953;  // std dev = 0.263, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09118683689732038;  // std dev = 0.709, 69.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3348822307018968;  // std dev = 0.185, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11663219288227604;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0522874071930177;  // std dev = 0.765, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.08350058226567933;  // std dev = 1.195, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.16288721264092923;  // std dev = 0.940, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.20230421342517504;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18933181871624977;  // std dev = 0.023, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2729568554690862;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, H) )
%   | | then return 0.24310104358861212;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.024375322342111927;  // std dev = 0.917, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.05058081301663567;  // std dev = 0.103, 212.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.013053167388759114;  // std dev = 1.091, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return -0.036240972281563456;  // std dev = 1.418, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.16026808440170734;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.18456016957765012;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1198337375894885;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.24987984148476358;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.09902947127447091;  // std dev = 0.979, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.33161718168182047;  // std dev = 0.211, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07490579829102455;  // std dev = 0.004, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3544857155844246;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1460170421899252;  // std dev = 0.045, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12282065135904616;  // std dev = 0.199, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.14154840371164662;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06652633528241354;  // std dev = 0.033, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.09017858031253846;  // std dev = 0.921, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.09127971102760288;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.013430072353980527;  // std dev = 0.180, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.28953126646953753;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.012741550839880185;  // std dev = 0.450, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.005521311576301979;  // std dev = 1.018, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.367', 'seconds']
Refined model CLL: -0.104104


******************************************
Best model found
******************************************
Results 

CLL : -0.101297 

AUC ROC : 0.994934 

AUC PR : 0.376668 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 25.7 

Total Inference Time : 14.784660339355469 

Total revision time: 51.336690477371214
Best scored revision CLL: -0.104104


Results 

CLL : -0.101297 

AUC ROC : 0.994934 

AUC PR : 0.376668 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 51.37463336372375 

Total Inference Time : 14.784660339355469 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.158
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.0793510649004878;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6906998454542064;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07768781936993786;  // std dev = 0.197, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13419964717712993;  // std dev = 1.120, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08474812295800868;  // std dev = 1.828, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5805971657117995;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8513402098712765;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5805971657117998;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5805971657117998;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05199462410506723;  // std dev = 1.632, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | | else return 0.027364599175969288;  // std dev = 1.722, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.53073756888262;  // std dev = 0.836, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11902617865757985;  // std dev = 0.079, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.12002702351277461;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14209676156764617;  // std dev = 0.078, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32684363839615677;  // std dev = 0.270, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3130046577210933;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6760200485908946;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11019857176868651;  // std dev = 0.123, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0.011237223510143628;  // std dev = 0.304, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03762849134511822;  // std dev = 1.570, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24990592240542508;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4450272376929062;  // std dev = 1.016, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11789272499782143;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.12792334754029733;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27934192506967465;  // std dev = 0.448, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.09146038789264471;  // std dev = 0.501, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014498655437633443;  // std dev = 1.047, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14892226690564492;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.06073059579829041;  // std dev = 0.112, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05829437762458065;  // std dev = 0.957, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0.024430994579544632;  // std dev = 1.072, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18419101688574183;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2996636174413319;  // std dev = 0.330, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09157088868847615;  // std dev = 0.090, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4461279286139904;  // std dev = 0.266, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10923111721015116;  // std dev = 0.090, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16440278278435055;  // std dev = 0.276, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2120219078337563;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07612928044750102;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08350731951441705;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.040742063988323876;  // std dev = 0.459, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.023656334281863915;  // std dev = 0.496, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.002796486030243151;  // std dev = 0.774, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.752', 'seconds']
Parameter learned model CLL:-0.100716 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.361, 2, 25], 'true,false,true': [2.79e-08, 30, 0], 'true,false,false': [0.242, 15, 1], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 10, 0], 'false,false': [0.421, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.978, 1, 22], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.197, 34, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.12, 5, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.828, 16, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [4.21e-08, 0, 19], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.632, 41, 4], 'false,false,false,false': [1.722, 18, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.836, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.079, 40, 0], 'false,true,false,false': [2.63e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.078, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.27, 0, 20], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.133, 0, 5], 'false,false,true,false': [0.123, 60, 0], 'false,false,false': [0.304, 13, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.57, 34, 22], 'false,true': [0.0, 0, 2], 'false,false,true': [1.016, 1, 7], 'false,false,false,true': [0.054, 12, 0], 'false,false,false,false': [0.029, 4, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.448, 0, 26], 'true,false': [0.501, 59, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.047, 13, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.978, 1, 22], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.112, 35, 2], 'false,false,false,true': [0.957, 22, 3], 'false,false,false,false': [1.072, 13, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 20], 'false,true,true,true': [0.33, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 41, 0], 'false,false,true': [0.266, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.276, 0, 22], 'true,true,false': [0.212, 0, 3], 'true,false,true': [0.011, 30, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.459, 8, 1], 'false,true': [0.496, 12, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.774, 10, 3]}]
{'': [0.22931131544379935, 0.15999999999999992], 'true': [0.06858710562414343, 0.021266540642722178], 'false': [0.13888888888888892, 0.17751479289940816], 'false,true': [0.0, -1.1102230246251566e-17], 'true,false': [2.590520390792032e-17, 0.05859375000000004], 'false,true,true': [0.0, 0.0]}
{'': [0.04158790170132359, 0.10133248701400634], 'false': [0.03877213419426489, 0.1645802477346817], 'false,false': [0.17904331095428222, 0.15914786334958295], 'false,false,true': [nan, 0.17904331095428222], 'false,false,false': [nan, 0.15914786334958295], 'false,true': [nan, 0.03877213419426489]}
{'': [0.003481835308135306, 0.09685105592228636], 'false': [nan, 0.0968510559222863], 'false,false': [7.401486830834377e-17, 0.08542125899572296], 'false,false,false': [0.059183780423816994, 0.13485890515428792], 'true': [9.349246523159212e-17, 0.0], 'true,true': [9.349246523159212e-17, nan], 'false,false,true': [0.0, 0.0], 'true,false': [0.0, nan]}
{'': [0.022543107863955147, 0.0003113112724742616], 'false': [0.0001437149938505615, 0.000338753989302381], 'false,false': [nan, 0.000338753989302381], 'false,false,false': [nan, 0.000338753989302381], 'false,true': [nan, 0.00014371499385055632], 'false,true,false': [0.00015442373301092493, 2.3129646346357427e-18]}
{'': [0.003638830336370913, 0.05672394901876307], 'false': [0.0, 0.0544327218577487], 'false,false': [0.04439515220868742, 0.09222852613878192], 'false,false,true': [0.003516289762133251, 0.00025251492537812224], 'true': [0.003638830336370913, nan], 'false,true': [0.0, nan]}
{'': [0.0440272118186308, 0.10774775009390894], 'false': [0.0, 0.11418347500918756], 'false,false': [0.12891270891438097, 0.00024939420118929786], 'true': [nan, 0.044027211818630785], 'true,false': [nan, 0.0440272118186308], 'false,false,false': [0.00023955084624171138, 0.00020346422458983326]}
{'': [0.03424678287403906, 0.06442294878601805], 'false': [nan, 0.06442294878601808], 'false,false': [nan, 0.06442294878601805], 'false,false,false': [nan, 0.06442294878601805], 'true': [0.007703500936467826, 0.004180810809544489]}
{'': [0.04156740839630153, 0.03319833469053524], 'true': [0.04156740839630153, nan], 'false': [nan, 0.03319833469053522], 'false,false': [0.012482760243438501, 0.05084346669827218], 'false,false,false': [0.036644744173880944, 0.06765043670937672]}
{'': [0.003326632972959398, 0.03320051803510559], 'false': [0.019530660777432058, 0.061765040910254435], 'false,false': [0.014138541153037764, 0.0005346233846513855], 'false,true': [0.018115669682519802, 0.0001975915232821544], 'false,true,true': [0.018115669682519802, nan], 'false,false,false': [nan, 0.0005346233846513855]}
{'': [0.018799288764983418, 0.031487199485019685], 'false': [0.01758244401257846, 0.046098717316171316], 'false,false': [nan, 0.04609871731617132], 'false,false,false': [nan, 0.046098717316171316], 'true': [0.005089349093425812, 0.005495957225318431], 'true,false': [3.6837967219649493e-06, 0.021246871194594858], 'true,false,false': [0.0, 0.023424747952639748], 'true,true': [0.0034679078248943574, 0.014984447053975345]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.703
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.21252258176734698;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7925402937534431;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1460475805863126;  // std dev = 0.135, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.019829882185973147;  // std dev = 0.790, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.15447512310145942;  // std dev = 1.081, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.6933817952780751;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.17945906165229242;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03779328921603586;  // std dev = 1.008, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.11302061684834236;  // std dev = 1.426, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3550135841583098;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.12187924986151372;  // std dev = 0.724, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.45521258319484703;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.530538174215936;  // std dev = 0.278, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6664302331744387;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return -0.11248652194282786;  // std dev = 0.136, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.13270136948716255;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.138797303292097;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.15502077954854826;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3443985771375324;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.3271700694650141;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2966029900847381;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4654196436321306;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10628221205065985;  // std dev = 0.178, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.10600863096676034;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05037315568266902;  // std dev = 1.112, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.13761889567469382;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2604594733083525;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2747072376417675;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05696364492492378;  // std dev = 0.203, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return -0.11953281795362955;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.23864367366510864;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.331897717679712;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5815741018786129;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11605122603112995;  // std dev = 0.037, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.22445324136853115;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07904859653499538;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.010358871952366459;  // std dev = 0.132, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.282716392637941;  // std dev = 0.214, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09961445229916516;  // std dev = 0.106, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.11528930263818157;  // std dev = 0.423, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(A, J), follows(I, J) )
%   | | then return -0.03712722749925878;  // std dev = 0.280, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.02923429520093142;  // std dev = 0.443, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0.040480949830502856;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(C, A), follows(D, C) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.19199661698044215;  // std dev = 0.065, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2793164916476649;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1082502152779026;  // std dev = 0.595, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(E, A), follows(D, E) )
%   | | then return -0.08914065414028517;  // std dev = 0.024, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, F), tweets(C, F) )
%   | | | then return -0.05475118299385358;  // std dev = 0.282, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.09375044038223143;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return -0.0622278907992325;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then return -0.07771458000867186;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.046708334428394144;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16556096470594348;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.1754243280074225;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.22630565181409443;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.07222063759568079;  // std dev = 0.092, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.08167623167089054;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.322498409604801;  // std dev = 0.238, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.0849764506739422;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.17286769074609834;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1400689914864849;  // std dev = 0.013, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.25497821084832123;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07104987361229693;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07220015200365404;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.034205729600782074;  // std dev = 0.254, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18600742204693307;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08294219645853483;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then return 0.049543753942822066;  // std dev = 0.343, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.018781648102514335;  // std dev = 0.494, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '42.422', 'seconds']
Refined model CLL: -0.097729


******************************************
Best model found
******************************************
Results 

CLL : -0.099099 

AUC ROC : 0.992918 

AUC PR : 0.355006 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 6.703 

Total Inference Time : 10.923129558563232 

Total revision time: 21.350551305770875
Best scored revision CLL: -0.097729


Results 

CLL : -0.099099 

AUC ROC : 0.992918 

AUC PR : 0.355006 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 21.372783123016358 

Total Inference Time : 10.923129558563232 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.512
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.05094197399139689;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6719032648105594;  // std dev = 1.282, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0590334715665614;  // std dev = 0.232, 74.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012656523484762854;  // std dev = 1.707, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8377866547829789;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.12284972776052311;  // std dev = 2.951, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5670800899187556;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7149129471920341;  // std dev = 0.209, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6908432258789161;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5670800899187554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5670800899187554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02863310180818503;  // std dev = 2.889, 112.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=13 */
%   | | | else return 0.13555104382925445;  // std dev = 2.528, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5409582734444077;  // std dev = 1.469, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12028248511276754;  // std dev = 0.071, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return -0.13808777485670654;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16554725004351267;  // std dev = 0.190, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25954103594543737;  // std dev = 1.366, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.18990930689550645;  // std dev = 0.726, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5735911839213803;  // std dev = 0.924, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.10946267796957086;  // std dev = 0.931, 94.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=1 */
%   | | else return 0.0416999729370924;  // std dev = 0.327, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016856026867145255;  // std dev = 2.254, 113.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.11490265414645597;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.559925822804443;  // std dev = 0.478, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12972151137016683;  // std dev = 0.137, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.13976773944400028;  // std dev = 0.108, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24340204902716586;  // std dev = 1.652, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else return -0.09099021849795758;  // std dev = 0.982, 100.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03193698742445439;  // std dev = 1.499, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17983243464740176;  // std dev = 0.991, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04727901641816775;  // std dev = 0.140, 70.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.01790423305223613;  // std dev = 1.352, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.009878965336290265;  // std dev = 1.528, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1845852068479485;  // std dev = 0.049, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3487172799773783;  // std dev = 0.576, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0925138660836803;  // std dev = 0.115, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3292011707116149;  // std dev = 0.837, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11738654181618026;  // std dev = 0.175, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1785742563410273;  // std dev = 0.427, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.21196587959329538;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0801185074114962;  // std dev = 0.038, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1064105752779384;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.021352927486230064;  // std dev = 0.812, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.0329709983815019;  // std dev = 1.063, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1564252615658961;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005554306450997407;  // std dev = 1.201, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.749', 'seconds']
Parameter learned model CLL:-0.110915 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.23e-07, 0, 45], 'true,false,true': [6.32e-08, 63, 0], 'true,false,false': [0.287, 20, 2], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 17, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.282, 2, 37], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.232, 68, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.707, 21, 4], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.951, 35, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 30], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.209, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.889, 99, 13], 'false,false,false,false': [2.528, 23, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.469, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.071, 90, 0], 'false,true,false,false': [0.031, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.19, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.366, 2, 33], 'true,false': [0.0, 0, 0], 'false,true,true': [0.726, 1, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.924, 1, 15], 'false,false,true,false': [0.931, 93, 1], 'false,false,false': [0.327, 23, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.254, 76, 37], 'false,true': [0.92, 1, 6], 'false,false,true': [0.478, 0, 19], 'false,false,false,true': [0.137, 30, 0], 'false,false,false,false': [0.108, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.652, 3, 50], 'true,false': [0.982, 98, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.499, 23, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.991, 1, 37], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 64, 6], 'false,false,false,true': [1.352, 28, 9], 'false,false,false,false': [1.528, 26, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.049, 0, 33], 'false,true,true,true': [0.576, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.115, 80, 0], 'false,false,true': [0.837, 1, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.175, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.427, 0, 39], 'true,true,false': [0.225, 0, 6], 'true,false,true': [0.038, 71, 0], 'true,false,false,true': [3.73e-09, 7, 0], 'true,false,false,false': [0.812, 9, 2], 'false,true': [1.063, 17, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.201, 21, 8]}]
{'': [0.23082840236686464, 0.2029191883232462], 'true': [1.105288700071267e-15, 0.022975778546712726], 'false': [0.19281663516068068, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, -3.2653618371328133e-18], 'true,false': [6.344131569286608e-17, 0.0826446280991736], 'false,true,true': [0.0, 0.0]}
{'': [0.042132675581683085, 0.11577478493741496], 'false': [0.05379725265651861, 0.16504257679580736], 'false,false': [0.11648609688596304, 0.18415473547534458], 'false,false,false': [0.0, 0.17769029919059898], 'false,false,true': [nan, 0.11648609688596304], 'false,true': [nan, 0.05379725265651861]}
{'': [0.0029516546212455808, 0.11401846574692853], 'false': [nan, 0.1140184657469288], 'false,false': [3.700743415417188e-17, 0.10634899305020093], 'false,false,false': [0.0745094875997238, 0.19358882369581995], 'true': [-1.1842378929335003e-16, 0.014698447233963666], 'true,false': [0.02185455368958167, 0.0], 'false,false,true': [0.0, 0.0], 'true,true': [-1.1842378929335003e-16, nan]}
{'': [0.03424512921849709, 0.0006710129421934972], 'false': [9.635170216044335e-05, 0.0010261740340766863], 'false,false': [nan, 0.0010261740340766863], 'false,false,false': [nan, 0.0010261740340766863], 'false,true': [nan, 9.635170216044335e-05], 'false,true,false': [5.6426273628335584e-05, 6.416569375405542e-05]}
{'': [0.05333537898106637, 0.08255461307951321], 'false': [0.07530133944297458, 0.08121777601550817], 'false,false': [0.07363713209771562, 0.10690444825287018], 'false,true': [0.07530133944297458, nan], 'false,false,true': [0.05339272187746624, 0.009219341411878681], 'true': [0.05333537898106637, nan]}
{'': [0.0449501519639268, 0.10282559538037725], 'false': [0.12101268527929003, 0.10067376938200444], 'false,false': [0.012034081221022347, 0.0006467464978159559], 'true': [nan, 0.04495015196392668], 'true,false': [nan, 0.0449501519639268], 'false,false,false': [0.0006288302146911747, 0.0006132435096761669]}
{'': [0.049461352107255746, 0.06813377121645965], 'false': [nan, 0.06813377121645962], 'false,false': [nan, 0.06813377121645965], 'false,false,false': [nan, 0.06813377121645965], 'true': [0.051510252732476385, 0.009641029581303888]}
{'': [0.025821904319939113, 0.039600100346452415], 'false': [nan, 0.03960010034645245], 'false,false': [0.019465577840939222, 0.05707221138825556], 'false,false,false': [0.04943603308303654, 0.06488786216695001], 'true': [0.025821904319939113, nan]}
{'': [0.0023881582369853225, 0.03769751767196575], 'false': [0.029511898958375166, 0.05083231747693174], 'false,false': [0.04665846982588387, 0.0007088492106086169], 'false,true': [0.02208601558792756, 0.00016452720806758858], 'false,true,true': [0.02208601558792756, nan], 'false,false,false': [nan, 0.0007088492106086169]}
{'': [0.021762838728166582, 0.04941674629269108], 'false': [0.04908336285230753, 0.04884912242246521], 'false,false': [0.0, 0.04977484008321554], 'false,false,false': [nan, 0.04977484008321554], 'true': [0.0053033085086427595, 0.008645300651160478], 'true,false': [2.078145931288295e-05, 0.040524862834828666], 'true,false,false': [1.982541115402065e-18, 0.0599653792187607], 'true,true': [0.0046684838217841374, 0.008463335203591835]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.879
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6837591264966688;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.040952833454456807;  // std dev = 0.253, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.0859511583779718;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.03559524313187339;  // std dev = 1.137, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.2194734122109544;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.10494117894914075;  // std dev = 2.822, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.48656713232284576;  // std dev = 0.269, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then return 0.7087298591502132;  // std dev = 0.204, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6731303773666394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5583000212600426;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6456657063249699;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12131119508199689;  // std dev = 0.117, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.029629068708972164;  // std dev = 2.241, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | | else return 0.20054344602326218;  // std dev = 1.638, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(F, A) )
%   | | then if ( tweets(D, G), follows(E, F) )
%   | | | then return 0.43782876898540063;  // std dev = 0.056, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.5244944007398508;  // std dev = 0.268, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1803490720483251;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.4238416216958498;  // std dev = 0.171, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5838868593409862;  // std dev = 0.238, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7076647433303701;  // std dev = 0.171, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10712706698727036;  // std dev = 0.079, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.11025694541648003;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.1523629047195652;  // std dev = 0.154, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(C, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.3321393728461104;  // std dev = 0.079, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.1847795225995148;  // std dev = 0.923, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(F, A), follows(C, D) )
%   | | | then return 0.31964455114607915;  // std dev = 0.132, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5438707321403339;  // std dev = 0.134, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(C, A) )
%   | | then return -0.09271048718911917;  // std dev = 0.022, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.12291215559725169;  // std dev = 0.008, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( tweets(A, G), follows(H, A) )
%   | then return 0.04738023365213943;  // std dev = 0.223, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then return 0.16947719548556245;  // std dev = 0.625, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.11255226035700053;  // std dev = 0.404, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2682269119473714;  // std dev = 0.018, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.09344848375489982;  // std dev = 0.789, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.0840581196799203;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.05598860153397316;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27056846198707224;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4195070182553678;  // std dev = 0.216, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5163461726046602;  // std dev = 0.249, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10999166635480889;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.14117990825107232;  // std dev = 0.228, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then return 0.23231635671208672;  // std dev = 0.042, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.08222324702635939;  // std dev = 0.008, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else if ( follows(A, F), tweets(A, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return -0.06988512547445712;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.29655402324298397;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09986520995007932;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(J, A), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.1279414446885489;  // std dev = 0.954, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09525514697953107;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.06889984273079262;  // std dev = 0.860, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return -4.779244759830512E-4;  // std dev = 1.203, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then return 0.18059643289589825;  // std dev = 0.008, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.034540106812373184;  // std dev = 1.013, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(C, G) )
%   | | then return -0.07151828829185385;  // std dev = 0.048, 78.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=1 */
%   | | else return -0.20846923814665386;  // std dev = 0.842, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.2542545479085175;  // std dev = 0.093, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08735640550853273;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04867935204415893;  // std dev = 0.333, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.04679284542635217;  // std dev = 0.611, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.013608501019862378;  // std dev = 1.339, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.159318351804755;  // std dev = 0.011, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.1370922254933179;  // std dev = 1.055, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.19613459547960987;  // std dev = 0.218, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.07705170137666847;  // std dev = 0.618, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.07740767777152754;  // std dev = 0.012, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2724214248000487;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4245707496424435;  // std dev = 0.197, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.09757019325931886;  // std dev = 0.056, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.1734439819201046;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1493483950992125;  // std dev = 0.035, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06012978860124919;  // std dev = 0.068, 78.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.04956915637524739;  // std dev = 0.328, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.01474679374256733;  // std dev = 0.420, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.06725500371791568;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03773448133991432;  // std dev = 0.441, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.4523467465379538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03799754042021177;  // std dev = 0.557, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.07815843224844508;  // std dev = 0.720, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '36.698', 'seconds']
Refined model CLL: -0.100339


******************************************
Best model found
******************************************
Results 

CLL : -0.095683 

AUC ROC : 0.9943 

AUC PR : 0.436146 

Precision : 0.346369 

Recall : 0.984127 

F1 : 0.512397 

Total Learning Time : 9.879 

Total Inference Time : 18.2908878326416 

Total revision time: 33.99153467750549
Best scored revision CLL: -0.100339


Results 

CLL : -0.095683 

AUC ROC : 0.9943 

AUC PR : 0.436146 

Precision : 0.346369 

Recall : 0.984127 

F1 : 0.512397 

Total Learning Time : 34.013766494750975 

Total Inference Time : 18.2908878326416 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.841
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8278459047964823;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.22400259363609773;  // std dev = 0.482, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6870871079219315;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029105776085539267;  // std dev = 0.270, 106.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.016787256474871507;  // std dev = 1.744, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7467642856445915;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1713316899325623;  // std dev = 3.635, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5362778996538555;  // std dev = 1.305, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7198840985441923;  // std dev = 0.211, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.37813262926008684;  // std dev = 0.936, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5707880231231711;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5707880231231711;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.023743177436843853;  // std dev = 3.555, 159.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=20 */
%   | | | else return 0.11214722681208422;  // std dev = 3.247, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5557067969739177;  // std dev = 1.711, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12216423330608185;  // std dev = 0.055, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.13687392293685935;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17970334587887815;  // std dev = 0.260, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30549043187366104;  // std dev = 1.096, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return -0.5261277555209783;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3012341511465255;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.625125640246566;  // std dev = 0.219, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.10320455381705766;  // std dev = 1.397, 161.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=3 */
%   | | else return 0.005160741717352041;  // std dev = 0.297, 48.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025339094970130448;  // std dev = 2.453, 164.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23883246487771448;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45563962248422907;  // std dev = 1.671, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1324993873307503;  // std dev = 0.201, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.13789305856239947;  // std dev = 0.189, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2730932299225056;  // std dev = 1.478, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else return -0.0898126612557122;  // std dev = 1.366, 144.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021214763379421322;  // std dev = 1.781, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19363246702500678;  // std dev = 0.073, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.053062580106263954;  // std dev = 0.147, 126.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=12 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.010828415473261289;  // std dev = 1.634, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.05787477410637765;  // std dev = 1.873, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1595427802550896;  // std dev = 0.154, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2352514487207781;  // std dev = 1.606, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09194979881235107;  // std dev = 0.078, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.385278759190381;  // std dev = 0.541, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12639165302605182;  // std dev = 0.254, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1863466385370793;  // std dev = 0.597, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.19555949198620237;  // std dev = 0.347, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08616099976167084;  // std dev = 0.335, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09431226297997501;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.0036048544479143677;  // std dev = 0.895, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0105079955135613;  // std dev = 0.958, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.204850916718879;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010610194153726755;  // std dev = 1.509, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.086', 'seconds']
Parameter learned model CLL:-0.113034 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [7.88e-08, 85, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.482, 26, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.387, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 94, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.744, 28, 4], 'false,false,false,true': [0.095, 0, 4], 'false,false,false,false': [3.635, 45, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.305, 2, 42], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.211, 0, 2], 'true,false,false': [0.936, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.555, 139, 20], 'false,false,false,false': [3.247, 39, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.711, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.055, 108, 0], 'false,true,false,false': [0.021, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.26, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.096, 1, 48], 'true,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.219, 0, 24], 'false,false,true,false': [1.397, 158, 3], 'false,false,false': [0.297, 39, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.453, 111, 53], 'false,true': [0.025, 0, 9], 'false,false,true': [1.671, 2, 31], 'false,false,false,true': [0.201, 48, 0], 'false,false,false,false': [0.189, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.478, 2, 74], 'true,false': [1.366, 140, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.781, 38, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.073, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 114, 12], 'false,false,false,true': [1.634, 47, 15], 'false,false,false,false': [1.873, 28, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.154, 1, 48], 'false,true,true,true': [1.606, 2, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 112, 0], 'false,false,true': [0.541, 0, 23], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.254, 56, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.597, 0, 55], 'true,true,false': [0.347, 0, 9], 'true,false,true': [0.335, 90, 0], 'true,false,false,true': [0.037, 20, 0], 'true,false,false,false': [0.895, 13, 2], 'false,true': [0.958, 27, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.509, 29, 14]}]
{'': [0.23167790970971586, 0.2167474048442919], 'true': [0.02938475665748315, 0.017088846880907286], 'false': [0.19834710743801603, 0.23200475907198043], 'false,true': [-1.4802973661668753e-16, 2.7755575615628914e-17], 'true,false': [7.314410515177502e-17, 0.062222222222222255], 'false,true,true': [-2.9605947323337506e-16, 1.4802973661668753e-16]}
{'': [0.03698224852070918, 0.13200422256091326], 'false': [0.07270254859813205, 0.17875630173957374], 'false,false': [0.09507083951150064, 0.20104569460618535], 'false,false,false': [0.002234375318312387, 0.19434477408215675], 'false,false,true': [nan, 0.09507083951150064], 'false,true': [nan, 0.07270254859813205]}
{'': [0.05517112538080697, 0.1194735958420339], 'false': [nan, 0.11947359584203396], 'false,false': [0.0, 0.11185948295449068], 'false,false,false': [0.07949530104491274, 0.19170117517661758], 'true': [0.03872409430718937, 0.1553943927081915], 'true,false': [0.02222963970595071, 0.17529056054970343], 'true,true': [0.03872409430718937, nan], 'false,false,true': [3.700743415417188e-17, -3.700743415417188e-17]}
{'': [0.03114381840717676, 0.000995417909204956], 'false': [6.060950029654507e-05, 0.0013272144108063947], 'false,false': [nan, 0.0013272144108063947], 'false,false,false': [nan, 0.0013272144108063947], 'false,true': [nan, 6.0609500296551605e-05], 'false,true,false': [2.7849927592720286e-05, 1.5140670862723304e-05]}
{'': [0.0375972208922658, 0.07497403927388928], 'false': [0.0, 0.07436277129481332], 'false,false': [0.07069944860087532, 0.08832887884421976], 'false,false,true': [0.0019953295496049073, 0.012123991987954158], 'true': [0.024532734922446033, 0.0], 'false,true': [0.0, nan]}
{'': [0.036696375090692505, 0.08982686382160075], 'false': [7.197542445189529e-05, 0.09344215219593294], 'false,false': [0.08462165618272123, 0.0008795704434146556], 'true': [nan, 0.03669637509069228], 'true,false': [nan, 0.036696375090692505], 'false,false,false': [0.0008390474037584666, 0.0009133943665303279]}
{'': [0.04819292208024378, 0.05982756586529192], 'false': [nan, 0.059827565865291865], 'false,false': [nan, 0.05982756586529192], 'false,false,false': [nan, 0.05982756586529192], 'true': [0.028758208921759554, 0.01295353123577224]}
{'': [0.0001062483809643755, 0.040321766860097794], 'false': [nan, 0.04032176686009794], 'false,false': [0.021586068878625547, 0.05881313121822825], 'false,false,false': [0.04304154376601638, 0.07974212500813432], 'true': [0.0001062483809643755, nan]}
{'': [0.02384103434756729, 0.044125723400180256], 'false': [0.03455751946253016, 0.058557927296597805], 'false,false': [0.0127361344729658, 0.001155414396583801], 'false,true': [0.10740218800813894, 5.489062181595081e-05], 'false,true,true': [0.10740218800813894, nan], 'false,false,false': [nan, 0.001155414396583801]}
{'': [0.023611126547536512, 0.03894969139651554], 'false': [0.02355505082161802, 0.05258535492594445], 'false,false': [0.0, 0.05295078246808415], 'false,false,false': [nan, 0.05295078246808416], 'true': [0.007461012733338344, 0.008064064286883511], 'true,false': [0.0012449737533567163, 0.024919243489617653], 'true,false,false': [6.692034359868232e-05, 0.05335405494377509], 'true,true': [0.006480260452227633, 0.013381558008539185]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.981
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8133728156965276;  // std dev = 0.207, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else return -0.12597804902747178;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.7284212135824789;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.4784212135824791;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7284212135824789;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.04272392524934303;  // std dev = 0.260, 108.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=11 */
%   | | else return -0.07966210506969958;  // std dev = 0.196, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.15851786778269325;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.06818830541338063;  // std dev = 1.168, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7342736123238718;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13414573790293138;  // std dev = 3.535, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.5641952286417709;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.4617666996701816;  // std dev = 0.898, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.775907228824769;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2649049917332178;  // std dev = 1.063, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5708830719094481;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7471184524384848;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12249581924666617;  // std dev = 0.058, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.08172241580398291;  // std dev = 1.797, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.19006121899129774;  // std dev = 2.868, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.431057267163509;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.6184808334629678;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3474621389707927;  // std dev = 0.702, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5844345333130679;  // std dev = 0.157, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6916051868719453;  // std dev = 0.260, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11162239622990444;  // std dev = 0.067, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.10666602570097113;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.17255002476513173;  // std dev = 0.196, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.32853613544038535;  // std dev = 0.091, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.07640747756657511;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4450896452127129;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.35177363178477256;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3285020984240459;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.46919280002784186;  // std dev = 0.202, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.10010835147165373;  // std dev = 1.262, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.07207279388578362;  // std dev = 0.516, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.09043413203314248;  // std dev = 1.674, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.2229107139284313;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.27543000647918503;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3238204457800923;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05922749181129815;  // std dev = 0.135, 106.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=10 */
%   | | else return -0.06077332758008116;  // std dev = 0.103, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2659824485600486;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17747532563951154;  // std dev = 0.950, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4617078206507064;  // std dev = 0.538, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.12707419704615894;  // std dev = 0.035, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2178858460603503;  // std dev = 0.011, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(E, A) )
%   | | then return 0.35765230824426825;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27849560068686974;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.2420494430060167;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20780310986844097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08694301770322967;  // std dev = 0.718, 86.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=1 */
%   | | | else return -0.006361041756920667;  // std dev = 1.361, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02945300772210799;  // std dev = 1.132, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.06435237767396798;  // std dev = 1.523, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1832214259691005;  // std dev = 0.012, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, D), follows(D, E) )
%   | | | then return -0.0704345276670864;  // std dev = 0.423, 48.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=1 */
%   | | | else return -0.07772248850708374;  // std dev = 0.023, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.270225432474336;  // std dev = 0.997, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.0875952276224669;  // std dev = 0.038, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2073751983634505;  // std dev = 1.029, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.11612793602962472;  // std dev = 0.041, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0018909031201208978;  // std dev = 0.854, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.10363513865955425;  // std dev = 1.193, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15454654569487755;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.07249503288268537;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.16420275711115234;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.20845353388856644;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23840973367963747;  // std dev = 0.079, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07538831508516193;  // std dev = 0.005, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23395406912980277;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.43126225398925305;  // std dev = 0.209, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1216340759303022;  // std dev = 0.035, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14195741057969685;  // std dev = 0.129, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.06444573590139784;  // std dev = 0.050, 128.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.08427648323906262;  // std dev = 0.978, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.08834399617257277;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.045808881567213265;  // std dev = 0.353, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09984382162748151;  // std dev = 0.416, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15165502656896734;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02608232029389557;  // std dev = 0.724, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.03218998645053157;  // std dev = 0.993, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.667', 'seconds']
Refined model CLL: -0.104693


******************************************
Best model found
******************************************
Results 

CLL : -0.103026 

AUC ROC : 0.993539 

AUC PR : 0.390525 

Precision : 0.336022 

Recall : 0.992063 

F1 : 0.502008 

Total Learning Time : 6.981 

Total Inference Time : 6.706947088241577 

Total revision time: 22.160917970657348
Best scored revision CLL: -0.104693


Results 

CLL : -0.103026 

AUC ROC : 0.993539 

AUC PR : 0.390525 

Precision : 0.336022 

Recall : 0.992063 

F1 : 0.502008 

Total Learning Time : 22.18314978790283 

Total Inference Time : 6.706947088241577 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.173
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8110901115701004;  // std dev = 1.952, 85.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.06341969235146812;  // std dev = 0.269, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.16460054800273813;  // std dev = 0.461, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7180314315036262;  // std dev = 1.015, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04041728930230683;  // std dev = 0.258, 149.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05977785635079262;  // std dev = 1.792, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6321382797742614;  // std dev = 0.972, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.12170443047021691;  // std dev = 4.460, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5770860645753977;  // std dev = 0.285, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5177413159620449;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5006611825621979;  // std dev = 0.988, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5992017194673557;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5673085521364253;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007086568975833493;  // std dev = 4.189, 196.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=28 */
%   | | | else return 0.09727820497982809;  // std dev = 3.634, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5415176207475406;  // std dev = 2.489, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12172165425099947;  // std dev = 0.040, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return -0.13239244277691598;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16994676054807362;  // std dev = 0.227, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.311294527386728;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else return -0.07076488317625224;  // std dev = 0.838, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2995815580125338;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5011672280378877;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5771517135009312;  // std dev = 1.390, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return -0.10033847572336901;  // std dev = 1.788, 207.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=5 */
%   | | else return 0.049650685535986935;  // std dev = 0.336, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01613405998148535;  // std dev = 2.803, 214.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=65 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26875713144141294;  // std dev = 0.309, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49418910013326234;  // std dev = 1.442, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12514506941483697;  // std dev = 0.172, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.1398252458983415;  // std dev = 0.217, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2728581556823037;  // std dev = 1.913, 101.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=98 */
%   | else return -0.08400598835638125;  // std dev = 1.694, 194.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.003348656177307109;  // std dev = 1.984, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17531604368153342;  // std dev = 0.897, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.3332514388187094;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03865354669771988;  // std dev = 0.154, 132.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.00938147230889579;  // std dev = 1.910, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
%   | | | else return 0.034173156629531895;  // std dev = 2.269, 69.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15116674982914224;  // std dev = 0.185, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3048989873992023;  // std dev = 0.836, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09272375243665816;  // std dev = 0.073, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4020416130829123;  // std dev = 0.681, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11433002670971541;  // std dev = 0.214, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18542680386546187;  // std dev = 0.671, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.17052136160006576;  // std dev = 0.353, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08385893280390935;  // std dev = 0.034, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0974886595655724;  // std dev = 0.022, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.06334926361108388;  // std dev = 0.919, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.023284444031841645;  // std dev = 1.169, 57.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2137278805603977;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02415910780538289;  // std dev = 1.772, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.239', 'seconds']
Parameter learned model CLL:-0.112888 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.952, 4, 81], 'true,false,true': [0.0, 128, 0], 'true,false,false': [0.269, 47, 4], 'false,true,true,true': [0.972, 1, 17], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.47e-08, 42, 0], 'false,false': [0.461, 43, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 134, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.792, 46, 4], 'false,false,false,true': [0.972, 1, 7], 'false,false,false,false': [4.46, 80, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.285, 0, 52], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.776, 1, 3], 'true,false,false': [0.988, 1, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.175, 0, 6], 'false,false,true,false': [3.65e-08, 0, 9], 'false,false,false,true': [4.189, 168, 28], 'false,false,false,false': [3.634, 53, 19]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.489, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 139, 0], 'false,true,false,false': [0.009, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.227, 65, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.992, 1, 61], 'true,false': [0.838, 1, 1], 'false,true,true': [0.012, 0, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.39, 2, 32], 'false,false,true,false': [1.788, 202, 5], 'false,false,false': [0.336, 32, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.803, 149, 65], 'false,true': [0.309, 0, 16], 'false,false,true': [1.442, 2, 43], 'false,false,false,true': [0.172, 61, 0], 'false,false,false,false': [0.217, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.913, 3, 98], 'true,false': [1.694, 187, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.984, 54, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.897, 1, 64], 'true,false,true': [0.101, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 117, 15], 'false,false,false,true': [1.91, 68, 23], 'false,false,false,false': [2.269, 49, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.185, 2, 62], 'false,true,true,true': [0.836, 0, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.073, 171, 0], 'false,false,true': [0.681, 0, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.214, 71, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.671, 0, 68], 'true,true,false': [0.353, 0, 13], 'true,false,true': [0.034, 128, 0], 'true,false,false,true': [0.022, 28, 0], 'true,false,false,false': [0.919, 9, 4], 'false,true': [1.169, 37, 20], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.772, 38, 17]}]
{'': [0.2183052112029392, 0.21465600000000135], 'true': [0.04484429065743912, 0.021847008520333226], 'false': [0.2166792642983115, 0.21253902185223675], 'false,true': [0.04535147392290242, 4.7580986769649563e-17], 'false,true,true': [0.05246913580246885, 1.4802973661668753e-16], 'true,false': [-2.7755575615628914e-17, 0.07227989234909635]}
{'': [0.015366661001792393, 0.12202605900633752], 'false': [0.06638841290141981, 0.1625577317586578], 'false,false': [0.06424872771810962, 0.18985949863373214], 'false,false,false': [0.11814354168507119, 0.17761255268618475], 'false,true': [nan, 0.06638841290141981], 'false,false,true': [nan, 0.06424872771810962]}
{'': [0.0267050717442614, 0.12649828637339638], 'false': [nan, 0.12649828637339447], 'false,false': [0.0022784700341732743, 0.11688152939810154], 'false,false,false': [0.08951991525246646, 0.18340012799707198], 'true': [0.0015614625750731265, 0.13159581810569174], 'true,false': [0.15067389849899704, 0.12195953425672018], 'false,false,true': [0.0050858706119936885, 1.4802973661668753e-16], 'true,true': [0.0015614625750731265, nan]}
{'': [0.048765662505485675, 0.0006872228355680514], 'false': [2.4458268391630533e-05, 0.0007931609537690368], 'false,false': [nan, 0.0007931609537690368], 'false,false,false': [nan, 0.0007931609537690368], 'false,true': [nan, 2.4458268391630533e-05], 'false,true,false': [1.1286299170763343e-05, 3.6457016258882127e-06]}
{'': [0.03076692552570813, 0.08316235454435913], 'false': [0.002538072223287369, 0.08260769186234215], 'false,false': [0.07689939850885481, 0.11284136851746396], 'false,false,true': [0.05683522390230406, 0.015440770387560669], 'true': [0.01588172688751716, 0.35080023364738777], 'false,true': [1.0244272407937999e-05, 0.0]}
{'': [0.03671427366717119, 0.08693429041754304], 'false': [0.005975126856789886, 0.08990659366177817], 'false,false': [0.04621310350524048, 0.0006789571161947601], 'true': [nan, 0.036714273667171324], 'true,false': [nan, 0.03671427366717119], 'false,false,false': [0.0004853317612596751, 0.0007625817378202571]}
{'': [0.050803757902842105, 0.053896126571639655], 'false': [nan, 0.05389612657163965], 'false,false': [nan, 0.053896126571639655], 'false,false,false': [nan, 0.053896126571639655], 'true': [0.036216096256462375, 0.014796488145173498]}
{'': [0.01287646463222793, 0.04184873248467304], 'false': [nan, 0.04184873248467309], 'false,false': [0.023855049010177327, 0.055134477525358036], 'false,false,false': [0.040083978546314576, 0.07463411686979243], 'true': [0.012369732953979246, 0.005146239885551476], 'true,false': [0.005146239885551476, nan]}
{'': [0.034323918389257635, 0.038027009902982134], 'false': [0.023575482478184848, 0.06205250294375737], 'false,false': [0.014494495074917013, 0.0006475887946401598], 'false,true': [0.02327137026807735, 3.1246955027854114e-05], 'false,true,true': [0.02327137026807735, nan], 'false,false,false': [nan, 0.0006475887946401598]}
{'': [0.021343125081552644, 0.040149846721243464], 'false': [0.023966822474516362, 0.056304549127311664], 'false,false': [0.0, 0.05709106378252414], 'false,false,false': [nan, 0.05709106378252407], 'true': [0.007121628629344399, 0.006621359119937022], 'true,true': [0.006618782146553687, 0.00956538759833104], 'true,false': [8.777967034336899e-06, 0.026207930231583073], 'true,false,false': [1.714426563317289e-05, 0.064952330658117]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.369
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12057446915580736;  // std dev = 0.144, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.17064893509951234;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724101565803291;  // std dev = 0.213, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7449282569688075;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1193248099273983;  // std dev = 0.843, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return 0.05424069452909507;  // std dev = 2.854, 66.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10758384167465389;  // std dev = 2.823, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.17451205031517428;  // std dev = 3.039, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5309674808493859;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.4292232948028748;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.36594636028432437;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6102564368056298;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5684681910450393;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6600638850139788;  // std dev = 0.960, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12204249791656419;  // std dev = 0.115, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.07545750250438102;  // std dev = 2.496, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | | | else return 0.16226959097171464;  // std dev = 3.223, 56.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3994058274556571;  // std dev = 0.997, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.12127344583970383;  // std dev = 1.104, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.40986796237951756;  // std dev = 0.940, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5366012503136998;  // std dev = 0.347, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.3981130495027798;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5384101972505532;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.663387713165953;  // std dev = 0.078, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7507995883517564;  // std dev = 0.149, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12945093869795823;  // std dev = 0.031, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then return 0.33377166777872863;  // std dev = 0.132, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.46498085922299826;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1946759720430481;  // std dev = 0.336, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31247103712272534;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.49115517254457974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.45284170317441247;  // std dev = 0.292, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09904924837606043;  // std dev = 0.104, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.038550436997052975;  // std dev = 1.941, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.0534536831801927;  // std dev = 2.669, 65.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2313464400900292;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2771793575026411;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2846086462846768;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04227309625962843;  // std dev = 0.144, 100.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=12 */
%   | | else return -0.07648347382313991;  // std dev = 0.072, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.2804138894750737;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1542836179213139;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.47358729078689404;  // std dev = 0.108, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13406365429270217;  // std dev = 0.037, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.18936341582220317;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.016279091831496922;  // std dev = 0.899, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20906964110915427;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22641268019947938;  // std dev = 0.032, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(G, A) )
%   | then return -0.05174349107812303;  // std dev = 0.130, 208.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3449294789747984;  // std dev = 0.494, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.1311973146872109;  // std dev = 0.095, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.006586715449060925;  // std dev = 0.827, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.03225260822418083;  // std dev = 1.271, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.16683125759397865;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.2103289454452318;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), follows(C, F) )
%   | | then return 0.18268398451770965;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1514039566985493;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04648144196084637;  // std dev = 0.125, 215.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27383545258341746;  // std dev = 0.426, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.1190015200840762;  // std dev = 0.129, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07296166608640692;  // std dev = 0.746, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.013851375071419881;  // std dev = 1.282, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.12225351527123003;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.1673912001039478;  // std dev = 0.122, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.2824619569038555;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.11585816833084771;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1655198717045114;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.356688675838446;  // std dev = 0.275, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07704756324754886;  // std dev = 0.083, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.30582741130509494;  // std dev = 0.095, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.11991543765306772;  // std dev = 0.031, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17003385697371673;  // std dev = 0.058, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0663016231941293;  // std dev = 0.058, 172.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.16842921268723218;  // std dev = 0.195, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10122165615569559;  // std dev = 0.862, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.053270496798330014;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.009394643887078669;  // std dev = 0.655, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.11964017591735487;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026000420532141022;  // std dev = 1.074, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0.02614516795636864;  // std dev = 1.175, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.145', 'seconds']
Refined model CLL: -0.103316


******************************************
Best model found
******************************************
Results 

CLL : -0.101894 

AUC ROC : 0.992646 

AUC PR : 0.326733 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 17.369 

Total Inference Time : 9.671358823776245 

Total revision time: 37.76491374206543
Best scored revision CLL: -0.103316


Results 

CLL : -0.101894 

AUC ROC : 0.992646 

AUC PR : 0.326733 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 37.787145559310915 

Total Inference Time : 9.671358823776245 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.829
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.07518439823382105;  // std dev = 0.249, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.16481560176617832;  // std dev = 0.461, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149818119923891;  // std dev = 1.018, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.046783677015412126;  // std dev = 0.246, 205.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03775279261298213;  // std dev = 1.764, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.755636204211406;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12659773604789668;  // std dev = 4.961, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5305130079810862;  // std dev = 1.755, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7312817629212224;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4796750047375257;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5945007526330012;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5611269983856005;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021668468979520933;  // std dev = 4.626, 271.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=34 */
%   | | | else return 0.09004660522506981;  // std dev = 4.010, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5065012290143254;  // std dev = 3.461, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12097694126577113;  // std dev = 0.082, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | | else return -0.13189291179827048;  // std dev = 0.021, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16588458196472616;  // std dev = 0.297, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.258972518432062;  // std dev = 2.462, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   | else return 0.480614620531157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3036041955393288;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5147958301411436;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6418145988994842;  // std dev = 0.311, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10254738441416489;  // std dev = 1.814, 264.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=5 */
%   | | else return -0.006891480066049914;  // std dev = 0.293, 81.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030137950133339055;  // std dev = 3.231, 249.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2547687605679526;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4763908838740341;  // std dev = 1.947, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1228202138046445;  // std dev = 0.213, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return -0.13103367782676223;  // std dev = 0.199, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29021424175957533;  // std dev = 1.776, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08954586198821851;  // std dev = 1.720, 287.000 (wgt'ed) examples reached here.  /* #neg=280 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024493667960055192;  // std dev = 2.470, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1870805960614239;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2589863256782604;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05514878448385479;  // std dev = 0.147, 209.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008197692164125983;  // std dev = 2.248, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | | else return 0.05401962236174173;  // std dev = 2.575, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15430518487887326;  // std dev = 0.190, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26597067679455577;  // std dev = 1.182, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09087156606915367;  // std dev = 0.098, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4031936738124774;  // std dev = 0.817, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11338368051129478;  // std dev = 0.255, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16053389339964397;  // std dev = 1.751, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.1637836921962088;  // std dev = 0.385, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08454845510274468;  // std dev = 0.364, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0938010053151115;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.025284266326551248;  // std dev = 0.983, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.024871930312031016;  // std dev = 1.322, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.13727307295427363;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004785045937054152;  // std dev = 2.175, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.066', 'seconds']
Parameter learned model CLL:-0.109876 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 174, 0], 'true,false,false': [0.249, 56, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 50, 0], 'false,false': [0.461, 52, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.018, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 186, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.764, 35, 4], 'false,false,false,true': [0.133, 0, 8], 'false,false,false,false': [4.961, 97, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.755, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.995, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.626, 237, 34], 'false,false,false,false': [4.01, 68, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.461, 9, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.082, 201, 0], 'false,true,false,false': [0.021, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.297, 107, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.462, 6, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.311, 0, 39], 'false,false,true,false': [1.814, 259, 5], 'false,false,false': [0.293, 68, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.231, 167, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.947, 3, 52], 'false,false,false,true': [0.213, 94, 0], 'false,false,false,false': [0.199, 66, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.776, 2, 121], 'true,false': [1.72, 280, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.47, 61, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 190, 19], 'false,false,false,true': [2.248, 98, 28], 'false,false,false,false': [2.575, 49, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.19, 3, 78], 'false,true,true,true': [1.182, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.098, 226, 0], 'false,false,true': [0.817, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.255, 87, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.751, 3, 85], 'true,true,false': [0.385, 0, 19], 'true,false,true': [0.364, 142, 0], 'true,false,false,true': [7.45e-09, 22, 0], 'true,false,false,false': [0.983, 28, 4], 'false,true': [1.322, 46, 25], 'false,false,true': [0.844, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.175, 57, 21]}]
{'': [0.21674740484429272, 0.21683259506162092], 'false': [0.22074099722991802, 0.2126222222222232], 'false,true': [0.03698224852071082, 5.773159728050814e-17], 'true': [0.01851192595229848, 0.01680181167360644], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.8376105235175005e-16, 0.062222222222222096]}
{'': [0.012040119224095954, 0.12091144106760855], 'false': [0.0605728272159585, 0.17363296249477803], 'false,false': [0.0798154106949858, 0.19046822549117406], 'false,false,false': [0.0022001096154817823, 0.17963084507944868], 'false,false,true': [nan, 0.0798154106949858], 'false,true': [nan, 0.0605728272159585]}
{'': [0.05200495383075169, 0.11668260916710796], 'false': [nan, 0.11668260916710829], 'false,false': [0.0018184611796994367, 0.10588937729761175], 'false,false,false': [0.07896790597813734, 0.17671915513944], 'true': [0.044018453396351784, 0.09846863794722278], 'true,false': [0.016492227582293257, 0.10996761787793874], 'true,true': [0.044018453396351784, nan], 'false,false,true': [0.005569037362829432, -2.3684757858670006e-16]}
{'': [0.07258853537772998, 0.000685192617913531], 'false': [4.5872618904049616e-05, 0.000825766188310279], 'false,false': [nan, 0.000825766188310279], 'false,false,false': [nan, 0.000825766188310279], 'false,true': [nan, 4.587261890405333e-05], 'false,true,false': [3.3389722223606544e-05, 1.1687848774953821e-05]}
{'': [0.07272834952854301, 0.07716216840534999], 'false': [0.002031594337003009, 0.07594690822458185], 'false,false': [0.07331531977402271, 0.08579097986787831], 'false,false,true': [0.0024835716385318563, 0.012462547197750959], 'true': [0.07301977063902729, 0.0], 'false,true': [9.273743101423371e-06, 0.0]}
{'': [0.041912667191024114, 0.0835494663247211], 'false': [0.001507571668718248, 0.08716859280250487], 'false,false': [0.0689268360972653, 0.0005465661481235451], 'true': [nan, 0.04191266719102455], 'true,false': [nan, 0.041912667191024114], 'false,false,false': [0.00048190267190304127, 0.0005990292819008092]}
{'': [0.04519460868738672, 0.06853891511421298], 'false': [nan, 0.0685389151142128], 'false,false': [nan, 0.06853891511421298], 'false,false,false': [nan, 0.06853891511421298], 'true': [0.025639434820975176, 0.010310076567717147]}
{'': [0.011648296469110454, 0.04131471600300873], 'false': [nan, 0.041314716003008574], 'false,false': [0.02153175409364424, 0.05959789132566995], 'false,false,false': [0.04009933492550012, 0.09080195261015102], 'true': [0.011803088172290472, 9.685363385932011e-05], 'true,false': [9.685363385932011e-05, nan]}
{'': [0.03622050197224181, 0.036598964503699295], 'false': [0.02129158007528423, 0.06334330074864164], 'false,false': [0.01668109272667979, 0.0007492641399938631], 'false,true': [0.03582902078819602, 4.283473306247793e-05], 'false,true,true': [0.03582902078819602, nan], 'false,false,false': [nan, 0.0007492641399938631]}
{'': [0.027398964971982655, 0.04795975750835331], 'false': [0.02462980763340158, 0.0678514318989572], 'false,false': [0.2376305352172301, 0.06067135241253393], 'false,false,false': [nan, 0.06067135241253389], 'true': [0.030043213919864507, 0.006116450476880634], 'true,true': [0.03484381342144123, 0.007800172493285293], 'true,false': [0.0009342151866944881, 0.019031766807340596], 'true,false,false': [2.523234146875356e-18, 0.03020351468228013]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 33.556
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.733148935099512;  // std dev = 0.331, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | else return -0.12307172217748359;  // std dev = 0.136, 213.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17393840878372288;  // std dev = 2.865, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.2867203636709409;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7062448774904814;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7355617594655317;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7439976143448207;  // std dev = 8.43e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1275194207839607;  // std dev = 1.26e-07, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else return -0.09846885294633487;  // std dev = 0.156, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.002519420783960929;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.07129251529178143;  // std dev = 1.192, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7350122940520396;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.113529548973322;  // std dev = 5.012, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.5329923375963082;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5615637661677365;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.565957989002839;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.6151137110146627;  // std dev = 0.103, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5647708861206675;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6288229086451675;  // std dev = 0.376, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11649327696800649;  // std dev = 0.068, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06981838446891002;  // std dev = 3.974, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.13430203696523227;  // std dev = 3.040, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.41049759769416827;  // std dev = 0.989, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.45397167461730586;  // std dev = 0.322, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.6623654651032127;  // std dev = 0.304, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.4336101278208887;  // std dev = 0.222, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14794002858624303;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6891772116755519;  // std dev = 0.111, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7964836715997937;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.10510287789794791;  // std dev = 0.004, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.17633050922559612;  // std dev = 0.276, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3097779401732644;  // std dev = 0.988, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.26319688527250407;  // std dev = 0.961, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.3581953239314379;  // std dev = 0.095, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5346409455088348;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3249210715993029;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49390592428919344;  // std dev = 0.850, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09567195172536386;  // std dev = 1.573, 259.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=5 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.07792103214515919;  // std dev = 0.602, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return 0.06610218228933579;  // std dev = 2.241, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2650801608403344;  // std dev = 0.031, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.19996284283191107;  // std dev = 0.256, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.0539384520274053;  // std dev = 0.097, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(A, H) )
%   | | then return 0.3033951413789588;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18170000342117976;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.23825939621591377;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.3849378905457085;  // std dev = 1.087, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.5475603014483963;  // std dev = 0.332, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.12595829040040374;  // std dev = 0.031, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.2202801871480163;  // std dev = 0.084, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.2509902139978282;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.17340418885901743;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.45492600350409684;  // std dev = 0.167, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08227364667939331;  // std dev = 0.030, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( tweets(K, I), recursion_accounttype(K, B) )
%   | | | then return 0.28015080719037944;  // std dev = 0.357, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10400207432494624;  // std dev = 0.009, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.11268885638516539;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07101802875478838;  // std dev = 2.399, 52.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.1639649223427058;  // std dev = 0.991, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.17930044124047456;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18351421728164752;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.27928897632673844;  // std dev = 0.000640, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04897514471680727;  // std dev = 0.090, 255.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2777445517147831;  // std dev = 0.526, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12723054875035966;  // std dev = 0.674, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04850431066063749;  // std dev = 1.097, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.04227428340342931;  // std dev = 1.550, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16170690248136751;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.22189047022776043;  // std dev = 0.170, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0147141814676108;  // std dev = 0.776, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.11199185450702236;  // std dev = 0.729, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.1715550155348075;  // std dev = 0.171, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07336972438899332;  // std dev = 0.035, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2241226751487097;  // std dev = 0.967, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.4288861763095014;  // std dev = 0.130, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12836270253672113;  // std dev = 0.043, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.13836427211839783;  // std dev = 0.110, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | | else return 0.06376472790128444;  // std dev = 0.273, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.0640439128122785;  // std dev = 0.058, 234.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then return -0.008763463122166375;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.2036539784314273;  // std dev = 0.759, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.22008975579452741;  // std dev = 0.265, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.09538696357201984;  // std dev = 0.184, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0010887863185650585;  // std dev = 0.756, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.005324895878442195;  // std dev = 1.458, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.432', 'seconds']
Refined model CLL: -0.102429


******************************************
Best model found
******************************************
Results 

CLL : -0.101658 

AUC ROC : 0.993623 

AUC PR : 0.399653 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 33.556 

Total Inference Time : 18.26757550239563 

Total revision time: 64.11821628570556
Best scored revision CLL: -0.102429


Results 

CLL : -0.101658 

AUC ROC : 0.993623 

AUC PR : 0.399653 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 64.14044810295104 

Total Inference Time : 18.26757550239563 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.16
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.19148226843284552;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6606498827991896;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.014271210799530084;  // std dev = 0.286, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09741701714401554;  // std dev = 1.573, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5815717669216748;  // std dev = 0.147, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.569840685100387;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.569840685100387;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.03963652541751255;  // std dev = 1.777, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   | | | else return 0.16075601861526398;  // std dev = 1.332, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5005514692317375;  // std dev = 1.077, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1178571721832061;  // std dev = 0.030, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.13915457298009976;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17625722172661962;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3220370134466023;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31234240975950056;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6220694909134612;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08174518736808783;  // std dev = 1.064, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020008094801844654;  // std dev = 1.478, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24945269507344547;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5822448376397261;  // std dev = 0.200, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1145248670375055;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10851777087541478;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3027044466361465;  // std dev = 0.395, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07310440067232418;  // std dev = 0.880, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03764578275193734;  // std dev = 0.385, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1336216149184783;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.038082583099595065;  // std dev = 0.155, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.021964720555967574;  // std dev = 0.619, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.0800394519307046;  // std dev = 0.707, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18271975122454284;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.19563876761167356;  // std dev = 0.794, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09534343772534021;  // std dev = 0.044, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41308514730905244;  // std dev = 0.266, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11527890713975437;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14237177816006027;  // std dev = 1.083, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.15214285540843397;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08717839704168916;  // std dev = 0.036, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08218903518847287;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0803625463099556;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.043248016696001944;  // std dev = 0.448, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11128269133630474;  // std dev = 0.529, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.390', 'seconds']
Parameter learned model CLL:-0.112895 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [4.08e-08, 39, 0], 'true,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.471, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.97, 1, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.286, 33, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.573, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.147, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [1.777, 44, 5], 'false,false,false,false': [1.332, 6, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.077, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 37, 0], 'false,true,false,false': [0.016, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.152, 0, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.096, 0, 6], 'false,false,true,false': [1.064, 44, 2], 'false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.478, 41, 18], 'false,true': [0.0, 0, 3], 'false,false,true': [0.2, 0, 4], 'false,false,false,true': [0.06, 5, 0], 'false,false,false,false': [0.063, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.395, 0, 20], 'true,false': [0.88, 39, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.385, 4, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.972, 1, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 34, 5], 'false,false,false,true': [0.619, 12, 2], 'false,false,false,false': [0.707, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.041, 0, 13], 'false,true,true,true': [0.794, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 45, 0], 'false,false,true': [0.266, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.086, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.083, 1, 18], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.036, 40, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.015, 3, 0], 'false,true': [0.448, 4, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.529, 2, 2]}]
{'': [0.22574576726686382, 0.22222222222222207], 'true': [0.0, 4.163336342344337e-17], 'false': [0.22222222222222224, 0.22222222222222224], 'false,true': [0.0, 0.0], 'true,false': [4.2700885562506023e-17, 0.0], 'false,true,true': [0.0, nan]}
{'': [0.05536332179930818, 0.09844562686986637], 'false': [0.08157290481769683, 0.12676355842887818], 'false,false': [0.0, 0.15455161863574868], 'false,false,false': [nan, 0.15455161863574868], 'false,true': [nan, 0.08157290481769683], 'false,false,true': [nan, 0.0]}
{'': [0.0016514193683728323, 0.1046961274471442], 'false': [nan, 0.1046961274471442], 'false,false': [0.0, 0.0903342581074405], 'false,false,false': [0.06445946766504765, 0.19728223074316492], 'true': [0.0016514193683728323, nan], 'true,true': [0.0016514193683728323, nan], 'false,false,true': [0.0, -3.700743415417188e-17]}
{'': [0.04457881509102552, 0.00048253197672516013], 'false': [9.227867491235682e-05, 0.0013104068381225187], 'false,false': [nan, 0.0013104068381225187], 'false,false,false': [nan, 0.0013104068381225187], 'false,true': [nan, 9.227867491235682e-05], 'false,true,false': [2.4694618587918906e-05, 3.191197127890358e-05]}
{'': [0.0017886271898669682, 0.07384365648710223], 'false': [0.0, 0.0725315966820404], 'false,false': [0.0725315966820404, nan], 'false,false,true': [0.001549222480100661, 0.024633809380362526], 'true': [0.0017886271898669682, nan], 'false,true': [0.0, nan]}
{'': [0.037031643776146254, 0.08305415761643598], 'false': [0.0, 0.09309611410770134], 'false,false': [0.009998187490465604, 0.0006411369899896486], 'true': [nan, 0.03703164377614625], 'true,false': [nan, 0.037031643776146254], 'false,false,false': [0.0007151475022047022, 0.0005732368366155534]}
{'': [0.046389194181576415, 0.021183985933844695], 'true': [0.007820619094234038, 0.018897464489450982], 'false': [nan, 0.021183985933844695], 'false,false': [nan, 0.021183985933844695], 'false,false,false': [nan, 0.021183985933844695]}
{'': [0.05558398202364394, 0.032133950978455575], 'true': [0.05558398202364394, nan], 'false': [nan, 0.032133950978455575], 'false,false': [0.024101710810233035, 0.04635403371394226], 'false,false,false': [0.027393917850066497, 0.08331090821970215]}
{'': [0.001677726044249381, 0.03378222470784338], 'false': [0.02346435725363416, 0.07172142550298008], 'false,false': [0.01772205884352135, 0.0010623613481216207], 'false,true': [0.07001358356922441, 4.2738020050783445e-05], 'false,true,true': [0.07001358356922441, nan], 'false,false,false': [nan, 0.0010623613481216207]}
{'': [0.029221084942392103, 0.049082115459207695], 'false': [0.03337813214753868, 0.06986086025466406], 'false,false': [nan, 0.06986086025466406], 'false,false,false': [nan, 0.06986086025466406], 'true': [0.05332137044698871, 3.7375886594466964e-05], 'true,true': [0.06172751502669545, 0.0], 'true,false': [3.220660143354315e-05, 4.581431845105816e-05], 'true,false,false': [0.0, 7.502277276909043e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.941
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.048796182808536745;  // std dev = 0.276, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.12951853339555713;  // std dev = 1.096, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.21045907542742953;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.45536643674628463;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5988287642929473;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11472828807551116;  // std dev = 0.033, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.45964589221844593;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08992982164188079;  // std dev = 1.090, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.3346644851414939;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.433847775570866;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4154074933558117;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4631753792431387;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6950789692142578;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10137639502703036;  // std dev = 3.23e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.10857544441372576;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.2054314862374292;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18247977251173234;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.25209508599838915;  // std dev = 0.305, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.33355783877714623;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3211708443152208;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.3049988802080268;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5266292256388837;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09354776744715736;  // std dev = 0.013, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.1786740534956194;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.19011897952294216;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.26700222964732;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04209107546049347;  // std dev = 0.111, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else return -0.04597298004328122;  // std dev = 0.134, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.255485414366174;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.4115513332239333;  // std dev = 0.178, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11719468713514748;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10645816888768267;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(C, D) )
%   | then if ( follows(C, A), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2642070659665952;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.05692405799656551;  // std dev = 0.456, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( follows(C, F), recursion_accounttype(F, B) )
%   | | | then return 0.22700466442036069;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08534510722303566;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, C), recursion_accounttype(G, B) )
%   | | then return 0.16893330583531463;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08413331001283655;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1409230244590703;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.13822676434488745;  // std dev = 0.249, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.22087139102960324;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.18315483909486274;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.06559753799752384;  // std dev = 0.341, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | | else return -0.08259606265838595;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.23421263628108147;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07542331727316624;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.05777519511912642;  // std dev = 0.277, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.011878644476729469;  // std dev = 0.289, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.02957764417643601;  // std dev = 0.566, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.08273743987657388;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.1541345800146806;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1663337323931948;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22663398455067288;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return -0.07218416615054646;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.07560162818570748;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2843068201033095;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1178163626658972;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.04188242385821442;  // std dev = 1.275, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.15502260589750524;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1403039360020737;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.06814597091750298;  // std dev = 0.001, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07562176116783187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06146318906766259;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.03741798125965267;  // std dev = 0.225, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.007712702802792247;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.013452268948898788;  // std dev = 0.476, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.477', 'seconds']
Refined model CLL: -0.100864


******************************************
Best model found
******************************************
Results 

CLL : -0.104628 

AUC ROC : 0.995772 

AUC PR : 0.49268 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 4.941 

Total Inference Time : 5.937246084213257 

Total revision time: 14.398748088836669
Best scored revision CLL: -0.100864


Results 

CLL : -0.104628 

AUC ROC : 0.995772 

AUC PR : 0.49268 

Precision : 0.338462 

Recall : 0.987179 

F1 : 0.504092 

Total Learning Time : 14.420979906082152 

Total Inference Time : 5.937246084213257 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.477
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6909019836395263;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05197350368149184;  // std dev = 0.238, 92.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8289515275190196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10164913132223508;  // std dev = 2.084, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5326755381765792;  // std dev = 1.002, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1790181272311624;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5624100883297507;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5624100883297507;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016411796298761234;  // std dev = 2.347, 73.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=9 */
%   | | | else return 0.04309846786280987;  // std dev = 1.841, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4392643120488665;  // std dev = 2.232, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11700479550621459;  // std dev = 0.022, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.12412018218974195;  // std dev = 0.008, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16603867206344625;  // std dev = 0.103, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.22605604503120164;  // std dev = 1.622, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | else return 0.5326984492232207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3206632779638434;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6428013611544522;  // std dev = 0.144, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0933968035710555;  // std dev = 1.100, 84.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=2 */
%   | | else return -0.09968654300678438;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0812260260853969;  // std dev = 1.984, 86.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2551391011074021;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.534918616832079;  // std dev = 0.319, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11165289350276199;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1152992994724196;  // std dev = 0.111, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25103107656531665;  // std dev = 1.637, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | else return -0.08644552745926733;  // std dev = 1.064, 98.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06387543173213295;  // std dev = 0.413, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2139087392024668;  // std dev = 0.046, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05422483275461994;  // std dev = 0.141, 89.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.024552902234322473;  // std dev = 0.796, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.07944464988554188;  // std dev = 0.931, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13992116022148263;  // std dev = 0.206, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.281382677277275;  // std dev = 0.464, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0921255933707354;  // std dev = 0.048, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38874180143361264;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11282639164017513;  // std dev = 0.125, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.122062536604723;  // std dev = 1.788, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | else return -0.03190294989150096;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0858011595053268;  // std dev = 0.011, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07809607602382344;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07158912021744904;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then return 0.0243922026435344;  // std dev = 0.593, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2554874130284469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12304958822868593;  // std dev = 0.647, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.855', 'seconds']
Parameter learned model CLL:-0.109841 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 42], 'true,false,true': [7.74e-08, 82, 0], 'true,false,false': [0.0, 14, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.481, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.986, 1, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.238, 84, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.084, 18, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.002, 1, 27], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.347, 64, 9], 'false,false,false,false': [1.841, 21, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.232, 5, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 66, 0], 'false,true,false,false': [0.008, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.103, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.622, 4, 27], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.144, 0, 12], 'false,false,true,false': [1.1, 82, 2], 'false,false,false': [1.32e-09, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.984, 49, 37], 'false,true': [0.0, 0, 5], 'false,false,true': [0.319, 0, 8], 'false,false,false,true': [0.072, 14, 0], 'false,false,false,false': [0.111, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.637, 3, 42], 'true,false': [1.064, 94, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.413, 4, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.046, 0, 34], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 81, 8], 'false,false,false,true': [0.796, 23, 4], 'false,false,false,false': [0.931, 7, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.206, 2, 28], 'false,true,true,true': [0.464, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.048, 82, 0], 'false,false,true': [0.347, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.125, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.788, 3, 37], 'true,true,false': [0.916, 1, 5], 'true,false,true': [0.011, 69, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.013, 7, 0], 'false,true': [0.593, 9, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.647, 3, 3]}]
{'': [0.21172022684310135, 0.2176000000000001], 'false': [0.20408163265306106, 0.2314049586776858], 'true': [1.3534147347811431e-15, 7.864079757761526e-17], 'false,true': [0.0, -1.1102230246251566e-17], 'true,false': [7.311224796312007e-17, -1.1895246692412391e-17], 'false,true,true': [0.0, nan]}
{'': [0.02775510204081572, 0.08364231256204381], 'false': [0.05667908038475889, 0.1416956341217869], 'false,false': [2.3129646346357427e-18, 0.18654862646810536], 'false,false,false': [0.0, 0.17366561862246094], 'false,true': [nan, 0.05667908038475889], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.05789161034196286, 0.10572756726174991], 'false': [nan, 0.10572756726174994], 'false,false': [1.6653345369377348e-16, 0.09055634757983548], 'false,false,false': [0.07547374280210348, 0.1302922728885567], 'true': [0.03583134488813818, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,true': [0.03583134488813818, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.0905421995296684, 0.0003695383919852714], 'false': [1.5490692709300852e-05, 0.0008205518354493962], 'false,false': [nan, 0.0008205518354493962], 'false,false,false': [nan, 0.0008205518354493962], 'false,true': [nan, 1.5490692709300852e-05], 'false,true,false': [7.119745630437739e-06, 2.631988203842402e-06]}
{'': [0.08507667934639918, 0.0706573166084198], 'true': [0.0848826644810527, 0.0], 'false': [-1.3877787807814457e-17, 0.06838343199529938], 'false,false': [0.07208882338431527, 1.1564823173178713e-18], 'false,false,true': [0.0017219091775646511, 0.014392772481414705], 'false,true': [-1.3877787807814457e-17, nan]}
{'': [0.04578088730925852, 0.07008986942772417], 'false': [-2.2204460492503132e-17, 0.07304244236689734], 'false,false': [0.0127161395393518, 0.000587700722714248], 'true': [nan, 0.045780887309258694], 'true,false': [nan, 0.04578088730925852], 'false,false,false': [0.0003678964225285484, 0.0007738245563454916]}
{'': [0.05123223339713534, 0.021274810821074276], 'true': [0.05958216622531157, 0.011558425869420044], 'false': [nan, 0.021274810821074276], 'false,false': [nan, 0.021274810821074276], 'false,false,false': [nan, 0.021274810821074276]}
{'': [6.354152892219719e-05, 0.02707683195044776], 'false': [nan, 0.027076831950447675], 'false,false': [0.01975610348320178, 0.04171867534017396], 'false,false,false': [0.02347328342194986, 0.07881812827453162], 'true': [6.354152892219719e-05, nan]}
{'': [0.042596221461434394, 0.027617318003580988], 'false': [0.020483104793442085, 0.04954821150329995], 'false,false': [0.017233146899355654, 0.0006834122945988903], 'false,true': [0.014371177559430048, 2.7671978160763884e-05], 'false,true,true': [0.014371177559430048, nan], 'false,false,false': [nan, 0.0006834122945988903]}
{'': [0.04076795321368005, 0.04239997778418127], 'false': [0.02704194287309529, 0.061936203075554655], 'false,false': [0.0, 0.06975322109704823], 'false,false,false': [nan, 0.06975322109704823], 'true': [0.09043312239441686, 2.1774192673111815e-05], 'true,true': [0.0799144997819408, 0.1399439070294583], 'true,false': [1.7897227815970809e-06, 2.4011661612175633e-05], 'true,false,false': [-1.3877787807814458e-18, 2.352098436713551e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.363
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6091111490739812;  // std dev = 0.844, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.08578487415644506;  // std dev = 0.366, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.1254446385283914;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.808741135785635;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13476412925708123;  // std dev = 2.011, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.30578820610098173;  // std dev = 0.948, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09449661609793508;  // std dev = 0.973, 69.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=2 */
%   | | | else return -0.02748103792673368;  // std dev = 1.576, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13519569914139187;  // std dev = 1.645, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return -9.331573814739203E-4;  // std dev = 1.176, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3175135841583098;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.21751358415830996;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.607413382966164;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4678786949542407;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7302150258214906;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.10751536588648478;  // std dev = 0.008, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( tweets(A, I) )
%   | | then return -0.15432894520975965;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.21112799882913405;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.29247771219584745;  // std dev = 0.216, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.3394179345613275;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.40061739171296373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.34305309704916365;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5223831691797136;  // std dev = 0.264, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09434175258061235;  // std dev = 1.063, 89.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=2 */
%   | | else return -0.09369698557654002;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.26789349564549925;  // std dev = 0.055, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.3434694028466913;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08691148403052215;  // std dev = 0.002, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2680133711760789;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0656425530559693;  // std dev = 0.140, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26221312395958607;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4653835679707322;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5260674811897066;  // std dev = 0.268, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11575934844262742;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.21508643661729085;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.040854783539967944;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06863257907765893;  // std dev = 0.059, 64.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=2 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.27695879180654714;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0846671479554306;  // std dev = 0.020, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.35441347857790295;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11104520220820209;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.01534386076298222;  // std dev = 0.657, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.09322736291817328;  // std dev = 0.843, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return 0.1851645337605434;  // std dev = 0.014, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11134036045296673;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.18664285792270305;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.15594142892389834;  // std dev = 0.323, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.0793111290904616;  // std dev = 0.010, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 8.897687501742635E-4;  // std dev = 0.470, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.05300933197079825;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.20966234513615856;  // std dev = 0.452, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.03382631753374207;  // std dev = 0.672, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16730951042858355;  // std dev = 0.029, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.17145027514994413;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16473371227265377;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2669749471162886;  // std dev = 0.279, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.074391049950039;  // std dev = 0.011, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.24984362396512758;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4039927283234122;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.09486315398491303;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1706435893131594;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14196014326140943;  // std dev = 0.021, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.22302275765791446;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07011934262982293;  // std dev = 0.012, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17596139907205044;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08935460713322849;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.015605131040764633;  // std dev = 0.327, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17358502574259627;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11883475131183709;  // std dev = 0.347, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.05723264242889762;  // std dev = 0.517, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.849', 'seconds']
Refined model CLL: -0.103309


******************************************
Best model found
******************************************
Results 

CLL : -0.106278 

AUC ROC : 0.995189 

AUC PR : 0.402464 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 6.363 

Total Inference Time : 8.664411783218384 

Total revision time: 20.336136903762817
Best scored revision CLL: -0.103309


Results 

CLL : -0.106278 

AUC ROC : 0.995189 

AUC PR : 0.402464 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 20.3583687210083 

Total Inference Time : 8.664411783218384 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.712
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.21529179224236947;  // std dev = 0.479, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7006054876826526;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02795409421231316;  // std dev = 0.270, 104.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4597379919822849;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05008788397923251;  // std dev = 2.448, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5102384585441687;  // std dev = 1.730, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6865780990311534;  // std dev = 0.097, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5600205793236537;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.393353912656987;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.039463670786016335;  // std dev = 2.653, 110.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=11 */
%   | | | else return 0.030198503632543082;  // std dev = 2.065, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5028923298616312;  // std dev = 1.580, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11726103391294085;  // std dev = 0.036, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.12522160172212748;  // std dev = 0.010, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14806288824305425;  // std dev = 0.114, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24229165851717605;  // std dev = 1.894, 49.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=44 */
%   | else return 0.40703178271600327;  // std dev = 0.109, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.320598883345157;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.640656920811051;  // std dev = 0.180, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09405301361509581;  // std dev = 1.314, 129.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=3 */
%   | | else return -0.0976140909532677;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04333110703304889;  // std dev = 2.592, 154.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26181782246561713;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5222962863010215;  // std dev = 0.446, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10410675844478037;  // std dev = 0.100, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11606549340446445;  // std dev = 0.150, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28632715721475455;  // std dev = 1.071, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else return -0.0875450403885921;  // std dev = 1.222, 153.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03705290178349313;  // std dev = 0.535, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18571802331478157;  // std dev = 0.992, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.18665027877083085;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.059510459651773644;  // std dev = 0.139, 142.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04074285596331088;  // std dev = 0.913, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.03243835695522918;  // std dev = 1.067, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15275320394556438;  // std dev = 0.211, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25994649731542924;  // std dev = 0.503, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08920863605230124;  // std dev = 0.041, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3992389265611046;  // std dev = 0.388, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10838417089894084;  // std dev = 0.088, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11062061375113966;  // std dev = 2.218, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | | else return 0.15096393175729153;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08311135782250645;  // std dev = 0.020, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0795034474361825;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07257929924794794;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then return 0.013851111487667801;  // std dev = 0.743, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2513406651822372;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01003924390717799;  // std dev = 0.847, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.054', 'seconds']
Parameter learned model CLL:-0.108447 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 64], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false': [2.63e-09, 21, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.479, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.991, 1, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 92, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 14, 0], 'false,false,false,true': [0.775, 1, 2], 'false,false,false,false': [2.448, 32, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.73, 3, 44], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.097, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 7], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [2.653, 99, 11], 'false,false,false,false': [2.065, 27, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.58, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.036, 95, 0], 'false,true,false,false': [0.01, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.114, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.894, 5, 44], 'true,false': [0.109, 0, 2], 'false,true,true': [0.062, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 14], 'false,false,true,false': [1.314, 126, 3], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.592, 98, 56], 'false,true': [0.044, 0, 8], 'false,false,true': [0.446, 0, 11], 'false,false,false,true': [0.1, 26, 0], 'false,false,false,false': [0.15, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.071, 1, 65], 'true,false': [1.222, 148, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.535, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 51], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.139, 130, 12], 'false,false,false,true': [0.913, 14, 6], 'false,false,false,false': [1.067, 13, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.211, 2, 46], 'false,true,true,true': [0.503, 0, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 128, 0], 'false,false,true': [0.388, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.088, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.218, 5, 58], 'true,true,false': [0.005, 0, 6], 'true,false,true': [0.02, 109, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.005, 7, 0], 'false,true': [0.743, 15, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.847, 11, 4]}]
{'': [0.21760000000000024, 0.19037317468902057], 'true': [-8.881784197001252e-16, -5.224578939412501e-17], 'false': [0.16409036860879925, 0.2295918367346937], 'false,true': [-1.4802973661668753e-16, 9.654113257610057e-18], 'true,false': [3.8616453030440226e-17, 5.28677630773884e-18], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.0185119259522958, 0.0938465413009306], 'false': [0.07286711443801361, 0.12938921690313654], 'false,false': [3.96508223080413e-18, 0.16056606665334391], 'false,false,false': [0.2003979109273485, 0.14620973162254636], 'false,true': [nan, 0.07286711443801361], 'false,false,true': [nan, 3.96508223080413e-18]}
{'': [0.06247943657578427, 0.09874399992434331], 'false': [nan, 0.09874399992434332], 'false,false': [0.07100591715976344, 0.07988836500145306], 'false,false,false': [0.06396370048132428, 0.12923764272645527], 'false,false,true': [6.344131569286608e-17, 0.13888888888888898], 'true': [0.06367023664535651, 0.004669177105477373], 'true,true': [0.06367023664535651, nan], 'true,false': [nan, 0.004669177105477373]}
{'': [0.03282856803069572, 0.00021417980997450551], 'false': [2.1412939355176595e-05, 0.0007228860796803238], 'false,false': [nan, 0.0007228860796803238], 'false,false,false': [nan, 0.0007228860796803238], 'false,true': [nan, 2.1412939355178492e-05], 'false,true,false': [1.3384009334673296e-05, 4.628525952749994e-06]}
{'': [0.07161072684689876, 0.06239960403274867], 'true': [0.07322827681586284, 0.005905730694902217], 'false': [0.00032298958659380633, 0.058495703035843484], 'false,false': [0.05997687575638324, 0.0], 'false,false,true': [0.002304941270233079, 0.01338842141555576], 'false,true': [0.00032298958659380633, nan]}
{'': [0.04362028167009584, 0.06017791597465601], 'false': [0.0002379236699743409, 0.059855225879280514], 'false,false': [0.018093774437574994, 0.0006381232310462178], 'true': [nan, 0.04362028167009562], 'true,false': [nan, 0.04362028167009584], 'false,false,false': [0.0003868893544471333, 0.0008025545180095013]}
{'': [0.041485790371470384, 0.02205076017344537], 'true': [0.017384935238057845, 0.009756631614106042], 'false': [nan, 0.02205076017344537], 'false,false': [nan, 0.02205076017344537], 'false,false,false': [nan, 0.02205076017344537]}
{'': [0.018563590830664563, 0.0277508197873098], 'false': [nan, 0.027750819787309675], 'false,false': [0.019325654698924978, 0.051915441261570494], 'false,false,false': [0.04165428785538082, 0.06328042561149021], 'true': [0.018920566563905852, 0.0], 'true,false': [0.0, nan]}
{'': [0.044570639078791004, 0.024421219208174166], 'false': [0.01596578589677849, 0.06062151002517443], 'false,false': [0.01675922575358086, 0.0003895075448268101], 'false,true': [0.01262880597206394, 1.2958313118160286e-05], 'false,true,true': [0.01262880597206394, nan], 'false,false,false': [nan, 0.0003895075448268101]}
{'': [0.03471130020936907, 0.035809152466211046], 'false': [0.0262819453534473, 0.04824153016314687], 'false,false': [0.0, 0.0478184836796881], 'false,false,false': [nan, 0.0478184836796881], 'true': [0.07141456895930438, 9.878753144197785e-06], 'true,true': [0.07807405041527479, 3.959347151583081e-06], 'true,false': [3.6713399252818004e-06, 1.3839312031778085e-05], 'true,false,false': [1.1564823173178713e-18, 3.573658810986686e-06]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.24
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return 0.6425503352878774;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.7194734122109542;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.7194734122109542;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.06045094231767249;  // std dev = 0.225, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1324938180402393;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.07733569364905163;  // std dev = 1.804, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.3163582903258907;  // std dev = 1.454, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.5742715654613592;  // std dev = 5.96e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.4061864756026344;  // std dev = 0.864, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462844;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09885427775336303;  // std dev = 0.935, 94.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=2 */
%   | | | else return -0.00735328983183307;  // std dev = 1.660, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23580186624671667;  // std dev = 1.476, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04230518108675086;  // std dev = 1.382, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4254646209298126;  // std dev = 0.045, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.4698330021772541;  // std dev = 0.165, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.01116106777100978;  // std dev = 0.922, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.4850795295688689;  // std dev = 0.247, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.31456155182547946;  // std dev = 0.828, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6254041012337761;  // std dev = 0.267, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7314010097606446;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(L, A) )
%   | then return -0.10747202926256876;  // std dev = 0.006, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.1686955715236676;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.3272214959433745;  // std dev = 0.006, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | | then return -0.004871350620765898;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3176164417773934;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5166541447135341;  // std dev = 0.308, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.30203474625865556;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1768751089976892;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.48020669077967604;  // std dev = 0.197, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09275711672595802;  // std dev = 1.196, 138.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=3 */
%   | | else return -0.09273646616243085;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.23407269067434186;  // std dev = 0.991, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.30399764687050074;  // std dev = 0.133, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08755105527578744;  // std dev = 0.003, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.24933364828839044;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08826645974822503;  // std dev = 0.243, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28276273100266835;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3578254229528547;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6025554963462032;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11621812709851352;  // std dev = 0.028, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.22052592431098994;  // std dev = 0.017, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(A, C) )
%   | | | then return 0.20859686561672156;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2750478005434745;  // std dev = 0.969, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.21921686252262804;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, F) )
%   | then return -0.054212109851815675;  // std dev = 0.146, 136.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.05815301212068948;  // std dev = 0.571, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.05606227396237874;  // std dev = 0.510, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.025798789193132714;  // std dev = 0.524, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.045295986441930176;  // std dev = 0.787, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.1514112645898061;  // std dev = 0.932, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.17039017047631663;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.20174730003599495;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1507183332122335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.04933895340830082;  // std dev = 0.130, 130.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=12 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.28505373494194336;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12101459296067091;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10692327318561738;  // std dev = 0.553, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.17773315788717198;  // std dev = 0.653, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15924284604009337;  // std dev = 0.030, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.0813576031354235;  // std dev = 0.961, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.1777346744992047;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.25833542082158695;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1582127799163124;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.34813565173148814;  // std dev = 0.268, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07441418152431474;  // std dev = 0.005, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.2917844964043624;  // std dev = 0.097, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13039109830330478;  // std dev = 0.032, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16357666877274613;  // std dev = 0.058, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.1509584871764079;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07047128964203699;  // std dev = 0.005, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2039504768715762;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09013381650549603;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.18092726846754167;  // std dev = 0.335, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.368938465662499;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.018815976360063557;  // std dev = 0.340, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.09090741804014629;  // std dev = 0.538, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.920', 'seconds']
Refined model CLL: -0.103611


******************************************
Best model found
******************************************
Results 

CLL : -0.10235 

AUC ROC : 0.994848 

AUC PR : 0.409264 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 10.24 

Total Inference Time : 11.37320327758789 

Total revision time: 28.57606229972839
Best scored revision CLL: -0.103611


Results 

CLL : -0.10235 

AUC ROC : 0.994848 

AUC PR : 0.409264 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 28.598294116973875 

Total Inference Time : 11.37320327758789 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.066
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.994, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.14185106490048774;  // std dev = 3.23e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6655037288738175;  // std dev = 1.943, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.022918342699024152;  // std dev = 0.278, 139.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7613893674887603;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07585943803729725;  // std dev = 2.789, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5489034472166472;  // std dev = 1.437, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4204434021271332;  // std dev = 0.814, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5715338668356958;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5715338668356957;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03579423693296558;  // std dev = 3.311, 166.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=17 */
%   | | | else return 0.006178135788035044;  // std dev = 2.413, 51.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4561901616123784;  // std dev = 2.843, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11785385869244815;  // std dev = 0.040, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | | else return -0.12328565511381946;  // std dev = 0.011, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1490530334987685;  // std dev = 0.136, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3075719061082729;  // std dev = 1.443, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else return 0.4228824069459661;  // std dev = 0.099, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24616592052549938;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.649544243456376;  // std dev = 0.179, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09320224453298338;  // std dev = 1.757, 210.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=5 */
%   | | else return -0.09788543154988445;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04221674291222612;  // std dev = 2.962, 219.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=76 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2717468262134559;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46330093212902135;  // std dev = 1.198, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10832122250529246;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11511487779767357;  // std dev = 0.133, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24900148051356435;  // std dev = 2.364, 93.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=88 */
%   | else return -0.08198782076126589;  // std dev = 1.622, 189.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005115409150579507;  // std dev = 0.585, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1971587185480948;  // std dev = 0.995, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.21806198243747565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.046169084456250765;  // std dev = 0.147, 166.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008091475822569031;  // std dev = 1.308, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | | | else return 0.0623544223082771;  // std dev = 1.410, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15043525406392627;  // std dev = 0.199, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3033005105424093;  // std dev = 0.577, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0902572869332986;  // std dev = 0.052, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3778139259923664;  // std dev = 1.111, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1011812278746412;  // std dev = 0.099, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19652671673918135;  // std dev = 0.666, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return 0.14934252465056086;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08465602754499833;  // std dev = 0.013, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07327697599907092;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.07778827136607272;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then return 0.007249166802762134;  // std dev = 1.291, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25989961071995016;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03361140705877638;  // std dev = 1.139, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.751', 'seconds']
Parameter learned model CLL:-0.108046 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.994, 1, 84], 'true,false,true': [0.0, 150, 0], 'true,false,false': [3.23e-09, 24, 0], 'false,true,true,true': [0.953, 1, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.471, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.943, 4, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.278, 122, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 15, 0], 'false,false,false,true': [0.083, 0, 4], 'false,false,false,false': [2.789, 39, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.437, 2, 59], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.814, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.311, 149, 17], 'false,false,false,false': [2.413, 43, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.843, 8, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 120, 0], 'false,true,false,false': [0.011, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.443, 2, 61], 'true,false': [0.099, 0, 2], 'false,true,true': [0.961, 1, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 20], 'false,false,true,false': [1.757, 205, 5], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.962, 143, 76], 'false,true': [0.0, 0, 8], 'false,false,true': [1.198, 1, 16], 'false,false,false,true': [0.075, 20, 0], 'false,false,false,false': [0.133, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.364, 5, 88], 'true,false': [1.622, 182, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.585, 15, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 66], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 149, 17], 'false,false,false,true': [1.308, 46, 10], 'false,false,false,false': [1.41, 12, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.199, 3, 63], 'false,true,true,true': [0.577, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.052, 150, 0], 'false,false,true': [1.111, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.099, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.666, 0, 78], 'true,true,false': [0.009, 0, 6], 'true,false,true': [0.013, 130, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.013, 8, 0], 'false,true': [1.291, 23, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.139, 11, 5]}]
{'': [0.21913805697589547, 0.2399999999999995], 'false': [0.2479338842975207, 0.22222222222222232], 'false,true': [0.0826446280991734, -1.0092936587501423e-17], 'true': [0.01162629757785438, -1.761043418370938e-16], 'false,true,true': [0.0826446280991734, nan], 'true,false': [-1.1546319456101628e-16, 9.25185853854297e-18]}
{'': [0.05316405475104222, 0.10265549966161694], 'false': [0.0774561533327093, 0.1467153677216756], 'false,false': [3.7007434154171884e-18, 0.17321113265456306], 'false,false,false': [0.0017191852098132898, 0.1524832062611248], 'false,true': [nan, 0.0774561533327093], 'false,false,true': [nan, 3.7007434154171884e-18]}
{'': [0.0424699139404986, 0.09131411688403755], 'false': [nan, 0.09131411688403741], 'false,false': [2.220446049250313e-16, 0.07765827185703539], 'false,false,false': [0.06603470107413924, 0.11414421052635618], 'true': [0.0338478447127163, 0.132407325576284], 'true,false': [nan, 0.132407325576284], 'true,true': [0.0338478447127163, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.07484418909692894, 0.00024642903930841774], 'false': [1.634934682357016e-05, 0.000563985205787605], 'false,false': [nan, 0.000563985205787605], 'false,false,false': [nan, 0.000563985205787605], 'false,true': [nan, 1.634934682357016e-05], 'false,true,false': [1.357590744511435e-05, 3.4567873640079655e-06]}
{'': [0.03259939414581779, 0.05952896913756886], 'false': [0.07100591715976326, 0.05495601629359122], 'false,true': [0.07100591715976326, nan], 'false,false': [0.05736533748586904, -2.523234146875356e-18], 'false,false,true': [0.0016081030445463718, 0.014704041992366823], 'true': [0.03307076187195734, 0.004863922602935361]}
{'': [0.040054517087358084, 0.08160985757011785], 'false': [0.0, 0.08549010001813548], 'false,false': [0.08448796563927556, 0.0004862563535025663], 'true': [nan, 0.04005451708735767], 'true,false': [nan, 0.040054517087358084], 'false,false,false': [0.0002835120708065145, 0.0006072417305242194]}
{'': [0.05336021440341536, 0.017103120636054483], 'true': [0.06009704166740769, 0.013915784204356303], 'false': [nan, 0.017103120636054483], 'false,false': [nan, 0.017103120636054483], 'false,false,false': [nan, 0.017103120636054483]}
{'': [0.014554625243953692, 0.031389194521889166], 'false': [nan, 0.03138919452188913], 'false,false': [0.02174816703265633, 0.050907828061347145], 'false,false,false': [0.03056545046165105, 0.11043972536853273], 'true': [0.014765432773590754, 0.0], 'true,false': [0.0, nan]}
{'': [0.03959064017504344, 0.033581671461790696], 'false': [0.020886988020677198, 0.08435815059110797], 'false,false': [0.09488346197574969, 0.00039360323517269926], 'false,true': [0.013339978357182253, 1.8002971174326808e-05], 'false,true,true': [0.013339978357182253, nan], 'false,false,false': [nan, 0.00039360323517269926]}
{'': [0.01955296901149226, 0.06055391775319153], 'false': [0.050467617851603384, 0.07909438453456552], 'false,false': [0.0, 0.08102564526702287], 'false,false,false': [nan, 0.08102564526702287], 'true': [0.0054242426651592264, 1.3543090316094168e-05], 'true,true': [0.0056814115194887375, 1.3724431752260938e-05], 'true,false': [1.2686590076309397e-06, 1.3878095984971861e-05], 'true,false,false': [0.0, 2.2484168429435028e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.943
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.7347337483847239;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05561670045075935;  // std dev = 2.559, 121.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=10 */
%   | | | else return -0.06119297845188008;  // std dev = 1.495, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04122714225572186;  // std dev = 2.805, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5584004495191821;  // std dev = 0.006, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.45893921704752966;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.35840044951918265;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1042896639910945;  // std dev = 1.191, 120.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=2 */
%   | | | else return 0.05402881886774339;  // std dev = 2.558, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12595382240835784;  // std dev = 1.856, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.06363932910937979;  // std dev = 1.915, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.4192860950530748;  // std dev = 0.039, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.29742382687621205;  // std dev = 0.942, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.1078005389909799;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.47709000904248455;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.43497226062272804;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7088965071880392;  // std dev = 0.093, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7845270818461852;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.11149704259236974;  // std dev = 0.007, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.1699917847587706;  // std dev = 0.029, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3258508767965794;  // std dev = 0.012, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(E, A) )
%   | | then return 0.12089112544461339;  // std dev = 1.032, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.36402224884454026;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.11100725225471905;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.33152776842803555;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15025367153036737;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.48261060463254835;  // std dev = 1.280, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.09453825554447536;  // std dev = 1.565, 206.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=5 */
%   | | else return -0.09253379387635076;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2508188898722913;  // std dev = 0.131, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.42069163781451885;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09359338942343107;  // std dev = 0.065, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else return -0.04530087318773627;  // std dev = 0.195, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2498356876840716;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.11865513112011346;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2861804457800753;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5071943786833667;  // std dev = 0.356, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.11598186165336778;  // std dev = 0.024, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.18846321111842215;  // std dev = 0.148, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return 0.23744945846441007;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.0840778597463003;  // std dev = 0.093, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.31434184229761547;  // std dev = 0.853, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.09632885889412347;  // std dev = 0.024, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.18530950782047048;  // std dev = 1.055, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.12544383296296957;  // std dev = 0.132, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.018533172860291252;  // std dev = 1.089, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.006571676509578751;  // std dev = 0.987, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1709019216868842;  // std dev = 0.119, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return 0.26250122656819364;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.11555123197097948;  // std dev = 1.159, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.3244384901686672;  // std dev = 0.239, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.08106066338681163;  // std dev = 0.016, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2733843901043082;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09755721883402876;  // std dev = 0.025, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20787116408017764;  // std dev = 0.412, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.04235321687585557;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.12798154976766318;  // std dev = 0.987, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.16046986448211195;  // std dev = 0.033, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.2860058040290495;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1102199569337793;  // std dev = 1.054, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2207132718531318;  // std dev = 0.060, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.07426622931798353;  // std dev = 0.006, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23581991233959293;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4361949781673534;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11871772318365623;  // std dev = 0.032, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14565271453058704;  // std dev = 0.121, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   | | else return 0.15272091717588063;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07084941708459536;  // std dev = 0.006, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.14907093298052576;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.06866835153767624;  // std dev = 0.898, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return -0.0015116617257200093;  // std dev = 0.512, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.2174045944745545;  // std dev = 0.798, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.03845896353554801;  // std dev = 0.488, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.05210444920898127;  // std dev = 0.897, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.322', 'seconds']
Refined model CLL: -0.099093


******************************************
Best model found
******************************************
Results 

CLL : -0.101626 

AUC ROC : 0.995498 

AUC PR : 0.454223 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 6.943 

Total Inference Time : 11.799615144729614 

Total revision time: 27.96843069458008
Best scored revision CLL: -0.099093


Results 

CLL : -0.101626 

AUC ROC : 0.995498 

AUC PR : 0.454223 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 27.990662511825562 

Total Inference Time : 11.799615144729614 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.31
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.13939893509951237;  // std dev = 0.450, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6896848606719044;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03113948974313293;  // std dev = 0.267, 198.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08867514270393072;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7496847272501159;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08008878483950677;  // std dev = 3.314, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553727624378761;  // std dev = 1.360, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.22949031179238125;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8199652115174985;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5892176258534823;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673908725073912;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5673908725073912;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04503806330049597;  // std dev = 3.675, 224.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=21 */
%   | | | else return 0.0015196764325979214;  // std dev = 2.894, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5088874687114908;  // std dev = 2.241, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1176080644579836;  // std dev = 0.009, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | | else return -0.12223098774791072;  // std dev = 2.79e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14919407577683955;  // std dev = 0.138, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2807646953216933;  // std dev = 1.908, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 3.0247853173634036E-4;  // std dev = 1.376, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3089432130076576;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6359959537876733;  // std dev = 0.210, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0849663089810982;  // std dev = 2.356, 267.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=9 */
%   | | else return -0.11943648157480835;  // std dev = 0.053, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016800128571587962;  // std dev = 3.606, 296.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2636224244094244;  // std dev = 0.206, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.549733531333774;  // std dev = 0.767, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11375029529155015;  // std dev = 0.082, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.10868763363210529;  // std dev = 0.115, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2819816774837343;  // std dev = 1.762, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07785327989749084;  // std dev = 2.291, 230.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004935208636568647;  // std dev = 0.674, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1642058388089471;  // std dev = 1.699, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2638569809865779;  // std dev = 0.096, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0366917957059355;  // std dev = 0.155, 186.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0030904452267956914;  // std dev = 1.381, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | | | else return 0.08686165898686192;  // std dev = 1.693, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17497948581510875;  // std dev = 0.161, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25318457608771644;  // std dev = 1.092, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09005631285929638;  // std dev = 0.033, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4507006555622963;  // std dev = 0.635, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10755561181031772;  // std dev = 0.136, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1543512934075645;  // std dev = 2.119, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.04289444263969021;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08324209536918031;  // std dev = 0.018, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08072144371601521;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.02268364006443877;  // std dev = 0.489, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.024384029774599664;  // std dev = 0.973, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.21528912332084216;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04138309850461619;  // std dev = 1.442, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.640', 'seconds']
Parameter learned model CLL:-0.108706 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 185, 0], 'true,false,false': [0.266, 24, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.45, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 176, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.105, 0, 4], 'false,false,false,false': [3.314, 53, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.36, 2, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.143, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.675, 203, 21], 'false,false,false,false': [2.894, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.241, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.009, 149, 0], 'false,true,false,false': [2.79e-08, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.138, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.908, 4, 73], 'true,false': [1.376, 3, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.21, 0, 23], 'false,false,true,false': [2.356, 258, 9], 'false,false,false': [0.053, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.606, 205, 91], 'false,true': [0.206, 0, 13], 'false,false,true': [0.767, 0, 22], 'false,false,false,true': [0.082, 28, 0], 'false,false,false,false': [0.115, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.762, 2, 107], 'true,false': [2.291, 219, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.699, 3, 80], 'true,false,true': [0.096, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 164, 22], 'false,false,false,true': [1.381, 48, 13], 'false,false,false,false': [1.693, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.161, 2, 77], 'false,true,true,true': [1.092, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 212, 0], 'false,false,true': [0.635, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.119, 4, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.018, 178, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.489, 11, 2], 'false,true': [0.973, 24, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.442, 18, 8]}]
{'': [0.22186949206858086, 0.20659722222222243], 'true': [0.01868480725623786, 0.009388827744210432], 'false': [0.20999999999999946, 0.2021484375000001], 'false,true': [-1.4802973661668753e-16, 2.3790493384824782e-17], 'true,false': [-2.1124243495570547e-16, 0.07100591715976336], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03440315288828105, 0.09895798664660166], 'false': [0.0711476886992768, 0.14952087250876298], 'false,false': [0.04338842975206609, 0.17144694912936317], 'false,false,false': [0.002738170669186357, 0.15685184393983453], 'false,true': [nan, 0.0711476886992768], 'false,false,true': [nan, 0.04338842975206609]}
{'': [0.0341633437704405, 0.08884710572944764], 'false': [nan, 0.0888471057294477], 'false,false': [-1.0449157878825003e-16, 0.07432507004331126], 'false,false,false': [0.06028735744822848, 0.11635759022344369], 'true': [0.03454045456531947, 0.016287962572003007], 'true,true': [0.025685213904601174, 0.24999999999999997], 'true,false': [0.003121879718272158, 0.0051228545689441796], 'false,false,true': [-1.4802973661668753e-16, -1.6653345369377348e-16]}
{'': [0.039226855481098666, 0.0002311505955540363], 'false': [3.802422896968521e-06, 0.0004316933404096279], 'false,false': [nan, 0.0004316933404096279], 'false,false,false': [nan, 0.0004316933404096279], 'false,true': [nan, 3.802422896968521e-06], 'false,true,false': [4.953447894397866e-07, 2.100421938480026e-17]}
{'': [0.07192357390421017, 0.05707192668233715], 'true': [0.047303042251817626, 0.27064528828768475], 'false': [0.0, 0.0540968555671111], 'false,false': [0.05724163033916819, 0.002836485363710715], 'false,false,true': [0.0019164311107951108, 0.02078301823070598], 'false,true': [0.0, nan]}
{'': [0.04394008448231383, 0.07859875660409822], 'false': [0.0032661864929372296, 0.08274172761083817], 'false,false': [0.026762337230272125, 0.00027327544684322785], 'true': [nan, 0.04394008448231334], 'true,false': [nan, 0.04394008448231383], 'false,false,false': [0.00024071970142360805, 0.00028310162292566804]}
{'': [0.052893777133158744, 0.018162087847027376], 'true': [0.028498830806851914, 0.02282226327021022], 'false': [nan, 0.018162087847027376], 'false,false': [nan, 0.018162087847027376], 'false,false,false': [nan, 0.018162087847027376]}
{'': [0.03428887277533695, 0.03502246062204731], 'false': [nan, 0.03502246062204693], 'false,false': [0.024175699602925874, 0.054799384654360316], 'false,false,false': [0.03125301702169046, 0.09884379278522158], 'true': [0.03476982866110358, 0.004632508676063962], 'true,false': [0.004632508676063962, nan]}
{'': [0.025907822231981376, 0.029959063624590974], 'false': [0.01860572591924889, 0.06810274849620354], 'false,false': [0.02373767683891724, 0.00040248789489412466], 'false,true': [0.03615442525647346, 5.222803614943677e-06], 'false,true,true': [0.03615442525647346, nan], 'false,false,false': [nan, 0.00040248789489412466]}
{'': [0.030063289604679622, 0.05702197225370748], 'false': [0.026318799472832992, 0.0964964781217392], 'false,false': [0.25, 0.079982755653419], 'false,false,false': [nan, 0.079982755653419], 'true': [0.05097424489475625, 0.001410485583400284], 'true,true': [0.04581960846271829, 0.09021729582555196], 'true,false': [1.786677975144066e-06, 0.01120754727789516], 'true,false,false': [0.0, 0.018364221555704614]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.103
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8275366902015522;  // std dev = 0.172, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1318510649004883;  // std dev = 0.099, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7256102153135066;  // std dev = 1.69e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.663110215313507;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.5589435486468404;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7347338394844877;  // std dev = 0.146, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7572622540312968;  // std dev = 0.163, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.725610215313507;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1265458367607026;  // std dev = 1.49e-07, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11485150687139782;  // std dev = 2.158, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.14948161060669157;  // std dev = 2.206, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.5697197167867271;  // std dev = 0.090, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.35859799257142627;  // std dev = 1.268, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5556155709210291;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.0410929698445302;  // std dev = 0.986, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6579497396835479;  // std dev = 0.147, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.5684426896735555;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(J, A) )
%   | | then return -0.06996253502211548;  // std dev = 0.165, 234.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0496901129783248;  // std dev = 2.216, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.19980325611919028;  // std dev = 2.073, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), tweets(D, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.39205591494344605;  // std dev = 1.720, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return -0.0916916360671426;  // std dev = 1.585, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.44166287830942413;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5413953379434259;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4273393991686476;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5785480012343875;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7054253437167297;  // std dev = 0.205, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.1063708365203375;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.17350304150761622;  // std dev = 0.224, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.33409165733535473;  // std dev = 0.061, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.36318146087680103;  // std dev = 0.245, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.5164271003945632;  // std dev = 0.241, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07823243612492566;  // std dev = 0.505, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32741664136897386;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.41863723438917383;  // std dev = 0.934, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08014870802648828;  // std dev = 2.073, 232.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=9 */
%   | | else return -0.09667476328413672;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25792773908671635;  // std dev = 0.106, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.21736937954408303;  // std dev = 1.349, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.08989816409283882;  // std dev = 8.82e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.039195428080904204;  // std dev = 0.136, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27661128572510646;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15685419457935273;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.402503968472757;  // std dev = 0.202, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5851612721424924;  // std dev = 0.235, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11459321458761206;  // std dev = 0.029, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, A), tweets(A, E) )
%   | | then return 0.21841358047133747;  // std dev = 0.099, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.24862831486381556;  // std dev = 0.037, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.3165566519230244;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(F, G) )
%   | | | then return 0.27384950742367314;  // std dev = 0.173, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16501085457695466;  // std dev = 0.932, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.08332510377217425;  // std dev = 0.023, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.23833590606123334;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.015216605697036483;  // std dev = 1.847, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | | else return -0.0797316822901628;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D), follows(A, C) )
%   | | then if ( follows(A, E), follows(C, E) )
%   | | | then return 0.13303286074850543;  // std dev = 1.377, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.1044294619823651;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19473972885807633;  // std dev = 0.027, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.009644950393763433;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.12536780282844542;  // std dev = 0.336, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.07702782349942527;  // std dev = 0.023, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21918594255225218;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.014494791120285642;  // std dev = 1.178, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.05340765490622372;  // std dev = 1.347, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.14699341574922667;  // std dev = 1.002, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.0268645967686116;  // std dev = 0.876, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.19125867110532252;  // std dev = 0.053, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.09224622878816219;  // std dev = 0.965, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.188570972862877;  // std dev = 0.163, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.07313164120843031;  // std dev = 0.889, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07158898114894596;  // std dev = 0.023, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37637952288970294;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1282657664161449;  // std dev = 0.030, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15564073484053362;  // std dev = 0.029, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.06765010832296255;  // std dev = 0.019, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else return -0.04425037181064259;  // std dev = 0.080, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.22202358543961093;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3016992165341156;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0958588423570291;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.20116898815575424;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11707219213967793;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.018656654111964373;  // std dev = 0.234, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.584', 'seconds']
Refined model CLL: -0.100511


******************************************
Best model found
******************************************
Results 

CLL : -0.099058 

AUC ROC : 0.995296 

AUC PR : 0.456235 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 14.103 

Total Inference Time : 24.311763763427734 

Total revision time: 49.17083276557922
Best scored revision CLL: -0.100511


Results 

CLL : -0.099058 

AUC ROC : 0.995296 

AUC PR : 0.456235 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 49.193064582824704 

Total Inference Time : 24.311763763427734 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.155
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.20814893509951235;  // std dev = 0.477, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7299724186538795;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05608649875685593;  // std dev = 0.233, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03990293281016431;  // std dev = 0.812, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.46040872111496817;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.29441464133841266;  // std dev = 2.240, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5657446800552651;  // std dev = 3.65e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.68709669282876;  // std dev = 0.098, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5657446800552652;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009725385260714429;  // std dev = 2.258, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
%   | | | else return 0.051194730609203244;  // std dev = 2.083, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48673723527255747;  // std dev = 1.902, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12238168013409739;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.1253835501601261;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20063590957850191;  // std dev = 0.083, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.20491193299981295;  // std dev = 1.232, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31260435271420517;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6218484836230856;  // std dev = 0.216, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12407460365367988;  // std dev = 0.189, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.11325343602081824;  // std dev = 0.359, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0473060121723204;  // std dev = 1.289, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24963197688626104;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43279247346549743;  // std dev = 0.766, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14772898024259568;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.13675384337079718;  // std dev = 0.084, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.32473455933089135;  // std dev = 0.424, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10736168761407354;  // std dev = 0.114, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038603975171135826;  // std dev = 1.021, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20261751261880442;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.06020144055596766;  // std dev = 0.187, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0016348521632796565;  // std dev = 0.912, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.025529167577054247;  // std dev = 1.140, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10671834968793625;  // std dev = 0.260, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.31630633298891414;  // std dev = 0.344, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09246097615784554;  // std dev = 0.071, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.24565117480783347;  // std dev = 0.940, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14228155076091017;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1261638900540811;  // std dev = 1.038, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.19938407901797267;  // std dev = 0.243, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08010741228482803;  // std dev = 0.006, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1033046711868931;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07146490496511175;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return 0.0034177054379097476;  // std dev = 0.615, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24285723518555136;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015290338818603774;  // std dev = 0.938, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.835', 'seconds']
Parameter learned model CLL:-0.111564 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.973, 1, 18], 'true,false,true': [4.08e-08, 39, 0], 'true,false,false': [0.0, 10, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 8, 0], 'false,false': [0.477, 13, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.233, 34, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.812, 9, 1], 'false,false,false,true': [0.775, 1, 2], 'false,false,false,false': [2.24, 12, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [3.65e-08, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.098, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.258, 44, 9], 'false,false,false,false': [2.083, 18, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.902, 3, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 29, 0], 'false,true,false,false': [0.003, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.083, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.232, 2, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.216, 0, 12], 'false,false,true,false': [0.189, 46, 0], 'false,false,false': [0.359, 6, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.289, 26, 14], 'false,true': [0.0, 0, 3], 'false,false,true': [0.766, 1, 14], 'false,false,false,true': [0.124, 17, 0], 'false,false,false,false': [0.084, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.424, 0, 25], 'true,false': [0.114, 43, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.021, 10, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.006, 0, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.187, 25, 3], 'false,false,false,true': [0.912, 18, 7], 'false,false,false,false': [1.14, 13, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.26, 1, 13], 'false,true,true,true': [0.344, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.071, 43, 0], 'false,false,true': [0.94, 1, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.038, 1, 14], 'true,true,false': [0.243, 0, 4], 'true,false,true': [0.006, 30, 0], 'true,false,false,true': [0.005, 7, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true': [0.615, 13, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.938, 12, 6]}]
{'': [0.1946366782006915, 0.23615916955017255], 'false': [0.24489795918367352, 0.2275000000000001], 'false,true': [-1.4802973661668753e-16, -6.938893903907228e-18], 'true': [0.04986149584487499, 5.437827059388522e-17], 'true,false': [4.2700885562506023e-17, -1.1102230246251566e-17], 'false,true,true': [0.0, 0.0]}
{'': [-3.806478941571965e-16, 0.14537294305176235], 'false': [0.054519584262435604, 0.20139781282847086], 'false,false': [0.06585645075465388, 0.21882311647364255], 'false,false,false': [0.2002239237529961, 0.21806978645737315], 'false,false,true': [nan, 0.06585645075465388], 'false,true': [nan, 0.054519584262435604]}
{'': [0.002649672066989517, 0.1290109074896029], 'false': [nan, 0.12901090748960262], 'false,false': [0.0, 0.12297664927682585], 'false,false,false': [0.09623329502218658, 0.1808511957667409], 'true': [1.2111523905001707e-16, 0.004762143739587277], 'true,false': [nan, 0.004762143739587277], 'true,true': [1.2111523905001707e-16, nan], 'false,false,true': [nan, 0.0]}
{'': [0.10637550828328787, 0.0009434833283121331], 'false': [4.1032352172726775e-05, 0.0008599890030628818], 'false,false': [nan, 0.0008599890030628818], 'false,false,false': [nan, 0.0008599890030628818], 'false,true': [nan, 4.1032352172726775e-05], 'false,true,false': [5.886358739680074e-05, 6.194151499420523e-07]}
{'': [0.10125553693945934, 0.09717121421281248], 'true': [0.10125553693945934, nan], 'false': [-1.850371707708594e-17, 0.09837002419546262], 'false,false': [0.09271707072462226, 0.12883668257375436], 'false,false,true': [0.0038757515472404394, 0.0007755665905579508], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.04152191820644234, 0.086963743027748], 'false': [0.0, 0.09083372005076962], 'false,false': [0.039165497087996125, 0.0008589319065618986], 'true': [nan, 0.041521918206442306], 'true,false': [nan, 0.04152191820644234], 'false,false,false': [0.0009054631100484623, 0.0007039876865966327]}
{'': [0.04624201706028205, 0.06517833031024046], 'false': [nan, 0.06517833031024046], 'false,false': [nan, 0.06517833031024046], 'false,false,false': [nan, 0.06517833031024046], 'true': [0.007191145175573776, 0.000303671671528896]}
{'': [2.4874308982966324e-06, 0.04389180965149653], 'false': [nan, 0.04389180965149649], 'false,false': [0.03482504087162606, 0.04751970580188022], 'false,false,false': [0.033284356087831035, 0.06499670499494566], 'true': [2.4874308982966324e-06, nan]}
{'': [0.06768770584373603, 0.040737592769195044], 'false': [0.0225910315789002, 0.07222450078130296], 'false,false': [0.07365566178261611, 0.0015400377052087624], 'false,true': [0.016948871207868983, 0.00011682297829975867], 'false,true,true': [0.016948871207868983, nan], 'false,false,false': [nan, 0.0015400377052087624]}
{'': [0.031124251472173778, 0.03451196405870104], 'false': [0.019879014619294116, 0.048860506100999554], 'false,false': [0.0, 0.04884936327679329], 'false,false,false': [nan, 0.048849363276793296], 'true': [0.06066575435458514, 8.821004352627258e-05], 'true,true': [0.07177794989663368, 0.014762497857238939], 'true,false': [1.1402064666562092e-06, 0.00017851129998375082], 'true,false,false': [4.232147871047595e-06, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.038
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839124;  // std dev = 6.45e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.258609020898584;  // std dev = 1.395, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.1280307766934124;  // std dev = 1.732, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.06617384549337903;  // std dev = 1.152, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6644619034886627;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1311698857448149;  // std dev = 1.515, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.28142141146807714;  // std dev = 1.498, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19482065461919812;  // std dev = 1.102, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.41751358415831;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.6205174580793427;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6368949114501855;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then return -0.10159632948783633;  // std dev = 2.63e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1657660081994519;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1336298370692652;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.19514382721893486;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.3458698967981071;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3533848804515397;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014944;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.44134018727441576;  // std dev = 0.250, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10959055259773288;  // std dev = 0.204, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.04101588577058468;  // std dev = 0.387, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.08170077617719608;  // std dev = 0.901, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27404645889215806;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.05758172850935235;  // std dev = 0.607, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.08387701778210949;  // std dev = 5.27e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.0838770177821095;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.3563588500559487;  // std dev = 0.139, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4958982084482111;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1291303090596046;  // std dev = 0.096, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.11298451369036759;  // std dev = 0.150, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.22146637493083465;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22883478299413998;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2904605014069819;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2710765134304535;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return -0.07731794579077786;  // std dev = 0.000976, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.1183846405755942;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.2488822532603283;  // std dev = 0.153, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0902307455617678;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1363604149107269;  // std dev = 0.203, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.18703915615806077;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.17146659193299651;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07277298131160989;  // std dev = 0.000797, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.18688351637605044;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07179650390889954;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2502720620849905;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1072985548861885;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08572885579972259;  // std dev = 0.528, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.026374516307692407;  // std dev = 0.623, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.15656136296844037;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1615520468207436;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1484594450309279;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16012883523738833;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06751697029635649;  // std dev = 0.000983, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.20745402563631904;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27410890533435295;  // std dev = 0.314, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.09131827951153983;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.13122961127567262;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.13994841291145677;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1334138281152188;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.063286836002095;  // std dev = 0.001, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.16399671891452222;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08762074419924017;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.003278929517427219;  // std dev = 0.264, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13631780413458383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.031232587349226064;  // std dev = 0.452, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.02598517354375483;  // std dev = 0.569, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.315', 'seconds']
Refined model CLL: -0.096527


******************************************
Best model found
******************************************
Results 

CLL : -0.093998 

AUC ROC : 0.994528 

AUC PR : 0.44421 

Precision : 0.334254 

Recall : 0.960317 

F1 : 0.495902 

Total Learning Time : 4.038 

Total Inference Time : 3.9733617305755615 

Total revision time: 11.774404209136964
Best scored revision CLL: -0.096527


Results 

CLL : -0.093998 

AUC ROC : 0.994528 

AUC PR : 0.44421 

Precision : 0.334254 

Recall : 0.960317 

F1 : 0.495902 

Total Learning Time : 37.05896918106079 

Total Inference Time : 3.9733617305755615 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.595
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449664;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.699143636861818;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03554989746564491;  // std dev = 0.262, 76.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0597523277517689;  // std dev = 0.820, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7709416056448786;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14369656315185628;  // std dev = 3.022, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5475448334877246;  // std dev = 1.019, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5715460941834525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6121860462353598;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5715460941834525;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5715460941834525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.01517518873087277;  // std dev = 2.950, 88.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=15 */
%   | | | else return 0.029959165506576617;  // std dev = 2.429, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5530915505824995;  // std dev = 1.152, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12249105302171939;  // std dev = 0.010, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.12435617549927969;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17097917453753472;  // std dev = 0.185, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32151739832932;  // std dev = 0.272, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3022775671375251;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5597593664511384;  // std dev = 1.001, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.11204653983298885;  // std dev = 0.832, 104.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=1 */
%   | | else return 0.10063963520678341;  // std dev = 0.339, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0298920854116702;  // std dev = 2.029, 99.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=34 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2420468849801329;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.35977263210950894;  // std dev = 1.802, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13282357658012806;  // std dev = 0.162, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.13358445842132136;  // std dev = 0.146, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30163693605675973;  // std dev = 0.709, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.09904478784814631;  // std dev = 0.817, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.019632630547507374;  // std dev = 1.278, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18854493013699702;  // std dev = 0.063, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04042635518527669;  // std dev = 0.150, 70.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=8 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.021043290579865107;  // std dev = 1.495, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0.019636019747656944;  // std dev = 1.438, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13874110322904354;  // std dev = 0.185, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2932295850725956;  // std dev = 0.480, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09234879822333789;  // std dev = 0.056, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37711789594547085;  // std dev = 0.454, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11725283994696493;  // std dev = 0.167, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18113868410430553;  // std dev = 0.469, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.18914767752486292;  // std dev = 0.277, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835204334825995;  // std dev = 0.004, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09165140409774651;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08017175366729022;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, G) )
%   | then return 0.03553970325424148;  // std dev = 0.814, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17584392143793448;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023242798959910656;  // std dev = 1.136, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.885', 'seconds']
Parameter learned model CLL:-0.110317 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.382, 2, 42], 'true,false,true': [6.99e-08, 70, 0], 'true,false,false': [2.63e-09, 22, 0], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.492, 13, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.985, 1, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 68, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.82, 12, 1], 'false,false,false,true': [0.103, 0, 4], 'false,false,false,false': [3.022, 34, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.019, 1, 27], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.139, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.95, 73, 15], 'false,false,false,false': [2.429, 31, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.152, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.01, 74, 0], 'false,true,false,false': [0.003, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.185, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.272, 0, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [1.05e-08, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.001, 1, 18], 'false,false,true,false': [0.832, 103, 1], 'false,false,false': [0.339, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.029, 65, 34], 'false,true': [0.003, 0, 7], 'false,false,true': [1.802, 2, 21], 'false,false,false,true': [0.162, 35, 0], 'false,false,false,false': [0.146, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.709, 0, 52], 'true,false': [0.817, 114, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.278, 25, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.063, 0, 33], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 62, 8], 'false,false,false,true': [1.495, 41, 12], 'false,false,false,false': [1.438, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.185, 1, 32], 'false,true,true,true': [0.48, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 75, 0], 'false,false,true': [0.454, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 42, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.469, 0, 36], 'true,true,false': [0.277, 0, 6], 'true,false,true': [0.004, 72, 0], 'true,false,false,true': [0.022, 11, 0], 'true,false,false,false': [0.035, 11, 0], 'false,true': [0.814, 17, 11], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.136, 16, 7]}]
{'': [0.21345155709342678, 0.23495906016375898], 'false': [0.22892819979188297, 0.24173553719008264], 'false,true': [-1.6148698540002277e-16, 2.7755575615628915e-18], 'true': [0.04338842975206727, 7.723290606088045e-17], 'true,false': [6.97854472621527e-17, 5.046468293750712e-18], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [0.028546712802769058, 0.12774115196656838], 'false': [0.06868904800127529, 0.1780340660852187], 'false,false': [0.051785756342068244, 0.19630889761490183], 'false,false,false': [0.0026489749353517666, 0.1826582585898534], 'false,true': [nan, 0.06868904800127529], 'false,false,true': [nan, 0.051785756342068244]}
{'': [0.03248111915014306, 0.12408047618853102], 'false': [nan, 0.12408047618853128], 'false,false': [-1.2688263138573217e-16, 0.11501193265837611], 'false,false,false': [0.09887771467293324, 0.15126590031407058], 'true': [0.03705895457049684, 0.004135397148577402], 'true,true': [0.03705895457049684, nan], 'true,false': [0.0, 0.004838925295165386], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.021387499307726945, 0.0007772614692522015], 'false': [1.7120952391029974e-06, 0.0009034358286344789], 'false,false': [nan, 0.0009034358286344789], 'false,false,false': [nan, 0.0009034358286344789], 'false,true': [nan, 1.7120952391029974e-06], 'false,true,false': [1.3645998110348693e-06, 1.0212922567642835e-06]}
{'': [0.0023043424293425346, 0.07816010205735663], 'false': [1.586032892321652e-17, 0.0777733831379564], 'false,false': [0.07271277000102004, 0.11492673807592119], 'false,false,true': [0.052690459387396645, 0.006654104013277924], 'true': [0.0023043424293425346, nan], 'false,true': [1.586032892321652e-17, nan]}
{'': [0.04159424953661876, 0.0842204599177778], 'false': [1.514775076459442e-06, 0.08670675540553001], 'false,false': [0.14113369829777714, 0.0007692407499216811], 'true': [nan, 0.04159424953661876], 'true,false': [nan, 0.04159424953661876], 'false,false,false': [0.0007523244339894137, 0.0007908424859799347]}
{'': [0.0412837675665488, 0.049512855019940204], 'false': [nan, 0.049512855019940204], 'false,false': [nan, 0.049512855019940204], 'false,false,false': [nan, 0.049512855019940204], 'true': [0.009678115277943574, 0.005759057394182449]}
{'': [0.00012107615571994982, 0.03862052020475173], 'false': [nan, 0.03862052020475163], 'false,false': [0.02238688695230654, 0.05161079249514948], 'false,false,false': [0.04218831666277638, 0.06667608269228996], 'true': [0.00012107615571994982, nan]}
{'': [0.03410065590091538, 0.034990865897408616], 'false': [0.022327048244963617, 0.05285953614896333], 'false,false': [0.012884319247930098, 0.0006668317218574125], 'false,true': [0.016427079770228774, 4.197507210351503e-05], 'false,true,true': [0.016427079770228774, nan], 'false,false,false': [nan, 0.0006668317218574125]}
{'': [0.017346203876087044, 0.03765192776657776], 'false': [0.023682942799093557, 0.05329718676290703], 'false,false': [0.0, 0.05606875653576604], 'false,false,false': [nan, 0.05606875653576603], 'true': [0.0070705521625528175, 2.6673624615925873e-05], 'true,true': [0.006111280607057389, 0.01277120094500194], 'true,false': [1.843359949867581e-07, 0.00010898642175807827], 'true,false,false': [4.319874809901642e-05, 0.00010888290841440889]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.3
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8287371703936293;  // std dev = 0.169, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7253711349463985;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7393106841164389;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7304083623374575;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15243421299984722;  // std dev = 2.533, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.07129417560848358;  // std dev = 1.376, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5709455696555931;  // std dev = 0.145, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.3944983833102063;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.561165049976873;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5663055602737898;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5611650499768731;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.006874251524441133;  // std dev = 1.608, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13739847599226165;  // std dev = 2.478, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.07942640994605711;  // std dev = 1.352, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4201255820683434;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.46291654848268926;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4614723327497194;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5521631648583188;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.681828651492312;  // std dev = 0.170, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10563699852504543;  // std dev = 0.043, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.1054565219923662;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.1599873569814684;  // std dev = 0.025, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3219744127404034;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.35171180528829094;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.35182252548306936;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3240110877212543;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09235343470500408;  // std dev = 3.53e-05, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.008837635621341017;  // std dev = 1.238, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08058001505670721;  // std dev = 1.811, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.01075623862686037;  // std dev = 1.281, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2560150732582089;  // std dev = 0.001, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.39403009801970895;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09069344756508169;  // std dev = 0.008, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.054370922514487066;  // std dev = 0.193, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25747786080607205;  // std dev = 0.000361, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2475312019820159;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4548270179169389;  // std dev = 0.843, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1412150869389465;  // std dev = 0.100, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.11716326962073846;  // std dev = 0.137, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then if ( follows(A, D), follows(D, A) )
%   | | | then return 0.11029154708424213;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.21076225583802916;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.2986360063761971;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.08651659233610542;  // std dev = 0.014, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.20436695135952515;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.37319271538951576;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13323645501931164;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.0214120455008745;  // std dev = 0.477, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04220111359583836;  // std dev = 0.910, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1825666913676335;  // std dev = 0.007, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.211444211000721;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.23283180331801745;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2756153925379203;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07636588673692021;  // std dev = 0.007, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.18895806758877123;  // std dev = 1.095, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11952836418418399;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.00190730391743383;  // std dev = 1.169, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return -0.07860037510991891;  // std dev = 0.771, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1591494721628105;  // std dev = 0.007, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.14497153061922666;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1790410699754394;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1531627076280165;  // std dev = 0.000176, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.22338090782738584;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07298975622045628;  // std dev = 0.008, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2692995540896895;  // std dev = 0.101, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.43885577451434493;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11392966236282406;  // std dev = 0.007, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1396869041807326;  // std dev = 0.008, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.17797996505207936;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06807923460604205;  // std dev = 0.007, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.18185077053513687;  // std dev = 0.093, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09696772739094568;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.04824834411965227;  // std dev = 0.394, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15578989481355143;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0030563211537196528;  // std dev = 0.764, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.021527630546243324;  // std dev = 0.590, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.463', 'seconds']
Refined model CLL: -0.09804


******************************************
Best model found
******************************************
Results 

CLL : -0.09986 

AUC ROC : 0.992499 

AUC PR : 0.324031 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 6.3 

Total Inference Time : 8.990307569503784 

Total revision time: 21.29182388305664
Best scored revision CLL: -0.09804


Results 

CLL : -0.09986 

AUC ROC : 0.992499 

AUC PR : 0.324031 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 46.576388854980465 

Total Inference Time : 8.990307569503784 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.828
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7711924133603822;  // std dev = 2.341, 69.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.11154803459745743;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.20814893509951235;  // std dev = 0.477, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7392713545121086;  // std dev = 0.133, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04152054787810483;  // std dev = 0.256, 113.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0989624971889804;  // std dev = 0.850, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6001146241121409;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.11991052064237472;  // std dev = 3.843, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5807429357985825;  // std dev = 0.238, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5718825910887315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6536697700433718;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6038282075378699;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3718825910887314;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0012924037642579166;  // std dev = 3.596, 144.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=21 */
%   | | | else return 0.061418825699123956;  // std dev = 3.065, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5260370256375252;  // std dev = 2.402, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1206644631777733;  // std dev = 0.041, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.12702072772971287;  // std dev = 0.006, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1605955983053988;  // std dev = 0.202, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30869572998958555;  // std dev = 0.680, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33282707296726416;  // std dev = 0.089, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5106012727054547;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6414384291891674;  // std dev = 0.241, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.1134929716668669;  // std dev = 0.861, 152.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=1 */
%   | | else return 0.024787107653446036;  // std dev = 0.311, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024981712734678484;  // std dev = 2.412, 152.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=49 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2729989566809105;  // std dev = 0.138, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4648191201320416;  // std dev = 1.359, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1223029130680087;  // std dev = 0.146, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.12359409371248727;  // std dev = 0.167, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2730007776473888;  // std dev = 1.694, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else return -0.09738025016742588;  // std dev = 0.803, 168.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07258895044949541;  // std dev = 1.578, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1944911340835571;  // std dev = 0.103, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E) )
%   | | then return 0.26616074794831923;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04686775551799501;  // std dev = 0.149, 109.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.020038936794424877;  // std dev = 1.596, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.022857653526314355;  // std dev = 1.817, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13369448124555072;  // std dev = 0.197, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2769698830675466;  // std dev = 0.619, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08970619384349696;  // std dev = 0.071, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3800705885361644;  // std dev = 0.548, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11452604381538148;  // std dev = 0.258, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15162108933591623;  // std dev = 1.437, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else return 0.1692957952453498;  // std dev = 0.294, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08183896266374936;  // std dev = 0.016, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09156837428282538;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.0683843495102474;  // std dev = 0.254, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 7.81030152196359E-4;  // std dev = 1.031, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19924207902885593;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016821534757300048;  // std dev = 1.463, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.387', 'seconds']
Parameter learned model CLL:-0.108244 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.341, 6, 63], 'true,false,true': [7.88e-08, 86, 0], 'true,false,false': [0.171, 32, 1], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.477, 26, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.133, 0, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 102, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.85, 28, 1], 'false,false,false,true': [0.954, 1, 5], 'false,false,false,false': [3.843, 60, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.238, 0, 39], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.138, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.175, 0, 6], 'false,false,true,false': [1.265, 2, 8], 'false,false,false,true': [3.596, 123, 21], 'false,false,false,false': [3.065, 45, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.402, 3, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 108, 0], 'false,true,false,false': [0.006, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.202, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.68, 1, 45], 'true,false': [0.0, 0, 0], 'false,true,true': [0.089, 0, 13], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.241, 0, 26], 'false,false,true,false': [0.861, 151, 1], 'false,false,false': [0.311, 28, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.412, 103, 49], 'false,true': [0.138, 0, 14], 'false,false,true': [1.359, 1, 30], 'false,false,false,true': [0.146, 38, 0], 'false,false,false,false': [0.167, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.694, 2, 76], 'true,false': [0.803, 166, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.578, 24, 15]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.103, 0, 51], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 98, 11], 'false,false,false,true': [1.596, 59, 16], 'false,false,false,false': [1.817, 36, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.197, 2, 45], 'false,true,true,true': [0.619, 0, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.071, 127, 0], 'false,false,true': [0.548, 0, 24], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.258, 69, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.437, 2, 52], 'true,true,false': [0.294, 0, 11], 'true,false,true': [0.016, 96, 0], 'true,false,false,true': [0.033, 17, 0], 'true,false,false,false': [0.254, 17, 1], 'false,true': [1.031, 38, 15], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.463, 28, 12]}]
{'': [0.2245359891353555, 0.22731891421106248], 'false': [0.22714981070849058, 0.2274999999999995], 'false,true': [0.05859374999999978, 2.05596856412066e-17], 'true': [0.07939508506616176, 0.008332744862650973], 'false,true,true': [0.07100591715976314, 1.4802973661668753e-16], 'true,false': [7.229359230117299e-17, 0.029384756657483992]}
{'': [0.00034124138079020345, 0.11839576637510438], 'false': [0.06531016410279188, 0.16027892817953426], 'false,false': [0.024939505899659507, 0.18854897946675828], 'false,false,false': [0.15162549296725136, 0.17581330596029895], 'false,true': [nan, 0.06531016410279188], 'false,false,true': [nan, 0.024939505899659507]}
{'': [0.0022140364450098813, 0.12486083291012168], 'false': [nan, 0.1248608329101216], 'false,false': [0.1145225660013661, 0.11133143300060161], 'false,false,true': [0.005102612051577434, 0.16000000000000006], 'false,false,false': [0.08980348342158687, 0.16197662770408605], 'true': [0.0014523556049818116, 0.004117785602927822], 'true,false': [0.0, 0.0038264856166203565], 'true,true': [0.0014523556049818116, nan]}
{'': [0.06008535399412326, 0.0005403615160265987], 'false': [1.8938373046673007e-05, 0.0007662073370043226], 'false,false': [nan, 0.0007662073370043226], 'false,false,false': [nan, 0.0007662073370043226], 'false,true': [nan, 1.8938373046667962e-05], 'false,true,false': [1.5473062803624855e-05, 1.4760062779968959e-06]}
{'': [0.010061504549530321, 0.08126968123195664], 'false': [0.002666970889596554, 0.07913165258276796], 'false,false': [0.07557272894342631, 0.09657571702930963], 'false,false,true': [0.002225320343609014, 0.0048720472153834906], 'true': [0.010061504549530321, nan], 'false,true': [0.0006147177755919322, 0.0]}
{'': [0.03828281504282099, 0.08315199143384552], 'false': [0.0013653087786295354, 0.08769843654745589], 'false,false': [0.05953634586062738, 0.000632370543682911], 'true': [nan, 0.03828281504282093], 'true,false': [nan, 0.03828281504282099], 'false,false,false': [0.0005606870775575026, 0.0006996576364590057]}
{'': [0.043989789032335025, 0.06384225344574782], 'false': [nan, 0.06384225344574777], 'false,false': [nan, 0.06384225344574782], 'false,false,false': [nan, 0.06384225344574782], 'true': [0.03678807889897051, 0.003836674923071622]}
{'': [0.00030256966855533114, 0.036086213268258734], 'false': [nan, 0.036086213268258636], 'false,false': [0.02227007909363538, 0.04723258447325849], 'false,false,false': [0.03398259293388081, 0.06600350130563783], 'true': [0.0002097229157789727, 0.0], 'true,false': [0.0, nan]}
{'': [0.03869871721132134, 0.03253937537201606], 'false': [0.02054386220748274, 0.05078836557457167], 'false,false': [0.012532990589689782, 0.0009653368358457342], 'false,true': [0.015964625890743194, 3.947944151600854e-05], 'false,true,true': [0.015964625890743194, nan], 'false,false,false': [nan, 0.0009653368358457342]}
{'': [0.02368121144647015, 0.03453482757968515], 'false': [0.020048694385172636, 0.052473832072217945], 'false,false': [0.0, 0.053512892486670204], 'false,false,false': [nan, 0.05351289248667022], 'true': [0.03313441159598804, 0.0005412015636366874], 'true,true': [0.03823385111362546, 0.007841271074415205], 'true,false': [2.693237166916107e-06, 0.002014726062829197], 'true,false,false': [6.255241689071152e-05, 0.003597374672208267]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.683
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.8396304165809938;  // std dev = 0.135, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.13385106490048776;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(D, F) )
%   | | | then return 0.723195795779895;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.473195795779895;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.473195795779895;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7431081558171718;  // std dev = 0.138, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7317936127975991;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6335826015794043;  // std dev = 0.955, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.12632493784965376;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.11648053279092259;  // std dev = 2.188, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.18517765658008462;  // std dev = 2.766, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5330348680830701;  // std dev = 0.170, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return 0.589228739933462;  // std dev = 0.074, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5689208462447474;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09837881195130306;  // std dev = 0.103, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.5809773952797039;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11302818409937035;  // std dev = 2.69e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.5827984957351714;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09007598323648969;  // std dev = 0.700, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.08635222842360096;  // std dev = 3.626, 87.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=24 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4340991467033268;  // std dev = 0.245, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.43432745899682634;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.05852287378774912;  // std dev = 1.093, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4306068795272212;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6947326761662511;  // std dev = 0.189, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1033178706330429;  // std dev = 0.009, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return -0.10312084249532305;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.1594044025117366;  // std dev = 0.130, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3303878048713459;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(E, A) )
%   | | then return -0.010063742156583308;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16284183033404975;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33848432029368725;  // std dev = 0.058, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.47831654293642034;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.46216681743827925;  // std dev = 0.441, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10126992717587226;  // std dev = 0.657, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0633654659775332;  // std dev = 0.713, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.0378593955910049;  // std dev = 1.557, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2655002930758619;  // std dev = 0.021, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.26403227332027146;  // std dev = 0.201, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08575563001711446;  // std dev = 0.004, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.05876546678109967;  // std dev = 0.103, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.27012821956579874;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25471037775978156;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.08205449889195836;  // std dev = 0.905, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.46103656505795654;  // std dev = 0.441, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.11399482290447065;  // std dev = 0.024, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.2137568251750515;  // std dev = 0.028, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E), follows(F, C) )
%   | | then return 0.21745727845200885;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.24656983359562448;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, G) )
%   | | | then return 0.22035368279878678;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2789962174827656;  // std dev = 0.317, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07943286748515827;  // std dev = 0.000956, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2779050294915258;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 7.03073139619868E-4;  // std dev = 1.461, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | | else return -0.017853030874649144;  // std dev = 1.421, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.1842184330202105;  // std dev = 0.028, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.17326862386702585;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.2531649939906706;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.10783625168305781;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20351009525073951;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07393929920052651;  // std dev = 0.000910, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2256949256788114;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02394604832495356;  // std dev = 1.404, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | | | else return -0.007518897345376102;  // std dev = 1.402, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15416916506187317;  // std dev = 0.010, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.20578008308372642;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.16050122928304553;  // std dev = 0.193, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.00849270124881065;  // std dev = 1.174, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.06890997748412862;  // std dev = 0.009, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return -0.10085738808222973;  // std dev = 0.629, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2982259465926751;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.455984403752034;  // std dev = 0.203, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12571607852616376;  // std dev = 0.023, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.14465346498607096;  // std dev = 0.045, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.037113262438970805;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.06212039223578218;  // std dev = 0.024, 107.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1482796578771997;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09802545469780095;  // std dev = 0.007, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.0334413766213628;  // std dev = 0.190, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15970652308892197;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.022851717812962562;  // std dev = 1.089, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.05009656080485513;  // std dev = 0.889, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.388', 'seconds']
Refined model CLL: -0.097635


******************************************
Best model found
******************************************
Results 

CLL : -0.09607 

AUC ROC : 0.993744 

AUC PR : 0.431639 

Precision : 0.348189 

Recall : 0.992063 

F1 : 0.515464 

Total Learning Time : 13.683 

Total Inference Time : 12.211186170578003 

Total revision time: 34.78833016014099
Best scored revision CLL: -0.097635


Results 

CLL : -0.09607 

AUC ROC : 0.993744 

AUC PR : 0.431639 

Precision : 0.348189 

Recall : 0.992063 

F1 : 0.515464 

Total Learning Time : 60.072895132064815 

Total Inference Time : 12.211186170578003 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.19
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8351604293523855;  // std dev = 1.398, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048782;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.11962884267826547;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.21663950113724814;  // std dev = 0.480, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7141744339312953;  // std dev = 0.861, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.039781034798724094;  // std dev = 0.258, 147.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10712265158921395;  // std dev = 0.842, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7635560153996699;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1382900031095914;  // std dev = 4.432, 106.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5421319496786092;  // std dev = 1.335, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.22295876616039723;  // std dev = 0.480, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.6043515681973954;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4490764160807942;  // std dev = 0.976, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5623402069251228;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019247908055546353;  // std dev = 4.054, 211.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=27 */
%   | | | else return 0.02635448421843103;  // std dev = 3.696, 92.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.529681087235913;  // std dev = 2.484, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11873435080328597;  // std dev = 0.058, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return -0.12341222935910992;  // std dev = 0.009, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16601857659255645;  // std dev = 0.260, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27598505508833215;  // std dev = 1.668, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30841519301825226;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5564327528529969;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6315161017068425;  // std dev = 0.315, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10290062658266753;  // std dev = 1.287, 176.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=3 */
%   | | else return 0.010588780728793514;  // std dev = 0.299, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035955400083667384;  // std dev = 2.761, 193.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=67 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2592629197322167;  // std dev = 0.181, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48850414508009654;  // std dev = 1.379, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1256893351587711;  // std dev = 0.191, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.12315127234431093;  // std dev = 0.215, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2637008136225317;  // std dev = 2.017, 102.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=98 */
%   | else return -0.09219484225618974;  // std dev = 1.144, 184.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033008213951417995;  // std dev = 2.053, 69.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19686292178157064;  // std dev = 0.061, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, E) )
%   | | then return 0.2988668656482979;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0458878403850253;  // std dev = 0.142, 149.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.019347143664055415;  // std dev = 2.021, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.03470548449387037;  // std dev = 2.228, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18011789365960165;  // std dev = 0.048, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23713949655577476;  // std dev = 1.080, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09018622423051512;  // std dev = 0.056, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3709241971230573;  // std dev = 1.035, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11468758262189546;  // std dev = 0.211, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1713110400941821;  // std dev = 1.231, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.0914188806328674;  // std dev = 1.037, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08275089418057618;  // std dev = 0.015, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08470561816538334;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11896922719663833;  // std dev = 0.761, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04124361038276145;  // std dev = 1.132, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17404282103155966;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0452674861730926;  // std dev = 1.743, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.942', 'seconds']
Parameter learned model CLL:-0.109816 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.398, 2, 85], 'true,false,true': [0.0, 126, 0], 'true,false,false': [0.147, 44, 1], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [6.14e-08, 59, 0], 'false,false': [0.48, 34, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.861, 1, 70], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 132, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.842, 40, 1], 'false,false,false,true': [0.121, 0, 5], 'false,false,false,false': [4.432, 73, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.335, 2, 55], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.48, 1, 1], 'true,false,false': [0.164, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.976, 1, 6], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.054, 184, 27], 'false,false,false,false': [3.696, 74, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.484, 3, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.058, 144, 0], 'false,true,false,false': [0.009, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.26, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.668, 3, 61], 'true,false': [0.0, 0, 0], 'false,true,true': [0.046, 0, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.315, 0, 32], 'false,false,true,false': [1.287, 173, 3], 'false,false,false': [0.299, 48, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.761, 126, 67], 'false,true': [0.181, 0, 18], 'false,false,true': [1.379, 1, 39], 'false,false,false,true': [0.191, 65, 0], 'false,false,false,false': [0.215, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.017, 4, 98], 'true,false': [1.144, 180, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.053, 47, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.061, 0, 69], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 134, 15], 'false,false,false,true': [2.021, 62, 20], 'false,false,false,false': [2.228, 44, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.048, 0, 61], 'false,true,true,true': [1.08, 1, 30], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 167, 0], 'false,false,true': [1.035, 1, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.211, 65, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.231, 1, 70], 'true,true,false': [1.037, 1, 15], 'true,false,true': [0.015, 134, 0], 'true,false,false,true': [0.028, 25, 0], 'true,false,false,false': [0.761, 17, 1], 'false,true': [1.132, 28, 19], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.743, 31, 17]}]
{'': [0.22222222222222304, 0.2059320552415374], 'true': [0.022460034350640704, 0.005813754659553215], 'false': [0.18425378040762605, 0.22997508009967915], 'false,true': [-2.8047739569477637e-16, 6.39789539614497e-17], 'true,false': [-1.76225876924628e-17, 0.021728395061728464], 'false,true,true': [-2.220446049250313e-16, 1.4802973661668753e-16]}
{'': [0.010434049000919208, 0.11889317231014593], 'false': [0.06645949749027627, 0.16097825501495927], 'false,false': [0.017272850197742787, 0.19387022777301055], 'false,false,false': [0.0029149138558405064, 0.1852668518234687], 'false,true': [nan, 0.06645949749027627], 'false,false,true': [nan, 0.017272850197742787]}
{'': [0.03531292736336278, 0.11237822332758088], 'false': [nan, 0.11237822332757896], 'false,false': [0.05314884478254264, 0.09976586239959989], 'false,false,false': [0.07789530841815512, 0.14847734740620172], 'false,false,true': [0.13615882192419546, -7.401486830834377e-17], 'true': [0.03125150247342982, 0.06643803396449902], 'true,false': [0.11517976233554084, 0.005381208488758648], 'true,true': [0.03125150247342982, nan]}
{'': [0.04858043771139459, 0.0007446577278067437], 'false': [2.2541536644864143e-05, 0.0007765314271608953], 'false,false': [nan, 0.0007765314271608953], 'false,false,false': [nan, 0.0007765314271608953], 'false,true': [nan, 2.2541536644864143e-05], 'false,true,false': [2.3115133663884995e-05, 2.409449279294109e-06]}
{'': [0.043457368049020784, 0.0818477890479025], 'false': [0.003343914117797985, 0.08099047513066539], 'false,false': [0.07865542383545643, 0.08936425496213105], 'false,false,true': [0.0030959065337898273, 0.009413836230079235], 'true': [0.043457368049020784, nan], 'false,true': [0.00012324217123551323, 0.0]}
{'': [0.03951054816865583, 0.07814601395848952], 'false': [0.001811732306098225, 0.08103522946706551], 'false,false': [0.047546334933969446, 0.0006635282795139865], 'true': [nan, 0.039510548168655846], 'true,false': [nan, 0.03951054816865583], 'false,false,false': [0.0005598077722335226, 0.0007725424457190322]}
{'': [0.047871630908928466, 0.0610560632184662], 'false': [nan, 0.0610560632184662], 'false,false': [nan, 0.0610560632184662], 'false,false,false': [nan, 0.0610560632184662], 'true': [0.03990475055941839, 0.007114993490810575]}
{'': [0.00019897553524935878, 0.042018042477254665], 'false': [nan, 0.042018042477255095], 'false,false': [0.020251831005976932, 0.06311639500362431], 'false,false,false': [0.049812043803741365, 0.078780905428947], 'true': [5.3219173453544286e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.0022879029641895044, 0.03669779647964267], 'false': [0.02006027101263379, 0.06444897247476952], 'false,false': [0.03151546206047171, 0.0006874568055734002], 'false,true': [0.037659199107724396, 1.8626584689367744e-05], 'false,true,true': [0.037659199107724396, nan], 'false,false,false': [nan, 0.0006874568055734002]}
{'': [0.025496539606966035, 0.04486411137220133], 'false': [0.02725399994609319, 0.06137682854776469], 'false,false': [0.0, 0.06327087292920504], 'false,false,false': [nan, 0.06327087292920514], 'true': [0.030758264687877113, 0.0033983010760793163], 'true,true': [0.02135897783304129, 0.06725868335700591], 'true,false': [1.7082788480018363e-06, 0.01378194676244602], 'true,false,false': [3.102578294404634e-05, 0.03219789294621035]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.747
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7047522023855747;  // std dev = 0.130, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.5766162693538116;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12584747936290386;  // std dev = 0.041, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.6824363751739173;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.24475645851819672;  // std dev = 1.173, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.16874375965794927;  // std dev = 2.312, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5620520714205784;  // std dev = 0.075, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5882751038819717;  // std dev = 0.164, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.48420445551875674;  // std dev = 0.258, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.10559979409265441;  // std dev = 0.664, 100.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=1 */
%   | | | else return -0.028131928679776236;  // std dev = 2.073, 86.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=11 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.07336221635638476;  // std dev = 3.007, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return 0.11857675835692404;  // std dev = 2.348, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.42344655130831876;  // std dev = 0.073, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.3361479239286022;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.0200989853772522;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.44061623497660807;  // std dev = 0.181, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5390588884593339;  // std dev = 0.937, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.7216368525930884;  // std dev = 0.241, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.1049679162487837;  // std dev = 0.055, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.10553304001800651;  // std dev = 0.018, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.14071275934434682;  // std dev = 0.344, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, D) )
%   | | | then return 0.25514749218592514;  // std dev = 1.367, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.32856917614665637;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3377003989239351;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3453781354546475;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33716849224773704;  // std dev = 0.041, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3475539564958209;  // std dev = 0.984, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09681139039868361;  // std dev = 0.265, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.025939489751846352;  // std dev = 2.123, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
%   | | | else return 0.12386507983141677;  // std dev = 2.056, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26924057226466985;  // std dev = 0.017, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3211322574363797;  // std dev = 0.160, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08686373759520132;  // std dev = 0.028, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.08050990510570945;  // std dev = 0.140, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26824635083519555;  // std dev = 0.037, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.10958190313707898;  // std dev = 0.834, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3971319120201924;  // std dev = 1.492, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10618440744018588;  // std dev = 0.045, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.13670031172045374;  // std dev = 0.415, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(A, C) )
%   | | then return 0.2180627991915384;  // std dev = 0.007, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( tweets(C, E), follows(D, A) )
%   | | | then return -0.03256772334844779;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2068428570617374;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2241973320042587;  // std dev = 0.033, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(F, A) )
%   | then return -0.05845226360872353;  // std dev = 0.104, 213.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2647412820469;  // std dev = 1.072, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.10965977811912095;  // std dev = 0.113, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01552551871688785;  // std dev = 1.340, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return -0.03021633137824841;  // std dev = 1.680, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.15840409990499343;  // std dev = 0.976, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.18849263505933195;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1837821383928028;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.30546557275787056;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.048482120334217636;  // std dev = 0.096, 200.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=16 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2647472331193414;  // std dev = 0.159, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09980685304821309;  // std dev = 0.130, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05433493062126402;  // std dev = 1.244, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0.09126535659309383;  // std dev = 1.335, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16642615013199893;  // std dev = 0.018, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.038582040361118154;  // std dev = 0.808, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1573700336482349;  // std dev = 0.096, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.30399611555815614;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07257260996687685;  // std dev = 0.004, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21130310221259957;  // std dev = 0.954, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.3976123386752531;  // std dev = 0.412, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.09008276032309283;  // std dev = 0.087, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.152786985352527;  // std dev = 0.188, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.08077650388420249;  // std dev = 0.240, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | | else return 0.1789251685537206;  // std dev = 0.057, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.06648419611957607;  // std dev = 0.022, 173.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return -5.057101209247161E-4;  // std dev = 0.114, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.10151284128874909;  // std dev = 0.741, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.0176618956448736;  // std dev = 0.410, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21593974526013637;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.01279410981226748;  // std dev = 1.070, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | | else return 0.06501799038112922;  // std dev = 1.062, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.787', 'seconds']
Refined model CLL: -0.100567


******************************************
Best model found
******************************************
Results 

CLL : -0.101312 

AUC ROC : 0.993349 

AUC PR : 0.40198 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 9.747 

Total Inference Time : 11.664075136184692 

Total revision time: 31.66341611099243
Best scored revision CLL: -0.100567


Results 

CLL : -0.101312 

AUC ROC : 0.993349 

AUC PR : 0.40198 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 56.94798108291626 

Total Inference Time : 11.664075136184692 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.659
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return -0.06637936678728018;  // std dev = 0.264, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.20663378358436005;  // std dev = 0.476, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7167470653891519;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03924148677291448;  // std dev = 0.260, 184.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06873109403125267;  // std dev = 1.798, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7473773539535709;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13294101297316488;  // std dev = 4.924, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5632348703956355;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7320690973094042;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5862805915206694;  // std dev = 0.185, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5956985836519809;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629495506045242;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015997026513852042;  // std dev = 4.606, 259.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=34 */
%   | | | else return 0.06213960146016113;  // std dev = 4.066, 101.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5491677561982902;  // std dev = 2.161, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12096290314418694;  // std dev = 0.053, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | | else return -0.1292438192208989;  // std dev = 0.013, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16880767493487672;  // std dev = 0.276, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2893121669303852;  // std dev = 1.533, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.467146266516863;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24831540511067468;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.501191488131638;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6052231087737638;  // std dev = 0.884, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10291273010950878;  // std dev = 1.783, 242.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=5 */
%   | | else return 0.014994048361232267;  // std dev = 0.305, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03737072934253228;  // std dev = 2.987, 230.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25632525041643694;  // std dev = 0.168, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48276389417427873;  // std dev = 1.655, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12741734192349477;  // std dev = 0.188, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.1286864941985297;  // std dev = 0.219, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2699331553312532;  // std dev = 1.837, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08793282698388477;  // std dev = 1.677, 243.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027155793530758053;  // std dev = 2.437, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.189517097240547;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25479411965867654;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048113518815312;  // std dev = 0.150, 181.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.018055178968934778;  // std dev = 2.268, 133.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=28 */
%   | | | else return 0.014334855144505323;  // std dev = 2.620, 89.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12951448148980227;  // std dev = 0.213, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2641114875804454;  // std dev = 1.245, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09184355412115268;  // std dev = 0.085, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3549128152370119;  // std dev = 1.599, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11831176546097237;  // std dev = 0.279, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17551143618986836;  // std dev = 1.139, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16540890687727328;  // std dev = 0.383, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08355947483510515;  // std dev = 0.030, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09331732078229506;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.02056295748304789;  // std dev = 1.127, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.028758821250432186;  // std dev = 1.345, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18613564373124025;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02546574945227579;  // std dev = 2.010, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.585', 'seconds']
Parameter learned model CLL:-0.111538 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 188, 0], 'true,false,false': [0.264, 49, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [6.32e-08, 63, 0], 'false,false': [0.476, 43, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 165, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.798, 53, 4], 'false,false,false,true': [0.137, 0, 8], 'false,false,false,false': [4.924, 93, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.185, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 6], 'false,false,true,false': [2.98e-08, 0, 15], 'false,false,false,true': [4.606, 225, 34], 'false,false,false,false': [4.066, 78, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.161, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.053, 164, 0], 'false,true,false,false': [0.013, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.276, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.533, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.974, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.884, 1, 39], 'false,false,true,false': [1.783, 237, 5], 'false,false,false': [0.305, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.987, 148, 82], 'false,true': [0.168, 0, 22], 'false,false,true': [1.655, 2, 52], 'false,false,false,true': [0.188, 63, 0], 'false,false,false,false': [0.219, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.837, 3, 121], 'true,false': [1.677, 236, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.437, 60, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 162, 19], 'false,false,false,true': [2.268, 105, 28], 'false,false,false,false': [2.62, 65, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.213, 4, 78], 'false,true,true,true': [1.245, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 219, 0], 'false,false,true': [1.599, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.279, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.139, 1, 85], 'true,true,false': [0.383, 0, 19], 'true,false,true': [0.03, 177, 0], 'true,false,false,true': [0.02, 20, 0], 'true,false,false,false': [1.127, 16, 4], 'false,true': [1.345, 44, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.01, 50, 21]}]
{'': [0.21403091557669643, 0.21377731529656693], 'true': [0.02725128832212642, 0.016322033022847297], 'false': [0.20199469763918804, 0.2270431588613417], 'false,true': [0.03698224852071082, 6.344131569286608e-17], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-2.1732025162875404e-16, 0.06977572089711626]}
{'': [0.012020146589383017, 0.12273290064441326], 'false': [0.06751295375526628, 0.16474850492446286], 'false,false': [0.05672683713248457, 0.19231053532909212], 'false,false,false': [0.002335889894326204, 0.1823173253806845], 'false,true': [nan, 0.06751295375526628], 'false,false,true': [nan, 0.05672683713248457]}
{'': [0.012669291882541596, 0.11705103682873055], 'false': [nan, 0.117051036828732], 'false,false': [0.0017510190457848804, 0.10609562526104507], 'false,false,false': [0.08192841518986177, 0.16367651829566698], 'true': [0.012255743170410435, 0.011830404330239781], 'true,true': [0.012255743170410435, nan], 'true,false': [0.016480802640261787, 0.0042898808494054586], 'false,false,true': [0.005362495827716973, 5.921189464667501e-17]}
{'': [0.02975702514886162, 0.0007446649274293233], 'false': [2.4920505371694483e-05, 0.0008772935801713624], 'false,false': [nan, 0.0008772935801713624], 'false,false,false': [nan, 0.0008772935801713624], 'false,true': [nan, 2.49205053717035e-05], 'false,true,false': [1.744110243588513e-05, 5.004243784898364e-06]}
{'': [0.029785040944760588, 0.08051979147694585], 'false': [0.045925406468581335, 0.07875306957111053], 'false,false': [0.0750843507952706, 0.09287931518118468], 'false,false,true': [0.01951623674410117, 0.01314060043784028], 'false,true': [0.045205679978677096, 0.0], 'true': [0.02976675469230769, 0.0]}
{'': [0.038782585445026815, 0.08450425296753243], 'false': [0.0012875601366800367, 0.08919431448032747], 'false,false': [0.050709080645119926, 0.0005916208330059613], 'true': [nan, 0.03878258544502646], 'true,false': [nan, 0.038782585445026815], 'false,false,false': [0.0005638471162049989, 0.0006133337547319316]}
{'': [0.04550664258434551, 0.06749036250540837], 'false': [nan, 0.06749036250540844], 'false,false': [nan, 0.06749036250540837], 'false,false,false': [nan, 0.06749036250540837], 'true': [0.027213673503519747, 0.011570373803859248]}
{'': [0.00018940958840680158, 0.040534113001031276], 'false': [nan, 0.040534113001031546], 'false,false': [0.022579545820491674, 0.054340620080493604], 'false,false,false': [0.038663069367067655, 0.0771403465851344], 'true': [9.144045521852706e-05, 9.429989302017772e-05], 'true,false': [9.429989302017772e-05, nan]}
{'': [0.045211554425796975, 0.038694025092160175], 'false': [0.022288863440911442, 0.06684568697639974], 'false,false': [0.06090280963019488, 0.0008194646314667761], 'false,true': [0.039713455631299764, 3.2924892920120776e-05], 'false,true,true': [0.039713455631299764, nan], 'false,false,false': [nan, 0.0008194646314667761]}
{'': [0.022666390371949112, 0.04154081402333309], 'false': [0.026218885569132225, 0.05602258730485794], 'false,false': [0.0, 0.056893433152202785], 'false,false,false': [nan, 0.05689343315220277], 'true': [0.013767429194130725, 0.0062092482680440675], 'true,true': [0.015083555676081235, 0.007726632218199756], 'true,false': [5.252303012537695e-06, 0.03308395687006765], 'true,false,false': [2.0122211706109784e-05, 0.06350119283888975]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.036
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 0.189, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.12046069056893736;  // std dev = 0.145, 187.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.324815601766179;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6961183049885713;  // std dev = 0.173, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.7400968323121062;  // std dev = 0.196, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.726887535757802;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.055188825721750795;  // std dev = 2.948, 153.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=13 */
%   | | | else return -0.10153629563354433;  // std dev = 0.856, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.02603595170130183;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.08161032442038427;  // std dev = 1.176, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11769652887515573;  // std dev = 4.708, 139.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.5539217680881758;  // std dev = 0.126, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | else return 0.63515450361226;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.3061989418491567;  // std dev = 0.409, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.5902434119738662;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5697208435397665;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.11511869365055614;  // std dev = 0.856, 147.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=1 */
%   | | | else return 0.05344781904685136;  // std dev = 3.110, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.053537806293439655;  // std dev = 2.833, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.14567912096740873;  // std dev = 3.675, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.42095017260991996;  // std dev = 1.003, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.34808554302004485;  // std dev = 0.592, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.1877485039121216;  // std dev = 1.361, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.4014479063351994;  // std dev = 0.731, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.6731566401567337;  // std dev = 0.585, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6978874539121969;  // std dev = 0.257, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11652667563890551;  // std dev = 0.127, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.11549996535673382;  // std dev = 0.047, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.17057235982301122;  // std dev = 0.356, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.28929589513870807;  // std dev = 0.209, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else return 0.3783285412793577;  // std dev = 0.107, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.588425638955362;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.29883502879056434;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2591985826206985;  // std dev = 0.966, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.47820271445157114;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then return -0.04745800538297904;  // std dev = 0.194, 205.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=17 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.0327675363067945;  // std dev = 2.165, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.09190352131237944;  // std dev = 2.877, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.2329728019203479;  // std dev = 0.931, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.27112489827883113;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2780144657671204;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.13203730102729402;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03712323478086385;  // std dev = 2.395, 144.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=13 */
%   | | | else return -0.07705640385268436;  // std dev = 0.688, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.272845868178283;  // std dev = 0.047, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.48975521535726096;  // std dev = 0.118, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.1333948697783145;  // std dev = 0.035, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.22590496046123143;  // std dev = 0.008, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.21250631970944364;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.2545432147262926;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.527148218355856;  // std dev = 0.666, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.04589130599896965;  // std dev = 1.058, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.09439700821687408;  // std dev = 0.008, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.17022477815434933;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.017269498325601065;  // std dev = 2.102, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | | | else return 0.08094292120115186;  // std dev = 1.855, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.16814519709287185;  // std dev = 0.133, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.1844995637260169;  // std dev = 0.013, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2850441690718092;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07806469943975268;  // std dev = 0.064, 149.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=2 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.3615971874288927;  // std dev = 1.302, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09619371769132494;  // std dev = 0.036, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14751071322177123;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.02629367987552742;  // std dev = 1.849, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | | | else return 4.561163570552188E-4;  // std dev = 2.257, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16609869259106202;  // std dev = 0.027, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.12990821422406518;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.3277401010985478;  // std dev = 0.568, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.18537985430964948;  // std dev = 0.318, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07999678152571141;  // std dev = 0.007, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3651601521905169;  // std dev = 0.073, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4252895104893864;  // std dev = 0.170, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12582784437889924;  // std dev = 0.059, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.18725991116636245;  // std dev = 0.165, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1566545632550702;  // std dev = 0.122, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.06863923191541285;  // std dev = 0.047, 226.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.11591677119575183;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.21159330252205977;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.02803097022676903;  // std dev = 1.191, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.0156880834718677;  // std dev = 0.790, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.11591677119575183;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.042634935650271766;  // std dev = 1.038, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.022146327406531514;  // std dev = 1.277, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.232', 'seconds']
Refined model CLL: -0.11405


******************************************
Best model found
******************************************
Results 

CLL : -0.110873 

AUC ROC : 0.993309 

AUC PR : 0.396572 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 11.036 

Total Inference Time : 12.893855810165405 

Total revision time: 36.45134789466858
Best scored revision CLL: -0.111538


Results 

CLL : -0.110873 

AUC ROC : 0.993309 

AUC PR : 0.396572 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 61.73591286659241 

Total Inference Time : 12.893855810165405 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.047
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.0581489350995122;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.031564855112908505;  // std dev = 0.266, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08809208068584398;  // std dev = 1.539, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.015278926936184914;  // std dev = 1.874, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | | else return 0.007983982285368297;  // std dev = 1.195, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48648996051775517;  // std dev = 1.068, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1239420987880973;  // std dev = 0.006, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.12345418555202124;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.152512174795014;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23920765248564865;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3058743191523152;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6103837268216821;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07372294214097454;  // std dev = 1.292, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | else return -0.1140004308290479;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024407497961123382;  // std dev = 1.504, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24501969574370153;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6049505688463339;  // std dev = 0.239, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11602981613661602;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.12405602430404136;  // std dev = 0.037, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29141219373227056;  // std dev = 0.380, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06396500302582937;  // std dev = 1.061, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.033147246540226126;  // std dev = 0.264, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1991383628956356;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04857816269047955;  // std dev = 0.150, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.05386539256575;  // std dev = 0.729, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.14677708605085774;  // std dev = 0.636, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11759159095252211;  // std dev = 0.202, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.15655080987083425;  // std dev = 1.095, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09561101860393807;  // std dev = 0.004, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44465221143365335;  // std dev = 0.286, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1145275351537094;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1945869656865808;  // std dev = 0.379, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.15539291506307662;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08779883936912722;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08600154935539368;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.08981449624167544;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.07166576603301819;  // std dev = 0.519, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.5360816681649259;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011641003723493493;  // std dev = 0.574, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.946', 'seconds']
Parameter learned model CLL:-0.116151 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [1.49e-08, 23, 0], 'true,false,false': [0.0, 1, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0], 'false,false': [0.4, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 32, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.539, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.0, 0, 14], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.874, 30, 6], 'false,false,false,false': [1.195, 11, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.068, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.006, 38, 0], 'false,true,false,false': [0.003, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.033, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.966, 1, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.026, 0, 5], 'false,false,true,false': [1.292, 50, 3], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.504, 41, 19], 'false,true': [0.0, 0, 2], 'false,false,true': [0.239, 0, 4], 'false,false,false,true': [0.019, 6, 0], 'false,false,false,false': [0.037, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.38, 0, 21], 'true,false': [1.061, 42, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.264, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.043, 0, 17], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 34, 4], 'false,false,false,true': [0.729, 7, 3], 'false,false,false,false': [0.636, 2, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.202, 1, 14], 'false,true,true,true': [1.095, 1, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.004, 41, 0], 'false,false,true': [0.286, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.04, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.379, 0, 20], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.001, 43, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.006, 3, 0], 'false,true': [0.519, 4, 3], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.574, 4, 1]}]
{'': [0.2488888888888888, 0.23999999999999985], 'true': [0.0, 9.25185853854297e-18], 'false': [0.23999999999999994, 0.16000000000000003], 'false,true': [1.4802973661668753e-16, 0.0], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [9.654113257610057e-18, 0.0]}
{'': [2.0898315757650005e-16, 0.09739382292029163], 'false': [0.07050730987310393, 0.14797616646394693], 'false,false': [nan, 0.14797616646394693], 'false,false,false': [nan, 0.14797616646394693], 'false,true': [nan, 0.07050730987310393]}
{'': [-2.5376526277146434e-16, 0.11098638119505902], 'false': [nan, 0.11098638119505903], 'false,false': [3.700743415417188e-17, 0.10083211031438442], 'false,false,false': [0.09756603777397868, 0.1098375212586624], 'false,false,true': [0.0, 0.0], 'true': [-2.5376526277146434e-16, nan], 'true,true': [-2.5376526277146434e-16, nan]}
{'': [0.04391049343173174, 0.00012915793818628874], 'false': [1.005050256807184e-06, 0.0001401057816352129], 'false,false': [nan, 0.0001401057816352129], 'false,false,false': [nan, 0.0001401057816352129], 'false,true': [nan, 1.005050256807184e-06], 'false,true,false': [8.713511791371814e-07, 1.6462143915194072e-06]}
{'': [0.062222222222222186, 0.06387476010086592], 'false': [-1.850371707708594e-17, 0.06202950737959536], 'true': [0.062222222222222186, nan], 'false,false': [0.06567185608487082, 0.0], 'false,false,true': [0.0001359780311855463, 0.031509491734833514], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.03769139256545692, 0.08339073879408923], 'false': [0.0, 0.08729508285209309], 'false,false': [0.014330068244214567, 0.00012207592053345082], 'true': [nan, 0.03769139256545684], 'true,false': [nan, 0.03769139256545692], 'false,false,false': [5.971615617349907e-05, 0.00013533427256935126]}
{'': [0.04664963559823192, 0.013889432700745469], 'true': [0.006886453568386353, 0.025021666128999982], 'false': [nan, 0.013889432700745469], 'false,false': [nan, 0.013889432700745469], 'false,false,false': [nan, 0.013889432700745469]}
{'': [0.00010670668444244606, 0.038435027469545115], 'false': [nan, 0.03843502746954506], 'false,false': [0.0224968562627056, 0.07358819337234174], 'false,false,false': [0.053168721918864334, 0.13501264992013515], 'true': [0.00010670668444244606, nan]}
{'': [0.04098424124039511, 0.04417765130688332], 'false': [0.03313598561600933, 0.07644928769323317], 'false,false': [0.020483154203608633, 0.00020502477354301073], 'false,true': [0.14975208528184814, 3.042582972072226e-07], 'false,true,true': [0.14975208528184814, nan], 'false,false,false': [nan, 0.00020502477354301073]}
{'': [0.01877467064756471, 0.07098042044773846], 'false': [0.038455763144961096, 0.0965976244976427], 'false,false': [0.0, 0.06591712851373972], 'false,false,false': [nan, 0.06591712851373972], 'true': [0.006923935695795656, 1.1632760474761712e-06], 'true,true': [0.007196981356572213, 0.0], 'true,false': [4.485011961431654e-08, 1.0566229491146273e-05], 'true,false,false': [0.0, 1.179495690220462e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.187
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.12544463852839133;  // std dev = 1.83e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, G) )
%   | | then return 0.3208136618541651;  // std dev = 1.093, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.058741135785635;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.627926505773422;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5916464712598533;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5947969362557473;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360633;  // std dev = 2.58e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3569521687526483;  // std dev = 0.953, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -5.099959040175239E-4;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4153146162653901;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4756856861399828;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44745344191566006;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.669215681260036;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.2070426499395606;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.3208076964735488;  // std dev = 0.000192, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.35886806209987987;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.33392715303530984;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3651349394822144;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.05867619582166988;  // std dev = 1.084, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1430577629114503;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.2700839761957647;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.06715499000000885;  // std dev = 0.483, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | | else return 0.029529818796512137;  // std dev = 0.288, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.048738835943528694;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27334577829190476;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.5021968216648647;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1423646176517808;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.11269066072426925;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then if ( follows(E, C), tweets(E, D) )
%   | | then return 0.22612334495945308;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2322148654062624;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20674837478480854;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( tweets(A, H), tweets(F, H) )
%   | | then if ( follows(F, A), follows(A, G) )
%   | | | then return -0.06929534256968463;  // std dev = 0.354, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return -0.02648110452067177;  // std dev = 0.476, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(G, A), follows(F, A) )
%   | | | then return -0.08404433983024662;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0010773212865460846;  // std dev = 0.454, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.04458541392118064;  // std dev = 0.566, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.11465661983164412;  // std dev = 0.557, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18507017256565153;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.026648108490091877;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( follows(E, G), follows(G, A) )
%   | | then if ( follows(A, E), tweets(G, F) )
%   | | | then return -0.06333231881808266;  // std dev = 0.362, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return -0.08143600541994062;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(E, H), follows(A, E) )
%   | | | then return 0.021204464398384217;  // std dev = 0.422, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.0862670382402959;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.00849677342023911;  // std dev = 0.306, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.06691477288017218;  // std dev = 0.371, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.049180960362057324;  // std dev = 0.285, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.0838071194291364;  // std dev = 0.241, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.18769664120211982;  // std dev = 0.000929, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16754831093821643;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27882282961113736;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07501640079752545;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.08265900466451881;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3678203748993615;  // std dev = 0.189, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.15047228970218926;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.1500978516922709;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1525384018251574;  // std dev = 0.037, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.22639605939399107;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.12842652826997725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.07045392687639752;  // std dev = 0.003, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07389201070336564;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06689152667027717;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, H) )
%   | then return 0.09186523899713897;  // std dev = 0.412, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05616902792282517;  // std dev = 0.465, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.893', 'seconds']
Refined model CLL: -0.113942


******************************************
Best model found
******************************************
Results 

CLL : -0.115357 

AUC ROC : 0.995065 

AUC PR : 0.422558 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 6.187 

Total Inference Time : 4.1617677211761475 

Total revision time: 13.58153966331482
Best scored revision CLL: -0.113942


Results 

CLL : -0.115357 

AUC ROC : 0.995065 

AUC PR : 0.422558 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 38.86610463523865 

Total Inference Time : 4.1617677211761475 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.613
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.024815601766178873;  // std dev = 0.373, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.014271210799530242;  // std dev = 0.286, 76.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15709485179613197;  // std dev = 1.890, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5284947693924408;  // std dev = 1.003, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.7223447487771268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.022433865379076087;  // std dev = 2.720, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
%   | | | else return -0.0563920366721741;  // std dev = 1.239, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5164590689371348;  // std dev = 0.947, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1263685891873697;  // std dev = 0.044, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.11588078977532602;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14983144451913447;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31097006833781576;  // std dev = 0.170, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.05304722078461873;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29954869578658605;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5931587699945531;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0875863990783766;  // std dev = 1.437, 108.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=4 */
%   | | else return -0.10236391963558986;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.019744969820726307;  // std dev = 2.282, 124.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=40 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24067241523973348;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.30691197181993546;  // std dev = 1.381, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11436627309236376;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.10993706019852065;  // std dev = 0.067, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26798453623483426;  // std dev = 1.190, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.07865750480103181;  // std dev = 1.330, 94.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17087805221850846;  // std dev = 0.746, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16406452311136382;  // std dev = 0.986, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03914776799084318;  // std dev = 0.177, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.027962229112557035;  // std dev = 1.124, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return -0.003610595274157812;  // std dev = 0.789, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15465101657190536;  // std dev = 0.159, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.33546757558940016;  // std dev = 0.341, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09249864109945845;  // std dev = 0.053, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44708827356826647;  // std dev = 0.428, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1063550091232935;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.09680561746149073;  // std dev = 2.042, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | else return 0.15208729662087872;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08696923950242712;  // std dev = 0.019, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06792900498326498;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0749225635395065;  // std dev = 0.000250, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.06141753829666356;  // std dev = 0.817, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01671890498637934;  // std dev = 0.696, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.931', 'seconds']
Parameter learned model CLL:-0.112195 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.38e-07, 0, 42], 'true,false,true': [6.14e-08, 59, 0], 'true,false,false': [0.0, 11, 0], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.373, 5, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.286, 66, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.89, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.003, 1, 30], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.72, 60, 13], 'false,false,false,false': [1.239, 22, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.947, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 63, 0], 'false,true,false,false': [0.014, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.021, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.17, 0, 30], 'true,false': [0.769, 1, 2], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.067, 0, 11], 'false,false,true,false': [1.437, 104, 4], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.282, 84, 40], 'false,true': [0.0, 0, 2], 'false,false,true': [1.381, 2, 8], 'false,false,false,true': [0.041, 10, 0], 'false,false,false,false': [0.067, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.19, 1, 45], 'true,false': [1.33, 90, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.746, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.986, 1, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.177, 63, 10], 'false,false,false,true': [1.124, 20, 7], 'false,false,false,false': [0.789, 7, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.159, 1, 32], 'false,true,true,true': [0.341, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.053, 77, 0], 'false,false,true': [0.428, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.008, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.042, 4, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.019, 77, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.00025, 3, 0], 'false,true': [0.817, 10, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.696, 8, 1]}]
{'': [0.2343750000000011, 0.226843100189036], 'true': [1.3534147347811431e-15, 6.97854472621527e-17], 'false': [0.24221453287197234, 0.13888888888888892], 'false,true': [0.10937499999999978, -9.25185853854297e-18], 'false,true,true': [-2.5376526277146434e-16, 0.0], 'true,false': [6.39789539614497e-17, -1.0092936587501423e-17]}
{'': [-5.551115123125783e-16, 0.10452162117287211], 'false': [0.0815729048176968, 0.15428809459954732], 'false,false': [-2.3129646346357427e-18, 0.17602517953255814], 'false,false,false': [0.0, 0.17003143797458634], 'false,true': [nan, 0.0815729048176968], 'false,false,true': [nan, -2.3129646346357427e-18]}
{'': [0.03158547489698888, 0.09931765375826401], 'false': [nan, 0.09931765375826405], 'false,false': [3.700743415417188e-17, 0.09323377148281686], 'false,false,false': [0.10133143459428778, 0.06392722315900591], 'true': [0.03255939321234713, 0.0], 'true,true': [0.0324353895158394, 0.0], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.01795087824760479, 0.00013462219154025313], 'false': [4.246625149956968e-05, 2.664092109815461e-05], 'false,true': [nan, 4.246625149956368e-05], 'false,true,false': [3.0342081741884646e-05, 1.8261191807654832e-05], 'false,false': [nan, 2.664092109815461e-05], 'false,false,false': [nan, 2.664092109815461e-05]}
{'': [0.024283889711335205, 0.054674297588398695], 'false': [0.0, 0.0534660830998224], 'false,false': [0.05627571120925867, -5.9476233462061954e-18], 'false,false,true': [0.0004118685493097664, 0.019128960167017088], 'true': [0.0009598090396266467, 0.19704815525573946], 'false,true': [0.0, nan]}
{'': [0.041994642022640215, 0.08642321193828696], 'false': [0.0, 0.0882919302261427], 'false,false': [0.1906988657836894, 0.00024179776196125776], 'true': [nan, 0.04199464202264023], 'true,false': [nan, 0.041994642022640215], 'false,false,false': [0.00017005484224945355, 0.0002790917302969067]}
{'': [0.04927185187646624, 0.11120804165683276], 'false': [nan, 0.11120804165683276], 'false,false': [nan, 0.11120804165683276], 'false,false,false': [nan, 0.11120804165683276], 'true': [0.030803327588913087, 0.01882826598459862]}
{'': [0.0294494365726151, 0.039548753049432506], 'false': [nan, 0.03954875304943243], 'false,false': [0.031428491222306974, 0.054060608500721155], 'false,false,false': [0.046792781777520505, 0.07782053033514151], 'true': [0.0294494365726151, nan]}
{'': [0.02524897678078452, 0.035180307581801094], 'false': [0.021385289585139293, 0.08499051211483358], 'false,false': [0.026219593227354725, 6.845330488161605e-06], 'false,true': [0.010564638799701133, 3.67115118300007e-05], 'false,true,true': [0.010564638799701133, nan], 'false,false,false': [nan, 6.845330488161605e-06]}
{'': [0.03870230354745846, 0.04570631322671141], 'false': [0.039279605821981034, 0.053853720048272984], 'false,false': [nan, 0.053853720048272984], 'false,false,false': [nan, 0.053853720048272984], 'true': [0.09071714583451244, 3.722204935400789e-05], 'true,true': [0.09266664623359791, 0.0], 'true,false': [4.4607600525286325e-06, 9.706833838138797e-06], 'true,false,false': [0.0, 2.0915869849748765e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.045
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8181489350995119;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then return 0.7274753536316645;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.7248080398247612;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109543;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7204736548885431;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.01873009992795766;  // std dev = 0.292, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( follows(J, A), follows(K, J) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.24873433683873378;  // std dev = 1.735, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5633796234362499;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.784809021606696;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5549272067538497;  // std dev = 0.000621, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5838306277297167;  // std dev = 0.215, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11402219169664421;  // std dev = 0.035, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22403035375405358;  // std dev = 1.478, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return -0.1036202077295623;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4203062728443742;  // std dev = 0.005, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5708789509117799;  // std dev = 0.190, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.5657540140342054;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6712292995743221;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10215971125330578;  // std dev = 0.005, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.11158985639174035;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, J) )
%   | | then return -0.18708152029183395;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.16058527368122347;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.22293064359757206;  // std dev = 0.292, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else return 0.20944149063099737;  // std dev = 0.273, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3869352308676419;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3091950215111942;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.37803445626383797;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07728229726790052;  // std dev = 1.260, 95.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=4 */
%   | | else return -0.09250061407065911;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.18758934578846923;  // std dev = 0.288, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.2878013119842857;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.04927013063788646;  // std dev = 0.816, 62.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   | | | else return 0.022031477342305514;  // std dev = 0.265, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.060770402025404305;  // std dev = 0.129, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return -0.0856424542003857;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.34177425646310855;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5372884258429558;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13081922539903193;  // std dev = 0.025, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.23829955377282613;  // std dev = 0.012, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.11722912498603058;  // std dev = 1.236, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | | else return -0.08269813058527857;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.280987741362008;  // std dev = 0.201, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08634985183006175;  // std dev = 0.037, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3006410241103706;  // std dev = 0.153, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1342061922772536;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11685386075828953;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06930107919381148;  // std dev = 0.645, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.1957068099868666;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.006675595155755609;  // std dev = 0.663, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.23698290009657372;  // std dev = 0.182, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11295946980724769;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07510704713088479;  // std dev = 0.003, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2465463719959704;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.117023219895619;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11804672714441686;  // std dev = 0.433, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0597101659301727;  // std dev = 0.637, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.07889742204083411;  // std dev = 1.346, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return -0.17153416576348623;  // std dev = 1.151, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.16010025919587767;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.19500781577724138;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20451745376615832;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07160745443408176;  // std dev = 0.005, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20364549234344598;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3393000168239104;  // std dev = 0.298, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11320720132038994;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15772029495196546;  // std dev = 0.086, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.18435411133168111;  // std dev = 0.140, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2131123596477965;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.06747298036523829;  // std dev = 0.003, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.06383057127078544;  // std dev = 0.008, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.15600928688216323;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0972021326368098;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, I) )
%   | | then return 0.03738371091606685;  // std dev = 0.385, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.007920207386528866;  // std dev = 0.565, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.473', 'seconds']
Refined model CLL: -0.101061


******************************************
Best model found
******************************************
Results 

CLL : -0.095289 

AUC ROC : 0.9945 

AUC PR : 0.358804 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 6.045 

Total Inference Time : 6.741902589797974 

Total revision time: 18.29346133041382
Best scored revision CLL: -0.101061


Results 

CLL : -0.095289 

AUC ROC : 0.9945 

AUC PR : 0.358804 

Precision : 0.338785 

Recall : 0.929487 

F1 : 0.496575 

Total Learning Time : 43.57802630233765 

Total Inference Time : 6.741902589797974 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.779
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7823913593419369;  // std dev = 2.150, 66.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7136731966584707;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03529867240867212;  // std dev = 0.265, 132.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07738742777653868;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.28881117365523334;  // std dev = 0.609, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.1724476918203187;  // std dev = 2.513, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4902026970547953;  // std dev = 1.924, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | else return 0.7413327921681512;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8757268025826209;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.657695167884817;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5754042858022194;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5754042858022194;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01879366895452726;  // std dev = 3.340, 142.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=18 */
%   | | | else return -0.0249148468832799;  // std dev = 2.116, 42.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5379813226468056;  // std dev = 1.449, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12049664288090182;  // std dev = 0.045, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.11911016670879332;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1843389939463725;  // std dev = 0.188, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2778043504813964;  // std dev = 1.556, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | else return 0.4056066529350941;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30800767469563645;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6174429130923694;  // std dev = 0.135, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08157937202568595;  // std dev = 1.905, 150.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=7 */
%   | | else return -0.1098902980685399;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02871613079201701;  // std dev = 2.912, 166.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=56 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24648313269604571;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46804709854383314;  // std dev = 1.029, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12052957342016217;  // std dev = 0.105, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11784784412698827;  // std dev = 0.127, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28100418591465953;  // std dev = 1.509, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else return -0.07358562053661716;  // std dev = 1.650, 151.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024376371471053163;  // std dev = 0.366, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1883629387396364;  // std dev = 0.989, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04561519495463898;  // std dev = 0.163, 125.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=14 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.030376763241330786;  // std dev = 1.238, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | | else return 0.004620238054225518;  // std dev = 1.239, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14888038362424244;  // std dev = 0.210, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.32207511015734275;  // std dev = 0.528, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09178734524421618;  // std dev = 0.022, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4205283442824037;  // std dev = 0.502, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13104752506694378;  // std dev = 0.128, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17088256093987958;  // std dev = 1.332, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | else return -0.11265693246907313;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08461471213540572;  // std dev = 0.001, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08276281440772064;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.02395405395491662;  // std dev = 0.393, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03701522377316741;  // std dev = 0.886, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.061794090143861766;  // std dev = 1.062, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.555', 'seconds']
Parameter learned model CLL:-0.113483 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.15, 5, 61], 'true,false,true': [0.0, 130, 0], 'true,false,false': [0.249, 14, 1], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,false': [0.5, 4, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.99, 1, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 118, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.609, 1, 1], 'false,false,false,false': [2.513, 21, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.924, 4, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [3.34, 124, 18], 'false,false,false,false': [2.116, 36, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.449, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 95, 0], 'false,true,false,false': [0.003, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.556, 3, 42], 'true,false': [0.054, 0, 2], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.135, 0, 17], 'false,false,true,false': [1.905, 143, 7], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.912, 110, 56], 'false,true': [7.45e-09, 0, 5], 'false,false,true': [1.029, 1, 14], 'false,false,false,true': [0.105, 20, 0], 'false,false,false,false': [0.127, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.509, 2, 65], 'true,false': [1.65, 143, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.366, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.989, 1, 47], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 111, 14], 'false,false,false,true': [1.238, 26, 10], 'false,false,false,false': [1.239, 15, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 2, 44], 'false,true,true,true': [0.528, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.022, 122, 0], 'false,false,true': [0.502, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.128, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.332, 2, 58], 'true,true,false': [0.868, 1, 3], 'true,false,true': [0.001, 90, 0], 'true,false,false,true': [5.27e-09, 11, 0], 'true,false,false,false': [0.393, 6, 1], 'false,true': [0.886, 16, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.062, 6, 4]}]
{'': [0.20749758540913313, 0.2487244897959179], 'false': [0.2475, 0.24999999999999986], 'false,true': [-2.9605947323337506e-16, -1.0092936587501423e-17], 'true': [0.07001836547291022, 0.0068489892984541], 'true,false': [-3.75767792950053e-17, 0.06222222222222227], 'false,true,true': [-2.9605947323337506e-16, nan]}
{'': [0.0203993055555541, 0.09920332311893507], 'false': [0.07045580969043544, 0.15924043088407458], 'false,false': [0.05246913580246911, 0.19180955205426556], 'false,false,false': [0.18546996371782487, 0.19142002896321597], 'false,true': [nan, 0.07045580969043544], 'false,false,true': [nan, 0.05246913580246911]}
{'': [0.08181542210527, 0.09437969491648844], 'false': [nan, 0.09437969491648847], 'false,false': [-6.344131569286608e-17, 0.08496951825242273], 'false,false,false': [0.07856400288491878, 0.1065973445314361], 'true': [0.08179475226542532, 0.011884448432249117], 'true,true': [0.08224140636880009, 0.0], 'true,false': [0.0, 0.0], 'false,false,true': [-8.881784197001253e-17, 0.0]}
{'': [0.027610785934826687, 0.0009035104971932858], 'false': [1.7841152436369324e-05, 0.001263523961082254], 'false,false': [nan, 0.001263523961082254], 'false,false,false': [nan, 0.001263523961082254], 'false,true': [nan, 1.784115243637124e-05], 'false,true,false': [2.136917517718828e-05, 3.067388998726865e-07]}
{'': [0.05222449846245955, 0.06712836263888577], 'false': [-1.586032892321652e-17, 0.06584611700516299], 'false,false': [0.06651760380432936, 0.0], 'false,false,true': [0.0010737868200476359, 0.024193571905511878], 'true': [0.0537862611922496, 0.0014464480408862834], 'false,true': [-1.586032892321652e-17, nan]}
{'': [0.051085469795999136, 0.08402594958551797], 'false': [1.1102230246251566e-17, 0.08814491547283224], 'false,false': [0.07058911337519011, 0.0006794612424312063], 'true': [nan, 0.05108546979599912], 'true,false': [nan, 0.051085469795999136], 'false,false,false': [0.000551686261307377, 0.0008036403875540971]}
{'': [0.04970854611781274, 0.014849563166260231], 'true': [0.034004264426769196, 0.01803367401378631], 'false': [nan, 0.014849563166260231], 'false,false': [nan, 0.014849563166260231], 'false,false,false': [nan, 0.014849563166260231]}
{'': [0.020387069309298084, 0.03647474702633481], 'false': [nan, 0.03647474702633481], 'false,false': [0.02653974291792315, 0.05592816409922585], 'false,false,false': [0.04258225143033033, 0.08078093199305225], 'true': [0.020387069309298084, nan]}
{'': [0.044212484527734006, 0.03343505261519296], 'false': [0.021948486211295595, 0.06952108285600499], 'false,false': [0.020973140988932215, 0.0005652211242352091], 'false,true': [0.014654133162258533, 3.921036502966032e-06], 'false,true,true': [0.014654133162258533, nan], 'false,false,false': [nan, 0.0005652211242352091]}
{'': [0.030230948791581527, 0.05476257156312831], 'false': [0.031392740374063116, 0.11274858366535064], 'false,false': [nan, 0.11274858366535064], 'false,false,false': [nan, 0.11274858366535064], 'true': [0.044182195763535444, 0.0016491251748589836], 'true,true': [0.029553561695201173, 0.18824172773610695], 'true,false': [2.1467383515272333e-08, 0.009385330494029268], 'true,false,false': [2.523234146875356e-18, 0.022020197353205134]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.167
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.08629550934493224;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.7219401122297738;  // std dev = 0.032, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.672034885934785;  // std dev = 0.225, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7307129293809306;  // std dev = 0.144, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12610966971970367;  // std dev = 0.022, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7384287587143867;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13003906855506475;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2970143868412815;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.34446743783575556;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5021174987571462;  // std dev = 1.362, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.5868725564568538;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.577163042764565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6556050248819814;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5877655200924028;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5525893125985312;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11272146634991081;  // std dev = 0.017, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19209844308774499;  // std dev = 1.569, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0.08523505215063609;  // std dev = 1.628, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4355724708093505;  // std dev = 0.041, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, E), follows(E, A) )
%   | | | then return 0.13134281410898238;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.4182509509597013;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.16953464216063552;  // std dev = 0.840, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4504825468279693;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5585224886953153;  // std dev = 0.891, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10178020887569995;  // std dev = 0.011, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.10188238744272544;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.16740391016455458;  // std dev = 0.170, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.2924067060956825;  // std dev = 0.984, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.33635186046833404;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08483995181991982;  // std dev = 1.096, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.34234930491138077;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.36634903453960455;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.34316899341928114;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3554508740169008;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07000634783679997;  // std dev = 1.745, 144.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=7 */
%   | | else return -0.09736013180938094;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.27005449772859025;  // std dev = 0.010, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.07165476382539444;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.19110242068546138;  // std dev = 0.934, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.08686974237609155;  // std dev = 3.49e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.04915249908718665;  // std dev = 0.107, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.10226063760882309;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3571726969730549;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5738777605178836;  // std dev = 0.253, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1275954229266626;  // std dev = 0.035, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, C) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.1688350683449201;  // std dev = 0.975, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.22565928460940415;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.23773261469441362;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.08258654582927778;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.05177853966862037;  // std dev = 0.135, 135.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2781312413792285;  // std dev = 0.199, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11606331411817032;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.017680152639827713;  // std dev = 0.445, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.011221891200653812;  // std dev = 1.096, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(C, E) )
%   | then return 0.19093492683280772;  // std dev = 0.010, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, F) )
%   | | then return 0.006329698886063551;  // std dev = 0.675, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.06675385993833123;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.06548843375338043;  // std dev = 0.062, 95.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=3 */
%   | | else return -0.009761755828396381;  // std dev = 0.178, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), tweets(A, K) )
%   | | | then return 0.1750803053183902;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0951473438974913;  // std dev = 0.709, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.2079874392464895;  // std dev = 0.374, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.051884510768924065;  // std dev = 1.036, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.10485029605969103;  // std dev = 1.218, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.33712069096042074;  // std dev = 0.261, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17079664419685806;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1776526625627758;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.23411955546981408;  // std dev = 0.039, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07363276609882036;  // std dev = 0.002, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.20165156536316098;  // std dev = 0.138, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3132922907093235;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12692514402848973;  // std dev = 0.039, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.16272297924531712;  // std dev = 0.033, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.0981754916804179;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06469351681623292;  // std dev = 0.046, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.20891743290295556;  // std dev = 0.724, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.16971529670182395;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07838153796786716;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21459855042547693;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1355509322338522;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.021096665599616156;  // std dev = 0.252, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.473', 'seconds']
Refined model CLL: -0.100034


******************************************
Best model found
******************************************
Results 

CLL : -0.094995 

AUC ROC : 0.995232 

AUC PR : 0.422859 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 8.167 

Total Inference Time : 8.368136644363403 

Total revision time: 23.754949947357176
Best scored revision CLL: -0.100034


Results 

CLL : -0.094995 

AUC ROC : 0.995232 

AUC PR : 0.422859 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 49.039514919281004 

Total Inference Time : 8.368136644363403 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.131
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.08921948595311938;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7113898758886141;  // std dev = 0.992, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03640272217911556;  // std dev = 0.262, 161.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09133348876651294;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7589111597349626;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10438248293505249;  // std dev = 2.887, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5237283417173516;  // std dev = 1.726, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | else return 0.7337139056269356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8787400971901258;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5995489241134876;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5660505436507663;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5660505436507663;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026544037529212958;  // std dev = 3.550, 171.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=20 */
%   | | | else return -0.0241794811806136;  // std dev = 2.331, 57.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5173911552154562;  // std dev = 1.781, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11881794564035088;  // std dev = 0.022, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.11892842174328404;  // std dev = 0.000327, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15151879287433867;  // std dev = 0.113, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27969562807937526;  // std dev = 1.768, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else return 0.38825591625526984;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.22933191826759294;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5807682441896128;  // std dev = 0.994, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.0844469954004293;  // std dev = 2.005, 198.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=7 */
%   | | else return -0.12466587508299991;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05104565503374857;  // std dev = 2.911, 197.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=74 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2597980779728166;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.39035832702091855;  // std dev = 1.701, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1113584002648183;  // std dev = 0.072, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11003794772722991;  // std dev = 0.109, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30112711249088514;  // std dev = 0.877, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | else return -0.07765772605505636;  // std dev = 1.857, 201.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020647962473448744;  // std dev = 0.537, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1818774756720974;  // std dev = 0.995, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return -0.30269228814370597;  // std dev = 0.708, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.039512686774099255;  // std dev = 0.156, 142.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.012211182122218538;  // std dev = 1.615, 58.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=12 */
%   | | | else return 0.09036714349013888;  // std dev = 1.393, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09438727604570941;  // std dev = 0.291, 67.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29829506511164683;  // std dev = 0.579, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09203722074666638;  // std dev = 0.042, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3941180419761931;  // std dev = 1.093, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10618525355561925;  // std dev = 0.112, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14604142904359446;  // std dev = 1.999, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else return 0.14297838977806618;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08582768870720706;  // std dev = 0.000885, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07986231543466057;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.034837542179108526;  // std dev = 0.443, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04052727928113835;  // std dev = 1.048, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2539351265592571;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017331620746688432;  // std dev = 1.211, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.887', 'seconds']
Parameter learned model CLL:-0.111018 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [0.0, 149, 0], 'true,false,false': [0.223, 18, 1], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,false': [0.458, 14, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.992, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 144, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.097, 0, 3], 'false,false,false,false': [2.887, 38, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.726, 3, 56], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.132, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.55, 151, 20], 'false,false,false,false': [2.331, 50, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.781, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.022, 146, 0], 'false,true,false,false': [0.000327, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.113, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.768, 3, 58], 'true,false': [0.13, 0, 3], 'false,true,true': [0.961, 1, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.994, 1, 20], 'false,false,true,false': [2.005, 191, 7], 'false,false,false': [0.065, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.911, 123, 74], 'false,true': [0.0, 0, 8], 'false,false,true': [1.701, 3, 18], 'false,false,false,true': [0.072, 26, 0], 'false,false,false,false': [0.109, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.877, 0, 86], 'true,false': [1.857, 192, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.537, 9, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 64], 'true,false,true': [0.708, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 125, 17], 'false,false,false,true': [1.615, 46, 12], 'false,false,false,false': [1.393, 13, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.291, 6, 61], 'false,true,true,true': [0.579, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 176, 0], 'false,false,true': [1.093, 1, 14], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.112, 34, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.999, 4, 76], 'true,true,false': [0.011, 0, 6], 'true,false,true': [0.000885, 136, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.443, 9, 1], 'false,true': [1.048, 21, 11], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.211, 17, 5]}]
{'': [0.22043775094127452, 0.2350617283950612], 'false': [0.24639999999999954, 0.2100000000000001], 'false,true': [-1.6148698540002277e-16, -1.1895246692412391e-17], 'true': [0.03404844290657402, 0.00591695011337851], 'true,false': [-1.1027718633860615e-16, 0.04986149584487539], 'false,true,true': [-1.6148698540002277e-16, nan]}
{'': [0.014921946740128983, 0.09586795259346753], 'false': [0.06885334733969109, 0.14298574606421965], 'false,false': [0.038399999999999955, 0.17378907282367442], 'false,false,false': [0.0031106718595347673, 0.16026820608015907], 'false,true': [nan, 0.06885334733969109], 'false,false,true': [nan, 0.038399999999999955]}
{'': [0.049588641999974536, 0.09180281526725538], 'false': [nan, 0.09180281526725542], 'false,false': [7.401486830834377e-17, 0.07911113861409534], 'false,false,false': [0.07370618130480643, 0.09532181719691776], 'true': [0.05036688481889892, 0.018979654944617064], 'true,true': [0.05048566188193827, 0.0], 'true,false': [0.0, 0.005819278811845259], 'false,false,true': [-6.344131569286608e-17, -4.4408920985006264e-17]}
{'': [0.031393397256323466, 0.00021285314376341647], 'false': [2.7685485599342904e-06, 0.0003783454366097701], 'false,false': [nan, 0.0003783454366097701], 'false,false,false': [nan, 0.0003783454366097701], 'false,true': [nan, 2.7685485599342904e-06], 'false,true,false': [3.240100329456555e-06, 4.265608304354629e-09]}
{'': [0.04962323351784721, 0.06236187602207525], 'false': [0.07100591715976326, 0.058409796288261005], 'false,true': [0.07100591715976326, nan], 'false,false': [0.06122265248677091, 0.004241278381997444], 'false,false,true': [0.047021030657450655, 0.020296293257362423], 'true': [0.05123424039888923, 0.005633195067406578]}
{'': [0.04302897273554864, 0.08262686122258224], 'false': [0.0, 0.08581810147059246], 'false,false': [0.13776097074904955, 0.0002925581945711085], 'true': [nan, 0.043028972735548586], 'true,false': [nan, 0.04302897273554864], 'false,false,false': [0.00019802474258464724, 0.00036858501280142425]}
{'': [0.04480844520679513, 0.02055945882844459], 'true': [0.008947046729555116, 0.017158734282109726], 'false': [nan, 0.02055945882844459], 'false,false': [nan, 0.02055945882844459], 'false,false,false': [nan, 0.02055945882844459]}
{'': [0.029046865360226676, 0.037788025898231645], 'false': [nan, 0.037788025898231804], 'false,false': [0.024212907115901825, 0.061027798736427996], 'false,false,false': [0.044951817008056706, 0.10217595020543452], 'true': [0.015219511480583472, 0.2506372001756054], 'true,false': [0.2506372001756054, nan]}
{'': [0.0847311638440842, 0.031233299245702624], 'false': [0.0182727103130772, 0.07781942339029572], 'false,false': [0.07969134653299167, 0.0003700889694810302], 'false,true': [0.013432024211446212, 1.014690211603467e-05], 'false,true,true': [0.013432024211446212, nan], 'false,false,false': [nan, 0.0003700889694810302]}
{'': [0.02934026271952384, 0.05768210132471157], 'false': [0.034349283028043215, 0.08759381039016577], 'false,false': [0.24999999999999997, 0.0666974739852306], 'false,false,false': [nan, 0.0666974739852306], 'true': [0.046488733442623, 0.0014122490427128853], 'true,true': [0.04997315113991026, 2.110317534304712e-05], 'true,false': [5.7536073846463445e-09, 0.010308492754682225], 'true,false,false': [1.3877787807814458e-18, 0.01960337040600752]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 25.947
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8287371703936304;  // std dev = 0.169, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1360707180796789;  // std dev = 0.076, 173.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.6920378016130643;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.5587044682797313;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.3920378016130645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7290547910578917;  // std dev = 0.030, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.3920378016130645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.767195091449436;  // std dev = 0.150, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return -0.06141892808169248;  // std dev = 0.225, 171.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10930889366297705;  // std dev = 2.002, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.12137343911458759;  // std dev = 2.035, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5560359623984094;  // std dev = 0.970, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.2075299553333561;  // std dev = 1.108, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5641419547948674;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.635593780788094;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5785560694135543;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09544144909792608;  // std dev = 1.463, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   | | | else return 0.01019315360278552;  // std dev = 2.493, 66.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17451890106136334;  // std dev = 1.978, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.022695686790042937;  // std dev = 1.979, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.4362288940478625;  // std dev = 0.114, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.20667824906696847;  // std dev = 1.506, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.43535275058338785;  // std dev = 0.092, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, I) )
%   | | | then return 0.578279919870648;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43533129728449715;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7034305725884769;  // std dev = 0.188, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7842161686780292;  // std dev = 0.091, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.11278151162862005;  // std dev = 0.005, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return -0.17024897614939868;  // std dev = 0.109, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.31071337536838584;  // std dev = 0.151, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0.3568866932903338;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08103579759901955;  // std dev = 0.112, 116.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5202564681298543;  // std dev = 0.326, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10908923983283973;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.48065357825253713;  // std dev = 0.363, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14243810871745047;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1381218066227243;  // std dev = 0.932, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.06923506199855965;  // std dev = 1.294, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.27459589956028824;  // std dev = 0.147, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.4185293773677277;  // std dev = 0.521, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.09412098640233396;  // std dev = 0.035, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else return -0.039581519472911414;  // std dev = 0.325, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2629643755780014;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2959474160685374;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4199652204890378;  // std dev = 0.892, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10936914926693612;  // std dev = 0.059, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.13064604325378557;  // std dev = 0.202, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, C), follows(E, A) )
%   | | then if ( tweets(C, D), tweets(E, D) )
%   | | | then return 0.15631563164729;  // std dev = 1.360, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.21000802363002943;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return -0.19210454411648276;  // std dev = 0.908, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2269611317440671;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.23065345011574845;  // std dev = 0.024, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.3405961211771339;  // std dev = 0.100, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08692168197694525;  // std dev = 0.043, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2215696513658869;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.02409791581545755;  // std dev = 0.242, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15331789393986175;  // std dev = 0.983, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.03731953288414306;  // std dev = 1.272, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.2297893148453137;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.19200991030846126;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2200052688559327;  // std dev = 0.235, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08031762070429349;  // std dev = 0.041, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18720421092719683;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.011040450535739347;  // std dev = 1.007, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.06660587074053248;  // std dev = 1.260, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.122258751849928;  // std dev = 0.227, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else return 0.16930841117241585;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.06637100216435834;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16962566932658452;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.21112273132528642;  // std dev = 0.075, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.0738605333815538;  // std dev = 0.033, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.30847890830752817;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4916681828810538;  // std dev = 0.104, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.13180275892287605;  // std dev = 0.023, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.14022118456323165;  // std dev = 1.390, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | | | else return -0.2094935593518169;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.12480491365570988;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06778214569583262;  // std dev = 0.019, 163.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1873429445685068;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27556954498554453;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10737279082217233;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.009779413996045231;  // std dev = 0.197, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.019680007373152016;  // std dev = 0.225, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2', 'minutes', 'and', '8.792', 'seconds']
Refined model CLL: -0.103144


******************************************
Best model found
******************************************
Results 

CLL : -0.102382 

AUC ROC : 0.994454 

AUC PR : 0.35824 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 25.947 

Total Inference Time : 116.85246634483337 

Total revision time: 151.44847743797303
Best scored revision CLL: -0.103144


Results 

CLL : -0.102382 

AUC ROC : 0.994454 

AUC PR : 0.35824 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 176.73304240989685 

Total Inference Time : 116.85246634483337 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.363
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6914862062321292;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.034733944327180716;  // std dev = 0.265, 203.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08865201622520281;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08578721955178996;  // std dev = 3.283, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5327651649462345;  // std dev = 1.861, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7320183150987467;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8171385624167897;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5869481484606751;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5692193285641118;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5692193285641118;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0433305838860932;  // std dev = 3.685, 215.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=21 */
%   | | | else return 0.017827524185284396;  // std dev = 2.834, 67.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5116840447788015;  // std dev = 2.199, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11812761210610145;  // std dev = 0.039, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | | else return -0.12360157910460672;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.152794849571438;  // std dev = 0.164, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2973712988136838;  // std dev = 1.716, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4065313629561256;  // std dev = 0.137, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3095472858825218;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6343417444853156;  // std dev = 0.189, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08573395681825632;  // std dev = 2.328, 265.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=9 */
%   | | else return -0.10941571876197471;  // std dev = 1.86e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025290528415356048;  // std dev = 3.434, 283.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18406287961074086;  // std dev = 0.978, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5341464272093434;  // std dev = 0.795, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1198457569145826;  // std dev = 0.139, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.1123412510205584;  // std dev = 0.126, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26630273339500793;  // std dev = 1.970, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07658468379746496;  // std dev = 2.036, 261.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.010503095820065296;  // std dev = 1.043, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16881603087605435;  // std dev = 1.702, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23012497069012516;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04190927763107621;  // std dev = 0.149, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016844560067244156;  // std dev = 1.465, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
%   | | | else return 0.07616536244023903;  // std dev = 1.814, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1723250020308448;  // std dev = 0.156, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28695521991614764;  // std dev = 0.663, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09024247178423296;  // std dev = 0.030, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3939044845528163;  // std dev = 1.141, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1069428138968443;  // std dev = 0.150, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17606799160319178;  // std dev = 1.438, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.15012502448391143;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835678131885933;  // std dev = 0.024, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08046318879918693;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.04815777724294027;  // std dev = 0.483, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.018065215448939007;  // std dev = 1.192, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2850218662086641;  // std dev = 0.694, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11562093240756453;  // std dev = 1.267, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.517', 'seconds']
Parameter learned model CLL:-0.110364 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 180, 0], 'true,false,false': [0.294, 19, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 181, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.098, 0, 4], 'false,false,false,false': [3.283, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.861, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.134, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.685, 194, 21], 'false,false,false,false': [2.834, 56, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.199, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 170, 0], 'false,true,false,false': [0.0, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.716, 3, 73], 'true,false': [0.137, 0, 4], 'false,true,true': [4.21e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.189, 0, 23], 'false,false,true,false': [2.328, 256, 9], 'false,false,false': [1.86e-09, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.434, 192, 91], 'false,true': [0.978, 1, 13], 'false,false,true': [0.795, 0, 22], 'false,false,false,true': [0.139, 45, 0], 'false,false,false,false': [0.126, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.97, 4, 107], 'true,false': [2.036, 250, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.043, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.702, 3, 80], 'true,false,true': [0.046, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 178, 22], 'false,false,false,true': [1.465, 54, 13], 'false,false,false,false': [1.814, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.156, 2, 77], 'false,true,true,true': [0.663, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.03, 171, 0], 'false,false,true': [1.141, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.438, 2, 94], 'true,true,false': [0.008, 0, 9], 'true,false,true': [0.024, 183, 0], 'true,false,false,true': [6.45e-09, 13, 0], 'true,false,false,false': [0.483, 19, 2], 'false,true': [1.192, 22, 12], 'false,false,true': [0.694, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.267, 11, 8]}]
{'': [0.2250421755138008, 0.2376543209876543], 'false': [0.2469135802469131, 0.2222222222222223], 'false,true': [-1.4802973661668753e-16, -1.4802973661668754e-17], 'true': [0.027500889996442155, 0.0098512413059081], 'true,false': [-1.9984014443252818e-16, 0.08616780045351478], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03438679865979975, 0.09858789049381989], 'false': [0.07040157275309235, 0.15187330539625402], 'false,false': [0.04535147392290248, 0.17286772219268753], 'false,false,false': [0.002425309837189915, 0.1585380880351072], 'false,true': [nan, 0.07040157275309235], 'false,false,true': [nan, 0.04535147392290248]}
{'': [0.04553114801834736, 0.09209992088054657], 'false': [nan, 0.09209992088054662], 'false,false': [2.0898315757650005e-16, 0.07731872183139096], 'false,false,false': [0.06315948149047501, 0.1199034321132525], 'true': [0.04668887395911606, 0.015828363173267117], 'true,true': [0.04679044711701733, 0.0], 'true,false': [0.0032140358651673306, 0.004472984601554653], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.03779283993405519, 0.0002767428353697784], 'false': [1.1709211448676852e-05, 0.0006536674568160159], 'false,false': [nan, 0.0006536674568160159], 'false,false,false': [nan, 0.0006536674568160159], 'false,true': [nan, 1.1709211448674685e-05], 'false,true,false': [9.00407284536703e-06, -1.2688263138573217e-17]}
{'': [0.03763011134901397, 0.05797325899458095], 'false': [1.0449157878825003e-16, 0.0550216901430047], 'false,false': [0.057050602161943215, 2.3129646346357427e-18], 'false,false,true': [0.0015573341094775835, 0.020458292904210258], 'true': [0.038766480059361265, 0.00471898222901268], 'false,true': [1.0449157878825003e-16, nan]}
{'': [0.04168011951021465, 0.07829564038159698], 'false': [0.06828492252969177, 0.0764597668338223], 'false,false': [0.028711463076689328, 0.00044052033288623845], 'true': [nan, 0.04168011951021465], 'true,false': [nan, 0.04168011951021465], 'false,false,false': [0.00043190893646101675, 0.000420184395900925]}
{'': [0.04618872676451307, 0.04944185319166741], 'false': [nan, 0.04944185319166741], 'false,false': [nan, 0.04944185319166741], 'false,false,false': [nan, 0.04944185319166741], 'true': [0.034967462316603776, 0.015879086300102343]}
{'': [0.03417786330363984, 0.034839249630416534], 'false': [nan, 0.03483924963041633], 'false,false': [0.022226378743837153, 0.06018357434575756], 'false,false,false': [0.03202762180023185, 0.12650696852614007], 'true': [0.034886990448142176, 0.001078742731574836], 'true,false': [0.001078742731574836, nan]}
{'': [0.02447228630463407, 0.03437756595954923], 'false': [0.021061576271860897, 0.07564251547594361], 'false,false': [0.07237003928066987, 0.0005493090445711116], 'false,true': [0.01373117158585277, 5.2732490528636986e-06], 'false,true,true': [0.01373117158585277, nan], 'false,false,false': [nan, 0.0005493090445711116]}
{'': [0.021396055172179795, 0.06987225435249446], 'false': [0.04177456396741416, 0.1131826394203089], 'false,false': [0.24087820995204562, 0.08445389069477345], 'false,false,false': [nan, 0.08445389069477345], 'true': [0.019752817242426786, 0.00118656871267286], 'true,true': [0.021546272835051557, 7.275643730088784e-06], 'true,false': [3.1875388533679395e-06, 0.007107577127805363], 'true,false,false': [3.2025664171879517e-18, 0.011108467149334115]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.926
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13185106490048834;  // std dev = 0.099, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7241897523947546;  // std dev = 0.150, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6594281704122605;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.726686412838562;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12654583676070316;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.010893278676216001;  // std dev = 0.293, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0401208299059637;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.13463687106660774;  // std dev = 0.125, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05978659955986764;  // std dev = 3.255, 75.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5645683125519767;  // std dev = 0.196, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7460668840120797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6632093640977305;  // std dev = 0.307, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5625170629685436;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5572124334315086;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10202955783206744;  // std dev = 1.147, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | | else return -0.010614200174201437;  // std dev = 2.295, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07769851804115349;  // std dev = 2.056, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.20970387569858884;  // std dev = 2.190, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4228499977909091;  // std dev = 0.024, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5368301553146011;  // std dev = 0.317, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4277533619718268;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.5618146905913984;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7136860267401762;  // std dev = 0.202, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(I, A) )
%   | then return -0.10999528684800568;  // std dev = 0.008, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.14132043158863722;  // std dev = 2.36e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, L) )
%   | | | then return -0.15810970468148455;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.21460956052008082;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.28889294248038694;  // std dev = 1.306, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.34644031086858557;  // std dev = 0.196, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5052939514578058;  // std dev = 0.247, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14708826710471046;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3243699887076057;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2096653057064078;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4459342962469363;  // std dev = 0.746, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08081619460946046;  // std dev = 2.040, 235.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=9 */
%   | | else return -0.09291822668615013;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2407106444633432;  // std dev = 0.165, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return -0.0884968993432072;  // std dev = 0.036, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.28568905633500213;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.03969640653528858;  // std dev = 0.163, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.2863603627728707;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.07690396300475406;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1705766831309667;  // std dev = 1.692, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.5737909849854932;  // std dev = 0.291, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11840576782679343;  // std dev = 0.028, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.22253196482457818;  // std dev = 0.016, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.12333403780415848;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22229864682412911;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return 0.23324513928307172;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.28409238251805086;  // std dev = 0.094, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07572992215220126;  // std dev = 0.765, 127.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=3 */
%   | | | else return -0.033930467729415666;  // std dev = 1.336, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0683911957071592;  // std dev = 1.075, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.011663604188294568;  // std dev = 1.561, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18756225735102602;  // std dev = 0.020, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06717194874636401;  // std dev = 0.639, 156.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=3 */
%   | | | else return -0.08698538980825739;  // std dev = 8.33e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(G, D), tweets(G, H) )
%   | | | then return 1.1201523438372089E-4;  // std dev = 1.653, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | | else return -0.09769130641759738;  // std dev = 0.000818, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.31616841098949305;  // std dev = 0.267, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11376935592195736;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.00536646339537306;  // std dev = 0.701, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.04028931473592395;  // std dev = 1.483, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.15524616509005978;  // std dev = 0.006, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.10471506579019063;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.1348381349793644;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16169527555872273;  // std dev = 0.101, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20530324148108228;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.193698276397294;  // std dev = 0.214, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return -0.07661354959026041;  // std dev = 0.009, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3667009768262832;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11490165732493136;  // std dev = 0.024, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12549045878713455;  // std dev = 1.006, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.2444708376768327;  // std dev = 0.385, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.15794588072194415;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06906026975145832;  // std dev = 0.039, 208.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13275832396757548;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.22175236718936253;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09208365965882019;  // std dev = 0.013, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02453355104270442;  // std dev = 0.533, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.05631709539823215;  // std dev = 1.011, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.082', 'seconds']
Refined model CLL: -0.104895


******************************************
Best model found
******************************************
Results 

CLL : -0.103221 

AUC ROC : 0.993992 

AUC PR : 0.32775 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 9.926 

Total Inference Time : 16.56120753288269 

Total revision time: 37.25125190162659
Best scored revision CLL: -0.104895


Results 

CLL : -0.103221 

AUC ROC : 0.993992 

AUC PR : 0.32775 

Precision : 0.336226 

Recall : 0.99359 

F1 : 0.502431 

Total Learning Time : 62.53581687355042 

Total Inference Time : 16.56120753288269 

